<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luca on Facile.it Engineering</title>
    <link>/authors/luca/</link>
    <description>Recent content in Luca on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Sep 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="/authors/luca/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>WAMP, Web Application Messaging Protocol.. e PHP!</title>
      <link>/blog/ita/wamp-web-application-messaging-protocol-e-php/</link>
      <pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/wamp-web-application-messaging-protocol-e-php/</guid>
      <description>

&lt;p&gt;Dalle notifiche di Facebook ad un tweet stream, da Google Docs ai giochi multiplayer in HTML5, la necessità di uno &lt;strong&gt;scambio dati&lt;/strong&gt; in &lt;strong&gt;due direzioni&lt;/strong&gt;, &lt;strong&gt;efficiente&lt;/strong&gt; e a &lt;strong&gt;bassa latenza&lt;/strong&gt;, ha determinato l’ascesa negli ultimi anni di &lt;strong&gt;soluzioni basate su &lt;a href=&#34;https://www.websocket.org/&#34; target=&#34;_blank&#34;&gt;WebSocket&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Internet delle cose e web 2.0 trovano oramai sempre &lt;strong&gt;meno spazio&lt;/strong&gt; all’interno del protocollo &lt;strong&gt;HTTP/1&lt;/strong&gt;. Le tecniche di &lt;strong&gt;polling e long polling&lt;/strong&gt;, in voga fino a pochi anni fa, non permettevano di trasmettere in &lt;a href=&#34;https://it.wikipedia.org/wiki/Duplex&#34; target=&#34;_blank&#34;&gt;full duplex&lt;/a&gt; (tra server e client) contemporaneamente, erano costrette ad un alto overhead HTTP e richiedevano &lt;strong&gt;diversi sforzi&lt;/strong&gt; per simulare notifiche push server side.&lt;/p&gt;

&lt;h2 id=&#34;il-protocollo-wamp:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;Il protocollo WAMP&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wamp.ws/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;WAMP&lt;/strong&gt;&lt;/a&gt; (Web Application Messaging Protocol e non Windows, Apache, etc.!) offre un moderno &lt;strong&gt;pattern di messaggistica&lt;/strong&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_procedure_call&#34; target=&#34;_blank&#34;&gt;RPC&lt;/a&gt; e &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34; target=&#34;_blank&#34;&gt;Pub/Sub&lt;/a&gt; in maniera unificata. Registrato presso lo &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_Assigned_Numbers_Authority&#34; target=&#34;_blank&#34;&gt;IANA&lt;/a&gt; come sottoprotocollo WebSocket, definisce uno &lt;strong&gt;standard aperto&lt;/strong&gt; per lo scambio di &lt;strong&gt;messaggi in tempo reale&lt;/strong&gt; tra applicazioni e componenti, e permette la creazione di architetture &lt;strong&gt;debolmente accoppiate&lt;/strong&gt; basate su &lt;strong&gt;microservizi&lt;/strong&gt;. Utilizza canali full-duplex ordinati ed è quindi adatto ad implementazioni basate su WebSocket, ma supporta allo stesso modo socket Unix, socket raw o long polling HTTP.&lt;/p&gt;

&lt;p&gt;Il protocollo risulta piuttosto &lt;strong&gt;completo ed adeguato&lt;/strong&gt; a diversi scenari di utilizzo se comparato ad altri sistemi di messaggistica ed RPC.&lt;/p&gt;

&lt;p&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Technology&lt;/th&gt;
&lt;th&gt;PubSub&lt;/th&gt;
&lt;th&gt;RPC&lt;/th&gt;
&lt;th&gt;Routed RPC&lt;/th&gt;
&lt;th&gt;Web native&lt;/th&gt;
&lt;th&gt;Cross Language&lt;/th&gt;
&lt;th&gt;Open Standard&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WAMP&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AJAX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AMQP&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REST&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SOAP&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Socket.io&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SockJS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XMPP&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZeroMQ&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;em&gt;fonte: Wikipedia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Può essere utilizzato con profitto per sviluppare una piattaforma di gioco &lt;strong&gt;online multiplayer&lt;/strong&gt;, strumenti di &lt;strong&gt;business intelligence&lt;/strong&gt; real time e &lt;strong&gt;piattaforme collaborative&lt;/strong&gt; per numerosi utenti.&lt;/p&gt;

&lt;p&gt;Una piattaforma web di help desk ad esempio, può beneficiare di notifiche, chat, strumenti di scrittura multi-utente ed analisi dell’andamento in tempo reale  &lt;strong&gt;sullo stesso protocollo WAMP&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Per funzionare WAMP necessità di uno o più server di &lt;strong&gt;routing centralizzati&lt;/strong&gt;, allo stesso modo di &lt;strong&gt;RabbitMQ per AMQP&lt;/strong&gt;.
Per quanto esistano diverse implementazioni di router, in diversi linguaggi, lo standard &lt;em&gt;de facto&lt;/em&gt; è rappresentato da &lt;a href=&#34;http://crossbar.io/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Crossbar&lt;/strong&gt;&lt;/a&gt;, sviluppato da &lt;a href=&#34;http://tavendo.com/&#34; target=&#34;_blank&#34;&gt;Tavendo&lt;/a&gt;, alla quale si deve anche la &lt;strong&gt;definizione del protocollo&lt;/strong&gt; stesso.&lt;/p&gt;

&lt;h2 id=&#34;crossbar:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;Crossbar&lt;/h2&gt;

&lt;p&gt;Crossbar, scritto in python (&lt;a href=&#34;https://github.com/crossbario/crossbar&#34; target=&#34;_blank&#34;&gt;open source&lt;/a&gt;, licenza AGPL v3), supporta completamente le funzionalità descritte dal protocollo oltre a vantare &lt;strong&gt;configurazioni avanzate&lt;/strong&gt; come ad esempio le subscriptions &lt;a href=&#34;http://crossbar.io/docs/Pattern-Based-Subscriptions/&#34; target=&#34;_blank&#34;&gt;basate su pattern&lt;/a&gt;, le &lt;a href=&#34;http://crossbar.io/docs/Progressive-Call-Results/&#34; target=&#34;_blank&#34;&gt;progressive result&lt;/a&gt; su RPC e profili di autenticazione ed &lt;a href=&#34;http://crossbar.io/docs/Authorization/&#34; target=&#34;_blank&#34;&gt;autorizzazione&lt;/a&gt; dinamici.&lt;/p&gt;

&lt;p&gt;Nessuna delle altre implementazioni è poi al momento in grado di vantare le stesse &lt;strong&gt;prestazioni&lt;/strong&gt; e la &lt;strong&gt;stabilità&lt;/strong&gt; di Crossbar: una istanza del router è in grado di servire 1000 messaggi/secondo su Pub/Sub, a 1000 client, con una &lt;strong&gt;latenza di 25ms&lt;/strong&gt; su una &lt;strong&gt;RaspberryPi&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt;Router&lt;/th&gt;
&lt;th&gt;Broker&lt;/th&gt;
&lt;th&gt;Dealer&lt;/th&gt;
&lt;th&gt;Advanced Profile&lt;/th&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Crossbar&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;Pyhton&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thruway&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;PHP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wamp.rt&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;NodeJS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jawampa&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WampSharp&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Erwa&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Erlang&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;em&gt;fonte: WAMP.ws&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;e-php:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;..e PHP?&lt;/h2&gt;

&lt;p&gt;Diverse applicazioni web di backend usate presso Facile.it permettono ad un gran numero di operatori di lavorare sulle stesse pratiche in maniera collaborativa in &lt;strong&gt;tempo reale&lt;/strong&gt;.
Il protocollo WAMP è una tecnologia sulla quale è possibile sviluppare in maniera efficiente &lt;strong&gt;dashboard collaborative&lt;/strong&gt; e realtime.. ma sarà anche in grado di funzionare adeguatamente assieme alle soluzioni PHP (spesso in Symfony 2) sviluppate in casa e &lt;strong&gt;non precedentemente disegnate per l&amp;rsquo;uso con WebSocket&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Esistono diverse librerie (come &lt;a href=&#34;https://github.com/voryx/Thruway&#34; target=&#34;_blank&#34;&gt;Thruway&lt;/a&gt;) che permettono di operare come &lt;strong&gt;client PHP&lt;/strong&gt; in ambiente WAMP, ma per &lt;strong&gt;semplificare&lt;/strong&gt; l&amp;rsquo;integrazione del protocollo con altri servizi, Crossbar supporta il &lt;a href=&#34;http://crossbar.io/docs/HTTP-Bridge-Services/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;bridge HTTP&lt;/strong&gt;&lt;/a&gt; delle funzionalità Pub/Sub e RPC.&lt;/p&gt;

&lt;p&gt;In pratica, parlando ad esempio di Pub/Sub, è possibile &lt;strong&gt;pubblicare via HTTP&lt;/strong&gt; (o HTTPS) su Crossbar messaggi che saranno inoltrati su topic ai &lt;strong&gt;client connessi via WebSocket&lt;/strong&gt; in maniera trasparente. Altresì è possibile &lt;strong&gt;iscriversi ai topic&lt;/strong&gt; fornendo un &lt;strong&gt;endpoint HTTP&lt;/strong&gt; da chiamare per ricevere i messaggi pubblicati da client WebSocket.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;esempio sottostante configura un router Crossbar in grado di accettare connessioni websocket, pubblicazioni via HTTP e che si occupa di forwardare alcuni messaggi ad un endpoint HTTPS:&lt;/p&gt;

&lt;p&gt;&lt;style type=&#34;text/css&#34;&gt;
  .gist-file
  .gist-data {max-height: 500px;}
&lt;/style&gt;
&lt;script src=&#34;https://gist.github.com/peelandsee/51417b3c7c1dc400e85f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Il gist precedente può essere lanciato al volo con &lt;a href=&#34;https://docs.docker.com/&#34; target=&#34;_blank&#34;&gt;docker&lt;/a&gt;:
&lt;code&gt;docker run -p 80:80 -p 8080:8080 -v $PWD/crossbar-config.json:/.crossbar/config.json vinelab/crossbar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ovviamente l&amp;rsquo;esempio non tiene conto di profili di configurazione più avanzati, come &lt;strong&gt;cifratura TLS&lt;/strong&gt;, autenticazione, ruoli separati di pubblicazione e/o iscrizione, disponibili nella documentazione di Crossbar.&lt;/p&gt;

&lt;p&gt;Features come la firma delle richieste HTTP, richiedono più di qualche minuto di sviluppo, ma sono indispensabili in un &lt;strong&gt;ambiente di produzione&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Per semplificare l&amp;rsquo;adozione del bridge HTTP in &lt;strong&gt;ambito PHP&lt;/strong&gt;, in Facile.it abbiamo sviluppato e rilasciato un &lt;strong&gt;bundle&lt;/strong&gt; che permette la configurazione automatica di &lt;strong&gt;servizi di Publisher WAMP nel service container&lt;/strong&gt; di Symfony 2.&lt;/p&gt;

&lt;p&gt;Il bundle, disponibile su &lt;a href=&#34;https://packagist.org/packages/facile-it/crossbar-http-publisher-bundle&#34; target=&#34;_blank&#34;&gt;Packagist (composer)&lt;/a&gt; può essere installato con
&lt;code&gt;$ composer require facile-it/crossbar-http-publisher-bundle dev-master&lt;/code&gt;
e richiede una &lt;strong&gt;configurazione rapida&lt;/strong&gt; ed intuitiva:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;facile_crossbar_http_publisher:
  connections:
    foo_publisher_1:
        protocol: http
        host: 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;uso è molto semplice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// recupero del servizio
$fooPublisher = $container
                -&amp;gt;get(&#39;facile.crossbar.publisher.foo_publisher_1&#39;);

$topic = &#39;com.myapp.hello&#39;;

// pubblicazione
$firstPublisher-&amp;gt;publish($topic, [&#39;foo&#39;,1]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con le poche righe sopra riportate, attraverso il metodo &lt;code&gt;publish()&lt;/code&gt; viene effettuata una &lt;strong&gt;chiamata HTTP POST&lt;/strong&gt; verso il router WAMP, ed il messaggio &lt;code&gt;[&#39;foo&#39;,1]&lt;/code&gt; raggiunge in tempo (quasi) reale tutti i client (ad esempio &lt;strong&gt;tutti i browser degli utenti&lt;/strong&gt;) iscritti al topic &lt;code&gt;com.myapp.hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Anche in questo caso, la &lt;a href=&#34;http://crossbar.io/docs/Processes/&#34; target=&#34;_blank&#34;&gt;configurazione&lt;/a&gt; può supportare diversi host, porte, uso TLS, signed request, e attraverso GitHub è possibile trovare &lt;a href=&#34;https://github.com/crossbario/crossbarexamples&#34; target=&#34;_blank&#34;&gt;diversi esempi&lt;/a&gt; di &lt;strong&gt;possibili configurazioni&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ma-i-miei-utenti-lo-supporteranno:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;..ma i miei utenti lo supporteranno?&lt;/h2&gt;

&lt;p&gt;Lato browser, passare a WAMP è davvero &lt;strong&gt;semplice&lt;/strong&gt;:
la libreria &lt;a href=&#34;http://autobahn.ws/js/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Autobahn|JS&lt;/strong&gt;&lt;/a&gt; garantisce piena &lt;strong&gt;compatibilità&lt;/strong&gt; anche per &lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34;&gt;node.js&lt;/a&gt;, supporta l&amp;rsquo;autenticazione, ed è in grado di gestire in maniera &lt;strong&gt;asincronia&lt;/strong&gt; sia RPC che Pub/Sub.&lt;/p&gt;

&lt;p&gt;Qualora il browser di un vostro utente non supportasse WebSocket (e &lt;a href=&#34;http://caniuse.com/#feat=websockets&#34; target=&#34;_blank&#34;&gt;dovrebbe&lt;/a&gt; oramai!), Autobahn|JS è in grado di fornire un &lt;strong&gt;fallback automatico&lt;/strong&gt; a long polling.&lt;/p&gt;

&lt;p&gt;Iscriversi ad un topic o pubblicare un messaggio richiede poche linee:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/peelandsee/c853bc3fd3971e78527c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Nell&amp;rsquo;esempio sopra riportato, il client JS &lt;strong&gt;si iscrive&lt;/strong&gt; al topic &lt;code&gt;com.myapp.hello&lt;/code&gt; e passa i messaggi ricevuti ad una semplice funzione &lt;code&gt;console.log()&lt;/code&gt;; inoltre &lt;strong&gt;pubblica un messaggio&lt;/strong&gt; sul topic &lt;code&gt;com.myapp.topic1&lt;/code&gt;. Quest&amp;rsquo;ultimo, sarà anche &lt;strong&gt;forwardato da Crossbar sul nostro endpoint HTTPS&lt;/strong&gt; &lt;code&gt;https://hostname/subscriptions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Grazie alle &lt;strong&gt;funzionalità HTTP bridge&lt;/strong&gt; di Crossabar l&amp;rsquo;utilizzo di WAMP in ambito PHP, senza connessioni persistenti o consumer sempre accesi, è &lt;strong&gt;semplice ed immediato&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Per un ulteriore &lt;strong&gt;approfondimento su WAMP&lt;/strong&gt;, saranno inoltre utili le slide che seguono:&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/MEmo82CFgt1xND&#34; width=&#34;700&#34; height=&#34;550&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;riferimenti:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;Riferimenti&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wamp.ws/&#34;&gt;WAMP Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crossbar.io/docs/TOC/&#34;&gt;Crossbar - Documentazione&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crossbar.io/docs/HTTP-Bridge-Services/&#34;&gt;Crossbar - HTTP Bridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://autobahn.ws/js/&#34;&gt;Autobahn|JS - Documentazione&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facile-it/crossbar-http-publisher-bundle&#34;&gt;Facile.it CrossbarHTTPPublisherBundle - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Continuous Integration con Docker e Drone</title>
      <link>/blog/ita/continuos-integration-docker-drone/</link>
      <pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/continuos-integration-docker-drone/</guid>
      <description>

&lt;p&gt;La &lt;strong&gt;continuous integration&lt;/strong&gt; è una pratica che consiste nel &lt;strong&gt;frequente allineamento&lt;/strong&gt;, su di una base comune definita &lt;em&gt;mainline&lt;/em&gt;, delle copie di lavoro degli sviluppatori che collaborano al codice di un progetto.&lt;/p&gt;

&lt;p&gt;Introdotta inizialmente da Grady Booch nel 1991, nella pubblicazione &lt;a href=&#34;http://books.google.com/books?id=w5VQAAAAMAAJ&amp;amp;q=continuous+integration+inauthor:grady+inauthor:booch&amp;amp;dq=continuous+integration+inauthor:grady+inauthor:booch&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ei=0_TxU6TqIMOZyASJ3ICYCQ&amp;amp;ved=0CEQQ6AEwAg&#34;&gt;Object Oriented Design: With Applications&lt;/a&gt;, la pratica è stata estesa e sviluppata all&amp;rsquo;interno dell&amp;rsquo;&lt;strong&gt;extreme programming&lt;/strong&gt;, fino a sostenere la necessità di &lt;strong&gt;allineare&lt;/strong&gt; le copie di lavoro &lt;strong&gt;diverse volte al giorno&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Il vantaggio principale nell&amp;rsquo;adottare la pratica è quello di &lt;strong&gt;evitare l&amp;rsquo;integration hell&lt;/strong&gt; (o merge hell) &lt;strong&gt;minimizzando il rischio&lt;/strong&gt; legato a copie di lavoro divergenti di difficile integrazione.&lt;/p&gt;

&lt;p&gt;Il &lt;a href=&#34;http://engineering.facile.it/tag/software-testing/&#34;&gt;software testing&lt;/a&gt;, pur non essendo indispensabile ai fini della &lt;strong&gt;continuous integration&lt;/strong&gt;, ne è perfettamente complementare, dando allo sviluppatore garanzia di &lt;strong&gt;integrità del funzionamento del software&lt;/strong&gt; prima e dopo l&amp;rsquo;integrazione sulla &lt;em&gt;mainline&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Risale al 2000 un importante &lt;a href=&#34;http://martinfowler.com/articles/continuousIntegration.html&#34;&gt;articolo&lt;/a&gt; di &lt;a href=&#34;http://martinfowler.com/&#34;&gt;Martin Fowler&lt;/a&gt; che indica i &lt;strong&gt;principi fondamentali&lt;/strong&gt; della CI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mantieni un repository del codice sorgente&lt;/li&gt;
&lt;li&gt;Automatizza la build&lt;/li&gt;
&lt;li&gt;Rendi la build auto-testante&lt;/li&gt;
&lt;li&gt;Esegui commit alla baseline tutti i giorni&lt;/li&gt;
&lt;li&gt;Ogni commit fa partire una build automatica&lt;/li&gt;
&lt;li&gt;Ripara immediatamente le build fallite&lt;/li&gt;
&lt;li&gt;Fai in modo che la build sia veloce&lt;/li&gt;
&lt;li&gt;Esegui i test in un clone dell&amp;rsquo;ambiente di produzione&lt;/li&gt;
&lt;li&gt;Fai in modo che sia facile recuperare l&amp;rsquo;ultima build&lt;/li&gt;
&lt;li&gt;Tutti possono vedere lo stato delle build&lt;/li&gt;
&lt;li&gt;Automatizza il deploy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;soluzioni-per-la-ci-ed-il-testing-automatico:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Soluzioni per la CI ed il testing automatico&lt;/h2&gt;

&lt;p&gt;Negli ultimi anni si sono diffuse molte &lt;strong&gt;soluzioni software&lt;/strong&gt; che permettono di automatizzare il processo di &lt;strong&gt;build e testing&lt;/strong&gt; a partire da un semplice &lt;em&gt;push&lt;/em&gt; sulla mainline di sviluppo. Ognuno di queste ha le sue peculiari caratteristiche che la rendono diverso dagli altri.&lt;/p&gt;

&lt;p&gt;In Facile.it abbiamo stilato una lista di &lt;strong&gt;requisiti&lt;/strong&gt; per trovare il sistema di CI più adatto al nostro &lt;strong&gt;caso d&amp;rsquo;uso&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Possibilità di effettuare build in &lt;strong&gt;ambienti molto diversi&lt;/strong&gt; (per sistema operativo, versioni software..) &lt;strong&gt;identici a quelli di produzione&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Possibilità di effettuare &lt;strong&gt;contemporaneamente&lt;/strong&gt; build multiple, anche appartenenti allo &lt;strong&gt;stesso progetto&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Sistema di CI compatibile con diversi &lt;strong&gt;servizi Git&lt;/strong&gt; (GitHub, GitLab, BitBucket..)&lt;/li&gt;
&lt;li&gt;Integrazione con &lt;strong&gt;chat&lt;/strong&gt; e sistemi di &lt;strong&gt;notifica&lt;/strong&gt; (Slack, IRC..)&lt;/li&gt;
&lt;li&gt;Invio &lt;strong&gt;mail di alert&lt;/strong&gt; per build fallite&lt;/li&gt;
&lt;li&gt;Sistema di CI &lt;strong&gt;estendibile via API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dashboard&lt;/strong&gt; che mostri lo stato delle build, per tenere gli &lt;strong&gt;sviluppatori informati&lt;/strong&gt; riguardo lo stato delle proprie build e della mainline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Utilizzando in maniera intensiva &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; per lo sviluppo locale con ambienti &lt;strong&gt;simili alla produzione&lt;/strong&gt;, una caratteristica interessante da avere consiste proprio nella possibilità di effettuare &lt;strong&gt;build all&amp;rsquo;interno di container&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La nostra scelta è ricaduta su &lt;a href=&#34;https://github.com/drone/drone&#34;&gt;Drone&lt;/a&gt;, una piattaforma di continuous integration piuttosto giovane, ma sufficientemente stabile per un utilizzo in produzione.&lt;/p&gt;

&lt;h2 id=&#34;drone-build-attraverso-container-docker:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Drone: build attraverso container Docker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/drone/drone&#34;&gt;Drone&lt;/a&gt;, rilasciato con licenza Apache 2.0, è una piattaforma di CI che automatizza le build &lt;strong&gt;all&amp;rsquo;interno di container Docker&lt;/strong&gt;: la soluzione ideale in un ambiente dove &lt;strong&gt;numerosi gruppi di lavoro&lt;/strong&gt; utilizzano &lt;strong&gt;ambienti molto diversi&lt;/strong&gt; (per sistema operativo, versioni di interpreti di linguaggio, sistemi di database o caching) ma vogliono centralizzare i processi di Continuous Integration.&lt;/p&gt;

&lt;p&gt;Come altre piattaforme di CI, Drone supporta diversi sistemi Git (GitHub, GitLab, BitBucket, Gogs et al.), diversi sistemi di &lt;a href=&#34;https://github.com/drone/drone/blob/v0.2.1/README.md#deployments&#34;&gt;deploy&lt;/a&gt; (Aws S3, SSH, Heroku, Swift et al.) e diversi sistemi di &lt;a href=&#34;https://github.com/drone/drone/blob/v0.2.1/README.md#notifications&#34;&gt;notifica&lt;/a&gt; (Webhook, Hipchat, Email et al.).&lt;/p&gt;

&lt;p&gt;I container di build possono essere avviati in locale o &lt;strong&gt;remoto&lt;/strong&gt;, dal momento che la &lt;a href=&#34;https://github.com/drone/drone#setup&#34;&gt;configurazione&lt;/a&gt; permette di indicare i &lt;strong&gt;socket Docker&lt;/strong&gt; (UNIX, ma anche TCP) da utilizzare.&lt;/p&gt;

&lt;p&gt;Drone supporta un &lt;a href=&#34;https://github.com/drone/drone-plugin-go&#34;&gt;&lt;strong&gt;sistema di plugin&lt;/strong&gt;&lt;/a&gt; estremamente &lt;strong&gt;flessibile&lt;/strong&gt;: un plugin riceve via riga di comando o input dal terminale un JSON contenente le &lt;strong&gt;informazioni sulla build&lt;/strong&gt; corrente e pubblica il risultato in output.&lt;/p&gt;

&lt;p&gt;I plugin vengono distribuiti a loro volta come &lt;strong&gt;container Docker&lt;/strong&gt;, così possono condividere attraverso un volume-mount la &lt;strong&gt;stessa copia del repository&lt;/strong&gt; su cui avviene la build.
L&amp;rsquo;&lt;em&gt;ENTRYPOINT&lt;/em&gt; per il plugin nel Dockerfile &lt;strong&gt;consiste nell&amp;rsquo;eseguibile&lt;/strong&gt; vero e proprio:
in questo modo è possibile scrivere &lt;strong&gt;plugin in qualsiasi linguaggio&lt;/strong&gt; per fare qualsiasi tipo di operazione!&lt;/p&gt;

&lt;p&gt;Per ultimo, ma comunque non di poco conto, il &lt;strong&gt;monitor stato build&lt;/strong&gt; viene rilasciato in un progetto separato: &lt;a href=&#34;https://github.com/drone/drone-wall&#34;&gt;Drone Wall&lt;/a&gt; è semplicemente fantastico!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/continuos-integration-docker-drone/drone-wall.jpg&#34; alt=&#34;Drone wall screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Quella che segue, è una guida per &lt;strong&gt;l&amp;rsquo;installazione di Drone&lt;/strong&gt; (a sua volta in un container!), molto simile a quella  utilizzata in Facile.it.&lt;/p&gt;

&lt;h2 id=&#34;prerequisiti:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Prerequisiti&lt;/h2&gt;

&lt;p&gt;Per testare questa guida abbiamo utilizzato Docker 1.6.2 e &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;docker-compose 1.2.0&lt;/a&gt;.
Per chi non conoscesse Compose, basti sapere che è un &lt;strong&gt;tool per definire convenientemente una configurazione complessa&lt;/strong&gt; (di solito multi-container) in un singolo file &lt;em&gt;yaml&lt;/em&gt;, potendo poi lanciare tutti i container in essa definiti con un singolo conveniente comando anzichè con molti tediosi &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Come prima cosa è necessario clonare il gist, embeddato qui sotto per riferimento, lanciando il seguente comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://gist.github.com/de5d5861fa4d86f9598c.git
&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://gist.github.com/fntlnz/de5d5861fa4d86f9598c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una volta entrati nella cartella del gist, troviamo due file, &lt;em&gt;docker-compose.yml&lt;/em&gt; e &lt;em&gt;nginx.conf&lt;/em&gt;,  descritti in dettaglio di seguito:&lt;/p&gt;

&lt;h2 id=&#34;docker-compose-yml:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;docker-compose.yml&lt;/h2&gt;

&lt;p&gt;Questo file contiene la configurazione dei container che ci permetterà di mettere insieme il nostro ambiente.&lt;/p&gt;

&lt;p&gt;Al suo interno abbiamo &lt;strong&gt;tre nodi&lt;/strong&gt; principali: &lt;em&gt;drone&lt;/em&gt;, &lt;em&gt;nginx&lt;/em&gt; e &lt;em&gt;wall&lt;/em&gt;; analizziamoli singolarmente:&lt;/p&gt;

&lt;h3 id=&#34;drone:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;DRONE&lt;/h3&gt;

&lt;p&gt;Come abbiamo detto in precedenza Drone supporta i vari servizi di hosting repository git, sia open source che PaaS. Per questa guida abbiamo scelto l&amp;rsquo;integrazione più semplice e immediata, quella con &lt;strong&gt;GitHub&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nel nodo di configurazione di drone ci sono diverse variabili d&amp;rsquo;ambiente: due di queste ci serviranno a configurare l&amp;rsquo;&lt;strong&gt;autenticazione tramite OAuth2&lt;/strong&gt; di GitHub (allo stato attuale, Drone non ha un sistema interno di gestione degli utenti).&lt;/p&gt;

&lt;p&gt;Le variabili d&amp;rsquo;ambiente per GitHub sono &lt;code&gt;DRONE_GITHUB_CLIENT&lt;/code&gt; e &lt;code&gt;DRONE_GITHUB_SECRET&lt;/code&gt;; le chiavi necessarie vengono rilasciate da GitHub a seguito della &lt;a href=&#34;https://github.com/settings/applications/new&#34;&gt;registrazione di una nuova applicazione&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La variabile d&amp;rsquo;ambiente &lt;code&gt;DRONE_REGISTRATION_OPEN&lt;/code&gt; va settata a &lt;code&gt;false&lt;/code&gt; quando si deciderà di non permettere la &lt;strong&gt;registrazione di nuovi utenti&lt;/strong&gt;, ma è attualmente settata a &lt;code&gt;true&lt;/code&gt; per permettere la registrazione del primo utente, che sarà anche il master dell&amp;rsquo;installazione.&lt;/p&gt;

&lt;p&gt;Un&amp;rsquo;altra variabile d&amp;rsquo;ambiente molto importante è &lt;code&gt;DRONE_WORKER_NODES&lt;/code&gt;: la sua importanza è data dal fatto che contiene il &lt;strong&gt;path del socket di Docker&lt;/strong&gt; che permette la comunicazione con i container. Ogni ripetizione separata da virgola di &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt; mette a disposizione delle build un nuovo worker per eseguire più build in parallelo.&lt;/p&gt;

&lt;p&gt;Infine, l&amp;rsquo;ultima ma non meno importante variabile d&amp;rsquo;ambiente da impostare è &lt;code&gt;DRONE_SESSION_SECRET&lt;/code&gt;, la chiave che servirà a codificare le sessioni. Una chiave generata &lt;a href=&#34;https://www.random.org/strings/?num=20&amp;amp;len=20&amp;amp;digits=on&amp;amp;upperalpha=on&amp;amp;loweralpha=on&amp;amp;unique=on&amp;amp;format=html&amp;amp;rnd=new&#34;&gt;su Random.org&lt;/a&gt; è perfetta per questo scopo.&lt;/p&gt;

&lt;p&gt;In questo nodo ci sono inoltre &lt;strong&gt;due volumi condivisi&lt;/strong&gt; che sono rispettivamente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/data/drone:/var/lib/drone&lt;/code&gt;: il path dove verrà scritto il database SQLite di Drone; eventualmente si può sostituire con un path più adeguato&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/code&gt;: il path del socket di docker per permettere a Drone di lanciare nuovi container, poiché si trova anche lui all&amp;rsquo;interno di un container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un&amp;rsquo;altra riga di questo nodo che è degna di nota è &lt;code&gt;privileged: true&lt;/code&gt;: è infatti &lt;strong&gt;necessario che il container contenente Drone giri in modalità privilegiata&lt;/strong&gt;, per disattivare quei controlli di sicurezza che altrimenti non permetterebbero al container di operare alla creazione, distruzione e modifica di altri container.&lt;/p&gt;

&lt;h3 id=&#34;wall:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;WALL&lt;/h3&gt;

&lt;p&gt;In questo nodo è necessario impostare la variabile d&amp;rsquo;ambiente &lt;code&gt;API_TOKEN&lt;/code&gt;, necessaria ad autorizzare la dashboard di visualizzazione delle build: il token si trova nel proprio profilo utente di Drone una volta avviato. Questa configurazione può essere quindi completata solo dopo aver avviato Drone per la prima volta.&lt;/p&gt;

&lt;h3 id=&#34;nginx:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;NGINX&lt;/h3&gt;

&lt;p&gt;Questo nodo fa il binding della porta 80 dell&amp;rsquo;host verso la porta 80 del container e condivide due volumi, rispettivamente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nignx.conf&lt;/code&gt;: condivide la configurazione del file &lt;code&gt;nginx.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/nginx:/var/log/nginx&lt;/code&gt;: condivide la cartella contenente i log di NGINX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;nginx.conf&lt;/code&gt; va configurato per usare NGINX come proxy di Drone e Drone Wall, utilizzando &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass&#34;&gt;proxy_pass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Al suo interno contiene già due &lt;em&gt;server blocks&lt;/em&gt;, i quali a loro volta contengono le direttive &lt;code&gt;server_name&lt;/code&gt;, rispettivamente &lt;code&gt;drone.local&lt;/code&gt; per Drone e &lt;code&gt;wall.drone.local&lt;/code&gt; per il Drone Wall.&lt;/p&gt;

&lt;h2 id=&#34;up-and-running:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Up And Running&lt;/h2&gt;

&lt;p&gt;Ora che abbiamo completato la configurazione, possiamo semplicemente avviare i nostri container con questo comando, che va eseguito nella cartella contentente il clone del gist di sopra:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ora possiamo finalmente utilizzare drone puntando il nostro browser all&amp;rsquo;indirizzo &lt;a href=&#34;http://drone.local&#34;&gt;http://drone.local&lt;/a&gt; (o all&amp;rsquo;indirizzo configurato nel file &lt;code&gt;nginx.conf&lt;/code&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL has gone away? Come back!</title>
      <link>/blog/ita/mysql-has-gone-away-come-back/</link>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/mysql-has-gone-away-come-back/</guid>
      <description>

&lt;p&gt;A ben più di uno sviluppatore sarà capitato di incappare nel comune errore &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/gone-away.html&#34;&gt;&lt;em&gt;MySQL server has gone away!&lt;/em&gt;&lt;/a&gt;, magari seguito da un eccezione lanciata da una delle &lt;a href=&#34;http://php.net/manual/en/book.pdo.php&#34;&gt;&lt;strong&gt;classi PDO&lt;/strong&gt;&lt;/a&gt;, come ad esempio &lt;em&gt;PDOStatement::execute(): Error reading result set&amp;rsquo;s header&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nella maggior parte dei casi, quando questo avviene in ambiente PHP, siamo connessi in maniera &lt;strong&gt;persistente&lt;/strong&gt; (per fortuna!) ed a causa di una esecuzione &lt;strong&gt;troppo lunga&lt;/strong&gt;, la connessione col server MySQL va in &lt;strong&gt;timeout&lt;/strong&gt;. Lunghi tasks in batch, chiamate a ws non particolarmente rapidi, carichi elevati del server, sono alcuni degli scenari possibili.&lt;/p&gt;

&lt;p&gt;Qualora l&amp;rsquo;errore sia noto e prevedibile (ad esempio avvenga alla stessa linea di codice ad ogni esecuzione) è possibile chiudere la connessione in maniera esplicita ed evitarlo, ma questa logica oltre che risultare &lt;strong&gt;scomoda&lt;/strong&gt; e &lt;strong&gt;ripetitiva&lt;/strong&gt; non è sempre applicabile e richiede una esplicita precauzione dello sviluppatore.&lt;/p&gt;

&lt;h3 id=&#34;ma-quanto-è-grave-il-problema:0b2586f94b018b2b7cc561b28a014b73&#34;&gt;Ma quanto è grave il problema?&lt;/h3&gt;

&lt;p&gt;Come illustrato, un errore di tipo &lt;em&gt;MySQL server has gone away&lt;/em&gt; &lt;strong&gt;non&lt;/strong&gt; ha alterato le informazioni presenti nel database, &lt;strong&gt;non&lt;/strong&gt; implica un errore logico o di integrità e &lt;strong&gt;non&lt;/strong&gt; ci impedisce di tentare nuovamente la query da cui è scaturito. Perciò si potrebbe dire che, da un punto di vista applicativo l&amp;rsquo;errore, se correttamente &lt;strong&gt;intercettato e gestito&lt;/strong&gt;, non sia per nulla grave.&lt;/p&gt;

&lt;h3 id=&#34;allora-potrei-ignorarlo:0b2586f94b018b2b7cc561b28a014b73&#34;&gt;Allora potrei ignorarlo?&lt;/h3&gt;

&lt;p&gt;Ignorare deliberatamente degli errori non può essere considerata una strategia vincente, perciò per prima cosa bisogna assicurarsi di aver fatto tutto quanto suggerito nella &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/gone-away.html&#34;&gt;documentazione&lt;/a&gt; per &lt;strong&gt;rimuovere le cause del problema&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;e-se-non-dovesse-bastare:0b2586f94b018b2b7cc561b28a014b73&#34;&gt;E se non dovesse bastare?&lt;/h3&gt;

&lt;p&gt;Ritentare la query dovrebbe essere sempre possibile nonchè piuttosto semplice, a patto di saper riconoscere con precisione le eccezioni del &lt;strong&gt;tipo corretto&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A tal proposito è importante ricordare come la classe &lt;a href=&#34;http://php.net/manual/en/class.pdoexception.php&#34;&gt;&lt;em&gt;PDOException&lt;/em&gt;&lt;/a&gt; non fornisca attraverso il metodo pubblico &lt;em&gt;getCode()&lt;/em&gt; il &lt;strong&gt;codice di errore del DB vendor&lt;/strong&gt; (es. &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/error-messages-client.html#error_cr_server_gone_error&#34;&gt;2006&lt;/a&gt; per MySQL), ma lo inserisca piuttosto nel &lt;em&gt;message&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** @var $e PDOException */
echo $e-&amp;gt;getMessage(); // &#39;SQLSTATE[HY000]: General error: 2006 MySQL server has gone away&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;come-funziona:0b2586f94b018b2b7cc561b28a014b73&#34;&gt;Come funziona?&lt;/h3&gt;

&lt;p&gt;Chiariamoci le idee con del codice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sql = &#39;SELECT count(*) FROM `TABLE`&#39;;
$retry = true;

while ($retry) {

    try {

        $nb = $pdo-&amp;gt;query($sql)-&amp;gt;fetchColumn();

    } catch (PDOException $e) {
		
        $retry = false;
        
        if($this-&amp;gt;isMySQLHasGoneAwayException($e)) {
        
        	$this-&amp;gt;reconectDB();
            $retry = true;
        }
    }        
}
# CODICE DEMO, NON FUNZIONANTE!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nell&amp;rsquo;esempio  sopra riportato, una volta accertata la natura dell&amp;rsquo;eccezione si procede &lt;strong&gt;riconnettendosi&lt;/strong&gt; al database (una &lt;strong&gt;nuova&lt;/strong&gt; connessione!) e &lt;strong&gt;ripetendo&lt;/strong&gt; la query, magari con un limite di tentativi per evitare ricursioni infinite!&lt;/p&gt;

&lt;p&gt;Trattandosi di una &lt;strong&gt;nuova connessione&lt;/strong&gt;, non è possibile utilizzare questa procedura nel caso l&amp;rsquo;errore avvenga durante una &lt;a href=&#34;http://en.wikipedia.org/wiki/Database_transaction&#34;&gt;&lt;strong&gt;transazione&lt;/strong&gt;&lt;/a&gt; MySQL. Tutte le query inviate all&amp;rsquo;interno della connessione sarebbero ovviamente &lt;strong&gt;perdute&lt;/strong&gt; e non sarebbe possibile recuperarle!&lt;/p&gt;

&lt;h3 id=&#34;ma-devo-farlo-ogni-volta-a-mano:0b2586f94b018b2b7cc561b28a014b73&#34;&gt;Ma devo farlo ogni volta a mano?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NO!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://www.facile.it/&#34;&gt;&lt;strong&gt;Facile.it&lt;/strong&gt;&lt;/a&gt;, utilizzando largamente l&amp;rsquo;ORM &lt;em&gt;Doctrine&lt;/em&gt;, abbiamo pensato allo sviluppo di una piccola estensione, &lt;a href=&#34;https://github.com/facile-it/doctrine-mysql-come-back&#34;&gt;&lt;strong&gt;DoctrineMySQLComeBack&lt;/strong&gt;&lt;/a&gt; che riteniamo utile distribuire in maniera &lt;strong&gt;libera&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Compatibile dalla versione 2.3 fino alla stabile 2.5, si occupa di &lt;strong&gt;ritentare automaticamente&lt;/strong&gt; le SELECT in ambiente MySQL. Cosi non ci si dovrà più preoccupare del successo di ogni singola query per portare a termine le esecuzioni.&lt;/p&gt;

&lt;p&gt;Le &lt;strong&gt;istruzioni&lt;/strong&gt; per l&amp;rsquo;installazione e l&amp;rsquo;uso sono disponibili su &lt;a href=&#34;https://github.com/facile-it/doctrine-mysql-come-back&#34;&gt;&lt;strong&gt;&lt;em&gt;GitHub&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, e chiunque è libero di &lt;strong&gt;contribuire&lt;/strong&gt; per migliorarne le funzionalità :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/facile-it/doctrine-mysql-come-back&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/doctrine-mysql-come-back/v/stable.svg&#34; alt=&#34;Latest Stable Version&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/facile-it/doctrine-mysql-come-back&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/doctrine-mysql-come-back/downloads.svg&#34; alt=&#34;Total Downloads&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/facile-it/doctrine-mysql-come-back&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/doctrine-mysql-come-back/license.svg&#34; alt=&#34;License&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>