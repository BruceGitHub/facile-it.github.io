<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>salvatore-cordiano on Facile.it Engineering</title>
    <link>https://engineering.facile.it/authors/salvatore-cordiano/</link>
    <description>Recent content in salvatore-cordiano on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://engineering.facile.it/authors/salvatore-cordiano/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Is it all PHP OPCache&#39;s fault?</title>
      <link>https://engineering.facile.it/blog/eng/realpath-cache-is-it-all-php-opcache-s-fault/</link>
      <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/realpath-cache-is-it-all-php-opcache-s-fault/</guid>
      <description>

&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Upon migrating to a new infrastructure we started experiencing cache issues after each deploy: as we refreshed pages that were updated by the new release, we didn&amp;rsquo;t see the right content for a very short period of time. Initially, we wrongly assumed that the cause of this issue was the PHP OPcache extension but, after our investigation, we understood that real path cache was the culprit.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;When I started my software developer career, I was very surprised to read the following sentence, attributed to &lt;a href=&#34;https://martinfowler.com/bliki/TwoHardThings.html&#34;&gt;Phil Karlton&lt;/a&gt;: &lt;em&gt;«There are only two hard things in Computer Science: &lt;strong&gt;cache invalidation&lt;/strong&gt; and &lt;strong&gt;naming things&lt;/strong&gt;»&lt;/em&gt;. In the beginning I was incredulous, because I didn&amp;rsquo;t really get the sense of these words. Not much later, I started to understand.&lt;/p&gt;

&lt;p&gt;Without digging too much into the past, I&amp;rsquo;d like to talk about a recent cache issue we experienced in on our production infrastructure. Particularly we noticed a strange behavior after each deploy: immediately after a successful deployment procedure, as we refreshed pages that were modified with the new release, we didn&amp;rsquo;t see the updated code for a while. Actually, the scenario described above is very common with &lt;strong&gt;PHP&lt;/strong&gt; web applications. We have seen this behavior in the past but, after we moved to our new production environment, it became more noticeable. Therefore, we decided to investigate it.&lt;/p&gt;

&lt;h1 id=&#34;our-deployment-procedure&#34;&gt;Our deployment procedure&lt;/h1&gt;

&lt;p&gt;Before proceeding, I should describe how our deployment procedure works: our technology is mostly based on PHP, plus some frameworks like &lt;strong&gt;Symfony&lt;/strong&gt; and &lt;strong&gt;Zend Framework&lt;/strong&gt;. To ship our code in production we use an internal project called &lt;strong&gt;shark-do&lt;/strong&gt;, written by my team leader &lt;a href=&#34;https://luca.bo/&#34;&gt;Luca&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Shark-do&amp;rsquo;s philosophy is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;«If you can do it, you can do it in bash»&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The project&amp;rsquo;s in fact a bash script which allows to define a task and execute it from a recipe. Each project has its own recipe, as to manage the different steps needed, like delete useless files, generate configuration files, etc.&lt;/p&gt;

&lt;p&gt;For example, I usually run &lt;code&gt;shark-do deploy collaboratori&lt;/code&gt;, to execute the deploy tasks for the &amp;ldquo;collaboratori&amp;rdquo; project, in which I&amp;rsquo;m involved, more than 5 times a day. This is generally comprised of the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pull the last commit from origin/master;&lt;/li&gt;
&lt;li&gt;setup folders, remove the unnecessary files and start creating a release;&lt;/li&gt;
&lt;li&gt;install parameters, run composer install, download and dump assets;&lt;/li&gt;
&lt;li&gt;create a release archive, transfer and extract it on the bastion machine;&lt;/li&gt;
&lt;li&gt;call an Ansible procedure to start the release roll out using our infrastructure&amp;rsquo;s REST API;&lt;/li&gt;
&lt;li&gt;switch releases, clean and remove old releases on the bastion machine;&lt;/li&gt;
&lt;li&gt;tag the new release on New Relic and notify the end of the task on our Slack channel.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We should focus on point 5 because it&amp;rsquo;s the roll out phase. At that point, an &lt;a href=&#34;http://docs.ansible.com/ansible/latest/playbooks.html&#34;&gt;&lt;strong&gt;Ansible playbook&lt;/strong&gt;&lt;/a&gt; is responsible for copying the new release from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Bastion_host&#34;&gt;bastion host&lt;/a&gt; to all the target machines (front-end, batch, etc.), for setting up folders and permissions, and for doing cache warm-up and release switch. As described previously, each deployment procedure consists of many mandatory activities, but the turning point is when the current project&amp;rsquo;s folder changes: this is usually done through a symlink swap from the previous release folder to the new one. The current project folder is the document root of the specific web application.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s just something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ln -sf /var/www/{APP_NAME}/releases/@YYYYMMDDHHIISS /var/www/{APP_NAME}/current
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-s&lt;/code&gt; option is used to create a symbolic link, while &lt;code&gt;-f&lt;/code&gt; is used to force the symlink creation if the target already exists; &lt;code&gt;{APP_NAME}&lt;/code&gt; represents the project&amp;rsquo;s name.&lt;/p&gt;

&lt;p&gt;Our deployment strategy is very common in the PHP world. We store multiple releases of the same application on the production machines, and we use a symlink to the current version. This way we should deploy &lt;strong&gt;atomically and safely&lt;/strong&gt;, without impacting the production traffic.&lt;/p&gt;

&lt;p&gt;Last but not least, we have about 15 front-end machines behind a load-balancer with a round-robin workload balancing policy (more than twice the previous number of servers). Now the question is: what happens after the release switch?&lt;/p&gt;

&lt;h1 id=&#34;it-s-all-php-opcache-s-fault&#34;&gt;It&amp;rsquo;s all PHP OPCache&amp;rsquo;s fault (?)&lt;/h1&gt;

&lt;p&gt;Some caveats: the goal of this article is not to dive deeply in a PHP script execution flow, but to lay down the foundations to understand my reasoning about the problem; I am also only taking into account PHP version 7.&lt;/p&gt;

&lt;p&gt;It can be useful to revisit how PHP code is executed. When we run a PHP script, our source code undergoes four phases:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://engineering.facile.it/images/realpath-cache-is-it-all-php-opcache-s-fault/graph_1.png&#34; alt=&#34;How does PHP work?&#34; /&gt;
&lt;em&gt;How does PHP work?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The first phase is managed by a lexer: the &lt;strong&gt;PHP lexer&lt;/strong&gt; is responsible for matching language keywords like &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; to individual pieces generally called &lt;em&gt;tokens&lt;/em&gt;. Each token is often decorated with some metadata, necessary for the next phase.&lt;/p&gt;

&lt;p&gt;The second phase is managed by a parser: the &lt;strong&gt;PHP parser&lt;/strong&gt; is responsible for analyzing single or multiple tokens, and match them to language structure patterns. For example &lt;code&gt;$foo + 5&lt;/code&gt; is recognized as a binary &amp;ldquo;sum&amp;rdquo; operation, and the variable &lt;code&gt;$foo&lt;/code&gt; and the number &lt;code&gt;5&lt;/code&gt; are recognized as operands. Here, the parser builds the &lt;a href=&#34;https://wiki.php.net/rfc/abstract_syntax_tree&#34;&gt;&lt;strong&gt;Abstract Syntax Tree (AST)&lt;/strong&gt;&lt;/a&gt; in a recursive way. Usually, lexer and parser are mentioned together as a single task.&lt;/p&gt;

&lt;p&gt;The third phase is the &lt;strong&gt;compilation&lt;/strong&gt;. In this phase, the AST is visited and it&amp;rsquo;s translated into an ordered sequence of OPCodes instructions. Every OPCode could be considered as a low-level &lt;strong&gt;Zend Virtual Machine&lt;/strong&gt; operation. The full list of supported OPCodes is available &lt;a href=&#34;https://github.com/php/php-src/blob/php-7.0.0/Zend/zend_vm_opcodes.h&#34;&gt;here&lt;/a&gt;. The last phase is the &lt;strong&gt;execution&lt;/strong&gt;. The Zend VM runs every single task described by OPCode, and produces the result.&lt;/p&gt;

&lt;p&gt;The first three phases of the above described &amp;ldquo;pipeline&amp;rdquo; (lexer, parser and compiler), and the third in particular takes a lot of time and resources (memory and CPU). To minimize the weight of the compilation phase, PHP 5.5 introduced the &lt;a href=&#34;http://php.net/manual/en/book.opcache.php&#34;&gt;&lt;strong&gt;Zend OPcache extension&lt;/strong&gt;&lt;/a&gt;. If enabled, this extension will cache the output of the compilation step (OPCodes) into shared memory (shm, mmap, etc.), such that every PHP script is compiled only once, and different requests can be executed skipping the compilation task. If the source code on the non-development environment is not frequently changed, the PHP execution time should be reduced by a factor of at least two.&lt;/p&gt;

&lt;p&gt;The OPcache extension is also responsible for the OPCodes optimization, but that&amp;rsquo;s out of scope for this article.&lt;/p&gt;

&lt;p&gt;In the light of the above, it&amp;rsquo;s reasonable to expect that the strange behavior experienced in our production environment is all OPCache&amp;rsquo;s fault. If that&amp;rsquo;s right, we should be able to reproduce the issue and solve it by disabling the OPCache extension. To test this hypothesis I&amp;rsquo;ve prepared a very simple demo environment using a &lt;strong&gt;Docker&lt;/strong&gt; container with PHP 7.0 and Apache 2.4. The full code is available on &lt;a href=&#34;https://github.com/salvatorecordiano/facile-it-realpath_cache&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wrote some shortcuts to simplify the process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start.sh&lt;/code&gt; starts the Docker container with the right configuration;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release-switcher.sh&lt;/code&gt; swaps the current release symlink every 10 seconds;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release-watcher.sh&lt;/code&gt; checks the current release served by Apache every second, by making an HTTP request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just clone the GitHub repository and you&amp;rsquo;re ready to test, assuming Docker is already installed on your machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/salvatorecordiano/facile-it-realpath_cache
cd facile-it-realpath_cache
docker pull salvatorecordiano/realpath_cache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To reproduce the cache issue, you have to run the following commands in parallel, using three different command lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start the container with production configuration
./start.sh production 
# start switching the current release
./release-switcher.sh
# start watching the current web server response 
./release-watcher.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following &lt;a href=&#34;https://www.youtube.com/watch?v=PNjyi42VwP4&#34;&gt;video&lt;/a&gt; shows the execution output.&lt;/p&gt;

&lt;p&gt;
	&lt;img data-src=&#34;/images/realpath-cache-is-it-all-php-opcache-s-fault/demo_production.gif&#34; class=&#34;lazy&#34; title=&#34;Execution with configuration: production&#34; width=&#34;100%&#34;/&gt;
	&lt;br/&gt;
	
		&lt;em&gt;Execution with configuration: production&lt;/em&gt;
	
&lt;/p&gt;


&lt;p&gt;As expected we are experiencing the cache issue: after a release switch, we&amp;rsquo;re not seeing the right code as the output of an HTTP request.&lt;/p&gt;

&lt;p&gt;Now we disable the OPCache extension and redo the test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start the container with production configuration and opcache disabled
./start.sh production-no-opcache 
# start switching the current release
./release-switcher.sh
# start watching the current web server response 
./release-watcher.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following &lt;a href=&#34;https://www.youtube.com/watch?v=WB78eE0kwUo&#34;&gt;video&lt;/a&gt; shows the output of this new execution.&lt;/p&gt;

&lt;p&gt;
	&lt;img data-src=&#34;/images/realpath-cache-is-it-all-php-opcache-s-fault/demo_production_no_opcache.gif&#34; class=&#34;lazy&#34; title=&#34;Execution with configuration: production&#34; width=&#34;100%&#34;/&gt;
	&lt;br/&gt;
	
		&lt;em&gt;Execution with configuration: production-no-opcache&lt;/em&gt;
	
&lt;/p&gt;


&lt;p&gt;This is unexpected, we are experiencing the previous behavior, thus something is missing from our reasoning: &lt;strong&gt;it&amp;rsquo;s not all OPCache&amp;rsquo;s fault after all&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;realpath-cache-the-true-culprit&#34;&gt;realpath_cache: the true culprit&lt;/h1&gt;

&lt;p&gt;When we use &lt;code&gt;include/require&lt;/code&gt; functions or PHP autoload, we should probably think about &lt;strong&gt;realpath_cache&lt;/strong&gt;. Real path cache is a PHP feature that allows to &lt;strong&gt;cache paths resolution for files and folders&lt;/strong&gt;, in order to minimize time-consuming disk lookups and improve performance. This is very useful when working with many third party libraries, or frameworks like Symfony, Zend or Laravel, because they use a huge number of files.&lt;/p&gt;

&lt;p&gt;The path cache mechanism was introduced in PHP 5.1.0. At the present moment there&amp;rsquo;s no mention of this feature in the official docs, if not for the functions &lt;code&gt;realpath_cache_get()&lt;/code&gt;, &lt;code&gt;realpath_cache_size()&lt;/code&gt;, &lt;code&gt;clearstatcache()&lt;/code&gt; and the &lt;code&gt;php.ini&lt;/code&gt; parameters &lt;code&gt;realpath_cache_size&lt;/code&gt; and &lt;code&gt;realpath_cache_ttl&lt;/code&gt;.  The only external reference I was able to find is an &lt;a href=&#34;http://blog.jpauli.tech/2014/06/30/realpath-cache.html&#34;&gt;old post&lt;/a&gt; written by &lt;strong&gt;Julien Pauli&lt;/strong&gt; in 2014. In his post Pauli, a well-known PHP contributor, explains how PHP resolves a path behind the scenes.&lt;/p&gt;

&lt;p&gt;When we access a file, PHP tries to resolve it&amp;rsquo;s path using the &lt;code&gt;stat()&lt;/code&gt; Unix system call: it returns file attributes (like permission, filename extensions and other metadata) about an &lt;strong&gt;inode&lt;/strong&gt;. In the Unix world, an inode is a data structure used to describe a file system object such as a file or a directory. PHP puts the result of the system call in a data structure called &lt;code&gt;realpath_cache_bucket&lt;/code&gt;, excluding some things like permissions and owners. So, if we try to access the same file twice, the bucket lookup will spare us another slow system call. To deepen the subject, I suggest reading this bit of &lt;a href=&#34;https://github.com/php/php-src/blob/php-7.0.0/Zend/zend_virtual_cwd.c&#34;&gt;PHP source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;realpath_cache_get&lt;/code&gt; was introduced in PHP 5.3.2 and it allows one to get an array of all the real path cache entries. For each element of the array, the key is the resolved path, and the value is another array of data like &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;is_dir&lt;/code&gt;, &lt;code&gt;realpath&lt;/code&gt;, &lt;code&gt;expires&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What follows is the output of &lt;code&gt;print_r(realpath_cache_get());&lt;/code&gt; in our Docker test environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;Array
(
    [/var/www/html] =&amp;gt; Array
        (
            [key] =&amp;gt; 1438560323331296433
            [is_dir] =&amp;gt; 1
            [realpath] =&amp;gt; /var/www/html
            [expires] =&amp;gt; 1504549899
        )
    [/var/www] =&amp;gt; Array
        (
            [key] =&amp;gt; 1.5408950988325E+19
            [is_dir] =&amp;gt; 1
            [realpath] =&amp;gt; /var/www
            [expires] =&amp;gt; 1504549899
        )
    [/var] =&amp;gt; Array
        (
            [key] =&amp;gt; 1.6710127960665E+19
            [is_dir] =&amp;gt; 1
            [realpath] =&amp;gt; /var
            [expires] =&amp;gt; 1504549899
        )
    [/var/www/html/release1] =&amp;gt; Array
        (
            [key] =&amp;gt; 7631224517412515240
            [is_dir] =&amp;gt; 1
            [realpath] =&amp;gt; /var/www/html/release1
            [expires] =&amp;gt; 1504549899
        )
    [/var/www/current] =&amp;gt; Array
        (
            [key] =&amp;gt; 1.7062595747834E+19
            [is_dir] =&amp;gt; 1
            [realpath] =&amp;gt; /var/www/html/release1
            [expires] =&amp;gt; 1504549899
        )
    [/var/www/current/index.php] =&amp;gt; Array
        (
            [key] =&amp;gt; 6899135167081162414
            [is_dir] =&amp;gt; 0
            [realpath] =&amp;gt; /var/www/html/release1/index.php
            [expires] =&amp;gt; 1504549899
        )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the previous code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; is a float, and represents a hash associated with the path;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_dir&lt;/code&gt; is a boolean, and it&amp;rsquo;s true when the resolved path is a directory, otherwise it&amp;rsquo;s false;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;realpath&lt;/code&gt; is the resolved path, as a string;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expires&lt;/code&gt; is an integer, and it represents the time when the path cache will be invalidated; this value is strictly related to the parameter &lt;code&gt;realpath_cache_ttl&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the previous sample we have 6 paths, but they&amp;rsquo;re all related to the resolution of the path &lt;code&gt;/var/www/current/index.php&lt;/code&gt;. PHP has created 6 cache keys to resolve just one path. So a path is resolved by splitting it in parts and resolving them one at a time. In our case the &amp;ldquo;real&amp;rdquo; path is &lt;code&gt;/var/www/html/release1/index.php&lt;/code&gt; because &lt;code&gt;/var/www/current&lt;/code&gt; is a symlink to the folder &lt;code&gt;/var/www/html/release1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Julien Pauli&amp;rsquo;s post also specifies:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;«The realpath cache is process bound, and not shared into shared memory».&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that the &lt;strong&gt;cache must expire for every PHP process&lt;/strong&gt;. So if we are using &lt;a href=&#34;https://php-fpm.org&#34;&gt;&lt;strong&gt;PHP-FPM&lt;/strong&gt;&lt;/a&gt; to clean the whole web server, we need to wait that the cache expires for every worker of the pool. This can be useful to understand what happens during our test while using the configuration &lt;code&gt;production-no-opcache&lt;/code&gt;. Even if OPCache is disabled after the symlink swap, PHP will notify every process about the paths&amp;rsquo; expiration slowly.&lt;/p&gt;

&lt;p&gt;In our real production environment we must consider that we have 15 front-end machines, hosting many web applications. Every machine has one PHP-FPM pool that is composed of 35 workers + 1 master process. This explains why the &amp;ldquo;strange behavior&amp;rdquo; is more evident in the new environment. We can &lt;strong&gt;tune the real path cache impact&lt;/strong&gt; on our web application using the above mentioned the parameters &lt;code&gt;realpath_cache_size&lt;/code&gt; and &lt;code&gt;realpath_cache_ttl&lt;/code&gt;: the former determines the size of the real path bucket to be used by PHP. It is an integer and incrementing this value can be useful if our web application uses a huge number of files. The other configuration directive &lt;code&gt;realpath_cache_ttl&lt;/code&gt;, as already mentioned, represents the duration in seconds for which the real path information should be cached.&lt;/p&gt;

&lt;p&gt;Now we have the full picture, and we can re-enable the OPCache extension and disable real path cache, setting up size and time to live (TTL) as described below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;realpath_cache_size=0k
realpath_cache_ttl=-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s run our (hopefully) last test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start the container with production configuration, opcache enabled and realpath_cache disabled
./start.sh production-no-realpath-cache 
# start switching the current release
./release-switcher.sh
# start watching the current web server response 
./release-watcher.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following &lt;a href=&#34;https://www.youtube.com/watch?v=Qry6cvUmf3c&#34;&gt;video&lt;/a&gt; shows the output of the last execution.&lt;/p&gt;

&lt;p&gt;
	&lt;img data-src=&#34;/images/realpath-cache-is-it-all-php-opcache-s-fault/demo_production_no_realpath_cache.gif&#34; class=&#34;lazy&#34; title=&#34;Execution with configuration: production&#34; width=&#34;100%&#34;/&gt;
	&lt;br/&gt;
	
		&lt;em&gt;Execution with configuration: production-no-realpath-cache&lt;/em&gt;
	
&lt;/p&gt;


&lt;p&gt;It&amp;rsquo;s crucial to point out that our last configuration is &lt;strong&gt;strongly discouraged&lt;/strong&gt; on a production environment, because it will force PHP to always resolve every path it encounters, with a negative impact on the performance.&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;The goal of this article was to unveil the mystery about our cache issue, and to share what I learned about OPCache and real path cache, and their differences. The scenario described at the beginning of the post is not a real issue but, for example, if a request starts on one version of the code, then it tries to access other files during its execution, and these files are updated, moved or deleted in subsequent versions of the code, it could result in actual problems: in the worst case a solution could be to guarantee the compatibility between two contiguous releases, but the said condition it&amp;rsquo;s very hard to achieve.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s necessary to implement an &lt;strong&gt;atomic deployment strategy&lt;/strong&gt;, in the strict sense of the word. This could be reached for example using containers or more simply using a new isolated PHP-FPM memory pool for each deployed release. The last solution requires at least double the amount of memory, to keep more FPM pools up and running at the same time.&lt;/p&gt;

&lt;p&gt;Another approach is to use an Apache module called &lt;code&gt;mod_realdoc&lt;/code&gt; to support atomic deploys. It was written by &lt;a href=&#34;https://github.com/etsy/mod_realdoc&#34;&gt;&lt;strong&gt;Rasmus Lerdorf&lt;/strong&gt;&lt;/a&gt;. The trick implemented in &lt;code&gt;mod_realdoc&lt;/code&gt; is to call real path on the &lt;code&gt;DOCUMENT_ROOT&lt;/code&gt; symlink at the beginning of a request, and to set the absolute path as the real document root for the whole request. Consequently, requests that started before a symlink change will continue to execute on the previous symlink target.
The only problem of that module is the requirement of &lt;a href=&#34;https://httpd.apache.org/docs/2.4/mod/prefork.html&#34;&gt;&lt;strong&gt;Apache Multi-Processing Module (MPM) prefork&lt;/strong&gt;&lt;/a&gt;. MPM prefork implements a non-threaded, forking based server that spawns new processes and keeps them alive to serve requests. It is the best MPM for isolating each request, so that a problem with a single request will not affect the others. But it&amp;rsquo;s not the best for when the server is under heavy load, because there&amp;rsquo;s going to be one process per request, thus concurrent requests will suffer since they&amp;rsquo;re forced to wait until a server process is freed. The same result of &lt;code&gt;mod_realdoc&lt;/code&gt; could be achieved at PHP level in the application front controller by defining the base root via &lt;code&gt;realpath(__FILE__)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using the &lt;strong&gt;nginx&lt;/strong&gt; web server in front of PHP, you are lucky! To avoid the symlinks update during ongoing requests, you must give nginx the responsibility to resolve symlinks and assign them to &lt;code&gt;DOCUMENT_ROOT&lt;/code&gt;. You simply need to change a few lines on your server blocks, as described below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# default configuration
fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
fastcgi_param DOCUMENT_ROOT $document_root;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# configuration with real path resolution
fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
fastcgi_param DOCUMENT_ROOT $realpath_root;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the above changes nginx will resolve the symlinks, hiding them from PHP.&lt;/p&gt;

&lt;p&gt;These are just some discussed solutions to fight against real path cache issues, and there is no universal &amp;ldquo;right&amp;rdquo; way. You must always find the best solution considering your particular requirements and infrastructure.&lt;/p&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jpauli.tech/2014/06/30/realpath-cache.html&#34;&gt;realpath_cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeascraft.com/2013/07/01/atomic-deploys-at-etsy/&#34;&gt;Atomic deploys at Etsy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/etsy/mod_realdoc&#34;&gt;mod_realdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/understanding-opcache/&#34;&gt;Understanding OpCache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://secure.php.net/opcache&#34;&gt;PHP OPCache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/asgrim1/climbing-the-abstract-syntax-tree-phpday-2017&#34;&gt;Climbing the Abstract Syntax Tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>#FacileHack 2017 ci siamo quasi</title>
      <link>https://engineering.facile.it/blog/ita/facilehack-2017-ci-siamo-quasi/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/facilehack-2017-ci-siamo-quasi/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://engineering.facile.it/images/facilehack-2017-ci-siamo-quasi/share.png&#34; alt=&#34;FacileHack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mancano meno di 4 giorni alla seconda edizione di &lt;a href=&#34;http://hackathon.facile.it/2017.html&#34;&gt;&lt;strong&gt;#FacileHack&lt;/strong&gt;&lt;/a&gt;, la maratona dedicata a coders, creativi e marketing specialist organizzata dalla nostra azienda che si svolgerà a Milano presso il Talent Garden di via Arcivescovo Calabiana.&lt;/p&gt;

&lt;p&gt;Attesa grande partecipazione all&amp;rsquo;evento anche da fuori Italia, le registrazioni sono state chiuse per sold-out all&amp;rsquo;inizio di questo mese.&lt;/p&gt;

&lt;p&gt;In meno di 24 ore gli &lt;em&gt;hackers&lt;/em&gt; partecipanti dovranno confrontarsi, mettendo a dura prova le proprie capacità fisiche e creative, per presentare un&amp;rsquo;idea o un prototipo in grado di ottenere il punteggio massimo della &lt;a href=&#34;http://hackathon.facile.it/2017.html#giuria&#34;&gt;giuria&lt;/a&gt; di qualità.&lt;/p&gt;

&lt;p&gt;Saranno &lt;strong&gt;Cristina Bianchini&lt;/strong&gt; (Vodafone Italia), &lt;strong&gt;Fabio Lalli&lt;/strong&gt; (IQUII), &lt;strong&gt;Deborah Raccagni&lt;/strong&gt; (Università Bocconi), &lt;strong&gt;Moreno Soppelsa&lt;/strong&gt; (Giornalista) e il nostro &lt;strong&gt;Mauro Giacobbe&lt;/strong&gt; (Facile.it), i componenti della giuria che avrà l&amp;rsquo;arduo compito di valutare il lavoro dei partecipanti all&amp;rsquo;hackathon sulla base di quattro criteri: attinenza alla sfida proposta, fattibilità tecnica, UI/UX e creatività.&lt;/p&gt;

&lt;p&gt;Il team proclamato vincitore di #FacileHack 2017 riceverà in premio un voucher del valore di 500 euro, per ogni componente della squadra, da spendere in formazione professionale attraverso i corsi di alto livello messi a disposizione dai partner &lt;a href=&#34;https://www.enter.it/it/ecosystem/education/&#34;&gt;LOG.ED&lt;/a&gt;, &lt;a href=&#34;http://www.ninjacademy.it/&#34;&gt;Ninja Academy&lt;/a&gt; e &lt;a href=&#34;https://www.fluentify.com/&#34;&gt;Fluentify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Non ci rimane che augurare buon #FacileHack da tutti noi!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Looking back at Symfony Day Rome 2016</title>
      <link>https://engineering.facile.it/blog/eng/looking-back-at-symfony-day-rome-2016/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/looking-back-at-symfony-day-rome-2016/</guid>
      <description>

&lt;p&gt;Every year the &lt;a href=&#34;http://www.grusp.org/&#34;&gt;GrUSP&lt;/a&gt;, in cooperation with one of the italian PHP user groups, organizes the italian &lt;strong&gt;&lt;a href=&#34;http://symfony.com/&#34;&gt;Symfony&lt;/a&gt;&lt;/strong&gt; conference. This year the &lt;a href=&#34;http://2016.symfonyday.it/&#34;&gt;event&lt;/a&gt; was organized in the Capital on 28th October with the help of &lt;a href=&#34;http://roma.grusp.org/&#34;&gt;PHP User Group Roma&lt;/a&gt;, and a part of Facile Dev Team was there for the occasion. In Facile we believe attending to events like this is a good way to learn new things, share practical experiences and improve our network.&lt;/p&gt;

&lt;p&gt;This post would be a short recap of all the talks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://engineering.facile.it/images/looking-back-at-symfony-day-rome-2016/faciledev_symfonyday_2016.jpg&#34; alt=&#34;A part of Facile Dev Team&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;schedule&#34;&gt;Schedule&lt;/h1&gt;

&lt;h2 id=&#34;symfony-and-micro-not-so-much-service&#34;&gt;Symfony and micro (not so much) service&lt;/h2&gt;

&lt;p&gt;Talk by: &lt;strong&gt;&lt;a href=&#34;https://twitter.com/_orso_&#34;&gt;Michele Orselli&lt;/a&gt;&lt;/strong&gt;
&lt;br/&gt;Duration: 30 minutes&lt;/p&gt;

&lt;p&gt;Michele Orselli presented a case study of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Monolithic_application&#34;&gt;monolithic application&lt;/a&gt; broken down into many smaller microservices. How many ways can we split a webapp? Why smaller is better? How services can interact each other? In his talk Michele answered all those questions focusing on all the advantages of the proposed architecture and a few common pitfalls.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View slides &lt;a href=&#34;http://www.slideshare.net/MicheleOrselli/symfony-e-micro-non-cosi-tanto-services&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;scaling-symfony-apps&#34;&gt;Scaling Symfony apps&lt;/h2&gt;

&lt;p&gt;Talk by: &lt;strong&gt;&lt;a href=&#34;https://twitter.com/mat_teo8&#34;&gt;Matteo Moretti&lt;/a&gt;&lt;/strong&gt;
&lt;br/&gt;Duration: 45 minutes&lt;/p&gt;

&lt;p&gt;A scalable application must support an increasing amount of data or a growing number of users. In his talk, Matteo Moretti described the architecture needed to scale. He divided the overall architecture into 4 main components: web server, sessions, database and the filesystem. He explained the right configuration to his main purpose: improving performance of a webapp.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View slides &lt;a href=&#34;http://www.slideshare.net/matteomoro8/scaling-symfony-apps&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;e-commerce-with-symfony-from-case-study-to-reality&#34;&gt;E-commerce with Symfony: from case study to reality&lt;/h2&gt;

&lt;p&gt;Talk by: &lt;strong&gt;&lt;a href=&#34;https://twitter.com/dymissy&#34;&gt;Simone D&amp;rsquo;Amico&lt;/a&gt;&lt;/strong&gt;
&lt;br/&gt;Duration: 30 minutes&lt;/p&gt;

&lt;p&gt;Sylius, Elcodi, Thelia, Sonata Project, Well Commerce, Shop Plus, Aimeos: these are the most popular results you can find if you google  &amp;ldquo;e-commerce solution with Symfony&amp;rdquo;. But which one is the final winner? Why choosing one or another? Simone D&amp;rsquo;Amico reviewed all of these frameworks and libraries comparing strengths and drawbacks. Moreover he clarified the stack he used to build an e-commerce platform.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View slides &lt;a href=&#34;http://www.slideshare.net/dymissy/ecommerce-con-sf-dal-case-study-alla-realt&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-journey-into-symfony-form-component&#34;&gt;A journey into Symfony form component&lt;/h2&gt;

&lt;p&gt;Talk by: &lt;strong&gt;&lt;a href=&#34;https://twitter.com/SamueleLilli&#34;&gt;Samuele Lilli&lt;/a&gt;&lt;/strong&gt;
&lt;br/&gt;Duration: 45 minutes&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/forms.html&#34;&gt;Symfony form component&lt;/a&gt; is the main obstacle for beginners and newbies in the Symfony world. Samuele Lilli gave a talk with the purpose to clarify this hot topic with a lot of examples and code snippets. He started from the simplest form examples to more advanced ones. He revealed a lot of tips and explanations for several scenarios in order to make this powerful component understandable and manageable by everyone.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View slides &lt;a href=&#34;http://www.slideshare.net/SamueleLilli/symfony-day-2016&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://engineering.facile.it/images/looking-back-at-symfony-day-rome-2016/symfonyday_collage.jpg&#34; alt=&#34;Symfony Day 2016&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;php7-and-rich-domain-model&#34;&gt;PHP7 and Rich Domain Model&lt;/h2&gt;

&lt;p&gt;Talk by: &lt;strong&gt;&lt;a href=&#34;https://twitter.com/garakkio&#34;&gt;Massimiliano Arione&lt;/a&gt;&lt;/strong&gt;
&lt;br/&gt;Duration: 30 minutes&lt;/p&gt;

&lt;p&gt;In this talk Massimiliano Arione told about his experience in the migration to PHP7 of a Symfony based project. Particularly he focused on the usage of type hinting and return types and the issues encountered with an &lt;a href=&#34;https://en.wikipedia.org/wiki/Anemic_domain_model&#34;&gt;Anemic Domain Model&lt;/a&gt; approach suggested by the framework official documentation. He showed how to combine a Rich Domain Model without giving up new language features.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View slides &lt;a href=&#34;http://www.slideshare.net/garak/php7-e-rich-domain-model&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;relevance-sorting-with-elasticsearch-and-a-bit-of-maths&#34;&gt;Relevance sorting with Elasticsearch &amp;amp; a bit of maths&lt;/h2&gt;

&lt;p&gt;Talk by: &lt;strong&gt;&lt;a href=&#34;https://twitter.com/mattbit_&#34;&gt;Matteo Dora&lt;/a&gt;&lt;/strong&gt;
&lt;br/&gt;Duration: 45 minutes&lt;/p&gt;

&lt;p&gt;The main topic of the talk was &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;. Elasticsearch is a distributed, RESTful search and analytics engine with a great Symfony integration. Matteo Dora, the speaker of this talk, explained how to deal when the sorting by relevance becomes hard using the right amount of math and &lt;a href=&#34;https://github.com/FriendsOfSymfony/FOSElasticaBundle&#34;&gt;FOSElasticaBundle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View slides &lt;a href=&#34;https://speakerdeck.com/mattbit/elasticsearch-and-a-bit-of-maths&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;command-the-easy-way&#34;&gt;Command: the easy way&lt;/h2&gt;

&lt;p&gt;Talk by: &lt;strong&gt;&lt;a href=&#34;https://twitter.com/aczepod&#34;&gt;Antonio Carella&lt;/a&gt;&lt;/strong&gt;
&lt;br/&gt;Duration: 30 minutes&lt;/p&gt;

&lt;p&gt;Antonio Carella illustrated a real case how to create command-line commands using the &lt;a href=&#34;https://symfony.com/doc/current/console.html&#34;&gt;Symfony console component&lt;/a&gt;. He showed how console commands can be used for any recurring task, such as cronjobs, imports, or other batch jobs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View slides &lt;a href=&#34;http://www.slideshare.net/antoninocarella1/command-the-easy-way&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;orm-hero&#34;&gt;ORM hero&lt;/h2&gt;

&lt;p&gt;Talk by: &lt;strong&gt;&lt;a href=&#34;https://twitter.com/toretto460&#34;&gt;Simone Di Maulo&lt;/a&gt;&lt;/strong&gt;
&lt;br/&gt;Duration: 45 minutes&lt;/p&gt;

&lt;p&gt;This talk was a journey in the &lt;em&gt;magical world&lt;/em&gt; of &lt;a href=&#34;http://www.doctrine-project.org/&#34;&gt;Doctrine&lt;/a&gt;, the most known ORM for Symfony and not only. Simone Di Maulo described how Doctrine works under the hood to better understand when and why to use its features.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View slides &lt;a href=&#34;http://www.slideshare.net/SimoneDiMaulo/orm-hero&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MessagePack: an alternative to JSON?</title>
      <link>https://engineering.facile.it/blog/eng/message-pack-an-alternative-to-json/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/message-pack-an-alternative-to-json/</guid>
      <description>

&lt;p&gt;When we talk about data interchange in web applications, &lt;strong&gt;&lt;a href=&#34;http://www.json.org/&#34;&gt;JSON&lt;/a&gt;&lt;/strong&gt; is the de-facto standard, especially in developing RESTful web services. JSON won against its antagonist &lt;a href=&#34;https://www.w3.org/XML/&#34;&gt;XML&lt;/a&gt; (SOAP) without a battle, but it didn&amp;rsquo;t prevent the development of alternatives like &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Google’s &lt;strong&gt;Protocol Buffers&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://avro.apache.org/&#34;&gt;Apache &lt;strong&gt;Avro&lt;/strong&gt;&lt;/a&gt; or &lt;strong&gt;&lt;a href=&#34;http://msgpack.org/&#34;&gt;MessagePack&lt;/a&gt;&lt;/strong&gt;. In being thorough, we should also mention &lt;a href=&#34;http://www.gzip.org/&#34;&gt;gzip&lt;/a&gt; JSON compression (sometimes called &amp;ldquo;&lt;em&gt;JSONC&lt;/em&gt;&amp;rdquo;), and &lt;a href=&#34;http://bsonspec.org/&#34;&gt;BSON&lt;/a&gt;, a bin­ary-en­coded seri­al­iz­a­tion of JSON-like doc­u­ments, both derived directly from JSON. In this article we&amp;rsquo;ll discuss MessagePack in depth.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://engineering.facile.it/images/message-pack-an-alternative-to-json/msgpack.png&#34; alt=&#34;MessagePack&#34; /&gt;
&lt;em&gt;JSON Vs MessagePack (source: &lt;a href=&#34;http://msgpack.org/&#34;&gt;msgpack.org&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-is-messagepack&#34;&gt;What is MessagePack?&lt;/h1&gt;

&lt;p&gt;« &lt;em&gt;MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it&amp;rsquo;s faster and smaller&lt;/em&gt; ». To start using MessagePack we need to convert our application objects into MessagePack format: this process is called &lt;em&gt;serialization&lt;/em&gt;, while the reverse process is called &lt;em&gt;deserialization&lt;/em&gt;. The following example can help us better understand what we&amp;rsquo;re talking about. Consider this simple JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;id&amp;quot;: 4,                    // integer
	&amp;quot;isActive&amp;quot;: true,           // boolean
	&amp;quot;fullname&amp;quot;: &amp;quot;Homer Simpson&amp;quot; // string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON requires 56 bytes to represent a very simple user object, while MessagePack only needs 38 bytes (compression ratio 1.47, yielding a 32% saving in size). See below the output of the serialization process for the above JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;83 a2 69 64 04 a8 69 73 41 63 74 69 76 65 c3 a8 66 75 6c 6c 6e 61 6d 65 ad 48 6f 6d 65 72 20 53 69 6d 70 73 6f 6e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see how MessagePack serialization works by reading the &lt;a href=&#34;https://github.com/msgpack/msgpack/blob/master/spec.md&#34;&gt;official specification&lt;/a&gt;. Also, we can split the previous hexadecimal representation to emphasize and explain data types as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;83                                          // 3-element map
a2 69 64                                    // 2-byte string &amp;quot;id&amp;quot;
04                                          // integer 4
a8 69 73 41 63 74 69 76 65                  // 8-byte string &amp;quot;isActive&amp;quot; 
c3                                          // boolean true
a8 66 75 6c 6c 6e 61 6d 65                  // 8-byte string &amp;quot;fullname&amp;quot;
ad 48 6f 6d 65 72 20 53 69 6d 70 73 6f 6e   // 13-byte string &amp;quot;Homer Simpson&amp;quot;
                                            // total 38 bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&amp;rsquo;s very simple to figure out the meaning of the sentence « &lt;em&gt;Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves&lt;/em&gt; » reported in the headline of MessagePack website.&lt;/p&gt;

&lt;p&gt;The main features of MessagePack are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it&amp;rsquo;s designed for network communication and to be transparently converted from and to JSON;&lt;/li&gt;
&lt;li&gt;it supports in-place updating, so it&amp;rsquo;s possible to modify part of a stored object without reserializing it as a whole;&lt;/li&gt;
&lt;li&gt;it has a flexible &lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_procedure_call&#34;&gt;Remote Procedure Call (RPC)&lt;/a&gt; and streaming API implementation;&lt;/li&gt;
&lt;li&gt;it supports &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_system#Static_type_checking&#34;&gt;static-type-checking&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;supported-data-types&#34;&gt;Supported data types&lt;/h1&gt;

&lt;p&gt;Data types listed by the specification are very similar to those in JSON, that is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Integer&lt;/strong&gt; represents an &lt;code&gt;integer&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boolean&lt;/strong&gt; represents &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nil&lt;/strong&gt; represents &lt;code&gt;nil&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Float&lt;/strong&gt; represents a &lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_floating_point&#34;&gt;IEEE 754&lt;/a&gt; double precision floating point numbers including &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String&lt;/strong&gt; is a &lt;code&gt;raw type&lt;/code&gt; and it represents a UTF-8 string;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binary&lt;/strong&gt; is a &lt;code&gt;raw type&lt;/code&gt; and it represents a binary data using byte array;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array&lt;/strong&gt; represents a sequence of objects;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Map&lt;/strong&gt; represents a dictionary (key-value pairs of objects);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extension&lt;/strong&gt; represents a tuple of data whose meaning is defined by applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;a-naive-benchmark&#34;&gt;A naive benchmark&lt;/h1&gt;

&lt;p&gt;Up to this point our reasoning was focused on &lt;strong&gt;space efficiency&lt;/strong&gt;, but a good theoretical computing scientist would have criticized us since we didn&amp;rsquo;t mention &lt;strong&gt;time complexity&lt;/strong&gt;. In fact, the process of data &lt;em&gt;compression&lt;/em&gt; and &lt;em&gt;decompression&lt;/em&gt; is not negligible. We can analyze and compare, for example, the time required to parse a JSON document and to unpack a MessagePack document: that&amp;rsquo;s not completely scientific, but it&amp;rsquo;s a start.&lt;/p&gt;

&lt;p&gt;We wrote two &lt;strong&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;&lt;/strong&gt; scripts to execute 1 million JSON parsing and 1 million MessagePack unpacking operations of a &lt;a href=&#34;https://github.com/salvatorecordiano/facile-it-message-pack-benchmark/blob/master/document.json&#34;&gt;sample document&lt;/a&gt; containing the same data in the two formats.&lt;/p&gt;

&lt;p&gt;A simplified version of the code could be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// inside script &amp;quot;test_parse_json.js&amp;quot;
for (var i = 0;i&amp;lt;1000000;i++) {
    JSON.parse(jsonDocument); // JSON document parsing
}

// inside script &amp;quot;test_unpack_msgpack.js&amp;quot;
for (var i = 0;i&amp;lt;1000000;i++) {
    msgpack.unpack(msgPackDocument); // MessagePack document unpacking
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To easily profile our scripts we can run them as below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;aiace:msgpack parallel$ time node test_parse_json.js

real	0m47.296s
user	0m47.202s
sys	0m0.059s

aiace:msgpack parallel$ time node test_unpack_msgpack.js

real	1m47.244s
user	1m47.050s
sys	0m0.120s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Numbers are self-explanatory: the MessagePack binary is &lt;em&gt;smaller&lt;/em&gt; than the minified JSON, but MessagePack deserialization is clearly &lt;em&gt;slower&lt;/em&gt; than JSON parsing process.&lt;/p&gt;

&lt;p&gt;Before going on, we also need to say that all tests are executed in the following described environment and the full code of this benchmark is free available &lt;a href=&#34;https://github.com/salvatorecordiano/facile-it-message-pack-benchmark/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;// Machine
OS : Darwin 15.6 (x64)
RAM: 16.384 MB
CPU: 2.200 MHz Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz

// Runtime versions
aiace:msgpack parallel$ node -v
v6.8.1
aiace:msgpack parallel$ npm -v
3.10.9

// Module versions
aiace:msgpack parallel$ npm list msgpack
benchmark-msgpack@1.0.0 /Users/parallel/Facile/msgpack
└── msgpack@1.0.2

aiace:msgpack parallel$ npm list fs
benchmark-msgpack@1.0.0 /Users/parallel/Facile/msgpack
└── fs@0.0.1-security

aiace:msgpack parallel$ npm list assert
benchmark-msgpack@1.0.0 /Users/parallel/Facile/msgpack
└── assert@1.4.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;MessagePack allows to save more than 40% of network bandwidth consumption with little more than one line of code. A smaller payload means that less data are transmitted, and that&amp;rsquo;s very useful in &lt;strong&gt;mobile&lt;/strong&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_of_things&#34;&gt;&lt;strong&gt;Internet of Things (IoT)&lt;/strong&gt;&lt;/a&gt; applications, where there&amp;rsquo;s special care in power efficiency; but we should also pay attention to the overall size of each request, to avoid the absurd situation in which the &lt;em&gt;header&lt;/em&gt; is larger than the &lt;em&gt;payload&lt;/em&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Overhead_(computing)&#34;&gt;overhead&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to underline that, while MessagePack is supported by over &lt;a href=&#34;http://msgpack.org/#languages&#34;&gt;50 programming languages&lt;/a&gt;, it doesn&amp;rsquo;t seem to be particularly efficient from a computational perspective, and can be hard to debug due to being non human-readable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Event-driven serverless applications</title>
      <link>https://engineering.facile.it/blog/eng/event-driven-serverless-applications/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/event-driven-serverless-applications/</guid>
      <description>

&lt;p&gt;If we think about computing in the Cloud Era, our mind is immediately drawn towards virtual machines and containers. Therefore, for example, when building a production environment with both approaches we think about the need of patching the operating system and/or upgrading the container. At the end of 2014 &lt;strong&gt;Amazon Web Services&lt;/strong&gt; (AWS) announced a new service called &amp;ldquo;&lt;strong&gt;&lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;Lambda&lt;/a&gt;&lt;/strong&gt;&amp;rdquo;, that allows us to focus on business logic and not on infrastructure.&lt;/p&gt;

&lt;h1 id=&#34;what-is-lambda&#34;&gt;What is Lambda?&lt;/h1&gt;

&lt;p&gt;As reported on their website: « &lt;em&gt;AWS Lambda is a serverless compute service that runs your code highly-available in the cloud in response to events and it automatically performs all the administration of the compute resources for you&lt;/em&gt; ». In the previous sentence is condensed all the power of Lambda, that we can summarize with the following key concepts: &lt;strong&gt;&lt;a href=&#34;#serverless-architecture&#34;&gt;serverless architecture&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&#34;#high-availability&#34;&gt;high-availability&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&#34;#event-driven&#34;&gt;event-driven&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;#zero-administration&#34;&gt;zero administration&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://engineering.facile.it/images/event-driven-serverless-applications/aws-lambda-key-concepts.png&#34; alt=&#34;AWS Lambda key concepts&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;serverless-architecture&#34;&gt;Serverless architecture&lt;/h2&gt;

&lt;p&gt;Lambda is completely &amp;ldquo;serverless&amp;rdquo;, a term that can be considered misleading: obviously Lambda uses physical servers to run your code, but we, as the service&amp;rsquo;s users, don’t take care of everything required to do it. We just need to upload our code on AWS console and it handles capacity, scaling, monitoring, logging and security without any server to manage.
Strictly speaking, functions are executed in containers, and kernel-based virtualization is very useful in this context, because it allows to build multiple isolated environments in short time.
A more detailed explanation of serverless architectures can be found &lt;a href=&#34;http://www.martinfowler.com/articles/serverless.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;high-availability&#34;&gt;High-availability&lt;/h2&gt;

&lt;p&gt;AWS Lambda maintains compute capacity across multiple availability zones in each region - at the moment there are 8 regions distributed among Americas, EMEA and Asia Pacific - in this way Lambda is able to protect your code against data center failures.&lt;/p&gt;

&lt;h2 id=&#34;event-driven&#34;&gt;Event-driven&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;Event-driven&amp;rdquo; means that a Lambda function is triggered when an event occurs, so the flow of the application is mainly driven by events. In this kind of architecture all Lambda functions are event consumers, because they are invoked by an event and they have the responsibility to process it.
An event comes to life, for example, whenever:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a new item is created on an Amazon DynamoDB table;&lt;/li&gt;
&lt;li&gt;a file is deleted on an Amazon S3 bucket;&lt;/li&gt;
&lt;li&gt;an Amazon API Gateway is called;&lt;/li&gt;
&lt;li&gt;et cetera&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but we can also use AWS SDK to invoke a function directly on a mobile or web app back-end.
This is a good way to write application logic without designing and maintaining a centralized workflow.
More about event-driven programming &lt;a href=&#34;https://en.wikipedia.org/wiki/Event-driven_programming&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;zero-administration&#34;&gt;Zero administration&lt;/h2&gt;

&lt;p&gt;All the work you usually need to do in order to assure that your application works in a scalable, reliable and durable way is taken care by the service itself.  Behind the scenes the system performs all the needed administration for the compute resources, including server and operating system maintenance, code and security patch deployment, code monitoring and logging, and automatically matches the incoming rate of functions invocation for us, to assure capacity provisioning and automatic scaling.&lt;/p&gt;

&lt;h1 id=&#34;lambda-functions&#34;&gt;Lambda functions&lt;/h1&gt;

&lt;p&gt;The code we run on AWS Lambda is called a &amp;ldquo;&lt;strong&gt;lambda function&lt;/strong&gt;&amp;rdquo;. The name &amp;ldquo;lambda&amp;rdquo; derives from the 11th letter of the Greek alphabet. In general a &lt;em&gt;lambda&lt;/em&gt;, also called &lt;em&gt;anonymous function&lt;/em&gt;, is a function that&amp;rsquo;s defined inline (sometimes called &lt;em&gt;closure&lt;/em&gt;) and passed to some other function, method or procedure, to be stored or executed: the &lt;em&gt;anonymity&lt;/em&gt; is given by the fact that we don&amp;rsquo;t give a name to the function, but we just define it at the moment of need.&lt;/p&gt;

&lt;h2 id=&#34;supported-languages&#34;&gt;Supported languages&lt;/h2&gt;

&lt;p&gt;Right now Lambda functions natively support code written in &lt;strong&gt;Java&lt;/strong&gt;, &lt;strong&gt;Node.js&lt;/strong&gt; and &lt;strong&gt;Python&lt;/strong&gt;, but we can run C, Go and PHP using a Node.js wrapper. Hopefully Amazon will add official support for other languages such as PHP, Go, C, Swift and many more. We can also include libraries, even native ones.&lt;/p&gt;

&lt;h2 id=&#34;stateless-code&#34;&gt;Stateless code&lt;/h2&gt;

&lt;p&gt;When we write a function our code must be &lt;strong&gt;stateless&lt;/strong&gt;, thus everything begins and ends in the same request, and any persistent state is stored in a storage service (not necessarily within Amazon world). Keeping functions stateless is the keystone to enable the system to instantly launch new instances when needed, to serve the incoming events.&lt;/p&gt;

&lt;p&gt;In addition to the code, each Lambda function has many configuration informations, such as name, description, runtime, handler, memory, max execution time and execution role. A detailed explanation is available &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction-function.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;invocation-types&#34;&gt;Invocation types&lt;/h2&gt;

&lt;p&gt;We can invoke a Lambda function directly, for example using the Invoke API, or indirectly, for example using the Amazon API Gateway. A function invocation needs to specify the &lt;code&gt;InvocationType&lt;/code&gt;. There are three invocation types allowed: &lt;code&gt;RequestResponse&lt;/code&gt;, &lt;code&gt;Event&lt;/code&gt; and &lt;code&gt;DryRun&lt;/code&gt;. Each one of them has different purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RequestResponse&lt;/code&gt;: in this case we expect a &lt;strong&gt;synchronous&lt;/strong&gt; behavior. The function receives input parameters as an event, and returns a result;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Event&lt;/code&gt;: in this case we expect an &lt;strong&gt;asynchronous&lt;/strong&gt; behavior. The function receives input parameters as an event, returns immediately no value, but continues its execution asynchronously;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DryRun&lt;/code&gt;: it&amp;rsquo;s used to verify the access to a function without running it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://engineering.facile.it/images/event-driven-serverless-applications/synchronous-vs-asynchronous-behaviour.png&#34; alt=&#34;Synchronous vs asynchronous behaviour&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;lambda-alternatives&#34;&gt;Lambda alternatives&lt;/h1&gt;

&lt;p&gt;Serverless is a new cloud computing trend, and accordingly many cloud providers – in addition to Amazon - started offering their own &lt;em&gt;Function as a Service&lt;/em&gt; (FaaS), for example &lt;strong&gt;Google&lt;/strong&gt; with its &lt;a href=&#34;https://cloud.google.com/functions/&#34;&gt;Cloud Functions&lt;/a&gt;, &lt;strong&gt;IBM&lt;/strong&gt; with its &lt;a href=&#34;https://developer.ibm.com/openwhisk/&#34;&gt;OpenWhisk&lt;/a&gt;, &lt;strong&gt;Auth0&lt;/strong&gt; with its &lt;a href=&#34;https://webtask.io/&#34;&gt;WebTasks&lt;/a&gt; and &lt;strong&gt;Microsoft&lt;/strong&gt; with its &lt;a href=&#34;https://functions.azure.com/&#34;&gt;Azure Functions&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;Functions are very useful when we want to build lightweight applications based on &lt;em&gt;microservices&lt;/em&gt; with no server. Their approach could be considered a way to achieve fine-grained microservices, in which there is a relation one-to-one between functions and endpoints instead of one service per one resource: for this reason they are often referred to as &lt;em&gt;nanoservices&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;They could help developers in focusing on the code, while only charging for code really running in an infrastructure that&amp;rsquo;s able to autonomously grow upon demand, without lots of efforts in managing it. With functions, we can see our code as a series of small and independent building blocks, that can be easily replaced or connected with other blocks using events. Also, Lamba could help small team in reusing existing skills while adopting different languages, in order to develop software that better matches business&amp;rsquo; requirements.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>