<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lorenzo on Facile.it Engineering</title>
    <link>/authors/lorenzo/</link>
    <description>Recent content in Lorenzo on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/authors/lorenzo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Write a filesystem with FUSE</title>
      <link>/blog/eng/write-filesystem-fuse/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/write-filesystem-fuse/</guid>
      <description>

&lt;p&gt;During the past year I experimented a lot with file systems in Userspace using FUSE, I wrote this post to share my thoughts about what I did and to give you a starting point to do something by yourself.&lt;/p&gt;

&lt;h1 id=&#34;introduction:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;A filesystem is that piece of software that is in charge of storing, organizing and generally taking care of data represented as files and directories.
If you are using a device to read this post you are probably using at least one filesystem at the moment.&lt;/p&gt;

&lt;p&gt;Implementing a filesystem is not an easy task to accomplish and requires that a few parts of it have to be written at kernel level, fortunately that&amp;rsquo;s not our case since we are not writing a real on-disk filesystem, but rather we want to write something on top of it to solve a specific problem.&lt;/p&gt;

&lt;p&gt;The most common tool to do that in user space is precisely &lt;strong&gt;FUSE, Filesystem in USErspace&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are a lot of filesystem examples built on top of FUSE out there that cover the most different use cases like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gluster.org/&#34;&gt;GlusterFS&lt;/a&gt;: scalable network filesystem&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/libfuse/sshfs&#34;&gt;SSHFS&lt;/a&gt;: allows mounting a remote filesystem over SSH&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sr71.net/projects/gmailfs/&#34;&gt;GMailFS&lt;/a&gt;: allows to use GMail storage as a filesystem&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://loggedfs.sourceforge.net/&#34;&gt;LoggedFS&lt;/a&gt;: filesystem that logs operations that happens in it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main &lt;strong&gt;advantages&lt;/strong&gt; of FUSE over writing a low level kernel filesystem are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is usable by non-privileged users;&lt;/li&gt;
&lt;li&gt;Clean and easy interface to do FS operations;&lt;/li&gt;
&lt;li&gt;Has bindings in most available programming language;&lt;/li&gt;
&lt;li&gt;No need of advanced kernel development skills;&lt;/li&gt;
&lt;li&gt;Comes with user isolation, more secure;&lt;/li&gt;
&lt;li&gt;Since you are not hacking in kernel space there are a few chances that a crash in your program takes down the entire system;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However there are also a few &lt;strong&gt;disadvantages&lt;/strong&gt; of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The target system need libfuse installed;&lt;/li&gt;
&lt;li&gt;Slower than low level implementations;&lt;/li&gt;
&lt;li&gt;Not the best option if you need multiple users to access your filesystem;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s a flow-chart diagram showing how FUSE works, source: &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:FUSE_structure.svg&#34;&gt;Wikimedia Commons&lt;/a&gt;
&lt;img src=&#34;/images/write-filesystem-fuse/FUSE_structure.svg&#34; alt=&#34;A flow-chart diagram showing how FUSE works&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;getting-started-with-fuse:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Getting started with FUSE&lt;/h1&gt;

&lt;p&gt;This section of the post is designed to introduce you on how to practically get your hands dirt with FUSE. Anyway you can understand what&amp;rsquo;s going on whether you execute the code or not.&lt;/p&gt;

&lt;h2 id=&#34;build-dependencies:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Build dependencies&lt;/h2&gt;

&lt;p&gt;From now you&amp;rsquo;ll need a few build dependencies and a text editor or an IDE to build and edit the code and do your experiments.&lt;/p&gt;

&lt;h3 id=&#34;linux:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Linux&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;GCC or Clang&lt;/li&gt;
&lt;li&gt;CMake &amp;gt;= 3&lt;/li&gt;
&lt;li&gt;make&lt;/li&gt;
&lt;li&gt;FUSE 2.6 or later&lt;/li&gt;
&lt;li&gt;FUSE development files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To obtain those dependencies you can issue the following commands (depending on your Linux distribution).&lt;/p&gt;

&lt;p&gt;Fedora/CentOS&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install gcc fuse fuse-devel make cmake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Debian/Ubuntu&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install gcc fuse libfuse-dev make cmake
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mac-osx:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Mac OSX&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Command line tools for Xcode (contains Clang and make)&lt;/li&gt;
&lt;li&gt;CMake &amp;gt;= 3&lt;/li&gt;
&lt;li&gt;FUSE &amp;gt;= 2.6 or later&lt;/li&gt;
&lt;li&gt;FUSE development files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can obtain all the needed dependencies at the following sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/xcode/features/&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/download/&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://osxfuse.github.io/&#34;&gt;OSXFuse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fuse-api:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;FUSE API&lt;/h2&gt;

&lt;p&gt;The most important thing to be aware of when working with FUSE is its API.
The libfuse library exposes a set of callbacks that you have to implement in order to tell your filesystem how to behave.&lt;/p&gt;

&lt;p&gt;The most complete source of documentation on what are the callbacks and their behavior is the &lt;code&gt;fuse.h&lt;/code&gt; declaration file. You can find an online version &lt;a href=&#34;https://github.com/libfuse/libfuse/blob/579c3b03f57856e369fd6db2226b77aba63b59ff/include/fuse.h#L102-L577&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;example-project:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Example project&lt;/h2&gt;

&lt;p&gt;For the purpose of showing you how simple is the creation of a FUSE filesystem, I wrote this little implementation that, when mounted, only exposes a file named &lt;code&gt;file&lt;/code&gt; and its content.&lt;/p&gt;

&lt;p&gt;You can find the example project on &lt;a href=&#34;https://github.com/fntlnz/fuse-example&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think that the best way to start your own implementation is to take an example and start adding your features.&lt;/p&gt;

&lt;p&gt;So, as first thing clone the example project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/fntlnz/fuse-example.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the project structure is quite simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── CMake
│   └── FindFUSE.cmake
├── CMakeLists.txt
└── fuse-example.c
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cmakelists-txt-https-github-com-fntlnz-fuse-example-blob-master-cmakelists-txt:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;&lt;a href=&#34;https://github.com/fntlnz/fuse-example/blob/master/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;As you may know CMake is a tool used to manage project builds in a cross platform way. The scope of this file is to define what CMake is supposed to do for our project. The &lt;code&gt;CMake/FindFuse.cmake&lt;/code&gt; is needed in order to tell CMake where to find the FUSE related things while compiling/linking.&lt;/p&gt;

&lt;h3 id=&#34;fuse-example-c-https-github-com-fntlnz-fuse-example-blob-master-fuse-example-c:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;&lt;a href=&#34;https://github.com/fntlnz/fuse-example/blob/master/fuse-example.c&#34;&gt;fuse-example.c&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s where the magic actually happen!&lt;/p&gt;

&lt;p&gt;In this example I implemented four of the FUSE API callbacks namely: getattr, open, read, readdir.&lt;/p&gt;

&lt;h4 id=&#34;getattr:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;getattr&lt;/h4&gt;

&lt;p&gt;The getattr callback is in charge of reading the metadata of a given path, this  callback is always called before any operation made on the filesystem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int getattr_callback(const char *path, struct stat *stbuf) {
  memset(stbuf, 0, sizeof(struct stat));

  if (strcmp(path, &amp;quot;/&amp;quot;) == 0) {
    stbuf-&amp;gt;st_mode = S_IFDIR | 0755;
    stbuf-&amp;gt;st_nlink = 2;
    return 0;
  }

  if (strcmp(path, filepath) == 0) {
    stbuf-&amp;gt;st_mode = S_IFREG | 0777;
    stbuf-&amp;gt;st_nlink = 1;
    stbuf-&amp;gt;st_size = strlen(filecontent);
    return 0;
  }

  return -ENOENT;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we are doing here is simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the value of path equals to root &lt;code&gt;/&lt;/code&gt;, we declare it as a directory and return.&lt;/li&gt;
&lt;li&gt;if the value of path equals to filepath &lt;code&gt;/file&lt;/code&gt;, we declare it as a file and explicit its size and then return.&lt;/li&gt;
&lt;li&gt;Otherwise nothing exists at the given path, and we return &lt;code&gt;-ENOENT&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, we are telling FUSE that the current entry is a file or a directory using the &lt;code&gt;stat&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;In general, if the entry is a directory, &lt;code&gt;st_mode&lt;/code&gt; have to be set to &lt;code&gt;S_IFDIR&lt;/code&gt; and &lt;code&gt;st_nlink&lt;/code&gt; to 2, while if it&amp;rsquo;s a file, &lt;code&gt;st_mode&lt;/code&gt; have to be set to &lt;code&gt;S_IFREG&lt;/code&gt; (that stands for regular file) and &lt;code&gt;st_nlink&lt;/code&gt; to 1. Files also require that the &lt;code&gt;st_size&lt;/code&gt; (the full file size) is specified.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/007908799/xsh/sysstat.h.html&#34;&gt;Here&lt;/a&gt; you can find more information about &lt;code&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;open:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;open&lt;/h4&gt;

&lt;p&gt;The open callback is called when the system requests for a file to be opened. Since we don&amp;rsquo;t have real file but only in-memory representations, we are going to implement this callback just because is needed for FUSE to work and therefore return 0.&lt;/p&gt;

&lt;h4 id=&#34;read:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;read&lt;/h4&gt;

&lt;p&gt;This callback is called when FUSE is reading data from an opened file.
It should return exactly the number of bytes requested and fill the second argument &lt;code&gt;buf&lt;/code&gt; with the content of those bytes.
As done in the getattr callback, here I&amp;rsquo;m checking if the given path equals to a known one, I copy the &lt;code&gt;filecontent&lt;/code&gt; into the &lt;code&gt;buf&lt;/code&gt; and then return the requested number of bytes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int read_callback(const char *path, char *buf, size_t size, off_t offset,
    struct fuse_file_info *fi) {

  if (strcmp(path, filepath) == 0) {
    size_t len = strlen(filecontent);
    if (offset &amp;gt;= len) {
      return 0;
    }

    if (offset + size &amp;gt; len) {
      memcpy(buf, filecontent + offset, len - offset);
      return len - offset;
    }

    memcpy(buf, filecontent + offset, size);
    return size;
  }

  return -ENOENT;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;readdir:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;readdir&lt;/h4&gt;

&lt;p&gt;The readdir callback has the task of telling FUSE the exact structure of the accessed directory.
Since at the moment the only available directory is &lt;code&gt;/&lt;/code&gt;, this function always return its representation, we are doing it by filling &lt;code&gt;buf&lt;/code&gt; with the two links for the upper directory &lt;code&gt;..&lt;/code&gt; and current directory &lt;code&gt;.&lt;/code&gt; and with the only file we have: &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int readdir_callback(const char *path, void *buf, fuse_fill_dir_t filler,
    off_t offset, struct fuse_file_info *fi) {
  (void) offset;
  (void) fi;

  filler(buf, &amp;quot;.&amp;quot;, NULL, 0);
  filler(buf, &amp;quot;..&amp;quot;, NULL, 0);

  filler(buf, filename, NULL, 0);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;main:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;main&lt;/h4&gt;

&lt;p&gt;Last but not least, the &lt;code&gt;main&lt;/code&gt; function here is acting as a proxy to the &lt;code&gt;fuse_main&lt;/code&gt; passing arguments through it and configuring it with the implemented FUSE operation callbacks via the &lt;code&gt;fuse_example_operations&lt;/code&gt; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static struct fuse_operations fuse_example_operations = {
  .getattr = getattr_callback,
  .open = open_callback,
  .read = read_callback,
  .readdir = readdir_callback,
};

int main(int argc, char *argv[])
{
  return fuse_main(argc, argv, &amp;amp;fuse_example_operations, NULL);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;build-and-run:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Build and run&lt;/h3&gt;

&lt;p&gt;Do you remember that you installed CMake, make, gcc and libfuse? It&amp;rsquo;s time to use them!&lt;/p&gt;

&lt;p&gt;The first tool we are using is CMake to &lt;strong&gt;check dependencies, setup environment and generate Makefiles&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake -DCMAKE_BUILD_TYPE=Debug .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t want Debug flags and other development related enabled features, just change &lt;code&gt;Debug&lt;/code&gt; to &lt;code&gt;Release&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The second tool we are using is &lt;code&gt;make&lt;/code&gt;, that using the CMake generated &lt;strong&gt;Makefiles&lt;/strong&gt; is now able to build our project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make -j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-j&lt;/code&gt; parts tells make to parallelize the build to all your cores, remove it if you run out of CPU.&lt;/p&gt;

&lt;p&gt;Now that everything is ready, if no build error has occurred, we can enjoy our new filesystem!&lt;/p&gt;

&lt;h3 id=&#34;run:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Run!&lt;/h3&gt;

&lt;p&gt;Before doing anything we need a mountpoint, so let&amp;rsquo;s create the directory where the filesystem will be mounted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir /tmp/example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then, mount the filesystem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./bin/fuse-example -d -s -f /tmp/example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now check that it has been mounted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -la
total 0
drwxr-xr-x.  2 root root   0 Jan  1  1970 .
drwxrwxrwt. 14 root root 320 Jan 10 16:03 ..
-rwxrwxrwx.  1 root root  49 Jan  1  1970 file

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ mount | grep fuse-example
fuse-example on /tmp/example type fuse.fuse-example (rw,nosuid,nodev,relatime,user_id=1000,group_id=1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you may notice, we mounted the filesystem with three arguments which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;d&lt;/strong&gt;: enable debugging&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt;: run single threaded&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;f&lt;/strong&gt;: stay in foreground&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see the list of all mount options using &lt;code&gt;-h&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;thoughts-and-notes:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Thoughts and notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An important thing to notice is that write and read operations by default have a size of 4kb so if your file is, let&amp;rsquo;s say, 399kb you have to deal with the fact that to read it the read callback will be called 100 times with 100 different offset and 99 equals size but one that will have 3kb as size because the file is 399kb and not 400kb so the latest chunk has size 3kb and not 4kb.&lt;/li&gt;
&lt;li&gt;FUSE is more secure than low level kernel development, but security is not free so if you are going to write a network filesystem, for example you may want not to mount it as root.&lt;/li&gt;
&lt;li&gt;By default, accessing the mounted filesystem for other users is not allowed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other-resources:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Other resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hanwen/go-fuse&#34;&gt;Fuse bindings in Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bcle/fuse4js&#34;&gt;Fuse bindings in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/terencehonles/fusepy&#34;&gt;Fuse bindings in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EtiennePerot/fuse-jna&#34;&gt;Fuse bindings in Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/libfuse/libfuse/tree/master/example&#34;&gt;Other examples in C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were my 2 cents, if you are interested in seeing something from me I started a little project on GitHub to create a filesystem that can use online services via FUSE to store data. You can find the project here: &lt;a href=&#34;https://github.com/fntlnz/webfs&#34;&gt;WebFS on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Da sviluppo a produzione con Docker e AWS Elastic Beanstalk</title>
      <link>/blog/ita/da-sviluppo-a-produzione-con-docker-e-aws-elastic-beanstalk/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/da-sviluppo-a-produzione-con-docker-e-aws-elastic-beanstalk/</guid>
      <description>

&lt;h2 id=&#34;in-locale-funzionava:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;In locale funzionava&lt;/h2&gt;

&lt;p&gt;Questo articolo si rivolge a chi ha già una &lt;a href=&#34;https://docs.docker.com/articles/basics&#34;&gt;conoscenza base di docker&lt;/a&gt; e del suo funzionamento e sta cercando come avanzare al passo successivo, usandolo quotidianamente in sviluppo e in produzione.&lt;/p&gt;

&lt;p&gt;Avere un ambiente di sviluppo/test &lt;strong&gt;il più simile possibile&lt;/strong&gt; a quello di produzione aiuta molto nel garantire un &lt;strong&gt;corretto funzionamento dopo il deploy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In uno scenario tipico, lo sviluppatore ha installati sulla propria macchina locale tutti i servizi da cui dipende la sua applicazione, il che comporta quanto segue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nessun tipo di isolamento tra progetti che usano gli stessi servizi (versione, configurazione, dati);&lt;/li&gt;
&lt;li&gt;è difficile avere e mantenere in locale la stessa versione e la stessa configurazione dei servizi in produzione;&lt;/li&gt;
&lt;li&gt;condividere l&amp;rsquo;ambiente di sviluppo con colleghi e collaboratori è difficile se non impossibile;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tutto questo conduce ad una delle peggiori frasi che io abbia mai sentito in tutta la mia esperienza lavorativa:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It works on my machine &lt;em&gt;(in locale funzionava)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/wmm.jpg&#34; alt=&#34;It works on my machine meme&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Potreste pensare che avrei potuto ottenere gli stessi risultati usando Vagrant o una classica macchina virtuale, ma questa soluzione non mi avrebbe dato i benefici di avere un layer di astrazione aggiuntivo senza dovermi preoccupare dell&amp;rsquo;overhead. Infatti posso avere molti più container che girano su una singola macchina di quelli che avrei avuto con la semplice virtualizzazione.&lt;/p&gt;

&lt;h2 id=&#34;bookshelf-uno-scaffale-virtuale:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;Bookshelf: uno scaffale virtuale&lt;/h2&gt;

&lt;p&gt;Per snellire questo articolo ho preparato un&amp;rsquo;&lt;a href=&#34;https://github.com/pennyphp/bookshelf&#34;&gt;applicazione demo&lt;/a&gt; basata su &lt;a href=&#34;http://github.com/pennyphp/penny&#34;&gt;Penny PHP Framework&lt;/a&gt;: è una semplice applicazione per l&amp;rsquo;archiviazione di libri, che consente all&amp;rsquo;utente di creare e visualizzare una lista di libri.&lt;/p&gt;

&lt;h4 id=&#34;download-e-dipendenze:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;Download e dipendenze&lt;/h4&gt;

&lt;p&gt;Per prima cosa, scarichiamo l&amp;rsquo;applicazione dal suo repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/pennyphp/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le dipendenze in PHP sono gestite attraverso &lt;a href=&#34;https://getcomposer.org/&#34;&gt;composer&lt;/a&gt;, e per soddisfarle basta digitare il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gli assets del frontend sono gestiti attraverso &lt;a href=&#34;http://bower.io&#34;&gt;Bower&lt;/a&gt; + &lt;a href=&#34;http://gruntjs.com/&#34;&gt;Grunt&lt;/a&gt;; i due seguenti comandi scaricheranno e compileranno le dipendenze e produrranno gli assets direttamente nella cartella pubblica:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
grunt dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;avviare-l-ambiente-di-sviluppo:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;Avviare l&amp;rsquo;ambiente di sviluppo&lt;/h4&gt;

&lt;p&gt;Come potete vedere l&amp;rsquo;applicazione demo è distribuita con un ambiente di sviluppo docker che potete trovare nella cartella &lt;a href=&#34;https://github.com/pennyphp/bookshelf/tree/master/docker/development&#34;&gt;docker/development&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Osservando il contenuto di &lt;code&gt;docker/development&lt;/code&gt; possiamo trovare altre due cartelle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nginx/&lt;/code&gt;: questa directory contiene un Dockerfile che eredita l&amp;rsquo;immagine da &lt;a href=&#34;https://github.com/fntlnz/dockerfiles/tree/master/nginx&#34;&gt;fntlnz/nginx&lt;/a&gt; per crearne una nuova con la configurazione nginx necessaria;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fpm/&lt;/code&gt;: questa directory contiene un Dockerfile che eredita l&amp;rsquo;immagine da &lt;a href=&#34;https://github.com/fntlnz/dockerfiles/tree/master/php&#34;&gt;fntlnz/php&lt;/a&gt; per crearne una nuova con la configurazione e le estensioni di php-fpm necessarie;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dal momento che non abbiamo Elastic Beanstalk sulla nostra macchina locale (ne parleremo in seguito) e abbiamo bisogno di un modo per orchestrare i nostri container, lo faremo utilizzando &lt;strong&gt;docker-compose&lt;/strong&gt;. Ho deciso di usare Docker Compose al posto del comando &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-local.html&#34;&gt;&lt;strong&gt;eb local&lt;/strong&gt;&lt;/a&gt; (che consente di far girare l&amp;rsquo;ambiente di elastic beanstalk in locale) perché allo stato dell&amp;rsquo;arte compose è più facile da usare e mantenere in locale.&lt;/p&gt;

&lt;h6 id=&#34;il-file-docker-compose-yml:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;Il file &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/h6&gt;

&lt;p&gt;Per farlo dobbiamo creare un file &lt;code&gt;docker-compose.yml&lt;/code&gt; nella nostra root di progetto.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp docker/docker-compose.yml.development docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A questo punto, nel nostro &lt;code&gt;docker-compose.yml&lt;/code&gt; dovremmo avere quattro container da avviare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;il container &lt;strong&gt;Nginx&lt;/strong&gt;, che contiene un paragrafo server in ascolto sulla porta 80.&lt;/li&gt;
&lt;li&gt;il container &lt;strong&gt;fpm&lt;/strong&gt;, che condivide un volume con la macchina host in modo da poter modificare il codice senza bisogno di ricostruire il container; inoltre, il container è collegato al container mysql per consentire agli script php di connettervisi;&lt;/li&gt;
&lt;li&gt;il container &lt;strong&gt;mysql&lt;/strong&gt;, che conterrà i nostri dati di sviluppo;&lt;/li&gt;
&lt;li&gt;il container &lt;strong&gt;redis&lt;/strong&gt;, usato come cache, principalmente da Doctrine;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si noti come, dal momento che &lt;a href=&#34;https://docs.docker.com/userguide/dockerlinks/&#34;&gt;i container sono collegati&lt;/a&gt; è possibile accedere ad un servizio esposto usando il nome assegnato al container collegato; ad esempio, nel nostro caso il container fpm è &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/docker/docker-compose.yml.development#L19-L20&#34;&gt;collegato al container mysql&lt;/a&gt;: è per questo che l&amp;rsquo;host configurato nella &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/config/doctrine.local.php.dist#L13&#34;&gt;configurazione di doctrine locale&lt;/a&gt; è &lt;code&gt;mysql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Se non l&amp;rsquo;avete ancora fatto, dovrete buildare l&amp;rsquo;immagine &lt;code&gt;fpm&lt;/code&gt; e scaricare le immagini &lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt; e &lt;code&gt;redis&lt;/code&gt;; per farlo, digitate il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ora che avete tutto ciò che vi serve potete avviare i container con:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A questo punto i quattro container dovrebbero essere in esecuzione: potete verificare che tutto sia a posto con il comando &lt;code&gt;docker ps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Per proseguire, abbiamo bisogno di conoscere l&amp;rsquo;indirizzo ip del container nginx. Il port forwarding del container nginx è configurato come &lt;code&gt;80:80&lt;/code&gt;, perciò è disponibile su &lt;strong&gt;linux&lt;/strong&gt; agli indirizzi &lt;code&gt;127.0.0.1:80&lt;/code&gt; e &lt;code&gt;localhost:80&lt;/code&gt;, mentre su &lt;strong&gt;OS X&lt;/strong&gt; all&amp;rsquo;indirizzo associato alla docker-machine; per identificarlo, usare il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine env &amp;lt;yourmachinename&amp;gt; | grep DOCKER_HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;È ora di collegarci all&amp;rsquo;ip del nostro container nginx!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/books.png&#34; alt=&#34;Bookshelf screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yay! Il nostro ambiente di sviluppo è in esecuzione!&lt;/p&gt;

&lt;h4 id=&#34;configurare-e-attivare-l-ambiente-di-produzione:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;Configurare e attivare l&amp;rsquo;ambiente di produzione&lt;/h4&gt;

&lt;p&gt;A questo punto ci serve un modo per rilasciare la nostra applicazione in produzione che possa: eseguire container Docker, scalare senza intoppi e possibilmente aver già installato altri interessanti componenti come, ad esempio, per il monitoring.&lt;/p&gt;

&lt;p&gt;La scelta è caduta su &lt;a href=&#34;https://aws.amazon.com/elasticbeanstalk&#34;&gt;AWS Elastic Beanstalk&lt;/a&gt; ha tutto ciò che abbiamo elencato ed ha inoltre una tariffazione più competitiva con un &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;Free Tier&lt;/a&gt; iniziale, sufficiente per far girare questa demo.&lt;/p&gt;

&lt;p&gt;Prima di iniziare abbiamo bisogno di un account &lt;strong&gt;Amazon Web Services&lt;/strong&gt;; se non ne avete ancora uno, potete crearlo &lt;a href=&#34;https://aws.amazon.com/account&#34;&gt;qui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Per configurare, rilasciare e gestire la nostra infrastruttura avremo bisogno del &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html&#34;&gt;comando eb&lt;/a&gt;; per installarlo, digitare:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install awsebcli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Per avere accesso alla piattaforma dalla vostra riga di comando usando il comando &lt;strong&gt;eb&lt;/strong&gt; dovrete configurare uno &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.roles.aeb.html&#34;&gt;&lt;strong&gt;IAM ROLE&lt;/strong&gt;&lt;/a&gt; ed associarlo ad uno &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html&#34;&gt;&lt;strong&gt;IAM User&lt;/strong&gt;&lt;/a&gt;. La creazione assistita di uno IAM User vi &lt;strong&gt;darà due chiavi&lt;/strong&gt;, chiamate &lt;em&gt;AWS Access Key ID&lt;/em&gt; e &lt;em&gt;AWS Secret Access Key&lt;/em&gt;. Ci serviranno durante il prossimo passaggio.&lt;/p&gt;

&lt;p&gt;A questo punto possiamo &lt;strong&gt;initialize&lt;/strong&gt; il nostro progetto Bookshelf. Questo comando ci chiederà le due Access keys, oltre che alcune domande durante l&amp;rsquo;installazione.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ora che il progetto è inizializzato dobbiamo &lt;strong&gt;creare un nuovo ambiente&lt;/strong&gt;. Questo comando creerà effettivamente un&amp;rsquo;istanza &lt;strong&gt;t2.micro EC2&lt;/strong&gt;, i gruppi di sicurezza, il load balancer, le notifiche cloudwatch ecc..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb create bookshelf-production
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prima di rilasciare l&amp;rsquo;applicazione in produzione dobbiamo generare un &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;Token Github per composer&lt;/a&gt;.
Questo è necessario per scaricare tutte le dipendenze senza intoppi.
Per aggiungere il token all&amp;rsquo;ambiente:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb setenv COMPOSER_TOKEN=&amp;lt;your-token-here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ora potete verificare che il sistema sia pronto digitando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quando lo stato dell&amp;rsquo;applicazione diventa &lt;strong&gt;Ready&lt;/strong&gt; potete a tutti gli effetti pubblicare l&amp;rsquo;applicazione con:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il deployment creerà i container descritti in &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/Dockerrun.aws.json&#34;&gt;Dockerrun.aws.json&lt;/a&gt; e i files descritti in &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/.ebextensions/dependencies.config&#34;&gt;dependencies.config&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se vi state chiedendo cosa sia realmente il file &lt;strong&gt;Dockerrun.aws.json&lt;/strong&gt;, basta dire che sta ad Elastic Beanstalk come &lt;code&gt;docker-compose.yml&lt;/code&gt; sta all&amp;rsquo;ambiente locale.&lt;/p&gt;

&lt;p&gt;I file contenuti in &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/.ebextensions/&#34;&gt;.ebextensions&lt;/a&gt; consentono di personalizzare e configurare il software da cui la vostra applicazione dipende. Il file &lt;strong&gt;dependencies.config&lt;/strong&gt; è uno di questi. È proprio lui a risolvere le dipendenze di composer, a compilare gli asset del frontend con grunt e bower e a creare l&amp;rsquo;immagine PHP FPM usata nel &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/docker/production/fpm/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; di produzione. È importante notare che l&amp;rsquo;immagine viene nuovamente costruita solo se il Dockerfile viene modificato.&lt;/p&gt;

&lt;p&gt;Come avrete notato, [Dockerrun.aws.json](&lt;a href=&#34;https://github.com&#34;&gt;https://github.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La configurazione di default dell&amp;rsquo;applicazione Bookshelf riceve i parametri di connessione a Mysql e Redis &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/config/doctrine.global.php&#34;&gt;dalle variabili d&amp;rsquo;ambiente&lt;/a&gt; che sono:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MYSQL_HOST
MYSQL_PORT
MYSQL_USERNAME
MYSQL_PASSWORD
MYSQL_DATABASE
REDIS_HOST
REDIS_PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ognuna di queste variabili d&amp;rsquo;ambiente può essere impostata usando il comando che abbiamo precedentemente usato per &lt;code&gt;COMPOSER_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Potete ottenere i parametri di connessione per Mysql e Redis dopo aver creato &lt;a href=&#34;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CreateInstance.html&#34;&gt;un&amp;rsquo;istanza RDS Mysql DB&lt;/a&gt; e un &lt;a href=&#34;http://docs.aws.amazon.com/opsworks/latest/userguide/other-services-redis-cluster.html&#34;&gt;Cluster ElastiCache Redis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A questo punto, con i container nginx e fpm in esecuzione e i database configurati, potete digitare &lt;code&gt;eb open&lt;/code&gt; per aprire l&amp;rsquo;applicazione in produzione e verificare se tutto è ok!&lt;/p&gt;

&lt;p&gt;La vostra infrastruttura, così com&amp;rsquo;è, è anche già pronta per scalare automaticamente; per muovere i primi passi in questa direzione potete dare un&amp;rsquo;occhiata al comando &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-scale.html&#34;&gt;&lt;code&gt;eb scale&lt;/code&gt;&lt;/a&gt; e alla &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.managing.as.html&#34;&gt;documentazione di AWS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;: Se qualcosa dovesse andare storto potete accedere via ssh nella macchina Elastic Beanstalk EC2 con &lt;code&gt;eb ssh&lt;/code&gt; e analizzare lo stato dei container usando strumenti che già conoscete come &lt;code&gt;docker logs&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;è-fatta:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;È fatta!&lt;/h4&gt;

&lt;p&gt;Ora potete risparmiare un sacco di tempo automatizzando il vostro workflow con docker ed ottenere un ambiente di sviluppo funzionante, auto-contenuto e condivisibile, pur mantenendolo molto simile alla vostra stabile ed efficiente infrastruttura in esecuzione nell&amp;rsquo;ambiente di produzione, sulle cui risorse avete pieno controllo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/good-job.jpg&#34; alt=&#34;congratulations&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From development to production with Docker and AWS Elastic Beanstalk</title>
      <link>/blog/eng/from-development-to-production-with-docker-and-amazon-ecs/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/from-development-to-production-with-docker-and-amazon-ecs/</guid>
      <description>

&lt;h1 id=&#34;it-works-on-my-machine:824629f989995bd0ef3a2fb42ac10127&#34;&gt;It works on my machine&lt;/h1&gt;

&lt;p&gt;This post is addressed to people who already have &lt;a href=&#34;https://docs.docker.com/articles/basics&#34;&gt;basic knowledge about docker&lt;/a&gt;, about how it works and are looking for a way to move to the next step with the goal of using it in development and production day by day.&lt;/p&gt;

&lt;p&gt;Having a development/testing environment &lt;strong&gt;as close as possible&lt;/strong&gt; to the production one helps a lot in assuring that &lt;strong&gt;things will behave correctly when delivered&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In a typical scenario, the developer has all the services on which the application depends installed on his local machine, which means the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there&amp;rsquo;s no isolation between projects using the same services (versions, configurations, data);&lt;/li&gt;
&lt;li&gt;it&amp;rsquo;s hard to have and maintain production-like services&amp;rsquo; versions and configurations in development;&lt;/li&gt;
&lt;li&gt;sharing the development environment with co-workers is difficult if not impossible;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of that leads to one of the worst sentences I&amp;rsquo;ve ever heard saying in my experience:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It works on my machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/wmm.jpg&#34; alt=&#34;It works on my machine meme&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You might think that I could obtain the same results using Vagrant or plain virtual machines but that solution wouldn&amp;rsquo;t give me the benefit of having an extra layer of abstraction without having to worry about the overhead. In fact I can have more and more containers running on a single machine than I can have with virtualization.&lt;/p&gt;

&lt;h1 id=&#34;bookshelf-application:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Bookshelf application&lt;/h1&gt;

&lt;p&gt;To streamline this article I prepared a &lt;a href=&#34;https://github.com/pennyphp/bookshelf&#34;&gt;demo application&lt;/a&gt; using the &lt;a href=&#34;http://github.com/pennyphp/penny&#34;&gt;Penny PHP Framework&lt;/a&gt;: it&amp;rsquo;s a simple book archiving application, that allows the user to create and view a list of books.&lt;/p&gt;

&lt;h2 id=&#34;download-and-dependencies:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Download and dependencies&lt;/h2&gt;

&lt;p&gt;First, download the demo application from its repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/pennyphp/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP Dependencies are managed through &lt;a href=&#34;https://getcomposer.org/&#34;&gt;composer&lt;/a&gt;, and to get them just issue the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Frontend assets are managed through &lt;a href=&#34;http://bower.io&#34;&gt;Bower&lt;/a&gt; + &lt;a href=&#34;http://gruntjs.com/&#34;&gt;Grunt&lt;/a&gt;; the following two commands will respectively download build dependencies and then build the assets, by copying them in the public directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
grunt dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;up-and-running-development-environment:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Up and running development environment&lt;/h2&gt;

&lt;p&gt;As you can see the demo app comes with a docker development environment that can be found under the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/tree/master/docker/development&#34;&gt;docker/development&lt;/a&gt; folder.&lt;/p&gt;

&lt;p&gt;By inspecting the content of the &lt;code&gt;docker/development&lt;/code&gt; folder we can find two directories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nginx/&lt;/code&gt;: this directory contains a Dockerfile that inherits from the &lt;a href=&#34;https://github.com/fntlnz/dockerfiles/tree/master/nginx&#34;&gt;fntlnz/nginx&lt;/a&gt; image to create a new one with the needed nginx configurations;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fpm/&lt;/code&gt;: this directory contains a Dockerfile that inherits from the &lt;a href=&#34;https://github.com/fntlnz/dockerfiles/tree/master/php&#34;&gt;fntlnz/php&lt;/a&gt; image to create a new one with the needed php-fpm configurations and extensions;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because we don&amp;rsquo;t have Elastic Beanstalk on our local machine (we&amp;rsquo;ll talk about it later) and we need a way to orchestrate our containers, we&amp;rsquo;ll do it by using &lt;strong&gt;docker-compose&lt;/strong&gt;. I decided to use Docker Compose instead of using the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-local.html&#34;&gt;&lt;strong&gt;eb local&lt;/strong&gt;&lt;/a&gt; command (which allows to run elastic beanstalk environment in local) because at the state of art compose is easier to use and to manage in local.&lt;/p&gt;

&lt;h4 id=&#34;the-docker-compose-yml:824629f989995bd0ef3a2fb42ac10127&#34;&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;In order to do so we have to create a &lt;code&gt;docker-compose.yml&lt;/code&gt; in our project root.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp docker/docker-compose.yml.development docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, in our &lt;code&gt;docker-compose.yml&lt;/code&gt; we should have four containers to start:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;Nginx&lt;/strong&gt; container, which contains a server block  for the bookshelf application listening on port 80.&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;fpm&lt;/strong&gt; container, which does have a shared volume with the host machine so you can change the code without the need to rebuild the container image; also, the container is linked with the mysql container to allow mysql access from php scripts;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;mysql&lt;/strong&gt; container, which will contain our development data;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;redis&lt;/strong&gt; container, used for caching purposes, mainly by Doctrine;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that since &lt;a href=&#34;https://docs.docker.com/userguide/dockerlinks/&#34;&gt;containers are linked&lt;/a&gt; you can access to an exposed service by using the name given to the linked container; for example, in our case the fpm container is &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/docker/docker-compose.yml.development#L19-L20&#34;&gt;linked to the mysql container&lt;/a&gt;: that&amp;rsquo;s why the configured host is &lt;code&gt;mysql&lt;/code&gt; in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/config/doctrine.local.php.dist#L13&#34;&gt;doctrine local connection configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t done it yet, you need to build the &lt;code&gt;fpm&lt;/code&gt; docker image and download the &lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt; and &lt;code&gt;redis&lt;/code&gt; images; to do so, issue the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you have all what you need you can start the containers with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point the four containers should be up and running: you can check if everything&amp;rsquo;s okay by issuing the &lt;code&gt;docker ps&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;To proceed, we need to know the ip address of our nginx container. Since the nginx container&amp;rsquo;s port forwarding configuration is &lt;code&gt;80:80&lt;/code&gt;, on &lt;strong&gt;linux&lt;/strong&gt; it should be available at &lt;code&gt;127.0.0.1:80&lt;/code&gt; or &lt;code&gt;localhost:80&lt;/code&gt;, while on &lt;strong&gt;OS X&lt;/strong&gt; it should be available at the ip address associated to the docker-machine host; to retrieve it, issue the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine env &amp;lt;yourmachinename&amp;gt; | grep DOCKER_HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s time to point your browser to the nginx container ip address!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/books.png&#34; alt=&#34;Bookshelf screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yay! Our development environment is up and running!&lt;/p&gt;

&lt;h2 id=&#34;up-and-running-production-environment:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Up and running production environment&lt;/h2&gt;

&lt;p&gt;At this point we need a solution to deploy our application in production that can: run Docker containers, scale without hassle and possibly have other nice things already setup like, let&amp;rsquo;s say, monitoring.&lt;/p&gt;

&lt;p&gt;The choice fell on &lt;a href=&#34;https://aws.amazon.com/elasticbeanstalk&#34;&gt;AWS Elastic Beanstalk&lt;/a&gt; because it has all those things and in addition it has a more competitive pricing model with an initial &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;Free Tier&lt;/a&gt; which it is enough to run this demo.&lt;/p&gt;

&lt;p&gt;Before we start we need an &lt;strong&gt;Amazon Web Services&lt;/strong&gt; account, if you don&amp;rsquo;t have one yet, you can create it &lt;a href=&#34;https://aws.amazon.com/account&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To configure, deploy and manage our infrastructure we are going to need the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html&#34;&gt;eb command&lt;/a&gt;, to get it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install awsebcli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to obtain access to the platform from your command line using the &lt;strong&gt;eb&lt;/strong&gt; command you have to setup an &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.roles.aeb.html&#34;&gt;&lt;strong&gt;IAM ROLE&lt;/strong&gt;&lt;/a&gt; and associate it to an &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html&#34;&gt;&lt;strong&gt;IAM User&lt;/strong&gt;&lt;/a&gt;. The IAM User creation wizard will &lt;strong&gt;give you two keys&lt;/strong&gt;, namely the &lt;em&gt;AWS Access Key ID&lt;/em&gt; and the &lt;em&gt;AWS Secret Access Key&lt;/em&gt;. We are going to need them during the next step.&lt;/p&gt;

&lt;p&gt;At this point we can &lt;strong&gt;initialize&lt;/strong&gt; our bookshelf project. This command will prompt us for the two Access keys plus a few question about our setup.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the project is initialized we have to &lt;strong&gt;create a new environment&lt;/strong&gt;. This will actually start a &lt;strong&gt;t2.micro EC2&lt;/strong&gt; instance, create the security groups, the load balancer, cloudwatch alarms etc..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb create bookshelf-production
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before deploying the application to production we have to generate a &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;Github Token for composer&lt;/a&gt;.
This is needed to allow composer to download dependencies without hassle.
To add the token to your environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb setenv COMPOSER_TOKEN=&amp;lt;your-token-here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can check if the system is ready issuing a:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the status becomes &lt;strong&gt;Ready&lt;/strong&gt; you can actually deploy the application with a:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The deployment will create the containers described in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/Dockerrun.aws.json&#34;&gt;Dockerrun.aws.json&lt;/a&gt; and create the files described in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/.ebextensions/dependencies.config&#34;&gt;dependencies.config&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;If you are asking yourslef what the &lt;strong&gt;Dockerrun.aws.json&lt;/strong&gt; actually is, suffice it to say that is to Elastic beanstalk as the &lt;code&gt;docker-compose.yml&lt;/code&gt; is to the local environment.&lt;/p&gt;

&lt;p&gt;The files contained in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/.ebextensions/&#34;&gt;.ebextensions&lt;/a&gt; allows you to customize and configure the software that your application depends on. The &lt;strong&gt;dependencies.config&lt;/strong&gt; is one of them. It actually resolves composer dependencies, build frontend assets using grunt and bower and create the PHP FPM image using the production &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/docker/production/fpm/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;. It&amp;rsquo;s important to note that the image is rebuilt only if changes are made to the Dockerfile.&lt;/p&gt;

&lt;p&gt;As you may have noticed, the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/Dockerrun.aws.json&#34;&gt;Dockerrun.aws.json&lt;/a&gt; contains definitions just for the Nginx and fpm containers. This is because for &lt;strong&gt;Redis&lt;/strong&gt; and &lt;strong&gt;Mysql&lt;/strong&gt; we are going to use respectively &lt;a href=&#34;https://aws.amazon.com/elasticache/&#34;&gt;&lt;strong&gt;Elasticache&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/rds/&#34;&gt;&lt;strong&gt;RDS&lt;/strong&gt;&lt;/a&gt;. RDS and Elasticache are two production ready, scalable and reliable solutions that makes easier to setup a cost-efficient relational database and key value store taking charge of common database administration tasks.&lt;/p&gt;

&lt;p&gt;The Bookshelf application by default is configured to take Mysql and Redis connection parameters &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/config/doctrine.global.php&#34;&gt;from environment variables&lt;/a&gt; which are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MYSQL_HOST
MYSQL_PORT
MYSQL_USERNAME
MYSQL_PASSWORD
MYSQL_DATABASE
REDIS_HOST
REDIS_PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each one of these environment variables can be set using the command we previously used for the &lt;code&gt;COMPOSER_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can obtain Mysql and Redis connection parameters after creating an &lt;a href=&#34;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CreateInstance.html&#34;&gt;RDS Mysql DB instance&lt;/a&gt; and an &lt;a href=&#34;http://docs.aws.amazon.com/opsworks/latest/userguide/other-services-redis-cluster.html&#34;&gt;ElastiCache Redis Cluster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point with the running Nginx and fpm containers and configured databases you can issue an &lt;code&gt;eb open&lt;/code&gt; to open the live production application and see if all&amp;rsquo;s okay!&lt;/p&gt;

&lt;p&gt;As well as ready your infrastructure is also ready to scale and auto scale, to move a first step trough this direction you can take a look at the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-scale.html&#34;&gt;&lt;code&gt;eb scale&lt;/code&gt;&lt;/a&gt; command and at the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.managing.as.html&#34;&gt;AWS documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;: If something went wrong you can ssh into the elastic beanstalk EC2 machine with a &lt;code&gt;eb ssh&lt;/code&gt; and inspect containers status using tools you already know like &lt;code&gt;docker logs&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;you-are-done:824629f989995bd0ef3a2fb42ac10127&#34;&gt;You are done!&lt;/h1&gt;

&lt;p&gt;You can now save a lot of time automating your workflow using docker while having a fully working, self-contained and shareable development environment very close to your running, stable and efficient production infrastructure over which you have full control of the resources.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/good-job.jpg&#34; alt=&#34;congratulations&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP 7 Overview</title>
      <link>/blog/ita/php-7-overview/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/php-7-overview/</guid>
      <description>

&lt;p&gt;Il linguaggio che ha contribuito alla nascita e alla crescita di più del 80% dei siti web oggi online, tra i quali alcuni dei più famosi al mondo, è prossimo a una svolta.&lt;/p&gt;

&lt;p&gt;Secondo la &lt;a href=&#34;https://wiki.php.net/rfc/php7timeline&#34;&gt;timeline ufficiale&lt;/a&gt; PHP 7 sarà rilasciato intorno al &lt;strong&gt;15 Ottobre 2015&lt;/strong&gt;: chi volesse provarlo in anteprima, tuttavia, può trovare binari, rpm, deb, dockerfiles e quant&amp;rsquo;altro su &lt;a href=&#34;http://php7.zend.com/&#34;&gt;php7.zend.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La release 7 costituisce una delle più importanti per PHP, sia in termini di funzionalità che di performance.&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;ultimo anno il team degli internals ha affrontato innumerevoli sfide, tra cui:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implementazione dell&amp;rsquo;&lt;a href=&#34;http://c2.com/cgi/wiki?AbstractSyntaxTree&#34;&gt;Abstract Syntax Tree&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Riscrittura di grosse porzioni dello &lt;strong&gt;Zend Engine&lt;/strong&gt; che ora può beneficiare di nuove strutture dati e gestione delle risorse ottimizzata;&lt;/li&gt;
&lt;li&gt;Disposizione di solide basi per aprire il linguaggio a futuri miglioramenti come la &lt;a href=&#34;https://en.wikipedia.org/wiki/Just-in-time_compilation&#34;&gt;Just in Time Compilation&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Implementazione di un corposo set di nuove feature, come vedremo a breve.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;performance:815871a857d9019d8dba5e4073c801e4&#34;&gt;Performance&lt;/h2&gt;

&lt;p&gt;Sull&amp;rsquo;onda degli ottimi risultati ottenuti dal team di HHVM, anche il team degli internals ha iniziato a lavorare estensivamente al miglioramento delle performance dell&amp;rsquo;implementazione originale di PHP. Gli impressionanti risultati (si parla di un miglioramento di circa il 100%) sono stati dimostrati da vari benchmark fatti sui vari CMS/Framework esistenti. Eccone di seguito due tra i più significativi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://talks.php.net/oz15#/boxspecs&#34;&gt;Benchmark di Rasmus Lerdorf, 12 Marzo 2015, Sydney, Australia&lt;/a&gt; - Benchmark su vari CMS/Applicativi scritti in PHP in esecuzione sulle varie versioni di PHP e HHVM&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.zend.com/rs/zendtechnologies/images/PHP7-Performance%20Infographic.pdf&#34;&gt;Infografica Zend&lt;/a&gt; - Benchmark di vari CMS/Framework (Magento 1.9, Wordpress, Drupal, Zend Framework 2, Laravel) su PHP 5.6 PHP 7 e HHVM 3.7. Contiene inoltre una comparazione tra PHP e altri linguaggi di scripting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;features:815871a857d9019d8dba5e4073c801e4&#34;&gt;Features&lt;/h2&gt;

&lt;p&gt;Qui di seguito riportiamo alcune delle feature che ci hanno colpito maggiormente; l&amp;rsquo;elenco seguente non è da considerarsi esaustivo rispetto a tutte le feature di PHP 7: una lista completa di tutte le RFC può essere trovata &lt;a href=&#34;https://wiki.php.net/rfc#php_70&#34;&gt;qui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;null-coalesce-operator:815871a857d9019d8dba5e4073c801e4&#34;&gt;Null Coalesce operator&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/isset_ternary&#34;&gt;Null Coalesce Operator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Il Null Coalesce operator (&lt;code&gt;??&lt;/code&gt;) ritorna l&amp;rsquo;operando di sinistra se questo non è &lt;code&gt;null&lt;/code&gt;, altrimenti ritorna l&amp;rsquo;operando di destra. Esso di fatto rappresenta un&amp;rsquo;abbreviazione dell&amp;rsquo;utilizzo di &lt;code&gt;isset()&lt;/code&gt; in un operatore ternario.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$name = $_GET[’name’] ?? &amp;quot;Name&amp;quot;;
// equivalente a
$name = isset($_GET[’name’]) ? $_GET[’name’] : &amp;quot;Name&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/SnCQY&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;uniform-variable-syntax:815871a857d9019d8dba5e4073c801e4&#34;&gt;Uniform Variable Syntax&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/uniform_variable_syntax&#34;&gt;Uniform Variable Syntax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHP 7 Introduce una nuova e più consistente sintassi delle variabili, che apre le porte ad alcuni nuovi modi di costruire le espressioni, come mostrato nei due esempi di seguito. Una lista più completa di esempi può essere trovata al link del RFC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Annidare chiamate di funzione&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$sum = function($l) {
    return function($r) use ($l) {
        return $l + $r;
    };
};

echo $sum(4)(2); // 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/mZHt3&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Effettuare una chiamata a metodo su un array contenente una coppia di oggetto: nome metodo.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Person
{
    public function getName()
    {
        return &amp;quot;Lorenzo&amp;quot;;
    }
}

$p = new Person();
echo [$p, &#39;getName&#39;]();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/bEU7t&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;group-use-declarations:815871a857d9019d8dba5e4073c801e4&#34;&gt;Group use declarations&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/group_use_declarations&#34;&gt;Group Use Declarations&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
use Zend\ModuleManager\ModuleEvent;
use Zend\ModuleManager\ModuleManagerInterface;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Equivale a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
use Zend\ModuleManager\{
    ModuleEvent,
    ModuleManagerInterface
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;combined-comparison-operator:815871a857d9019d8dba5e4073c801e4&#34;&gt;Combined Comparison operator&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/combined-comparison-operator&#34;&gt;Combined Comparison (Spaceship) Operator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Il Combined Comparison operator (aka &lt;em&gt;Spaceship Operator&lt;/em&gt;) è il nuovo operatore che mette in relazione i due operandi restituendo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-1&lt;/code&gt; se l&amp;rsquo;operando di sinistra è minore dell&amp;rsquo;operando di destra&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; se l&amp;rsquo;operando di sinistra è maggiore dell&amp;rsquo;operando di destra&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; se gli operandi sono uguali&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
echo 100 &amp;lt;=&amp;gt; 200; // -1
echo 200 &amp;lt;=&amp;gt; 100; // 1
echo 200 &amp;lt;=&amp;gt; 200; // 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/PV5kq&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;context-sensitive-lexer:815871a857d9019d8dba5e4073c801e4&#34;&gt;Context sensitive lexer&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/context_sensitive_lexer&#34;&gt;Context Sensitive Lexer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Allo stato attuale PHP ha circa 64 keyword riservate globalmente.
In PHP 7 questo comportamento è stato cambiato rendendo alcune keyword &lt;strong&gt;riservate solo in maniera parziale.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;esempio vediamo come sia possibile dichiarare due metodi chiamati &lt;code&gt;list&lt;/code&gt; e &lt;code&gt;forEach&lt;/code&gt;. Questo non è possibile in PHP&amp;lt;7.0.0 per via del fatto che queste due keyword sono riservate globalmente e non parzialmente.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Collection {
    public function forEach(callable $callback) {}
    public function list() {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;anonymous-classes:815871a857d9019d8dba5e4073c801e4&#34;&gt;Anonymous classes&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/anonymous_classes&#34;&gt;Anonymous Classes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHP 7 introduce la possibilità di creare classi anonime che sono particolarmente utili, ad esempio nel caso in cui si abbia la necessità di implementare un&amp;rsquo;interfaccia per l&amp;rsquo;utilizzo immediato della classe stessa come dipendenza di un&amp;rsquo;altra classe.&lt;/p&gt;

&lt;p&gt;Vediamo due esempi contrapposti, uno con named class e uno con classe anonima, assumendo di avere una classe &lt;code&gt;PersonNamePrinter&lt;/code&gt;che accetta nel proprio costruttore instanze di&lt;code&gt;PersonInterface&lt;/code&gt;. &lt;code&gt;PersonInterface&lt;/code&gt; richiede di implementare il solo metodo &lt;code&gt;getName()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class SpecificPerson implements PersonInterface
{
   public function getName()
   {
        return &amp;quot;Lorenzo&amp;quot;;
   }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$person = new SpecificPerson()
echo new PersonPrinter($person);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;equivale a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
echo new PersonPrinter(new class implements PersonInterface {
    public function getName()
    {
        return &amp;quot;Lorenzo&amp;quot;;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scalar-type-hints:815871a857d9019d8dba5e4073c801e4&#34;&gt;Scalar type hints&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/scalar_type_hints&#34;&gt;Scalar Type Hints&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Questa feature introduce la possiblità di dichiarare il tipo di dato del parametro di una funzione utilizzando anche i nuovi tipi di dato scalari &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; e &lt;code&gt;bool&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;È possibile rendere i parametri rigorosi (strict) facendo &lt;strong&gt;iniziare lo script con lo statement preposto a mutare questo comportamento&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
declare(strict_types=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vediamo un esempio:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

function printIntValue(int $value)
{
    var_dump($value);
}

printIntValue(5.9); // int(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/bp1Xt&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;esempio precedente stiamo dichiarando una funzione &lt;code&gt;printIntValue&lt;/code&gt; la quale richiede che &lt;code&gt;$value&lt;/code&gt; sia di tipo &lt;code&gt;int&lt;/code&gt;; quindi andiamo a chiamare la funzione stessa passando invece &lt;code&gt;$value&lt;/code&gt; come &lt;code&gt;float(5.9)&lt;/code&gt;.
Siccome al primo statement non abbiamo dichiarato i tipi come rigorosi, PHP costringerà il casting del valore passato a &lt;code&gt;int&lt;/code&gt;, troncando la parte dopo la virgola e convertendolo in &lt;code&gt;int(5)&lt;/code&gt;. Se invece avessimo dichiarato i tipi come rigorosi avremmo ottenuto un &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;return-type-declarations:815871a857d9019d8dba5e4073c801e4&#34;&gt;Return Type Declarations&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/return_types&#34;&gt;Return Type Declarations&lt;/a&gt;
In PHP 7 è stata introdotta la possiblità di dichiarare il tipo di ritorno di una funzione.
Alcuni vantaggi di questa feature sono:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Previene valori di ritorno non intenzionali;&lt;/li&gt;
&lt;li&gt;Documenta i tipi di ritorno in maniera strict, diversamente da come è oggi con i commenti e phpdoc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vediamo un esempio:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class DateTimeGenerator
{
    public function getDateTime() : \DateTime
    {
        return new \DateTime();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/3QXVK&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;esempio precedente abbiamo dichiarato una classe &lt;code&gt;DateTimeGenerator&lt;/code&gt; che contiene un metodo &lt;code&gt;getDateTime()&lt;/code&gt; che deve ritornare necessariamente un&amp;rsquo;instanza di &lt;code&gt;\DateTime&lt;/code&gt;. Nel caso questo non avvenisse otterremmo ancora una volta un &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;bind-closure-on-call:815871a857d9019d8dba5e4073c801e4&#34;&gt;Bind Closure on Call&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/closure_apply&#34;&gt;Closure::call&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In PHP 5.4 era già possibile fare il binding dello scope di una classe all&amp;rsquo;interno di una closure utilizzando &lt;a href=&#34;http://php.net/manual/en/closure.bindto.php&#34;&gt;Closure-&amp;gt;bindTo()&lt;/a&gt; e &lt;a href=&#34;http://php.net/manual/en/closure.bind.php&#34;&gt;Closure::bind()&lt;/a&gt;. Questo metodo richiedeva però la creazione di una closure intermedia che facesse da &lt;em&gt;collante&lt;/em&gt; tra l&amp;rsquo;invocazione della closure e il binding dello scope dell&amp;rsquo;oggetto.
Questo non è più richiesto in PHP 7, dove è stato introdotto il metodo &lt;code&gt;Closure::call&lt;/code&gt; che permette di eseguire insieme i due step rendendo il tutto molto più compatto ed elegante.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class DummyClass {private $value = 1;}

// Before PHP 7
$getValueCallBack = function() {return $this-&amp;gt;value;};
$getValue = $getValueCallBack-&amp;gt;bindTo(new DummyClass, &#39;DummyClass&#39;);
echo $getValue();

// From PHP 7
$getvalue = function() {return $this-&amp;gt;value;};
echo $getValue-&amp;gt;call(new DummyClass);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/YKtPC&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;filtered-unserialize:815871a857d9019d8dba5e4073c801e4&#34;&gt;Filtered Unserialize&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/secure_unserialize&#34;&gt;Filtered Unserialize&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Questa feature permette di prevenire eventuali injection abilitando l&amp;rsquo;opzione di impostare una lista di classi per le quali è possibile fare l&amp;rsquo;unserialize.
Tutte le classi non presenti nella lista saranno convertite nell&amp;rsquo;oggetto incompleto &lt;code&gt;__PHP_Incomplete_Class&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;esempio seguente il contenuto di &lt;code&gt;$foo&lt;/code&gt; verrà deserializzato solo se &lt;code&gt;$foo&lt;/code&gt; sarà instanza di &lt;code&gt;OnePossibleClass&lt;/code&gt; o di &lt;code&gt;AnotherPossibileClass&lt;/code&gt;, altrimenti verrà convertito in &lt;code&gt;__PHP_Incomplete_Class&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$data = unserialize($foo, [&amp;quot;allowed_classes&amp;quot; =&amp;gt; [&amp;quot;OnePossibleClass&amp;quot;, &amp;quot;AnotherPossibileClass&amp;quot;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusioni:815871a857d9019d8dba5e4073c801e4&#34;&gt;Conclusioni&lt;/h2&gt;

&lt;p&gt;Ora andate! Testate le vostre applicazioni su PHP 7 e, se potete, aiutate a migrare le estensioni. Non sapete come fare? No problem, chiunque può iniziare a fare qualcosa con i giusti punti di partenza.&lt;/p&gt;

&lt;p&gt;Ecco alcune risorse utili:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gophp7.org/gophp7-ext/&#34;&gt;GoPHP7-ext&lt;/a&gt; Progetto che supporta la migrazione delle estensioni verso PHP 7, raccogliendo risorse e consigli utili ad ottenere questo scopo.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spaghetti.io/cont/article/getting-started-with-php-extensions-development/52/1.html&#34;&gt;Getting started with PHP Extensions development&lt;/a&gt; - Un mio breve articolo (in inglese) su come scrivere la propria prima estensione PHP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se il post vi è piaciuto non dimenticate di condividerlo e di commentarlo qui sotto o su twitter menzionando &lt;a href=&#34;https://twitter.com/FacileIt_Engr&#34;&gt;@FacileIt_Engr&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuous Integration con Docker e Drone</title>
      <link>/blog/ita/continuos-integration-docker-drone/</link>
      <pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/continuos-integration-docker-drone/</guid>
      <description>

&lt;p&gt;La &lt;strong&gt;continuous integration&lt;/strong&gt; è una pratica che consiste nel &lt;strong&gt;frequente allineamento&lt;/strong&gt;, su di una base comune definita &lt;em&gt;mainline&lt;/em&gt;, delle copie di lavoro degli sviluppatori che collaborano al codice di un progetto.&lt;/p&gt;

&lt;p&gt;Introdotta inizialmente da Grady Booch nel 1991, nella pubblicazione &lt;a href=&#34;http://books.google.com/books?id=w5VQAAAAMAAJ&amp;amp;q=continuous+integration+inauthor:grady+inauthor:booch&amp;amp;dq=continuous+integration+inauthor:grady+inauthor:booch&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ei=0_TxU6TqIMOZyASJ3ICYCQ&amp;amp;ved=0CEQQ6AEwAg&#34;&gt;Object Oriented Design: With Applications&lt;/a&gt;, la pratica è stata estesa e sviluppata all&amp;rsquo;interno dell&amp;rsquo;&lt;strong&gt;extreme programming&lt;/strong&gt;, fino a sostenere la necessità di &lt;strong&gt;allineare&lt;/strong&gt; le copie di lavoro &lt;strong&gt;diverse volte al giorno&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Il vantaggio principale nell&amp;rsquo;adottare la pratica è quello di &lt;strong&gt;evitare l&amp;rsquo;integration hell&lt;/strong&gt; (o merge hell) &lt;strong&gt;minimizzando il rischio&lt;/strong&gt; legato a copie di lavoro divergenti di difficile integrazione.&lt;/p&gt;

&lt;p&gt;Il &lt;a href=&#34;http://engineering.facile.it/tag/software-testing/&#34;&gt;software testing&lt;/a&gt;, pur non essendo indispensabile ai fini della &lt;strong&gt;continuous integration&lt;/strong&gt;, ne è perfettamente complementare, dando allo sviluppatore garanzia di &lt;strong&gt;integrità del funzionamento del software&lt;/strong&gt; prima e dopo l&amp;rsquo;integrazione sulla &lt;em&gt;mainline&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Risale al 2000 un importante &lt;a href=&#34;http://martinfowler.com/articles/continuousIntegration.html&#34;&gt;articolo&lt;/a&gt; di &lt;a href=&#34;http://martinfowler.com/&#34;&gt;Martin Fowler&lt;/a&gt; che indica i &lt;strong&gt;principi fondamentali&lt;/strong&gt; della CI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mantieni un repository del codice sorgente&lt;/li&gt;
&lt;li&gt;Automatizza la build&lt;/li&gt;
&lt;li&gt;Rendi la build auto-testante&lt;/li&gt;
&lt;li&gt;Esegui commit alla baseline tutti i giorni&lt;/li&gt;
&lt;li&gt;Ogni commit fa partire una build automatica&lt;/li&gt;
&lt;li&gt;Ripara immediatamente le build fallite&lt;/li&gt;
&lt;li&gt;Fai in modo che la build sia veloce&lt;/li&gt;
&lt;li&gt;Esegui i test in un clone dell&amp;rsquo;ambiente di produzione&lt;/li&gt;
&lt;li&gt;Fai in modo che sia facile recuperare l&amp;rsquo;ultima build&lt;/li&gt;
&lt;li&gt;Tutti possono vedere lo stato delle build&lt;/li&gt;
&lt;li&gt;Automatizza il deploy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;soluzioni-per-la-ci-ed-il-testing-automatico:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Soluzioni per la CI ed il testing automatico&lt;/h2&gt;

&lt;p&gt;Negli ultimi anni si sono diffuse molte &lt;strong&gt;soluzioni software&lt;/strong&gt; che permettono di automatizzare il processo di &lt;strong&gt;build e testing&lt;/strong&gt; a partire da un semplice &lt;em&gt;push&lt;/em&gt; sulla mainline di sviluppo. Ognuno di queste ha le sue peculiari caratteristiche che la rendono diverso dagli altri.&lt;/p&gt;

&lt;p&gt;In Facile.it abbiamo stilato una lista di &lt;strong&gt;requisiti&lt;/strong&gt; per trovare il sistema di CI più adatto al nostro &lt;strong&gt;caso d&amp;rsquo;uso&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Possibilità di effettuare build in &lt;strong&gt;ambienti molto diversi&lt;/strong&gt; (per sistema operativo, versioni software..) &lt;strong&gt;identici a quelli di produzione&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Possibilità di effettuare &lt;strong&gt;contemporaneamente&lt;/strong&gt; build multiple, anche appartenenti allo &lt;strong&gt;stesso progetto&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Sistema di CI compatibile con diversi &lt;strong&gt;servizi Git&lt;/strong&gt; (GitHub, GitLab, BitBucket..)&lt;/li&gt;
&lt;li&gt;Integrazione con &lt;strong&gt;chat&lt;/strong&gt; e sistemi di &lt;strong&gt;notifica&lt;/strong&gt; (Slack, IRC..)&lt;/li&gt;
&lt;li&gt;Invio &lt;strong&gt;mail di alert&lt;/strong&gt; per build fallite&lt;/li&gt;
&lt;li&gt;Sistema di CI &lt;strong&gt;estendibile via API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dashboard&lt;/strong&gt; che mostri lo stato delle build, per tenere gli &lt;strong&gt;sviluppatori informati&lt;/strong&gt; riguardo lo stato delle proprie build e della mainline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Utilizzando in maniera intensiva &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; per lo sviluppo locale con ambienti &lt;strong&gt;simili alla produzione&lt;/strong&gt;, una caratteristica interessante da avere consiste proprio nella possibilità di effettuare &lt;strong&gt;build all&amp;rsquo;interno di container&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La nostra scelta è ricaduta su &lt;a href=&#34;https://github.com/drone/drone&#34;&gt;Drone&lt;/a&gt;, una piattaforma di continuous integration piuttosto giovane, ma sufficientemente stabile per un utilizzo in produzione.&lt;/p&gt;

&lt;h2 id=&#34;drone-build-attraverso-container-docker:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Drone: build attraverso container Docker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/drone/drone&#34;&gt;Drone&lt;/a&gt;, rilasciato con licenza Apache 2.0, è una piattaforma di CI che automatizza le build &lt;strong&gt;all&amp;rsquo;interno di container Docker&lt;/strong&gt;: la soluzione ideale in un ambiente dove &lt;strong&gt;numerosi gruppi di lavoro&lt;/strong&gt; utilizzano &lt;strong&gt;ambienti molto diversi&lt;/strong&gt; (per sistema operativo, versioni di interpreti di linguaggio, sistemi di database o caching) ma vogliono centralizzare i processi di Continuous Integration.&lt;/p&gt;

&lt;p&gt;Come altre piattaforme di CI, Drone supporta diversi sistemi Git (GitHub, GitLab, BitBucket, Gogs et al.), diversi sistemi di &lt;a href=&#34;https://github.com/drone/drone/blob/v0.2.1/README.md#deployments&#34;&gt;deploy&lt;/a&gt; (Aws S3, SSH, Heroku, Swift et al.) e diversi sistemi di &lt;a href=&#34;https://github.com/drone/drone/blob/v0.2.1/README.md#notifications&#34;&gt;notifica&lt;/a&gt; (Webhook, Hipchat, Email et al.).&lt;/p&gt;

&lt;p&gt;I container di build possono essere avviati in locale o &lt;strong&gt;remoto&lt;/strong&gt;, dal momento che la &lt;a href=&#34;https://github.com/drone/drone#setup&#34;&gt;configurazione&lt;/a&gt; permette di indicare i &lt;strong&gt;socket Docker&lt;/strong&gt; (UNIX, ma anche TCP) da utilizzare.&lt;/p&gt;

&lt;p&gt;Drone supporta un &lt;a href=&#34;https://github.com/drone/drone-plugin-go&#34;&gt;&lt;strong&gt;sistema di plugin&lt;/strong&gt;&lt;/a&gt; estremamente &lt;strong&gt;flessibile&lt;/strong&gt;: un plugin riceve via riga di comando o input dal terminale un JSON contenente le &lt;strong&gt;informazioni sulla build&lt;/strong&gt; corrente e pubblica il risultato in output.&lt;/p&gt;

&lt;p&gt;I plugin vengono distribuiti a loro volta come &lt;strong&gt;container Docker&lt;/strong&gt;, così possono condividere attraverso un volume-mount la &lt;strong&gt;stessa copia del repository&lt;/strong&gt; su cui avviene la build.
L&amp;rsquo;&lt;em&gt;ENTRYPOINT&lt;/em&gt; per il plugin nel Dockerfile &lt;strong&gt;consiste nell&amp;rsquo;eseguibile&lt;/strong&gt; vero e proprio:
in questo modo è possibile scrivere &lt;strong&gt;plugin in qualsiasi linguaggio&lt;/strong&gt; per fare qualsiasi tipo di operazione!&lt;/p&gt;

&lt;p&gt;Per ultimo, ma comunque non di poco conto, il &lt;strong&gt;monitor stato build&lt;/strong&gt; viene rilasciato in un progetto separato: &lt;a href=&#34;https://github.com/drone/drone-wall&#34;&gt;Drone Wall&lt;/a&gt; è semplicemente fantastico!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/continuos-integration-docker-drone/drone-wall.jpg&#34; alt=&#34;Drone wall screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Quella che segue, è una guida per &lt;strong&gt;l&amp;rsquo;installazione di Drone&lt;/strong&gt; (a sua volta in un container!), molto simile a quella  utilizzata in Facile.it.&lt;/p&gt;

&lt;h2 id=&#34;prerequisiti:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Prerequisiti&lt;/h2&gt;

&lt;p&gt;Per testare questa guida abbiamo utilizzato Docker 1.6.2 e &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;docker-compose 1.2.0&lt;/a&gt;.
Per chi non conoscesse Compose, basti sapere che è un &lt;strong&gt;tool per definire convenientemente una configurazione complessa&lt;/strong&gt; (di solito multi-container) in un singolo file &lt;em&gt;yaml&lt;/em&gt;, potendo poi lanciare tutti i container in essa definiti con un singolo conveniente comando anzichè con molti tediosi &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Come prima cosa è necessario clonare il gist, embeddato qui sotto per riferimento, lanciando il seguente comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://gist.github.com/de5d5861fa4d86f9598c.git
&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://gist.github.com/fntlnz/de5d5861fa4d86f9598c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una volta entrati nella cartella del gist, troviamo due file, &lt;em&gt;docker-compose.yml&lt;/em&gt; e &lt;em&gt;nginx.conf&lt;/em&gt;,  descritti in dettaglio di seguito:&lt;/p&gt;

&lt;h2 id=&#34;docker-compose-yml:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;docker-compose.yml&lt;/h2&gt;

&lt;p&gt;Questo file contiene la configurazione dei container che ci permetterà di mettere insieme il nostro ambiente.&lt;/p&gt;

&lt;p&gt;Al suo interno abbiamo &lt;strong&gt;tre nodi&lt;/strong&gt; principali: &lt;em&gt;drone&lt;/em&gt;, &lt;em&gt;nginx&lt;/em&gt; e &lt;em&gt;wall&lt;/em&gt;; analizziamoli singolarmente:&lt;/p&gt;

&lt;h3 id=&#34;drone:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;DRONE&lt;/h3&gt;

&lt;p&gt;Come abbiamo detto in precedenza Drone supporta i vari servizi di hosting repository git, sia open source che PaaS. Per questa guida abbiamo scelto l&amp;rsquo;integrazione più semplice e immediata, quella con &lt;strong&gt;GitHub&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nel nodo di configurazione di drone ci sono diverse variabili d&amp;rsquo;ambiente: due di queste ci serviranno a configurare l&amp;rsquo;&lt;strong&gt;autenticazione tramite OAuth2&lt;/strong&gt; di GitHub (allo stato attuale, Drone non ha un sistema interno di gestione degli utenti).&lt;/p&gt;

&lt;p&gt;Le variabili d&amp;rsquo;ambiente per GitHub sono &lt;code&gt;DRONE_GITHUB_CLIENT&lt;/code&gt; e &lt;code&gt;DRONE_GITHUB_SECRET&lt;/code&gt;; le chiavi necessarie vengono rilasciate da GitHub a seguito della &lt;a href=&#34;https://github.com/settings/applications/new&#34;&gt;registrazione di una nuova applicazione&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La variabile d&amp;rsquo;ambiente &lt;code&gt;DRONE_REGISTRATION_OPEN&lt;/code&gt; va settata a &lt;code&gt;false&lt;/code&gt; quando si deciderà di non permettere la &lt;strong&gt;registrazione di nuovi utenti&lt;/strong&gt;, ma è attualmente settata a &lt;code&gt;true&lt;/code&gt; per permettere la registrazione del primo utente, che sarà anche il master dell&amp;rsquo;installazione.&lt;/p&gt;

&lt;p&gt;Un&amp;rsquo;altra variabile d&amp;rsquo;ambiente molto importante è &lt;code&gt;DRONE_WORKER_NODES&lt;/code&gt;: la sua importanza è data dal fatto che contiene il &lt;strong&gt;path del socket di Docker&lt;/strong&gt; che permette la comunicazione con i container. Ogni ripetizione separata da virgola di &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt; mette a disposizione delle build un nuovo worker per eseguire più build in parallelo.&lt;/p&gt;

&lt;p&gt;Infine, l&amp;rsquo;ultima ma non meno importante variabile d&amp;rsquo;ambiente da impostare è &lt;code&gt;DRONE_SESSION_SECRET&lt;/code&gt;, la chiave che servirà a codificare le sessioni. Una chiave generata &lt;a href=&#34;https://www.random.org/strings/?num=20&amp;amp;len=20&amp;amp;digits=on&amp;amp;upperalpha=on&amp;amp;loweralpha=on&amp;amp;unique=on&amp;amp;format=html&amp;amp;rnd=new&#34;&gt;su Random.org&lt;/a&gt; è perfetta per questo scopo.&lt;/p&gt;

&lt;p&gt;In questo nodo ci sono inoltre &lt;strong&gt;due volumi condivisi&lt;/strong&gt; che sono rispettivamente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/data/drone:/var/lib/drone&lt;/code&gt;: il path dove verrà scritto il database SQLite di Drone; eventualmente si può sostituire con un path più adeguato&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/code&gt;: il path del socket di docker per permettere a Drone di lanciare nuovi container, poiché si trova anche lui all&amp;rsquo;interno di un container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un&amp;rsquo;altra riga di questo nodo che è degna di nota è &lt;code&gt;privileged: true&lt;/code&gt;: è infatti &lt;strong&gt;necessario che il container contenente Drone giri in modalità privilegiata&lt;/strong&gt;, per disattivare quei controlli di sicurezza che altrimenti non permetterebbero al container di operare alla creazione, distruzione e modifica di altri container.&lt;/p&gt;

&lt;h3 id=&#34;wall:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;WALL&lt;/h3&gt;

&lt;p&gt;In questo nodo è necessario impostare la variabile d&amp;rsquo;ambiente &lt;code&gt;API_TOKEN&lt;/code&gt;, necessaria ad autorizzare la dashboard di visualizzazione delle build: il token si trova nel proprio profilo utente di Drone una volta avviato. Questa configurazione può essere quindi completata solo dopo aver avviato Drone per la prima volta.&lt;/p&gt;

&lt;h3 id=&#34;nginx:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;NGINX&lt;/h3&gt;

&lt;p&gt;Questo nodo fa il binding della porta 80 dell&amp;rsquo;host verso la porta 80 del container e condivide due volumi, rispettivamente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nignx.conf&lt;/code&gt;: condivide la configurazione del file &lt;code&gt;nginx.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/nginx:/var/log/nginx&lt;/code&gt;: condivide la cartella contenente i log di NGINX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;nginx.conf&lt;/code&gt; va configurato per usare NGINX come proxy di Drone e Drone Wall, utilizzando &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass&#34;&gt;proxy_pass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Al suo interno contiene già due &lt;em&gt;server blocks&lt;/em&gt;, i quali a loro volta contengono le direttive &lt;code&gt;server_name&lt;/code&gt;, rispettivamente &lt;code&gt;drone.local&lt;/code&gt; per Drone e &lt;code&gt;wall.drone.local&lt;/code&gt; per il Drone Wall.&lt;/p&gt;

&lt;h2 id=&#34;up-and-running:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Up And Running&lt;/h2&gt;

&lt;p&gt;Ora che abbiamo completato la configurazione, possiamo semplicemente avviare i nostri container con questo comando, che va eseguito nella cartella contentente il clone del gist di sopra:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ora possiamo finalmente utilizzare drone puntando il nostro browser all&amp;rsquo;indirizzo &lt;a href=&#34;http://drone.local&#34;&gt;http://drone.local&lt;/a&gt; (o all&amp;rsquo;indirizzo configurato nel file &lt;code&gt;nginx.conf&lt;/code&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>L&#39;operatore ternario è associativo a sinistra!</title>
      <link>/blog/ita/operatore-ternario-e-associativo-a-sinistra/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/operatore-ternario-e-associativo-a-sinistra/</guid>
      <description>&lt;p&gt;Gli &lt;a href=&#34;http://it.wikipedia.org/wiki/Operatore_ternario&#34;&gt;&lt;em&gt;operatori ternari&lt;/em&gt;&lt;/a&gt; sono diffusi in molti linguaggi di programmazione e permettono di esprimire con una &lt;strong&gt;sintassi breve&lt;/strong&gt; logiche condizionali. Per utilizzarli propriamente in PHP è però necessario conoscerne il comportamento.&lt;/p&gt;

&lt;p&gt;Vediamo un esempio&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;var_dump(true ? &#39;a&#39; : &#39;b&#39; ? &#39;c&#39; : &#39;d&#39;); // OUTPUT: string(1) &amp;quot;c&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se state pensando che il risultato di questa espressione sia ovvio, vediamo cosa succede ad esempio in javascript&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log(true ? &#39;a&#39; : &#39;b&#39; ? &#39;c&#39; : &#39;d&#39;); // OUTPUT: a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bene, mentre in PHP il risultato è dato da:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;true è vero, ritorna a&lt;/li&gt;
&lt;li&gt;a castato a bool è vero, &lt;strong&gt;stampa c&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In javascript invece il ragionamento è diverso:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;true è vero, &lt;strong&gt;stampa a&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perchè questa differenza? Semplicemente perchè in PHP, &lt;strong&gt;diversamente dalla maggioranza dei linguaggi&lt;/strong&gt;, l&amp;rsquo;operatore ternario è associativo a sinistra anzichè a destra.&lt;/p&gt;

&lt;p&gt;Tenendone conto potremo evitare comportamenti inconsistenti nel nostro codice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZVALs refcount AKA come vengono memorizzate le nostre variabili</title>
      <link>/blog/ita/zvals-refcount/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/zvals-refcount/</guid>
      <description>&lt;p&gt;Assegnare valori alle variabili è sicuramente l&amp;rsquo;operazione più comune all&amp;rsquo;interno di uno script PHP. Ma come vengono conservate queste informazioni dall&amp;rsquo;interprete? Vediamolo assieme!&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;unità fondamentale di storage dei dati in PHP è la Zend Value (zval). Si tratta di una struct definita alla &lt;a href=&#34;https://github.com/php/php-src/blob/ae15e636e2b213bf748fa0b94ca95ac96d6eae3a/Zend/zend.h#L334-L340&#34;&gt;linea 334 di &lt;code&gt;zend.h&lt;/code&gt;&lt;/a&gt;, la riporto qui di seguito per commentarne le proprietà.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct _zval_struct {
	zvalue_value value;	 /* Il valore assegnato alla variabile */
	zend_uint refcount__gc; /* Il conto delle referenze legato alla variabile */
	zend_uchar type;	/* L&#39;identificativo del tipo di dato */
	zend_uchar is_ref__gc; /* Flag che indica se la variabile è o meno una referenza */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il tipo di dato &lt;code&gt;zvalue_value&lt;/code&gt; non è altro che una union contenente tutti i tipi di dato gestiti da php, per questo &lt;strong&gt;ogni variabile&lt;/strong&gt; che instanziamo in PHP, sia essa un intero o una stringa occuperà comunque lo &lt;strong&gt;stesso spazio in memoria&lt;/strong&gt; richiesto per il tipo di dato più grande.&lt;/p&gt;

&lt;p&gt;Per mostrare come php gestisce l&amp;rsquo;allocazione delle variabili vediamo un semplice esempio:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$a = 1; // value=1, refcount=1
$b = $a; // value=1, refcount=2
$a++;    // value=2, refcount = 1
$c = $b; // value=1, refcount=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cosa succede qui?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$a&lt;/code&gt; viene allocata con valore &lt;code&gt;1&lt;/code&gt;, e quindi per la variabile &lt;code&gt;$a&lt;/code&gt; il refcount viene
impostato a 1.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Il valore di &lt;code&gt;$a&lt;/code&gt; viene assegnato anche a &lt;code&gt;$b&lt;/code&gt;, quindi PHP per evitare di sprecare memoria assegna la stessa zval anche a &lt;code&gt;$b&lt;/code&gt;, aumentando di 1 il refcount.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$a&lt;/code&gt; viene incrementato di &lt;code&gt;1&lt;/code&gt;,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Essendo il valore della zval di &lt;code&gt;$a&lt;/code&gt; è cambiato, php crea una nuova zval per &lt;code&gt;$b&lt;/code&gt; e &lt;code&gt;$c&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ora la zval di &lt;code&gt;$a&lt;/code&gt; appartiene solo ad &lt;code&gt;$a&lt;/code&gt; con valore &lt;code&gt;2&lt;/code&gt; e refcount &lt;code&gt;1&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$b&lt;/code&gt; ha una nuova zval con valore &lt;code&gt;1&lt;/code&gt; e refcount &lt;code&gt;1&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Essendo la zval di &lt;code&gt;$c&lt;/code&gt; è la stessa di &lt;code&gt;$b&lt;/code&gt; la zval di &lt;code&gt;$c&lt;/code&gt; ha valore &lt;code&gt;1&lt;/code&gt; e refcount &lt;code&gt;2&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>var_dump() aggiunge proprietà pubbliche a DateTime</title>
      <link>/blog/ita/var_dump-aggiunge-proprieta-pubbliche-a-datetime/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/var_dump-aggiunge-proprieta-pubbliche-a-datetime/</guid>
      <description>&lt;p&gt;PHP, fin dalla versione 5.2.0, introduce gli oggetti &lt;code&gt;\DateTime&lt;/code&gt; per operare con date ed intervalli, fornendo finalmente un alternativa alle vecchie funzioni procedurali.&lt;/p&gt;

&lt;p&gt;Recentemente mi sono reso conto di uno strano comportamento che si verifica quando vengono chiamate &lt;code&gt;var_dump&lt;/code&gt;, &lt;code&gt;print_r&lt;/code&gt;, &lt;code&gt;var_export&lt;/code&gt; o &lt;code&gt;debug_zval_dump&lt;/code&gt; su un istanza di &lt;code&gt;\DateTime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Considerando il seguente codice e il suo output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$date = new \DateTime();
var_dump(isset($date-&amp;gt;date)); // OUTPUT: bool(false)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ci rendiamo conto del fatto che non esiste alcuna proprietà &lt;code&gt;$date&lt;/code&gt; all&amp;rsquo;interno dell&amp;rsquo;istanza di &lt;code&gt;\DateTime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Se più avanti nel codice scrivessimo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var_dump($date);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;otterremmo come output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class DateTime#1 (3) {
  public $date =&amp;gt;
  string(26) &amp;quot;2015-03-01 23:18:42.000000&amp;quot;
  public $timezone_type =&amp;gt;
  int(3)
  public $timezone =&amp;gt;
  string(11) &amp;quot;Europe/Rome&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;il che ci mostra chiaramente una proprietà pubblica &lt;code&gt;$date&lt;/code&gt;, contenente il timestamp attuale.&lt;/p&gt;

&lt;p&gt;Controllando nuovamente l&amp;rsquo;esistenza della proprietà pubblica &lt;code&gt;$date&lt;/code&gt; scopriremmo infatti che ora è presente ed ha il valore settato:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var_dump(isset($date-&amp;gt;date)); // OUTPUT: bool(true)
echo $date-&amp;gt;date; // OUTPUT: 2015-03-01 23:21:05.000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Questo comportamento è dovuto alla funzione interna &lt;code&gt;static HashTable *date_object_get_properties(zval *object)&lt;/code&gt; che alla &lt;a href=&#34;https://github.com/php/php-src/blob/968a9f48071bcc099b4e978fc99fd09b6f69d172/ext/date/php_date.c#L2176-L2177&#34;&gt;linea 2176&lt;/a&gt; di &lt;code&gt;php_date.c&lt;/code&gt; imposta la proprietà &lt;code&gt;$date&lt;/code&gt;. Dal momento che &lt;code&gt;var_dump&lt;/code&gt; e le altre funzioni citate sopra chiamano proprio quella funzione durante l&amp;rsquo;esecuzione, ci imbattiamo in questo comportamento.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	/* first we add the date and time in ISO format */
	ZVAL_STR(&amp;amp;zv, date_format(&amp;quot;Y-m-d H:i:s.u&amp;quot;, sizeof(&amp;quot;Y-m-d H:i:s.u&amp;quot;)-1, dateobj-&amp;gt;time, 1));
	zend_hash_str_update(props, &amp;quot;date&amp;quot;, sizeof(&amp;quot;date&amp;quot;)-1, &amp;amp;zv);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;È importante perciò sapere e tenere a mente che alcune proprietà visibili con var_dump(), se non documentate, non dovrebbero essere utilizzate in quanto potrebbero risultare in comportamenti non attesi!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>