<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jean on Facile.it Engineering</title>
    <link>https://engineering.facile.it/authors/jean/</link>
    <description>Recent content in jean on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Apr 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://engineering.facile.it/authors/jean/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>#FacileHack 2017, 10 days later</title>
      <link>https://engineering.facile.it/blog/eng/facilehack-2017-10-days-later/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/facilehack-2017-10-days-later/</guid>
      <description>

&lt;p&gt;Ten days ago &lt;a href=&#34;http://hackathon.facile.it/2017.html&#34;&gt;&lt;strong&gt;#FacileHack 2017&lt;/strong&gt;&lt;/a&gt; came to its conclusion; this was the second edition of the hackathon organized by Facile.it. Holding an event of this kind has allowed us to see, work and discuss with many very diverse teams, made up of programmers, designers and marketers.&lt;/p&gt;

&lt;p&gt;The hackathon&amp;rsquo;s theme for this year was &lt;strong&gt;connectivity&lt;/strong&gt;: our site offers the comparation between internet access services, and we have decided to put this at the center of the competition. The teams have then faced each other on this theme, searching new ways to improve Facile.it&amp;rsquo;s business and the customers&amp;rsquo; user experience.&lt;/p&gt;

&lt;h1 id=&#34;continuous-improvement&#34;&gt;Continuous improvement&lt;/h1&gt;

&lt;p&gt;The experience we gained from the first edition allowed us to easily organize this event, and as we like to apply ourselves in our everyday work, we wanted to aim for a continuous and progressive improvement in organizing this hackathon, and this proved to be a winning approach.
  
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/X-OdVcH7CMs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;One of the improving point of this edition was the &lt;a href=&#34;http://hackathon.facile.it/2017.html#giuria&#34;&gt;external jury&lt;/a&gt; composed by very experienced professionals of different expertise. Despite the very few minutes available (only seven) to the various teams to present their ideas, the jurors were very good at analyzing the various proposals and to offer the right questions to dissect the critical points of each proposed approach.&lt;/p&gt;

&lt;h1 id=&#34;the-winning-team&#34;&gt;The winning team&lt;/h1&gt;

&lt;p&gt;The team that won the competition was &lt;strong&gt;Orange Smile&lt;/strong&gt;, proposing Facilino, a virtual assistant: the team&amp;rsquo;s merit was especially in the overall completeness of the proposed solution, which started from identifying the problems and proposing a solution up to its application and its launch to the market.&lt;/p&gt;

&lt;div style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;https://engineering.facile.it/images/facilehack-2017-10-giorni-dopo/orange-smile.jpg&#34; title=&#34;I vincitori di #FacileHack 2017: team Orange Smile&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;The winners were awarded a € 500 voucher, for each team member, to be spent on high-level professional training courses made available by our partners &lt;a href=&#34;https: //www.enter .com / en / ecosystem / education /&#34;&gt;LOG.ED&lt;/a&gt;, &lt;a href=&#34;http://www.ninjacademy.it/&#34;&gt;Ninja Academy&lt;/a&gt; and &lt;a href=&#34;https://www.fluentify.com/&#34;&gt;Fluentify&lt;/a&gt;. &lt;strong&gt;The focus on training&lt;/strong&gt; seemed like an important decision for us and in line with the spirit of our engineering division.&lt;/p&gt;

&lt;p&gt;See you to the next edition!&lt;/p&gt;

&lt;div style=&#34;text-align: center; margin-bottom: 2em&#34;&gt;
&lt;img src=&#34;https://engineering.facile.it/images/facilehack-2017-10-giorni-dopo/facile-engineering-team.jpg&#34; title=&#34;FacileHack engineering team&#34;/&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>#FacileHack 2017, 10 giorni dopo</title>
      <link>https://engineering.facile.it/blog/ita/facilehack-2017-10-giorni-dopo/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/facilehack-2017-10-giorni-dopo/</guid>
      <description>

&lt;p&gt;Dieci giorni fa è terminato &lt;a href=&#34;http://hackathon.facile.it/2017.html&#34;&gt;&lt;strong&gt;#FacileHack 2017&lt;/strong&gt;&lt;/a&gt;, la seconda edizione dell&amp;rsquo;hackathon organizzato da Facile.it. Tenere un evento di questo genere ci ha permesso di vedere all&amp;rsquo;opera e di confrontarci con tanti team molto eterogenei, composti da programmatori, designer e specialisti del marketing.&lt;/p&gt;

&lt;p&gt;Il tema dell&amp;rsquo;hackathon di quest&amp;rsquo;anno è stata la &lt;strong&gt;connettività&lt;/strong&gt;: il nostro portale propone la comparazione dei servizi di connessione ad internet, e ha deciso di porre questo al centro della competizione. I diversi team si sono quindi affrontati su questo tema, per trovare modi per migliorare il business di Facile.it e l&amp;rsquo;esperienza utente degli utilizzatori del servizio.&lt;/p&gt;

&lt;h1 id=&#34;miglioramento-continuo&#34;&gt;Miglioramento continuo&lt;/h1&gt;

&lt;p&gt;L&amp;rsquo;esperienza accumulata dalla prima edizione ci ha permesso di realizzare con facilità questo evento: così come ci piace applicarci nel nostro lavoro di tutti i giorni, abbiamo voluto ricercare un miglioramento continuo e progressivo anche nell&amp;rsquo;organizzare un hackathon, e questo si è rivelato un approccio vincente.&lt;/p&gt;

&lt;div style=&#34;text-align: center&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/X-OdVcH7CMs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Uno dei punti che più ci ha convinto di questa edizione è stata la &lt;a href=&#34;http://hackathon.facile.it/2017.html#giuria&#34;&gt;giuria esterna&lt;/a&gt; composta da professionisti molto esperti di diversi settori. Nonostante i pochi minuti (soltanto sette) a disposizione dei vari team per presentare la propria idea, è stata molto brava ad analizzare le varie soluzioni ed a proporre le giuste domande per sviscerare i punti critici di ogni approccio presentato.&lt;/p&gt;

&lt;h1 id=&#34;il-team-vincente&#34;&gt;Il team vincente&lt;/h1&gt;

&lt;p&gt;Il team che ha vinto la competizione è stato &lt;strong&gt;Orange Smile&lt;/strong&gt;, con la proposta dell&amp;rsquo;assistente virtuale Facilino: la vittoria del team è stata decretata soprattutto dalla completezza della soluzione proposta, che andava dall&amp;rsquo;individuazione dei problemi, alla proposta di una soluzione, fino all&amp;rsquo;applicazione e al lancio sul mercato della stessa.&lt;/p&gt;

&lt;div style=&#34;text-align: center&#34;&gt;
&lt;img src=&#34;https://engineering.facile.it/images/facilehack-2017-10-giorni-dopo/orange-smile.jpg&#34; title=&#34;I vincitori di #FacileHack 2017: team Orange Smile&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;I vincitori si sono aggiudicati come premio un voucher del valore di 500 euro, per ogni componente della squadra, da spendere in formazione professionale attraverso i corsi di alto livello messi a disposizione dai partner &lt;a href=&#34;https://www.enter.it/it/ecosystem/education/&#34;&gt;LOG.ED&lt;/a&gt;, &lt;a href=&#34;http://www.ninjacademy.it/&#34;&gt;Ninja Academy&lt;/a&gt; e &lt;a href=&#34;https://www.fluentify.com/&#34;&gt;Fluentify&lt;/a&gt;. &lt;strong&gt;Puntare sulla formazione&lt;/strong&gt; ci è sembrata una scelta importante e in linea con lo spirito della nostra divisione engineering.&lt;/p&gt;

&lt;p&gt;E alla fine non possiamo che salutarvi e aspettarvi per la prossima edizione!&lt;/p&gt;

&lt;div style=&#34;text-align: center; margin-bottom: 2em&#34;&gt;
&lt;img src=&#34;https://engineering.facile.it/images/facilehack-2017-10-giorni-dopo/facile-engineering-team.jpg&#34; title=&#34;FacileHack engineering team&#34;/&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How PHP 7 &amp; TDD helped me sleep better</title>
      <link>https://engineering.facile.it/blog/eng/how-php-7-tdd-helped-me-sleep-better/</link>
      <pubDate>Tue, 07 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/how-php-7-tdd-helped-me-sleep-better/</guid>
      <description>

&lt;h1 id=&#34;the-enemies-of-programming&#34;&gt;The enemies of programming&lt;/h1&gt;

&lt;p&gt;As many of you will agree with me, &lt;strong&gt;sleep deprivation&lt;/strong&gt; is the enemy of programming.&lt;br /&gt;
Maybe we fear only one thing more than that: &lt;strong&gt;being interrupted&lt;/strong&gt;.
&lt;p style=&#34;text-align: center;&#34;&gt;
    &lt;a href=&#34;http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/&#34;&gt;&lt;img src=&#34;https://engineering.facile.it/images/how-php-7-tdd-helped-me-sleep-better/interruption.png&#34; alt=&#34;Why you shouldn&#39;t interrupt a programmer (by Jason Heeris)&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;While writing code we have to think really hard, we use complex abstractions, we go through long business workflows and so on&amp;hellip; fatigue and interruptions are the main enemies of those in this line of work.&lt;/p&gt;

&lt;h1 id=&#34;my-experience&#34;&gt;My experience&lt;/h1&gt;

&lt;p&gt;On my day job, I do all this mental juggling on a pretty big project, which is based on PHP 5.5, Symfony 2.8, Doctrine etc.; luckily, in this project we use a good deal of &lt;strong&gt;good practices&lt;/strong&gt;, and &lt;strong&gt;automated software testing&lt;/strong&gt; is one of those. I actually switched to this job to learn about doing automatic testing, continuous integration and other best practices.&lt;/p&gt;

&lt;p&gt;Almost half a year ago &lt;strong&gt;I became a dad&lt;/strong&gt;. It has been great, and you also get some unexpected perks! For example, my colleagues got me this gift for my son:
&lt;p style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://engineering.facile.it/images/how-php-7-tdd-helped-me-sleep-better/blue-elephpant.jpg&#34; alt=&#34;A blue elePHPant!&#34; /&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;So, we can say that his future is pretty clear&amp;hellip; But don&amp;rsquo;t say this to my wife!&lt;/p&gt;

&lt;p&gt;During the pregnancy, many of my friends and fellow parents warned me half jokingly about one thing: &lt;em&gt;&amp;ldquo;sleep now, you&amp;rsquo;ll be deadly tired after!&amp;rdquo;&lt;/em&gt;. Now I can say that they were a bit exaggerating, but I can&amp;rsquo;t deny that, having a child takes a toll on your sleep schedule&amp;hellip; Even if, as in my case having a 9 to 6 office job, my wonderful wife does all the parenting heavy lifting (and I consider myself pretty lucky for having her!).&lt;/p&gt;

&lt;p&gt;A few months after my son was born I also had the opportunity to start &lt;strong&gt;a new, fresh project&lt;/strong&gt;. To be completely honest, it was not actually fresh: it was a &lt;strong&gt;complete rewrite&lt;/strong&gt; of an internal service that&amp;rsquo;s used to manage the invoices for multiple business units inside our company. I knew pretty well that the old system had to be replaced, so I was put in charge of redoing it from scratch.&lt;/p&gt;

&lt;p&gt;One of the issue with the old system (and the main reason behind the rewrite) was &lt;strong&gt;maintainability&lt;/strong&gt;: we had no tests, we had no proper development environment, and its design wasn&amp;rsquo;t that great; also, bureaucracy and invoicing are the core domain of the system, so it was inherently complex. It was the perfect environment to witness the &lt;a href=&#34;https://en.wikipedia.org/wiki/Broken_windows_theory&#34;&gt;broken windows theory&lt;/a&gt; in action: the code base got worse over time, one patch, copy paste or quick fix at a time.&lt;/p&gt;

&lt;p&gt;Obviously, as anyone that&amp;rsquo;s passionate in technology would do, I took the opportunity to use a lot of new shiny tools: I picked &lt;strong&gt;PHP 7&lt;/strong&gt;, which had just been released, and started the project with something familiar to me but still pretty new and cool, &lt;strong&gt;Symfony 3.0&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;what-i-found-to-be-useful&#34;&gt;What I found to be useful&lt;/h1&gt;

&lt;p&gt;I rambled and thought about this project a lot in the past months with my colleagues, because the old system was costing us a lot of overhead in usage and maintenance, and we had a pretty clear idea of what its problems were, so I didn&amp;rsquo;t need to study a lot before starting to write the first classes.&lt;/p&gt;

&lt;p&gt;Thus, I had to spend &lt;em&gt;some&lt;/em&gt; time thinking about an object oriented design for my project, but I was rapidly able to start writing code with confidence. In the end, most of this confidence came from a few choices that I pursued during the development of this project.&lt;/p&gt;

&lt;h2 id=&#34;tdd-and-high-coverage&#34;&gt;TDD and high coverage&lt;/h2&gt;

&lt;p&gt;The first choice that I am pretty satisfied about is &lt;strong&gt;automatic testing&lt;/strong&gt;: I already knew the advantages of doing tests and Test Driven Development, but in the previous project that practice was not introduced from the start, so not all the codebase was covered, and we couldn&amp;rsquo;t (or wouldn&amp;rsquo;t?) do TDD 100% of the time.&lt;/p&gt;

&lt;p&gt;In this case instead &lt;strong&gt;I wanted to write nearly everything with TDD&lt;/strong&gt;, and keep a &lt;strong&gt;very high threshold for the minimum coverage&lt;/strong&gt; achieved through automatic testing. Right now I&amp;rsquo;m sitting on a ~92% test coverage, and I feel proud about it. This wasn&amp;rsquo;t a mere &amp;ldquo;let&amp;rsquo;s hit 100%!&amp;rdquo; mindless goal (&lt;a href=&#34;https://engineering.facile.it/blog/ita/software-testing-coverage-vs-efficacia/&#34;&gt;since it&amp;rsquo;s pointless&lt;/a&gt;), but it fueled &lt;strong&gt;a positive feedback cycle&lt;/strong&gt; instead: the more I used TDD in writing new classes, the more the coverage rose and stayed high; at the same time, I found myself inspecting the coverage reports to find missing spots, and that allowed me to discover many edge-cases that I didn&amp;rsquo;t test and should have been.&lt;/p&gt;

&lt;p&gt;Of course, I still left some parts without coverage or specific tests, since it was pointless to test them (e.g. Doctrine entities), while I covered some parts multiple times, since they were &lt;strong&gt;critical paths&lt;/strong&gt; inside my application.&lt;/p&gt;

&lt;h2 id=&#34;unit-tests-to-the-rescue&#34;&gt;Unit tests to the rescue!&lt;/h2&gt;

&lt;p&gt;Last but not least, the main critical advantage that TDD gave me was &lt;strong&gt;focus even on strained days&lt;/strong&gt;: I wrote the classes starting from unit tests, giving all my effort to one piece of code at a time, without having to keep in mind the entire project with its complexities.&lt;/p&gt;

&lt;p&gt;I then wrote some functional tests to assure that the &lt;strong&gt;collaboration between my unit-tested objects&lt;/strong&gt; was fine, and this later step was also useful in delaying the definition of the classes as services inside the Symfony DI container. I was also &lt;strong&gt;able to change my mind&lt;/strong&gt; a few times on some details of the design without having to suffer mental confusion or rewrite too much code.&lt;/p&gt;

&lt;h2 id=&#34;php-7-scalar-and-return-types-declarations&#34;&gt;PHP 7: scalar and return types declarations&lt;/h2&gt;

&lt;p&gt;The second good choice was &lt;strong&gt;PHP 7&lt;/strong&gt;: among the reasons behind it as the language version of choice for this project were the &lt;a href=&#34;http://php.net/manual/en/migration70.new-features.php&#34;&gt;two main new features&lt;/a&gt; introduced: &lt;strong&gt;scalar types&lt;/strong&gt; and &lt;strong&gt;return type declarations&lt;/strong&gt;.
&lt;p style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://engineering.facile.it/images/how-php-7-tdd-helped-me-sleep-better/return-types-everywhere-meme.jpg&#34; alt=&#34;Return types, return types everywhere!&#34; /&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Before Facile.it, I worked as C++ developer, and oh boy! did I miss scalars and return types!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;I came onboard of the PHP community right on time&amp;rdquo;&lt;/em&gt;, I thought&amp;hellip; So I took advantage of the situation to start using all these new features. I enjoyed having again the possibility to typehint strings and integers; I discovered how return types declaration enforces the cohesion of your objects really well, making it &lt;strong&gt;rightly painful to return different things&lt;/strong&gt;: it became impossible to return &lt;em&gt;something&lt;/em&gt; OR &lt;em&gt;null&lt;/em&gt;, for example.&lt;/p&gt;

&lt;p&gt;Interestingly, in my tests I found myself writing a lot of this kind of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$result = $testClass-&amp;gt;method();
$this-&amp;gt;assertInstanceOf(SomeClass::class, $result);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did this more than once, just to realize that I was wasting my time! This was normally the first TDD step on PHP 5.x code, but now this kinds of assertion were futile, because the return type was already checked at a language level! Great!&lt;/p&gt;

&lt;p&gt;Return types also proved themselves to be a &lt;strong&gt;double-edged sword&lt;/strong&gt; in some cases, especially on Doctrine entities: they are really useful to enforce consistency in your values, since they trigger a &lt;code&gt;\TypeError&lt;/code&gt; each time you call a getter method on a erroneously empty property, but &lt;strong&gt;you can&amp;rsquo;t use them on nullable fields&lt;/strong&gt;, since it will break your application at any time during execution.&lt;/p&gt;

&lt;p&gt;On the other hand, having return types declared on your business-logic classes it&amp;rsquo;s pretty useful, even more when used in conjunction with TDD: every time you define a mock you are forced to declare expectations and predictions with the right types, so it &lt;strong&gt;indirectly helps maintaining the collaboration contract between objects&lt;/strong&gt;, without too much hassle. If I changed a method&amp;rsquo;s signature that was mocked somewhere, the mock would break the test, &lt;strong&gt;highlighting the issue and making the tests&lt;/strong&gt; (and an high coverage) &lt;strong&gt;even more valuable&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;At the end of the day, these and other &lt;strong&gt;good practices are helpful&lt;/strong&gt; for both your job and your personal life: you can go a long way in being fit and in the best shape while working, but stressful and (good) distracting events are unavoidable: you&amp;rsquo;ll often have to fight stress, fatigue or distractions, and there will be days where you can&amp;rsquo;t be at the top of your game, for any number of reasons.&lt;/p&gt;

&lt;p&gt;Since programming is a mental job, I think that having instruments and good practices in your toolset is invaluable, being them the &lt;strong&gt;essential tools of our craft&lt;/strong&gt;. Thus, I hope that those little life/programming lessons I learned in these months will be useful to other people like me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facile.it devs @ PhpDay 2016</title>
      <link>https://engineering.facile.it/blog/eng/php-day-2016/</link>
      <pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/php-day-2016/</guid>
      <description>

&lt;p&gt;Almost like a nice tradition, we went to the &lt;strong&gt;&lt;a href=&#34;http://2016.phpday.it/&#34;&gt;PHP Day conference&lt;/a&gt;&lt;/strong&gt; this year as well; this time too it was held in Verona, on &lt;strong&gt;May 13th and 14th&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We participated and attended numerous talks and, &lt;a href=&#34;https://engineering.facile.it/blog/ita/php-day-2015/&#34;&gt;as last year&lt;/a&gt;, we wanted to write a light summary; this won&amp;rsquo;t be a full &amp;ldquo;review&amp;rdquo;, but our intent instead is to highlight what captured our interest most, or what we found more valuable for our everyday work.&lt;/p&gt;

&lt;p&gt;In this way, we hope to give a brief glimpse of what we experienced to fellow developers that hadn&amp;rsquo;t the opportunity to attend, and to tempt some of you to join conferences like this one or those in the PHP community at large, for your personal and professional growth.&lt;/p&gt;

&lt;p&gt;The talks are in chronological order, and we linked the slides when available. Enjoy your reading!&lt;/p&gt;

&lt;h1 id=&#34;technical-talks&#34;&gt;Technical Talks&lt;/h1&gt;

&lt;h2 id=&#34;your-api-is-a-ui&#34;&gt;Your API is a UI&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Christopher Hoult (&lt;a href=&#34;http://twitter.com/choult&#34;&gt;@choult&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 11:00 – 12:00 - track 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was an interesting and very smooth talk. It stayed pretty general with nice advices about &lt;strong&gt;API development&lt;/strong&gt;, but showed some reasoning about a pyramidal &amp;ldquo;scheme of priorities&amp;rdquo; that we should follow, deriving from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs&#34;&gt;Maslow&amp;rsquo;s hierarchy of needs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;dip-your-toes-in-the-sea-of-security&#34;&gt;Dip Your Toes in the Sea of Security&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;James Titcumb (&lt;a href=&#34;http://twitter.com/asgrim&#34;&gt;@asgrim&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 14:30 – 15:30 - track 1 (&lt;a href=&#34;http://www.slideshare.net/asgrim1/dip-your-toes-in-the-sea-of-security-phpday-2016&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this talk we saw an interesting overview of &lt;strong&gt;security issues&lt;/strong&gt; that a web application can encounter. It ranged from basic SQL injection, to timing attacks (that were explained pretty well!), to CSRF protection.&lt;/p&gt;

&lt;h2 id=&#34;how-i-learned-to-stop-worrying-and-love-regular-expressions&#34;&gt;How I learned to stop worrying and love Regular Expressions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Jordi Boggiano (&lt;a href=&#34;http://twitter.com/seldaek&#34;&gt;@seldaek&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 15:30 – 16:30 - track 1 (&lt;a href=&#34;http://slides.seld.be/?file=2016-05-13+How+I+learned+to+stop+worrying+and+love+Regular+Expressions.html&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this talk we went from basic &lt;strong&gt;regular expressions&lt;/strong&gt;, to basic pattern recognition, to advanced usage; the speaker took also the time to explain to us how the regex engine works, through thorough examples of pattern matching advancement and backtracking. Also, bonus points for the slides! They were pretty neat, and everything was themed to the &lt;em&gt;Dr. Strangelove&lt;/em&gt; movie, from images to phrases used in the examples.&lt;/p&gt;

&lt;h2 id=&#34;dockerizing-your-php-ci-pipelines&#34;&gt;Dockerizing your PHP CI Pipelines&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Paul Dragoonis (&lt;a href=&#34;http://twitter.com/dr4goonis&#34;&gt;@dr4goonis&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 17:00 – 17:30 - track 2 (&lt;a href=&#34;http://dragoonis.com/talks/phpday-may-2016/#/&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This talk was about &lt;strong&gt;using Jenkins with Docker&lt;/strong&gt; and having optimized pipelines for fast builds and short commit-to-deploy times. It should have been a 1-hour-long talk, so the speaker had to cut short on a lot of things, but I took a lot of useful advice from it nonetheless. Fortunately, he was kind enough to give the extra bits of his talk in the unconference track the day after.&lt;/p&gt;

&lt;h2 id=&#34;drinking-beer-with-a-raspberry-pi-and-php&#34;&gt;Drinking Beer with a Raspberry Pi and PHP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Andrew Carter (&lt;a href=&#34;http://twitter.com/AndrewCarterUK&#34;&gt;@AndrewCarterUK&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 15:30 – 16:30 - track 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This talk was uncommon but really funny. The speaker explained that programming the Raspberry Pi is possible even with PHP! He showed us a working example of an AaaS (Alcohol as a Service) machine. It was a simple tool with a liquid pump and a flow detector that is used to fill up glasses with any kind of drink. It can be activated via API as any regular service. The speaker also explained how it is possible to communicate with external devices via the powerful IO pins using Unix device files.&lt;/p&gt;

&lt;h2 id=&#34;evolution-of-web-application-architecture&#34;&gt;Evolution of Web Application Architecture&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Kore Nordmann (&lt;a href=&#34;http://twitter.com/koredn&#34;&gt;@koredn&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 15:30 – 16:30 - track 2 (&lt;a href=&#34;https://qafoo.com/resources/presentations/phpday_2016_2016/evolution_of_web_application_architecture.html&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The talk covered the &lt;strong&gt;evolution of the technological stack&lt;/strong&gt; behind a normal web application, from single-server to multi-server architecture. Each addition to the stack was discussed and weighted, without taking for granted any single step: from adding a master-slave database configuration, to caching session and\or query results. This gave us a pretty clear idea of &lt;strong&gt;when and why&lt;/strong&gt; such steps should be taken while adding new functionalities to a project, or overcoming technical challenges.&lt;/p&gt;

&lt;h2 id=&#34;being-functional-in-php&#34;&gt;Being functional in PHP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;David de Boer (&lt;a href=&#34;http://twitter.com/ddeboer_nl&#34;&gt;@ddeboer_nl&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 16:30 – 17:00 - track 1 (&lt;a href=&#34;http://www.slideshare.net/boerdedavid/being-functional-in-php-php-day-italy-2016&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This talk was an &lt;strong&gt;introduction to functional programming&lt;/strong&gt;. The speaker compared highly declarative languages such as Erlang with PHP. He demonstrated the options we have to adopt functional programming in PHP. Basic concepts were covered in a clear and simple way: mapping, reduction, function composition and higher-order functions. Particular focus was given to the use of pure functions and their main advantage: the absence of side effects. Finally, the speaker went through an interesting comparison between OOP and functional programming, showing their strengths and weaknesses.&lt;/p&gt;

&lt;h1 id=&#34;keynotes&#34;&gt;Keynotes&lt;/h1&gt;

&lt;h2 id=&#34;deploying-php-7&#34;&gt;Deploying PHP 7&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rasmus Lerdorf (&lt;a href=&#34;http://twitter.com/rasmus&#34;&gt;@rasmus&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 09:45 – 10:45 (&lt;a href=&#34;http://talks.php.net/phpday16#/&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rasmus is a veteran at PHPDay, and he gives opening keynotes here almost every two years. This year&amp;rsquo;s was obviously about PHP 7, and it was more a technical talk than else. It went from &lt;strong&gt;benchmark data&lt;/strong&gt; to technical tips on how to smooth the transition to this new major version of PHP.&lt;/p&gt;

&lt;h2 id=&#34;how-badoo-saved-1m-switching-to-php7&#34;&gt;How Badoo Saved $1M Switching to PHP7&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Nikolay Krapivnyy&lt;/li&gt;
&lt;li&gt;Day 2 - 09:45 – 10:45 (&lt;a href=&#34;https://dl.dropboxusercontent.com/u/216377/verona_php_2.pdf&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&#34;https://techblog.badoo.com/blog/2016/03/14/how-badoo-saved-one-million-dollars-switching-to-php7/&#34;&gt;blog post&lt;/a&gt; about this technological switch made the rounds on a lot on PHP-related websites some months ago; this talk was very technical too, and it showed us how big is Badoo&amp;rsquo;s technological stack, with 3000 servers, 1000 of which running PHP. It gave us a nice overview of the &lt;strong&gt;technical challenges&lt;/strong&gt; that their tech team endured to do this upgrade, and how it gave them the possibility to save more than a half of their hardware resources; also&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;it&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Badoo put PHP 7 in production on Friday&amp;hellip; &lt;br&gt;/cc &lt;a href=&#34;https://twitter.com/agilegigi&#34;&gt;@agilegigi&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/poiluned%C3%ACcepensiamo?src=hash&#34;&gt;#poilunedìcepensiamo&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/phpday?src=hash&#34;&gt;#phpday&lt;/a&gt; &lt;a href=&#34;https://t.co/OEj3Emxxee&#34;&gt;pic.twitter.com/OEj3Emxxee&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alessandro Lai (@AlessandroLai) &lt;a href=&#34;https://twitter.com/AlessandroLai/status/731403882321063936&#34;&gt;14 maggio 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blog restyling: switching to Hugo and GitHub Pages</title>
      <link>https://engineering.facile.it/blog/eng/switching-to-hugo-and-github-pages/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/switching-to-hugo-and-github-pages/</guid>
      <description>

&lt;p&gt;As you may have noticed, we went through a bit of a restyling in the last few days, and our blog changed a lot in terms of appearance and structure.
We are very happy with those changes, but the reason behind this transition is not just a simple template change.&lt;/p&gt;

&lt;h2 id=&#34;what-we-were-searching-for&#34;&gt;What we were searching for&lt;/h2&gt;

&lt;p&gt;Before, we were using an hosted CMS to run the blog, &lt;a href=&#34;https://ghost.org/&#34;&gt;Ghost&lt;/a&gt;. We were happy with the results, it wasn&amp;rsquo;t our concern to administrate the server or bother about other hosting stuff.&lt;/p&gt;

&lt;p&gt;But, as many other developers, we were &lt;strong&gt;hitching for something&lt;/strong&gt; more aligned with our inclinations: we wanted a tool that was closer to our daily jobs and our skills. We were also having &lt;strong&gt;problems during the revision phase&lt;/strong&gt; of the articles, since multiple persons couldn&amp;rsquo;t review and edit an article at the same time, fearing the risk of overwriting each other&amp;rsquo;s work.&lt;/p&gt;

&lt;p&gt;We then came down with a list of requirements for our blog; we wanted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;easy review of articles&lt;/strong&gt;: parallels reviews are a must&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;an easy workflow&lt;/strong&gt;: no major overhead, since the blog contributions are voluntary amongs us; we want to dedicate all the time to writing the articles, not wrestling with technical difficulties&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;no security flaws&lt;/strong&gt;: this point disqualified Wordpress and other famous CMS solutions; we wouldn&amp;rsquo;t like to spend time staying ahead of possible security risks, or have to worry over the hosting and installation problems that a widespread used CMS has&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;easy image hosting&lt;/strong&gt; and embedding&lt;/li&gt;
&lt;li&gt;easy management and modifications of the &lt;strong&gt;template&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;easy integrations of previously used &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus comments&lt;/a&gt; and Google Analytics&lt;/li&gt;
&lt;li&gt;preferably &lt;strong&gt;markdown content format&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;multilanguage articles&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-and-the-github-pages&#34;&gt;Git and the GitHub pages&lt;/h2&gt;

&lt;p&gt;The first solution that came to us was obviously &lt;strong&gt;Git&lt;/strong&gt;, the everyday tool for a team of developers working on the same piece of code (or text, in this case). We obviously then thought of the &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub pages&lt;/a&gt; as an hosting solution: that is ideal, since we already have a &lt;a href=&#34;https://github.com/facile-it&#34;&gt;Github organization&lt;/a&gt; in place, so an organization homepage/site would perfectly fit the bill for our blog.&lt;/p&gt;

&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;Once we set our eyes to that hosting solution, we started to search for a solution for building our blog. The proposed solution was &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;: it&amp;rsquo;s a static site generator, developed in Go, which fitted almost all of our requisites; also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it generates the static HMTL site live, with a &lt;strong&gt;&lt;a href=&#34;https://gohugo.io/extras/livereload/&#34;&gt;live reload&lt;/a&gt; functionality&lt;/strong&gt;: while you edit your markdown article, the site refresh itself on each save of the file(s), so you can see a live preview of what you&amp;rsquo;re writing&lt;/li&gt;
&lt;li&gt;there are many templates ready to be used, and we &lt;a href=&#34;http://themes.gohugo.io/future-imperfect/&#34;&gt;chose one&lt;/a&gt; to be modified to our needs&lt;/li&gt;
&lt;li&gt;the templates are built with the Go Templating engine, and with some easy manual edits we obtained all the requested features: multi-author support, link between translated articles, recent articles and top categories in the sidebar&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;deploying&#34;&gt;Deploying&lt;/h2&gt;

&lt;p&gt;The last step needed to smooth out our workflow was to find a &lt;strong&gt;deploy strategy&lt;/strong&gt;. Github pages need to have the site content published onto the master branch, and we obviously wanted to separate the source code of the site from that.&lt;/p&gt;

&lt;p&gt;We needed an easy way to reproduce this steps, ideally with a script commited to the repo, ready for everyone to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;generate&lt;/strong&gt; the static site with Hugo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;avoid mixing (and committing)&lt;/strong&gt; the static copy with the source files&lt;/li&gt;
&lt;li&gt;commit the files to the master branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugo normally generates the static copy in the &lt;code&gt;./public&lt;/code&gt; directory; to achieve this we used &lt;a href=&#34;https://github.com/X1011/git-directory-deploy&#34;&gt;a script that I found on GitHub itself&lt;/a&gt; that solved this exact problem. We started an empty &lt;code&gt;source&lt;/code&gt; branch, &lt;strong&gt;detached&lt;/strong&gt; from master:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b source --orphan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We started our Hugo site inside it, and we put the &lt;code&gt;./public&lt;/code&gt; in the &lt;code&gt;.gitIgnore&lt;/code&gt;, so each static generation would not be committed. We then prepared the deploy script that, after generating the static site, uses a Git subtree approach to commit its content to the master branch, with a commit message of &lt;code&gt;publish: &amp;lt;last commit message from source&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;et-voilà-here-we-are&#34;&gt;Et voilà, here we are!&lt;/h2&gt;

&lt;p&gt;So, we hope that you will enjoy our new blog at least as much as we enjoyed building it ! Happy reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit: test paralleli, Doctrine e le fixture</title>
      <link>https://engineering.facile.it/blog/ita/paraunit/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/paraunit/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Questo articolo è la sintesi di un talk presentato al &lt;a href=&#34;http://2015.symfonyday.it/&#34;&gt;SymfonyDay 2015&lt;/a&gt;; potete trovare le slide &lt;a href=&#34;http://jean85.github.io/slides/2015-10-paraunit-symfonyday/index.html&#34;&gt;qui&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;i-test-e-la-loro-durata&#34;&gt;I test e la loro durata&lt;/h4&gt;

&lt;p&gt;Sviluppare applicazioni scrivendo &lt;strong&gt;test&lt;/strong&gt; e facendo &lt;a href=&#34;https://it.wikipedia.org/wiki/Test_driven_development&#34;&gt;Test Driven Development&lt;/a&gt; è un&amp;rsquo;ottima pratica, e dà parecchie soddisfazioni. Con l&amp;rsquo;andare del tempo, si fa &lt;strong&gt;crescere la suite di test&lt;/strong&gt; del proprio progetto, cercando di aumentarne la copertura e l&amp;rsquo;efficacia e si scrivono nuovi test corrispondenti alle nuove funzionalità che vengono man mano sviluppate.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;aumento della quantità di test però porta alla crescita (direttamente proporzionale) del &lt;strong&gt;tempo necessario&lt;/strong&gt; ad eseguire i test stessi.
Nel caso dei &lt;strong&gt;test unitari&lt;/strong&gt; questo aumento è spesso trascurabile, poiché &lt;strong&gt;si limitano a caricare una singola classe&lt;/strong&gt; e ad analizzarne il comportamento in completo isolamento, terminando la loro esecuzione nel giro di &lt;strong&gt;pochi millisecondi&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quando invece parliamo di &lt;strong&gt;test funzionali&lt;/strong&gt;, il tempo di esecuzione non è più così limitato: vengono caricate &lt;strong&gt;molte più classi&lt;/strong&gt;, spesso viene coinvolto anche il &lt;strong&gt;database&lt;/strong&gt;, deve essere messa alla prova l&amp;rsquo;interazione tra molti elementi; il tutto porta a test la cui durata è talvolta di &lt;strong&gt;quasi un secondo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Leggendo libri e blog sull&amp;rsquo;argomento, e con l&amp;rsquo;esperienza personale, ho imparato che c&amp;rsquo;è una &lt;strong&gt;soglia critica&lt;/strong&gt; che rappresenta il limite ideale oltre il quale una test suite diventa troppo lenta, e questa soglia è di &lt;strong&gt;circa dieci minuti&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ma perché proprio dieci minuti? Il motivo è molto semplice, e pratico: in dieci minuti, il programmatore può fare una pausa, prendersi un caffè o decidere di discutere brevemente una questione tecnica con un collega, e al suo ritorno troverà la suite completata e potrà procedere col lavoro. In caso contrario, possono succedere due cose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;il programmatore &lt;strong&gt;rimane a fissare lo schermo&lt;/strong&gt; mentre i test si eseguono, dando ragione ai detrattori dei test che affermano che fare TDD è una perdita di tempo;&lt;/li&gt;
&lt;li&gt;si &lt;strong&gt;smette di eseguire la test suite&lt;/strong&gt;, o per lo meno di farla eseguire per intero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La seconda opzione può sembrare fattibile: si fanno girare solo i &lt;strong&gt;test strettamente necessari&lt;/strong&gt; mentre si sviluppa, quelli che vengono scritti in quel momento o che coprono la parte di codice che si sta modificando, per poi eseguire il commit del proprio codice senza far girare l&amp;rsquo;intera suite.&lt;/p&gt;

&lt;p&gt;In realtà &lt;strong&gt;questo approccio fa perdere valore ai test&lt;/strong&gt; stessi, perché i test sono codice che non andrà mai in produzione, e che quindi può dare valore ai nostri progetti solo se viene eseguito ogni volta. Inoltre questo approccio nasconde &lt;strong&gt;una trappola&lt;/strong&gt;, dato che i test, per essere davvero efficaci, vanno eseguiti tutti ogni volta: la loro forza sta proprio nell&amp;rsquo;&lt;strong&gt;individuare gli effetti collaterali&lt;/strong&gt; imprevisti delle nostre modifiche, i bug che possono presentarsi in punti inaspettati e apparentemente lontani del nostro progetto.&lt;/p&gt;

&lt;h4 id=&#34;esecuzione-parallela-dei-test&#34;&gt;Esecuzione parallela dei test&lt;/h4&gt;

&lt;p&gt;In Facile.it lavoro in un progetto basato su Symfony2 e Doctrine e mi sono trovato proprio davanti a questa problematica: avevamo una &lt;strong&gt;suite di test che stava crescendo&lt;/strong&gt; a ritmo sostenuto e che a volte impiegava ad eseguirsi, tra build di preparazione ed esecuzione vera e propria, anche 25 minuti.&lt;/p&gt;

&lt;p&gt;Dopo aver ottimizzato le prestazioni del nostro ambiente di sviluppo (passando da Vagrant a Docker, ma questa è un&amp;rsquo;altra storia), ci siamo resi conto di aver bisogno di una soluzione più drastica al nostro problema, e abbiamo pensato di &lt;strong&gt;eseguire in parallelo i nostri test&lt;/strong&gt; per sfruttare al meglio le risorse hardware e ridurre così i tempi di esecuzione.&lt;/p&gt;

&lt;p&gt;Dopo un po&amp;rsquo; di ricerche, abbiamo individuato alcuni tool esistenti che permettevano questo approccio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brianium/paratest&#34;&gt;brianium/paratest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/liuggio/fastest&#34;&gt;liuggio/fastest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entrambi i tool sono ben sviluppati e semplici da utilizzare e le prime prove sui &lt;strong&gt;test unitari&lt;/strong&gt; sono state molto promettenti: grazie alla ridotta dimensione, la loro parallelizzazione è estremamente semplice.&lt;/p&gt;

&lt;h4 id=&#34;i-problemi-di-concorrenza-nei-test-funzionali&#34;&gt;I problemi di concorrenza nei test funzionali&lt;/h4&gt;

&lt;p&gt;Quando siamo passati a provare Paratest sui &lt;strong&gt;test funzionali&lt;/strong&gt; abbiamo invece incontrato grossi problemi, che si concretizzavano in &lt;strong&gt;fallimenti casuali durante l&amp;rsquo;esecuzione parallela&lt;/strong&gt;. Questi fallimenti erano dati da un problema molto semplice: stavamo accedendo più volte e in parallelo al nostro database di test.&lt;/p&gt;

&lt;p&gt;Ma perché il nostro codice, che è lo stesso che viene eseguito in produzione (dove elabora centinaia, migliaia di richieste al minuto) ha così tanti &lt;strong&gt;problemi di accesso concorrente&lt;/strong&gt; nell&amp;rsquo;ambiente di test? I motivi sono semplici:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;i dati di test sono pochi&lt;/strong&gt;, mentre in produzione abbiamo tabelle da milioni di righe;&lt;/li&gt;
&lt;li&gt;per questo motivo &lt;strong&gt;i test tentano di accedere sempre alle stesse righe&lt;/strong&gt; del database;&lt;/li&gt;
&lt;li&gt;la &lt;strong&gt;sequenza&lt;/strong&gt; di operazioni di ogni test in genere è &lt;strong&gt;lettura - elaborazione - scrittura&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;i test hanno una &lt;strong&gt;rapidità di esecuzione&lt;/strong&gt; superiore a quella di un utilizzatore umano.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tutti questi motivi contribuiscono a creare situazioni in cui &lt;strong&gt;si verificano dei &lt;a href=&#34;https://it.wikipedia.org/wiki/Deadlock&#34;&gt;deadlock&lt;/a&gt;&lt;/strong&gt; e che il nostro database può risolvere solo bloccando uno dei due tentativi di accesso ai dati, facendo così fallire il test corrispondente.&lt;/p&gt;

&lt;p&gt;Un altro problema che può verificarsi è l&amp;rsquo;&lt;strong&gt;alterazione dei dati&lt;/strong&gt;: quando due test vengono eseguiti in contemporanea, uno dei due può modificare il database e, così facendo, può far mancare i giusti dati di partenza ad un altro test che si sta avviando nello stesso istante.&lt;/p&gt;

&lt;p&gt;Purtroppo &lt;strong&gt;Paratest non offre una soluzione&lt;/strong&gt; a questo genere di problemi, mentre Fastest propone come approccio la creazione di un database di test differente per ogni core del proprio processore, per poi eseguire tanti test in parallelo quanti sono i database a disposizione.&lt;/p&gt;

&lt;p&gt;Sfortunatamente anche questo approccio non ci ha soddisfatto, in quanto la costruzione del nostro database di test era piuttosto lenta (avevamo molte migration da eseguire e altrettante fixture da caricare ogni volta) e rischiavamo di guadagnare tempo da una parte per perderlo dall&amp;rsquo;altra, inoltre, avevamo avuto &lt;strong&gt;un&amp;rsquo;idea nuova&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;facile-it-paraunit&#34;&gt;facile-it/paraunit&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/paraunit/version.svg&#34; alt=&#34;Packagist&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://travis-ci.org/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://travis-ci.org/facile-it/paraunit.svg&#34; alt=&#34;Travis build&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://codeclimate.com/github/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/facile-it/paraunit/badges/gpa.svg&#34; alt=&#34;Codeclimate&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/facile-it/paraunit?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/facile-it/paraunit/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abbiamo così deciso di sviluppare la nostra soluzione: &lt;strong&gt;&lt;a href=&#34;https://github.com/facile-it/paraunit&#34;&gt;facile-it/paraunit&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;è sviluppato con i &lt;strong&gt;componenti Symfony&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sa leggere la configurazione XML di PHPUnit&lt;/strong&gt; per individuare le test suite;&lt;/li&gt;
&lt;li&gt;esegue il &lt;strong&gt;parsing e l&amp;rsquo;aggregazione dei risultati&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;grazie ai processi separati, &lt;strong&gt;sa gestire i fatal error&lt;/strong&gt; senza far bloccare completamente l&amp;rsquo;esecuzione;&lt;/li&gt;
&lt;li&gt;sempre grazie ai processi, riesce ad &lt;strong&gt;ottimizzare l&amp;rsquo;uso della memoria&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;risulta &lt;strong&gt;affidabile&lt;/strong&gt; grazie al fatto che basa il suo responso sugli exit code dei singoli processi PHPUnit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La maggior parte di questi vantaggi sono ovviamente comuni a tutti gli approcci di parallelizzazione dei test, inoltre, grazie al parsing dei risultati, &lt;strong&gt;Paraunit sa riconoscere i casi di fallimento dovuti a deadlock&lt;/strong&gt; e riesegue i test che falliscono per questo motivo.&lt;/p&gt;

&lt;p&gt;Questo però era solo un primo passo e ovviamente ci siamo concentrati sull&amp;rsquo;implementare una &lt;strong&gt;soluzione radicale ai problemi di concorrenza&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;facile-it-paraunit-testcase&#34;&gt;facile-it/paraunit-testcase&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/facile-it/paraunit-testcase&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/paraunit-testcase/version.svg&#34; alt=&#34;Packagist&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La soluzione che abbiamo trovato è molto semplice: &lt;strong&gt;le transazioni&lt;/strong&gt;.
Per realizzarla nella sua totalità, abbiamo sviluppato un test-case per PHPUnit, rilasciato col pacchetto &lt;strong&gt;&lt;a href=&#34;https://github.com/facile-it/paraunit-testcase&#34;&gt;facile-it/paraunit-testcase&lt;/a&gt;&lt;/strong&gt;; ovviamente il test-case è stato sviluppato in partenza per il nostro caso d&amp;rsquo;uso, ovvero per il &lt;strong&gt;test di un&amp;rsquo;applicazione basata su Symfony2 e Doctrine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Grazie a questo test-case, ogni test può accedere al database solo dentro una transazione e questa transazione non riceve mai il &lt;em&gt;commit&lt;/em&gt;, ma sempre il &lt;strong&gt;rollback&lt;/strong&gt; al termine. Questo significa che &lt;strong&gt;nulla verrà mai realmente scritto&lt;/strong&gt; sul nostro database.&lt;/p&gt;

&lt;p&gt;I vantaggi di questo approccio sono molteplici:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nessun test può interferire&lt;/strong&gt; con gli altri, visto che non possono alterare i dati;&lt;/li&gt;
&lt;li&gt;ogni test può permettersi di &lt;strong&gt;creare al volo un dato o di alterarne uno esistente&lt;/strong&gt;, senza doversi preoccupare di ripulire il database al termine, con grande risparmio di tempo nella scrittura dei test;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;il database di test rimane sempre pulito&lt;/strong&gt; e non dobbiamo più preoccuparci di prepararlo ogni volta che la suite deve essere eseguita, o che eseguiamo un test che può sporcare i dati;&lt;/li&gt;
&lt;li&gt;anche se non viene mai realmente scritto nulla, &lt;strong&gt;il database esegue comunque le verifiche di integrità&lt;/strong&gt;, quali vincoli di unicità o di chiavi esterne;&lt;/li&gt;
&lt;li&gt;diventa &lt;strong&gt;impossibile avere test interdipendenti&lt;/strong&gt;, ovvero test che possono funzionare solo se prima ne vengono eseguiti altri, che modificano in modo ideale i dati di fixture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L&amp;rsquo;unico limite di questo approccio è che le transazioni sono disponibili solo con alcuni database e all&amp;rsquo;interno di Doctrine quindi solo con l&amp;rsquo;&lt;code&gt;EntityManager&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;la-rapidità-di-esecuzione&#34;&gt;La rapidità di esecuzione&lt;/h4&gt;

&lt;p&gt;Per darvi un&amp;rsquo;idea di quanto possa essere veloce Paraunit rispetto alla normale esecuzione con PHPUnit, ho misurato il tempo di esecuzione della nostra test suite funzionale, che è sufficientemente ampia (261 classi, 1568 metodi):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://engineering.facile.it/images/paraunit/grafico.png&#34; alt=&#34;Grafico&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Come potete vedere, Paraunit esegue l&amp;rsquo;intera test suite in soli &lt;strong&gt;6 minuti e 6 secondi&lt;/strong&gt;, mentre PHPUnit ci metterebbe &lt;strong&gt;oltre 40 minuti!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ho usato il condizionale per un motivo specifico: il tempo di esecuzione di PHPUnit è in realtà una stima (in proiezione lineare) perché, circa al 12% dell&amp;rsquo;esecuzione, il processo si è chiuso per &lt;strong&gt;esaurimento della memoria&lt;/strong&gt; a disposizione, a riprova di un altro dei vantaggi nell&amp;rsquo;uso di Paraunit.&lt;/p&gt;

&lt;h4 id=&#34;test-coverage-in-parallelo&#34;&gt;Test coverage in parallelo&lt;/h4&gt;

&lt;p&gt;Un&amp;rsquo;altra caratteristica di Paraunit, attualmente in sviluppo, è la possibilità di &lt;strong&gt;parallelizzare l&amp;rsquo;elaborazione della &lt;a href=&#34;https://phpunit.de/manual/current/en/code-coverage-analysis.html&#34;&gt;coverage&lt;/a&gt;&lt;/strong&gt; dei test.&lt;/p&gt;

&lt;p&gt;Questo è possibile grazie all&amp;rsquo;opzione &lt;code&gt;--coverage-php&lt;/code&gt; di PHPUnit che salva in un file .php il risultato parziale ottenuto; dopo aver lanciato i singoli test come processi separati, Paraunit esegue l&amp;rsquo;unione di tutti questi risultati.&lt;/p&gt;

&lt;h4 id=&#34;sviluppi-futuri&#34;&gt;Sviluppi futuri&lt;/h4&gt;

&lt;p&gt;Ovviamente questo è solo l&amp;rsquo;inizio, il primo &lt;strong&gt;rilascio in open source&lt;/strong&gt; della nostra soluzione.
Tra gli sviluppi futuri spero di poter realizzare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la &lt;strong&gt;prioritizzazione dei test lenti&lt;/strong&gt;, ovvero poter eseguire per primi i test noti per la loro lentezza, così da non rallentare l&amp;rsquo;esecuzione complessiva della test suite;&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;aggiunta di &lt;strong&gt;altre opzioni&lt;/strong&gt; di selezione test, come p.e. l&amp;rsquo;opzione &lt;code&gt;--group&lt;/code&gt; di PHPUnit;&lt;/li&gt;
&lt;li&gt;il miglioramento delle &lt;strong&gt;prestazioni&lt;/strong&gt; all&amp;rsquo;avvio dei processi, cosa che pesa molto per i test unitari;&lt;/li&gt;
&lt;li&gt;il &lt;strong&gt;supporto per altri framework e ORM&lt;/strong&gt; oltre a Symfony e Doctrine, creando altri test-case appositi;&lt;/li&gt;
&lt;li&gt;il miglioramento della funzionalità di test coverage parallela;&lt;/li&gt;
&lt;li&gt;una soluzione per i database non transazionali, come MongoDB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vi invito quindi a partecipare allo sviluppo di Paraunit su &lt;a href=&#34;https://github.com/facile-it/paraunit&#34;&gt;GitHub&lt;/a&gt;, proponendo pull request, aprendo issue per proporre nuove feature o anche semplicemente utilizzandolo per le vostre test suite, così da verificarne l&amp;rsquo;efficacia e la compatibilità!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facile.it devs @ PHP Day 2015</title>
      <link>https://engineering.facile.it/blog/ita/php-day-2015/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/php-day-2015/</guid>
      <description>

&lt;p&gt;Anche quest&amp;rsquo;anno si è svolto il &lt;strong&gt;&lt;a href=&#34;http://2015.phpday.it/&#34;&gt;PHP Day&lt;/a&gt; a Verona, il 15 e 16 maggio&lt;/strong&gt;. Noi sviluppatori di Facile.it abbiamo partecipato con un folto gruppo e seguito i vari talks.&lt;/p&gt;

&lt;p&gt;In questo breve articolo vorremmo citare quelli che in qualche maniera &lt;strong&gt;ci hanno colpito&lt;/strong&gt;, per motivi tecnici e non, per dare l&amp;rsquo;opportunità a chi non ha potuto partecipare di sapere qualcosa di più, o per dare &lt;strong&gt;un assaggio della conferenza&lt;/strong&gt; a chi non ha mai partecipato a qualcosa del genere e, speriamo, invogliarlo a far parte della community!&lt;/p&gt;

&lt;p&gt;Ovviamente non pretendiamo di fare una recensione, né quanto meno una classifica&amp;hellip; I talk che abbiamo scelto di citare sono stati scelti per puro &lt;strong&gt;gusto personale&lt;/strong&gt;, o ci hanno semplicemente colpito perché si avvicinavano di più alla nostra esperienza di sviluppatori, o perché toccavano più da vicino lo &lt;strong&gt;stack tecnologico&lt;/strong&gt; da noi utilizzato.&lt;/p&gt;

&lt;p&gt;I talk sono in ordine cronologico. Buona lettura!&lt;/p&gt;

&lt;h4 id=&#34;indice&#34;&gt;Indice&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#prophecy&#34;&gt;PHP object mocking framework world: let&amp;rsquo;s compare Prophecy and PHPUnit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#containerize&#34;&gt;Containerize your PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#varnish&#34;&gt;Going crazy with Symfony2 and Varnish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#psr-7&#34;&gt;Hello, PSR-7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#php7-data-structures&#34;&gt;PHP Data Structures (and the impact of PHP 7 on them)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#doctrine&#34;&gt;Doctrine ORM Good Practices and Tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;keynotes&#34;&gt;Keynotes&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#coderabbi&#34;&gt;Talmudic Maxims to Maximize Your Growth as a Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#calevans&#34;&gt;Down the Rabbit Hole: Lessons Learned combining Career and Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#seldaek&#34;&gt;Behind the Scenes of Maintaining an Open Source Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;talk-tecnici&#34;&gt;Talk tecnici&lt;/h1&gt;

&lt;p&gt;&lt;a name=&#34;prophecy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;php-object-mocking-framework-world-let-s-compare-prophecy-and-phpunit&#34;&gt;PHP object mocking framework world: let&amp;rsquo;s compare Prophecy and PHPUnit&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Sarah Khalil (&lt;a href=&#34;http://twitter.com/saro0h&#34;&gt;@saro0h&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 14:30 – 15:30 - track 1 (&lt;a href=&#34;https://speakerdeck.com/saro0h/php-day-verona-2015-php-object-mocking-framework-world&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134728681&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Una buona esposizione su &lt;a href=&#34;https://github.com/phpspec/prophecy-phpunit&#34;&gt;prophecy&lt;/a&gt; la nuova tecnologia per effetuare mocking e stubbing. In questo talk sono state illustrate le API di prophecy e si è parlato di come questo strumento sarà sempre più integrato con phpunit (è già presente nella nuova versione 4.6) sino ad arrivare ad un completo rimpiazzo dei metodi nativi del famoso testing framework.&lt;/p&gt;

&lt;p&gt;Ricordatevi di aggiungere qualche altra parola (oltre a prophecy) chiave nelle vostre ricerche su google per evitare riferimenti biblici.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;containerize&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;containerize-your-php&#34;&gt;Containerize your PHP&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Marek Jelen (&lt;a href=&#34;http://twitter.com/marek_jelen&#34;&gt;@marek_jelen&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 15:30 – 16:30 - track 2&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134728683&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Si è parlato tanto nelle Conferences dell&amp;rsquo;ultimo anno di &lt;strong&gt;Docker e i container&lt;/strong&gt; come strumento di sviluppo, ma questo talk si è rivelato interessante, spiegando come fosse possibile utilizzare i container &lt;strong&gt;come strumento di deploy&lt;/strong&gt; e di creazione di immagini, in modo tale da contenere anche il sorgente del proprio progetto; abbiamo scoperto il tool &lt;a href=&#34;http://github.com/openshift/source-to-image&#34;&gt;Source to Image&lt;/a&gt;, che permette di creare queste immagini in maniera personalizzata e automatizzata partendo dal proprio codice (e dal &lt;code&gt;composer.json&lt;/code&gt;), e il progetto &lt;a href=&#34;http://www.openshift.com/&#34;&gt;Openshift&lt;/a&gt;, portato avanti da RedHat.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;varnish&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;going-crazy-with-symfony2-and-varnish&#34;&gt;Going crazy with Symfony2 and Varnish&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;David De Boer&lt;/li&gt;
&lt;li&gt;Day 1 - 17:30 – 18:00 - track 1&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134814726&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Prima di ascoltare questo talk, pensavamo che la &lt;strong&gt;cache HTTP&lt;/strong&gt; (e Varnish) fossero praticamente inutilizzabili in un &lt;strong&gt;ambito di sito non-pubblico&lt;/strong&gt;, dove i contenuti vanno serviti (e variano in base) ad utenti sempre autenticati.&lt;/p&gt;

&lt;p&gt;Abbiamo scoperto il &lt;a href=&#34;http://github.com/FriendsOfSymfony/FOSHttpCacheBundle&#34;&gt;FOSHttpCacheBundle&lt;/a&gt;, e il trucco che permette di fare caching anche di questo tipo di contenuti: Varnish prende il cookie e controlla la cache non in base a quello, ma in base ad un hash che viene fornito dall&amp;rsquo;applicazione stessa tramite un altra chiamata; questo permette di &lt;strong&gt;mappare i contenuti cachati&lt;/strong&gt; non sui singoli utenti, ma &lt;strong&gt;con logiche più ottimizzate&lt;/strong&gt; (gruppi di utenti? set di permessi?) ed eventualmente più legate alla business logic dell&amp;rsquo;applicazione stessa.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;psr-7&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;hello-psr-7&#34;&gt;Hello, PSR-7&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Beau Simensen (&lt;a href=&#34;http://www.twitter.com/beausimensen&#34;&gt;@beausimensen&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 11:00 – 12:00 - track 2 (&lt;a href=&#34;https://beau.io/talks/2015/05/16/hello-psr-7-phpday-2015/&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134281520&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In questo talk abbiamo potuto conoscere da vicino la genesi dello &lt;strong&gt;standard PSR-7&lt;/strong&gt; (di cui abbiamo già scritto in un &lt;a href=&#34;http://engineering.facile.it/php-fig-standard-psr-7-http-message-interfaces/&#34;&gt;altro articolo&lt;/a&gt;), raccontata da una delle persone che hanno seguito da vicino e contribuito alla scrittura della proposta stessa.&lt;/p&gt;

&lt;p&gt;Lo standard sarà approvato a brevissimo (solo 3 giorni dopo il talk!) e molti aspettano di vedere cosa comporterà a livello di framework PHP.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;php7-data-structures&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;php-data-structures-and-the-impact-of-php-7-on-them&#34;&gt;PHP Data Structures (and the impact of PHP 7 on them)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Patrick Allaert (&lt;a href=&#34;http://www.twitter.com/patrick_allaert&#34;&gt;@patrick_allaert&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 12:00 – 13:00 - track 1 (&lt;a href=&#34;http://www.slideshare.net/patrick.allaert/php-data-structures-and-the-impact-of-php-7-on-them-php-days-2015&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134070469&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Questo talk, dal sapore molto tecnico, ci ha fatto addentrare negli internals degli &lt;strong&gt;array PHP&lt;/strong&gt;, e in quanto siano talmente specializzati a far tutto, da essere &lt;strong&gt;inefficienti&lt;/strong&gt; in moltissimi casi; abbiamo visto numerose &lt;strong&gt;alternative più specialistiche&lt;/strong&gt; per i vari casi d&amp;rsquo;uso (&lt;a href=&#34;http://php.net/manual/en/class.splfixedarray.php&#34;&gt;SplFixedArray&lt;/a&gt;, &lt;a href=&#34;http://php.net/manual/en/class.splqueue.php&#34;&gt;SplQueue&lt;/a&gt;, &lt;a href=&#34;http://php.net/manual/en/class.splstack.php&#34;&gt;SplStack&lt;/a&gt;&amp;hellip;); sfruttare gli uni piuttosto che gli altri impatta fortemente sulle &lt;strong&gt;prestazioni&lt;/strong&gt; nei tempi e nell&amp;rsquo;uso della memoria, e abbiamo visto nel dettaglio alcuni benchmark che mostrano come questi costi diminuiscono (spesso di gran lunga) &lt;strong&gt;tra PHP 5.6 e PHP 7&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;doctrine&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;doctrine-orm-good-practices-and-tricks&#34;&gt;Doctrine ORM Good Practices and Tricks&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Marco Pivetta (&lt;a href=&#34;http://www.twitter.com/Ocramius&#34;&gt;@Ocramius&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 15:30 – 16:30 - track 1&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134178140&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Usiamo &lt;strong&gt;Doctrine&lt;/strong&gt; tutti i giorni, ma questo talk, sebbene marcato come di livello &lt;strong&gt;beginner&lt;/strong&gt;, si è rivelato molto interessante e fonte di numerose discussioni e &lt;strong&gt;riflessioni&lt;/strong&gt; tra colleghi. Lo speaker è uno dei principali contributors al progetto &lt;a href=&#34;https://github.com/doctrine/doctrine2&#34;&gt;doctrine-orm&lt;/a&gt;, e ci ha elencato una serie di &lt;strong&gt;best practices&lt;/strong&gt;, partendo dal chiedersi se e quando è il caso di usare un ORM, passando poi a problemi quali l&amp;rsquo;uso e l&amp;rsquo;implementazione di entità, la loro consistenza, l&amp;rsquo;evitare di usare setter brutali o di esporre le ArrayCollection che rappresentano le nostre relazioni.&lt;/p&gt;

&lt;h1 id=&#34;keynotes-1&#34;&gt;Keynotes&lt;/h1&gt;

&lt;p&gt;Abbiamo voluto citare in questo articolo anche i &lt;strong&gt;3 keynote&lt;/strong&gt; della conferenza: sono stati tutti piuttosto interessanti, profondamente motivazionali e coinvolgenti.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;coderabbi&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;talmudic-maxims-to-maximize-your-growth-as-a-developer&#34;&gt;Talmudic Maxims to Maximize Your Growth as a Developer&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Yitzchok Willroth (&lt;a href=&#34;http://www.twitter.com/coderabbi&#34;&gt;@coderabbi&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - keynote di apertura&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yitz, studente rabbinico poi passato alla programmazione, molto famoso nella community PHP, ci ha spinto a considerare alcuni suoi consigli su come poterci &lt;strong&gt;migliorare come sviluppatori&lt;/strong&gt; e come membri della community stessa: cercare e coltivare un mentore, essere pazienti ed accettare i consigli, aiutare gli altri per ripagare tutto questo, partecipare nell&amp;rsquo;open source&amp;hellip;&lt;/p&gt;

&lt;p&gt;Personalmente, mi ha anche fatto scoprire tre siti piuttosto interessanti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://phpmentoring.org/&#34;&gt;PHP Mentoring&lt;/a&gt; e &lt;a href=&#34;http://hackpledge.org&#34;&gt;Hackpledge&lt;/a&gt;, per chi è in cerca di un &lt;strong&gt;mentore&lt;/strong&gt; o vuole diventarlo per aiutare altri a diventare programmatori migliori&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://up-for-grabs.net/&#34;&gt;Up for grabs&lt;/a&gt;, un sito raccoglitore di &lt;strong&gt;issue su GitHub *semplici&lt;/strong&gt;*, un ottimo punto di inizio per chi vorrebbe partecipare a progetti open source, ma non sa da dove cominciare&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;calevans&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;down-the-rabbit-hole-lessons-learned-combining-career-and-community&#34;&gt;Down the Rabbit Hole: Lessons Learned combining Career and Community&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Cal Evans (&lt;a href=&#34;http://www.twitter.com/calevans&#34;&gt;@CalEvans&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - keynote di apertura&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cal è il community manager (ma non chiamatelo così!) per Zend, e ci ha raccontato con estrema passione, qualche lacrima e in maniera molto divertente la sua storia, come è nata la sua carriera di programmatore e come il suo percorso si è intrecciato con la community PHP e il mondo dell&amp;rsquo;open source.&lt;/p&gt;

&lt;p&gt;Tutto questo per spiegarci come &lt;strong&gt;far parte della community è un valore&lt;/strong&gt; importante per tutti ma soprattutto per noi stessi, e come la nostra sia così grande, forte e basata su uno &lt;strong&gt;spirito positivo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;seldaek&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;behind-the-scenes-of-maintaining-an-open-source-project&#34;&gt;Behind the Scenes of Maintaining an Open Source Project&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Jordi Boggiano (&lt;a href=&#34;http://twitter.com/seldaek&#34;&gt;@seldaek&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - keynote di chiusura&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jordi è il creatore e mantainer di &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;, uno dei principali tool per un programmatore PHP. Nel suo keynote ci ha raccontato con franchezza la sua esperienza in prima persona nel &lt;strong&gt;gestire un progetto open source&lt;/strong&gt; così vasto e popolare, come spesso sia difficile accontentare tutti, e alcuni retroscena e dettagli di qualche curiosa pull request.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>