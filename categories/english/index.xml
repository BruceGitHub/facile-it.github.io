<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>English on Facile.it Engineering</title>
    <link>/categories/english/</link>
    <description>Recent content in English on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/english/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Droidcon It 2016</title>
      <link>/blog/eng/droidconit_recap/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/droidconit_recap/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/images/droidconit-recap/logo_droidcon_it.png&#34; alt=&#34;Droidcon It&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The third edition of &lt;a href=&#34;http://it.droidcon.com/2016/&#34;&gt;Droidcon IT&lt;/a&gt; was, as expected, a great conference, full of interesting talks and people coming from all over the world. We saw a lot of GDEs (&lt;a href=&#34;https://developers.google.com/experts/all/technology/android&#34;&gt;Google Developer Expert&lt;/a&gt;) and also some Developer Advocates from Google, although it was not organized directly by the company. Back in March the Android team surprisingly released the brand new &lt;strong&gt;N Developer Preview&lt;/strong&gt; earlier than expected, so this year we were already able to talk about the new features in Android N and analyze them. Furthermore, there was talk of &lt;strong&gt;Kotlin&lt;/strong&gt;, &lt;strong&gt;RxJava&lt;/strong&gt; and a lot of other useful and interesting topics.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;m going to recap the event and make some considerations about the most interesting (and funny) talks.&lt;/p&gt;

&lt;h1 id=&#34;day-1:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Day 1&lt;/h1&gt;

&lt;h2 id=&#34;keynote-wojtek-kalicinski-https-twitter-com-wkalic:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Keynote - &lt;em&gt;&lt;a href=&#34;https://twitter.com/wkalic&#34;&gt;Wojtek Kalicinski&lt;/a&gt;&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;The day 1 keynote was all about the N Developer Preview and was given by Wojtek Kalicinski, a developer advocate directly from Google.
Wojtek went through all the new improvements of the platform, both from user&amp;rsquo;s and developer&amp;rsquo;s point of view. Hereâ€™s a short summary of the most relevant ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multi-window support&lt;/strong&gt;: probably the most requested user feature. Iâ€™ve always thought that its implementation would have been relatively straightforward, given the already responsive UI of Android, and in fact the code changes that are needed to support this feature are minimal. Just make sure you donâ€™t lock screen orientation using &lt;code&gt;android:screenOrientation&lt;/code&gt; in your manifest.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Better notifications&lt;/strong&gt;: in addition to a visual change of the notification panel, apps will now be able to let the user interact with bundled notifications individually or to reply from the notification itself directly. Moreover, if the app already supports Android Wear notifications, most of this will come for free, since the APIs are the same.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doze improvements&lt;/strong&gt;: the battery saving mode called Doze, now works â€” in a less aggressive mode â€” when the phone is in the user pocket or hands, and not only when the phone is stationary. Wojtek said that most of the apps should continue to work without any change â€” or eventually &lt;a href=&#34;http://developer.android.com/intl/ko/training/monitoring-device-state/doze-standby.html#assessing_your_app&#34;&gt;minimal&lt;/a&gt; â€”, but he strongly encouraged to test apps against this new feature.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JAVA 8 features!&lt;/strong&gt;: finally Google will allow developers to use a limited set of features from the latest version of the language (already two years old) including &lt;em&gt;lambdas&lt;/em&gt; (ðŸŽ‰) and &lt;em&gt;default and static interface methods&lt;/em&gt; (TODO: add DP2 apis). All of this is possibile thanks to the Jack&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cff18b79afe3f01c3e654e6856c73831:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cff18b79afe3f01c3e654e6856c73831:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; toolchain which is able to compile Java 8 syntax to Java 6 compatible bytecode: in this way, old phonesâ€™ support is guaranteed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other changes include improvements to &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html#background_optimizations&#34;&gt;Project Svelte&lt;/a&gt;, a new &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html#data_saver&#34;&gt;Data Saver&lt;/a&gt; feature, the addition of the &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html#tile_api&#34;&gt;Quick Settings Tile API&lt;/a&gt; and &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html&#34;&gt;many more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most interesting and encouraging aspect coming out from the keynote and the N Preview release itself, is the fact that Google is, finally, trying to fix the Android updates issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/droidconit-recap/n-preview-updates.png&#34; alt=&#34;N Preview Updates&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Not only the release of the new OS preview six months before its public release â€” instead of three â€” is really useful for third party developers to update apps to support new APIs, but hopefully it will also help phone manufactures to keep their custom Android implementations more aligned with the stock version release cycle. This will result in a better user experience and, more importantly to us, a better developer experience, making it closer to the iOS world where developers are not required to support five years old OS versions.&lt;/p&gt;

&lt;h2 id=&#34;perfmatters-for-android-hasan-hosgel-https-twitter-com-alosdev:cff18b79afe3f01c3e654e6856c73831&#34;&gt;#PERFMATTERS for Android - &lt;em&gt;&lt;a href=&#34;https://twitter.com/alosdev&#34;&gt;Hasan Hosgel&lt;/a&gt;&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/alosdev/perfmatters-for-android-droidcon-turin-2016&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The talk was all about performance in Android. The speaker analyzed why #&lt;strong&gt;PERFMATTERS&lt;/strong&gt; on Android: the typical mobile user is generally &lt;em&gt;impatient&lt;/em&gt; and &lt;em&gt;intolerant&lt;/em&gt; and even just a couple of extra seconds during the start-up could make the difference in the user&amp;rsquo;s choice to use or not your app. Hasan went through a lot of interesting tips and tricks to improve performance, such as avoiding multi-pass nested layout â€” a topic discussed in more detail by Huyen Tue Dao during her &lt;a href=&#34;#lean-layouts&#34;&gt;talk&lt;/a&gt; â€”, avoiding memory leaks or having a cache on disk for data.&lt;/p&gt;

&lt;p&gt;Performance is crucial to &lt;strong&gt;engage the user&lt;/strong&gt; and I think the speaker did a great job in summarizing useful tips to improve it. Moreover most of them doesnâ€™t alter the readability or the maintainability of the code, as is often the case for performance driven code changes.&lt;/p&gt;

&lt;h2 id=&#34;let-it-flow-unidirectional-data-flow-architecture-in-android-benjamin-augustin-https-twitter-com-dorvaryn:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Let it flow! Unidirectional data flow architecture in Android - &lt;a href=&#34;https://twitter.com/dorvaryn&#34;&gt;&lt;em&gt;Benjamin Augustin&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/dorvaryn/let-it-flow&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The use of patterns to structure the presentation layer (UI) in Android is still infrequent. During the last couple of years we have seen a lot of discussions about &lt;strong&gt;MVC&lt;/strong&gt;/&lt;strong&gt;MVP&lt;/strong&gt;/&lt;strong&gt;MVVM&lt;/strong&gt; patterns within the Android developers community, and some implementations of them.
During the talk the speaker presented a new approach that takes some concepts from the web development world like &lt;a href=&#34;https://facebook.github.io/flux/&#34;&gt;&lt;em&gt;Flux&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;http://redux.js.org&#34;&gt;&lt;em&gt;Redux&lt;/em&gt;&lt;/a&gt;. The concept in a nutshell is that the UI, in addition to being as dumb as possible, should also be &lt;strong&gt;stateless&lt;/strong&gt;. In other words, the UI listens to state changes pushed by the business logic and updates itself accordingly.
Benjamin chose to focus more on the practical aspects and so he made the concept clear by directly building an &lt;a href=&#34;https://github.com/Dorvaryn/unidirectionalDataFlow&#34;&gt;app&lt;/a&gt; using Kotlin and RxJava.&lt;/p&gt;

&lt;p&gt;I personally likey approach that Benjamin showed us, since it has a lot of advantages. It makes the UI state completely &lt;strong&gt;predictable&lt;/strong&gt; and &lt;strong&gt;reproducible&lt;/strong&gt;: it allows us to represent an app state without the need to go through all the steps needed to reach it, thus it can be very useful in reproducing a bug or testing a particular situation. The problem is that, as you can see from the demo app, it adds a lot of boilerplate code and it&amp;rsquo;s also much more verbose and difficult to implement without tools like RxJava or Kotlin, that might be problematic to some.&lt;/p&gt;

&lt;h2 id=&#34;play-everywhere-providing-a-consistent-experience-across-very-different-devices-alessandro-bizzarri-http-it-droidcon-com-2016-speakers-alessandro-bizzarri-dima-kunin-http-it-droidcon-com-2016-speakers-dima-kunin:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Play everywhere: providing a consistent experience across very different devices - &lt;a href=&#34;http://it.droidcon.com/2016/speakers/alessandro-bizzarri/&#34;&gt;&lt;em&gt;Alessandro Bizzarri&lt;/em&gt;&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://it.droidcon.com/2016/speakers/dima-kunin/&#34;&gt;&lt;em&gt;Dima Kunin&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The two speakers showed a high-level tour of how at &lt;strong&gt;Spotify&lt;/strong&gt; they  are able to provide a consistent experience across different devices â€” defined as the combination of its physical form and its OS.
They created their own &lt;strong&gt;design language&lt;/strong&gt; to support the majority of platforms used to define almost everything, from color palette and buttons style to animations and sounds.
They explained also how they use a &lt;strong&gt;C++ library&lt;/strong&gt; common to all platforms to reuse code; in particular on Android they use it through the NDK, a toolset to include C or C++ code in your app and call it from Java code.&lt;/p&gt;

&lt;p&gt;It was a light talk but still it was interesting to see how a big company like Spotify finds solutions to scale and maintain a &lt;strong&gt;consistent and engaging UX&lt;/strong&gt; across all of its user-base.&lt;/p&gt;

&lt;h2 id=&#34;loving-lean-layouts-huyen-tue-dao-https-twitter-com-queencodemonkey-a-name-lean-layouts-a:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Loving lean layouts - &lt;a href=&#34;https://twitter.com/queencodemonkey&#34;&gt;&lt;em&gt;Huyen Tue Dao&lt;/em&gt;&lt;/a&gt; &lt;a name=&#34;lean-layouts&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/queencodemonkey/droidcon-italy-2016-loving-lean-layouts&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The speaker gave a really great talk about one of the best ways to keep an app smooth and responsive: &lt;strong&gt;optimize layouts&lt;/strong&gt; to be as flat as possible. The Android UI layer will call &lt;code&gt;measure()&lt;/code&gt; and    &lt;code&gt;layout()&lt;/code&gt; methods â€” two times in the case of &lt;code&gt;RelativeLayout&lt;/code&gt; â€” through all the hierarchy of views to be able to draw the layout; so, for example, having a useless root level  or useless views will result in more measure/layout passes, thus poor performance. Huyen explained how sometimes the solution to this problem may be to choose the right view or layout, but it could be useful to know that there is always the possibility to implement a custom &lt;code&gt;ViewGroup&lt;/code&gt; to mitigate the number of measure/layout passes or even a totally custom &lt;code&gt;View&lt;/code&gt; that overrides &lt;code&gt;onDraw()&lt;/code&gt; to draw everything by hand.&lt;/p&gt;

&lt;p&gt;The talk was very easy to follow and really useful: most of the advices covered are often ignored because singularly they have less impact, but, if taken all together and especially as good habits, they could really make the difference in maintain the &lt;strong&gt;UI smooth and lag-free&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;day-2:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Day 2&lt;/h1&gt;

&lt;h2 id=&#34;android-reactive-programming-with-rxjava-ivan-morgillo-https-twitter-com-hamen:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Android reactive programming with RxJava - &lt;a href=&#34;https://twitter.com/hamen&#34;&gt;&lt;em&gt;Ivan Morgillo&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;During last couple of years RxJava has been echoing all over the Android developers community and given its huge popularity I was surprised to see that Droidcon IT offered only one talk about it.&lt;/p&gt;

&lt;p&gt;Fortunately Ivan Morgillo is a topic expert â€” he also wrote a &lt;a href=&#34;https://www.packtpub.com/application-development/rxjava-essentials&#34;&gt;book&lt;/a&gt; about RxJava and Android â€” and during the talk he went through some of the &lt;strong&gt;basics of reactive programming&lt;/strong&gt; (&lt;code&gt;Observables&lt;/code&gt;, &lt;code&gt;Observer&lt;/code&gt;, &lt;code&gt;Subscription&lt;/code&gt;â€¦) and a lot of useful &lt;strong&gt;operators&lt;/strong&gt;, which are one of the strengths of RxJava and Reactive extensions (Rx*) in general.&lt;/p&gt;

&lt;p&gt;To be honest I was hoping for a more theoretical talk with an analysis of the advantages and disadvantages of embracing the reactive pattern in our Android projects. It was instead a lot practical and it covered a great number of common use cases where reactive programming could really help to make code mode readable and maintainable.&lt;/p&gt;

&lt;h2 id=&#34;you-can-do-better-with-kotlin-svetlana-isakova-https-github-com-svtk:cff18b79afe3f01c3e654e6856c73831&#34;&gt;You can do better with Kotlin - &lt;a href=&#34;https://github.com/svtk&#34;&gt;&lt;em&gt;Svetlana Isakova&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/svtk/you-can-do-better-with-kotlin&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kotlin has recently reached &lt;a href=&#34;https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/&#34;&gt;&lt;strong&gt;1.0 version&lt;/strong&gt;&lt;/a&gt; and it is gaining a lot of attention within the Java community and especially the Android one. A lot of developers â€” me included â€” are in fact hoping that Google will make it the default programming language for its mobile OS.&lt;/p&gt;

&lt;p&gt;Kotlin is a &lt;strong&gt;modern&lt;/strong&gt;, &lt;strong&gt;pragmatic&lt;/strong&gt; and &lt;strong&gt;Android-friendly&lt;/strong&gt; programming language, with robust supporting tools since it is developed from the people behind IntelliJ (thus, Android Studio). It could be mixed with Java code â€” thus making the switch painless â€” since there is no Kotlin SDK but just JDK plus extensions, and it includes a lot of modern concept such as &lt;em&gt;data classes&lt;/em&gt;, &lt;em&gt;null-safety&lt;/em&gt;, &lt;em&gt;extension functions&lt;/em&gt; and &lt;em&gt;lambdas&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The speaker showed also ANKO, a DSL written in Kotlin, that uses &lt;em&gt;lambdas with receivers&lt;/em&gt;, to create layouts and views and allows to write code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;verticalLayout {
    val name = editText()
    button(&amp;quot;Say Hello&amp;quot;) {
        onClick { toast(&amp;quot;Hello, ${name.text}!&amp;quot;) }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This talk was one of the most interesting to me, as it persuaded me to try and deepen my knowledge of Kotlin. Svetlana was very good at showing the main features of the JetBrains language and at explaining how they convert in Java code, an aspect that I found very useful to mutate my mindset with new concepts and  syntaxes.&lt;/p&gt;

&lt;h2 id=&#34;fun-things-you-cando-in-kotlin-maciej-gÃ³rski-https-github-com-mg6maciej:cff18b79afe3f01c3e654e6856c73831&#34;&gt;fun things (you: CanDo &lt;in Kotlin&gt; ) = â€¦ - &lt;a href=&#34;https://github.com/mg6maciej&#34;&gt;&lt;em&gt;Maciej GÃ³rski&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mg6maciej/fun-things-you-CanDo-in-Kotlin&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second Droidcon talk about Kotlin was a very fun one, with the speaker acting a funny scene where a nephew tries to explain to his granpa why he should use &lt;strong&gt;Kotlin instead of Java&lt;/strong&gt; with a live coding session.&lt;/p&gt;

&lt;p&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&#39;embed-container&#39;&gt;&lt;iframe src=&#39;https://www.youtube.com/embed/RVu_0TIiH8Q&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The second part of the talk was still in live programming (without slides) and showed some Kotlin feature in practice. It covered some advanced topics such as functional programming, operator overloading, infix functions, laziness and more.&lt;/p&gt;

&lt;p&gt;It was funny and informative to watch a &lt;strong&gt;live coding talk&lt;/strong&gt; and for sure it made me more curious and confident about Kotlin.&lt;/p&gt;

&lt;h1 id=&#34;conclusions:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;The Droidcon IT is already, after three editions, the &lt;strong&gt;point of reference&lt;/strong&gt; for the Android community in Italy and this year too it lived up to the expectations. We saw a lot of well-known speakers and developers such as the Googlers Nick Butcher and  Wojtek KaliciÅ„ski. It was a conference rich of interesting talks in addition to those summarized in this post, ranging between al lot of various topics such as TDD, UX, tools and many more. The only thing that surprised me was the lack of talks about Android Wear: perhaps Google is slowing down to push this platform among developers?&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cff18b79afe3f01c3e654e6856c73831:1&#34;&gt;&lt;a href=&#34;https://source.android.com/source/jack.html&#34;&gt;Jack&lt;/a&gt; is the new Google compiler which has the goal to speed up the compilation process, compiling Java .class files directly to .dex files (Android bytecode)
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cff18b79afe3f01c3e654e6856c73831:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Json Web Token</title>
      <link>/blog/eng/json-web-tokens/</link>
      <pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/json-web-tokens/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/images/json-web-tokens/logo.svg&#34; alt=&#34;JWT&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I started my study about JWT, I was searching for a smart method to authenticate a request, without querying the database each time to check the applicant reliability.
I needed a token or something similar with the ability to validate itself and flexible enough to customize the validation strategy.
Imagine for example a web application where a user can login and obtain a &amp;ldquo;pass&amp;rdquo; with his name and an expiration time, and this pass will let him ask for resources until the pass expires, and only if the issuer is trusted.
Thanks to JWT&amp;rsquo;s self verification capabilities, I could discard every request where the token is invalid (a fake token not signed by my application) or expired.
Beyond this specific use case, JWT can be also useful to securely transmit data to other applications.&lt;/p&gt;

&lt;p&gt;Now let me introduce the standard: JSON Web Token (JWT) is an open standard &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;RFC 7519&lt;/a&gt; that defines a compact, self-contained and secure way for transmitting information between two parties.&lt;/p&gt;

&lt;p&gt;Using javascript object notation to represent the data means two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;saving lots of bytes when the token goes over the network, &lt;strong&gt;because of it&amp;rsquo;s size&lt;/strong&gt; it can be sent over an URL or inside an HTTP Header&lt;/li&gt;
&lt;li&gt;it can be &lt;strong&gt;easily parsed by a browser&lt;/strong&gt; and consumed by a client application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is more clear when comparing JSON to other standards like &lt;a href=&#34;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&#34;&gt;SAML&lt;/a&gt; that uses a very verbose XML structure.&lt;/p&gt;

&lt;p&gt;A JWT token can be trusted because it is digitally signed using a secret (usually with &lt;a href=&#34;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&#34;&gt;HMAC&lt;/a&gt; algorithm) or a keypair with &lt;a href=&#34;https://en.wikipedia.org/wiki/RSA&#34;&gt;RSA&lt;/a&gt;.
Its payload contains all the required data to verify itself and, for example, transport the user data to avoid querying the database more than once.&lt;/p&gt;

&lt;h2 id=&#34;how-the-token-presents-itself:be256830241f7dc27936f7751ed2a96e&#34;&gt;How the token presents itself&lt;/h2&gt;

&lt;p&gt;A token is represented as three base64 encoded strings joined by two points:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;headers:be256830241f7dc27936f7751ed2a96e&#34;&gt;Headers&lt;/h3&gt;

&lt;p&gt;The first part of the string contains the headers, &lt;code&gt;&amp;quot;alg&amp;quot;&lt;/code&gt; is the algorithm used to secure the token and &lt;code&gt;&amp;quot;typ&amp;quot;&lt;/code&gt; is the type; in this case as we can see that I used an HMAC SHA256 to sign the JWT token:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;alg&amp;quot;: &amp;quot;HS256&amp;quot;,
  &amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;payload:be256830241f7dc27936f7751ed2a96e&#34;&gt;Payload&lt;/h3&gt;

&lt;p&gt;The second part is the payload: it&amp;rsquo;s the data sent with the token. It contains metadata and information like expiration, audience or subject, and whatever you need.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;sub&amp;quot;: &amp;quot;1234567890&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;John Doe&amp;quot;,
  &amp;quot;admin&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All data is organized in &lt;strong&gt;claims&lt;/strong&gt;, statements about an entity (typically, the user). There are three types of claims: reserved, public, and private claims.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reserved claims&lt;/strong&gt;: a set of predefined claims, conceived to provide a set of useful information. Some of them are: &lt;code&gt;iss&lt;/code&gt; (issuer), &lt;code&gt;exp&lt;/code&gt; (expiration time), &lt;code&gt;sub&lt;/code&gt; (subject), &lt;code&gt;aud&lt;/code&gt; (audience), among others.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Public claims&lt;/strong&gt;: defined at will but, in order to avoid collisions, they should be defined in the &lt;a href=&#34;http://www.iana.org/assignments/jwt/jwt.xhtml&#34;&gt;IANA JSON Web Token Registry&lt;/a&gt; or be described as a URI that contains a collision resistant namespace.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Private claims&lt;/strong&gt;: custom claims created to share information between parties that agree with using them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sign:be256830241f7dc27936f7751ed2a96e&#34;&gt;Sign&lt;/h3&gt;

&lt;p&gt;The third part of the string is the sign, obtained from hashing headers and payload with a secret using the algorithm described in headers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;HMACSHA256(
  base64UrlEncode(header) + &amp;quot;.&amp;quot; +
  base64UrlEncode(payload),
  secret
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As said before the more interesting feature of JWT is in it&amp;rsquo;s flexibility. It can be created with the claims you need, carry your data and validated on other claims (standard or not).
As an example, if on authentication I want to be sure that the token is issued by my application and that it is not older than 1 hour I can generate a token with a payload like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;iss&amp;quot;: &amp;quot;1234567890&amp;quot;, // my application code
  &amp;quot;exp&amp;quot;: &amp;quot;1459868400&amp;quot;, // 2016-04-04 15:00:00 Expiration time
  &amp;quot;uid&amp;quot;: 159, // the user id
  &amp;quot;name&amp;quot;: &amp;quot;Alessandro Galli&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once my application receives a request with this token, an authenticator component will check the two claims (&lt;code&gt;iss&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;) to be sure of the assertions made before, and then validate the sign. Furthermore, with the additional claims it can login the user without querying the database and complete the request.&lt;/p&gt;

&lt;p&gt;This approach results in a stateless authentication removing all problems related to session storage, CORS+cookies requests and CSRF protection, among others.&lt;/p&gt;

&lt;p&gt;As a solid standard, JWT has been adopted by a large number of users and it has libraries for almost every programming language: PHP, Java, Go, Python, Javascript, Ruby, Elixir, Scala, .NET. You can find a full list of available and trusted libraries on &lt;a href=&#34;https://jwt.io/#libraries-io&#34;&gt;JWT.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next weeks, I will write a post and release my personal authentication example, using PHP with the Symfony framework.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Decoupling view controllers with Signals</title>
      <link>/blog/eng/decoupling-view-controllers-with.signals/</link>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/decoupling-view-controllers-with.signals/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://engineering.facile.it/code-reuse-a-primer/&#34;&gt;Last time&lt;/a&gt; we looked at the &lt;strong&gt;Signal&lt;/strong&gt; class, that is, a simple, reusable way of encapsulating the &lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;observer pattern&lt;/a&gt;. There are many use cases for a signal, and I&amp;rsquo;m going to show one possible application, spawned from a real-world problem. View controllers&amp;rsquo; composition and decoupling is &lt;strong&gt;hard&lt;/strong&gt;: we often need an input from a view controller, that has to send its input back to its creator, while handling the back navigation somehow. We often find ourselves in a situation in which several different responsibilities are all expressed in a single view controller, with the effect of creating a gigantic class, full of entangled imperative statements, hard-to-understand sequencing and general complexity. We&amp;rsquo;ll use the &lt;code&gt;Signal&lt;/code&gt; class to assign the various responsibilities to different classes, and write cleaner, more declarative code. The core of this architectural pattern lies in inverting the way in which objects communicate, view controller or other: instead of asking objects to do things, we&amp;rsquo;re going to &lt;strong&gt;observe&lt;/strong&gt; what objects are doing, and &lt;strong&gt;react&lt;/strong&gt; accordingly. &lt;em&gt;Observe&lt;/em&gt; and &lt;em&gt;React&lt;/em&gt; are the cornerstones of the programming paradigm known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming&#34;&gt;functional reactive programming(FRP)&lt;/a&gt;; the present article is not going to talk about FRP as a whole, nor to present shared FRP techniques; the point is to discuss an architectural pattern for decoupling view controllers from responsibilities not strictly related to user interaction, by leveraging some basic FRP tools.&lt;/p&gt;

&lt;p&gt;The example project for this article is available in &lt;a href=&#34;https://github.com/broomburgo/SignalViewControllers/&#34;&gt;GitHub&lt;/a&gt;: I&amp;rsquo;m going to paste some code examples, but it&amp;rsquo;s recommended to check and test the entire project while reading the article. What follows is the full implementation of &lt;code&gt;Signal&lt;/code&gt;, and its public interface for sending new values, called &lt;code&gt;Emitter&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;import Foundation

public enum Persistence {
  case Stop
  case Continue
}

public final class Signal&amp;lt;Subtype&amp;gt; {
  typealias Observation = Subtype -&amp;gt; Persistence

  private var observations: [Observation] = []

  public init() {}

  public func onReception (observeFunction: Subtype -&amp;gt; Persistence) -&amp;gt; Signal {
    observations.append(observeFunction)
    return self
  }

  public func map&amp;lt;OtherSubtype&amp;gt;(transform: Subtype -&amp;gt; OtherSubtype) -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt; {
    let mappedSignal = Signal&amp;lt;OtherSubtype&amp;gt;()
    onReception {
      mappedSignal.send(transform($0))
      return .Continue
    }
    return mappedSignal
  }

  public func flatMap&amp;lt;OtherSubtype&amp;gt;(transform: Subtype -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt;) -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt; {
    let mappedSignal = Signal&amp;lt;OtherSubtype&amp;gt;()
    onReception {
      transform($0).onReception {
        mappedSignal.send($0)
        return .Continue
      }
      return .Continue
    }
    return mappedSignal
  }

  public func filter(predicate: Subtype -&amp;gt; Bool) -&amp;gt; Signal {
    let filteredSignal = Signal&amp;lt;Subtype&amp;gt;()
    onReception {
      if predicate($0) {
        filteredSignal.send($0)
      }
      return .Continue
    }
    return filteredSignal
  }

  public func unionWith (otherSignal: Signal&amp;lt;Subtype&amp;gt;) -&amp;gt; Signal {
    let unifiedSignal = Signal&amp;lt;Subtype&amp;gt;()
    let observeFunction = { (value: Subtype) -&amp;gt; Persistence in
      unifiedSignal.send(value)
      return .Continue
    }
    onReception(observeFunction)
    otherSignal.onReception(observeFunction)
    return unifiedSignal
  }
}

public func + &amp;lt;Subtype&amp;gt; (left: Signal&amp;lt;Subtype&amp;gt;, right: Signal&amp;lt;Subtype&amp;gt;) -&amp;gt; Signal&amp;lt;Subtype&amp;gt; {
  return left.unionWith(right)
}

extension Signal {
  private func send (value: Subtype) {
    var newObservations: [Observation] = []
    while observations.count &amp;gt; 0 {
      let observe = observations.removeFirst()
      let persistence = observe(value)
      switch persistence {
      case .Continue:
        newObservations.append(observe)
      case .Stop: break
      }
    }
    observations = newObservations
  }
}

public final class Emitter&amp;lt;Subtype&amp;gt; {
  public let signal = Signal&amp;lt;Subtype&amp;gt;()

  public func emit(value: Subtype) {
    signal.send(value)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-megacontroller:98c10da2faa40144e7de0ba94dc701c4&#34;&gt;The megacontroller&lt;/h2&gt;

&lt;p&gt;Suppose we need to create a simple app to leave a feedback for a movie we just watched; the feedback will be divided in two categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;average&lt;/em&gt;: the movie was &lt;em&gt;good&lt;/em&gt;, &lt;em&gt;bad&lt;/em&gt; or &lt;em&gt;so and so&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;polarized&lt;/em&gt;: the movie was &lt;em&gt;very bad&lt;/em&gt; or &lt;em&gt;really good&lt;/em&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The app is going to present a page in which the user can select an &lt;em&gt;average&lt;/em&gt; or a &lt;em&gt;polarized&lt;/em&gt; feedback, and can tap a button that will present the user the available choices, i.e., respectively &lt;em&gt;good&lt;/em&gt;, &lt;em&gt;son and so&lt;/em&gt;, &lt;em&gt;bad&lt;/em&gt;, or &lt;em&gt;really&lt;/em&gt; and &lt;em&gt;very bad&lt;/em&gt;. The app is also going to thank the user if they&amp;rsquo;ve just left a positive feedback, but only if the previously left feedback was of lower value. The example is a little contrived but instructive, as we&amp;rsquo;re going to see. An &lt;strong&gt;easy, familiar approach&lt;/strong&gt; to the problem would be to start with the design of the two view controllers involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;MainPage&lt;/code&gt; will let the user select if the feedback is average or polarized, and will present a button to show the page where the actual feedback value will be selected; the &lt;code&gt;MainPage&lt;/code&gt; will also show the currently selected feedback (or none) in a label;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;SelectionPage&lt;/code&gt; is going to present several buttons with the various feedback values (different based on the feedback category), and at the tap of a button the page should actually pop from the navigation stack, going back to the now-updated &lt;code&gt;MainPage&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Armed with our &lt;strong&gt;imperative mind&lt;/strong&gt; we would probably start by adding a sequence of instructions to the &lt;code&gt;MainPage&lt;/code&gt;, that we&amp;rsquo;ll probably perceive as the &amp;ldquo;main&amp;rdquo; controller of our app. But soon, we would probably notice that a lot of &lt;strong&gt;clearly separated&lt;/strong&gt; responsibilities are being collected in the &lt;code&gt;MainPage&lt;/code&gt; class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;SelectionPage&lt;/code&gt; has to be constructed and initialized, and by doing this in &lt;code&gt;MainPage&lt;/code&gt; we are imposing a strict &lt;strong&gt;dependency&lt;/strong&gt; between the two classes;&lt;/li&gt;
&lt;li&gt;after its initialization, the &lt;code&gt;SelectionPage&lt;/code&gt; must be presented to the user: we would probably embed &lt;code&gt;MainPage&lt;/code&gt; in a &lt;code&gt;UINavigationController&lt;/code&gt;, then push the &lt;code&gt;SelectionPage&lt;/code&gt; from the &lt;code&gt;MainPage&lt;/code&gt;, resulting in a strict coupling of the two classes with a particular navigation and presentation strategy (i.e., using a &lt;code&gt;UINavigationController&lt;/code&gt;) that is going to cause headaches if the use cases change (for example, in developing the &lt;strong&gt;iPad version&lt;/strong&gt; of the app);&lt;/li&gt;
&lt;li&gt;there&amp;rsquo;s a feedback value &lt;strong&gt;stored somewhere&lt;/strong&gt;, because we need to know if the user selected &lt;code&gt;average&lt;/code&gt; or &lt;code&gt;polarized&lt;/code&gt;, and actually which was the selected feedback, because its value will be shown on the main page; the simplest solution seems to be just storing the selected feedback value in the &lt;code&gt;MainPage&lt;/code&gt; class;&lt;/li&gt;
&lt;li&gt;the act of &amp;ldquo;collecting the feedback&amp;rdquo; is a responsibility in itself, because the collected value is probably going to be used somewhere (for example, posting it to a web service);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We basically identified 4 different responsibilities, each of which is probably going to need its own class, but instead of thinking about the methods that need to be called on each one of them, we&amp;rsquo;re going to try and think with signals.&lt;/p&gt;

&lt;h2 id=&#34;the-model:98c10da2faa40144e7de0ba94dc701c4&#34;&gt;The model&lt;/h2&gt;

&lt;p&gt;For example, if the model changes we need to update the text shown on the &lt;code&gt;MainPage&lt;/code&gt;: a possible way to manage this could be to create a &lt;code&gt;ModelController&lt;/code&gt; class, which holds the model, and &lt;em&gt;emits a signal&lt;/em&gt; each time the model changes. Then, the &lt;code&gt;MainPage&lt;/code&gt; could &lt;em&gt;react&lt;/em&gt; to this signal, and change the UI accordingly. A nice to way to do this is injecting the &lt;code&gt;ModelController&lt;/code&gt; in the &lt;code&gt;MainPage&lt;/code&gt; constructor, so that &lt;code&gt;MainPage&lt;/code&gt; can establish the appropriate bindings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;/// MainPage initializer
init(feedbackModelController: ModelController&amp;lt;FeedbackModel&amp;gt;) {
  super.init(nibName: nil, bundle: nil)
  feedbackModelController.updateSignal.onReception Â§ eachTime Â§ updateViewsWithFeedbackModel
  viewReadyEmitter.signal.onReception Â§ eachTime Â§ feedbackModelController.notify
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Â§&lt;/code&gt; operator and the &lt;code&gt;eachTime&lt;/code&gt; function are just helpers to make the &lt;strong&gt;functional composition&lt;/strong&gt; easier: as it often happens with functional programming, or declarative programming in general, we can infer the meaning of an expression just by reading it; in fact, &lt;code&gt;onReception Â§ eachTime Â§ updateViewsWithFeedbackModel&lt;/code&gt; means that when the signal is received, the &lt;code&gt;MainPage&lt;/code&gt; will update the view every time according to the new &lt;code&gt;FeedbackModel&lt;/code&gt;: &lt;code&gt;eachTime&lt;/code&gt; means that every time the signal triggers, so will the update; this is in contrast with the &lt;code&gt;once&lt;/code&gt; function, that makes the object listen only to the first signal trigger. This is  related to the &lt;code&gt;Persistence&lt;/code&gt; of a &lt;code&gt;Signal&lt;/code&gt; observation, that is, if the object should continue listen to a signal or not: &lt;code&gt;Persistence&lt;/code&gt; is a single &lt;code&gt;enum&lt;/code&gt; with two values, &lt;code&gt;Continue&lt;/code&gt; and &lt;code&gt;Stop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An important characteristic of the view controllers is the fact that the views are not yet initialized in the constructor, so we often need to memorize some data and use it in the &lt;code&gt;viewDidLoad&lt;/code&gt; method, that is called by the framework when all the views are loaded, and can consequently be manipulated; but we used a signal to express the update logic directly in the constructor, where the &lt;code&gt;ModelController&lt;/code&gt; is available: the line &lt;code&gt;viewReadyEmitter.signal.onReception Â§ eachTime Â§ feedbackModelController.notify&lt;/code&gt; means that when the &lt;code&gt;viewReadyEmitter&lt;/code&gt;, i.e., the emitter that will send a signal when the view is ready, is triggering, the model controller has to &lt;em&gt;notify&lt;/em&gt; its current value to all the observers; this way we don&amp;rsquo;t need to manually update the views in the &lt;code&gt;viewDidLoad&lt;/code&gt; method: everything is connected, and the signals will &lt;strong&gt;propagate&lt;/strong&gt; according to the declarative bindings.&lt;/p&gt;

&lt;h2 id=&#34;handling-page-creation-and-presentation:98c10da2faa40144e7de0ba94dc701c4&#34;&gt;Handling page creation and presentation&lt;/h2&gt;

&lt;p&gt;Transitioning between pages is one the key points in iOS programming: page presentation has to be &lt;strong&gt;predictable and smooth&lt;/strong&gt;, to avoid a confusing user experience. One of the main premises of the &lt;code&gt;UIViewController&lt;/code&gt; class was and still is the creation of a modular hierarchy of views, that&amp;rsquo;s independent from the way it&amp;rsquo;s presented to the user: that way we can easily reuse &lt;strong&gt;the same&lt;/strong&gt; view controller, for example, in full screen on the iPhone, or as a child view controller on a more complex hierarchy on iPad. The problem is that, if we write down the navigation and presentation logic &lt;em&gt;inside&lt;/em&gt; the view controller class, we are going to establish tight dependencies between the view controller and its presentation, thus going against the premise.&lt;/p&gt;

&lt;p&gt;A possible solution would be to use a &lt;code&gt;NavigationHandler&lt;/code&gt;, that will handle the transition between pages, along with the initial presentation during the application startup. The strategy here is to use a class that knows &lt;strong&gt;when and how&lt;/strong&gt; to present pages, oblivious of what pages actually do. For example, on receiving the appropriate signal from &lt;code&gt;MainPage&lt;/code&gt;, the &lt;code&gt;NavigationHandler&lt;/code&gt; will present the &lt;code&gt;SelectionPage&lt;/code&gt;. Where the &lt;code&gt;SelectionPage&lt;/code&gt; comes from? We should certainly avoid to burden the &lt;code&gt;NavigationHandler&lt;/code&gt; with pages&amp;rsquo; initialization responsibilities,  in fact we identified the class creation as a responsibility in itself. A frequent pattern used to handle the initialization of objects is the &lt;a href=&#34;http://www.oodesign.com/factory-pattern.html&#34;&gt;Factory Pattern&lt;/a&gt;: a &lt;code&gt;PageFactory&lt;/code&gt; will construct our pages with the options passed to the factory constructor. Thus, &lt;code&gt;NavigationHandler&lt;/code&gt; will ask the &lt;code&gt;PageFactory&lt;/code&gt; for pages, through the methods &lt;code&gt;makeMainPage&lt;/code&gt; and &lt;code&gt;makeSelectionPage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But we incur in a problem: &lt;code&gt;makeSelectionPage&lt;/code&gt; will just return a &lt;code&gt;SelectionPage&lt;/code&gt; object, but we don&amp;rsquo;t know if it&amp;rsquo;s &lt;em&gt;always&lt;/em&gt; the same instance, or a new instance each time. In fact, &lt;code&gt;PageFactory&lt;/code&gt; doesn&amp;rsquo;t &lt;em&gt;promise&lt;/em&gt; always the same page. This is important because the &lt;code&gt;NavigationHandler&lt;/code&gt; will only take care of page presentation, but the very same page instance has to be considered, for example, for collecting the feedback. A possible strategy would be to &lt;em&gt;cache&lt;/em&gt; the &lt;code&gt;SelectionPage&lt;/code&gt;, but one of the main points of functional programming is &lt;strong&gt;avoiding state&lt;/strong&gt;: we don&amp;rsquo;t want to burden ourselves with the responsibility of managing mutable state, which is one of the &lt;a href=&#34;http://shaffner.us/cs/papers/tarpit.pdf&#34;&gt;main causes of complexity&lt;/a&gt; in software development. Instead, we will once again leverage signals to handle the situation. &lt;code&gt;PageFactory&lt;/code&gt; exposes two signals that are triggered at page creation; &lt;code&gt;NavigationHandler&lt;/code&gt;  uses those signal to bind its actions to the initialized pages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;pageFactory.signalMakeMainPage
  .flatMap { $0.signalLeaveFeedback }
  .onReception Â§ eachTime Â§ inAnyCase Â§ presentSelectionPage
  
pageFactory.signalMakeSelectionPage
  .flatMap { $0.signalSelection }
  .onReception Â§ eachTime Â§ inAnyCase Â§ popTopPage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code just shown, the signals that are triggered when the pages are initialized are &lt;em&gt;flatMapped&lt;/em&gt; to the respective interaction signals, that is, the observed signal is a signal that will trigger when the second signal is triggered, but the &lt;em&gt;second&lt;/em&gt; signal will be available only when the &lt;em&gt;first&lt;/em&gt; signal is triggered: the &lt;code&gt;flatMap&lt;/code&gt; method will let us reference a signal that is not yet available. The &lt;code&gt;inAnyCase&lt;/code&gt; function is used because &lt;code&gt;NavigationHandler&lt;/code&gt; is not interested in the &lt;em&gt;content&lt;/em&gt; of the signals, but just the fact that they are triggered; the content is going to be handled by another class: &lt;code&gt;FeedbackCollector&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;composing-signals:98c10da2faa40144e7de0ba94dc701c4&#34;&gt;Composing signals&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FeedbackCollector&lt;/code&gt; has the responsibility of &lt;em&gt;collecting the whole feedback&lt;/em&gt;: this seems tricky, because the creation of a new feedback is not a synchronous procedure, and it&amp;rsquo;s the result of &lt;strong&gt;many different interactions&lt;/strong&gt; from the user in different contexts. As we saw, a signal is an abstraction over asynchronous programming: we declare the signal bindings for actions that will trigger at a certain point in time. Thanks to signals we can express the logic for collecting feedback in a single function call, executed during the app startup phase, even if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;at the app startup the pages are not yet initialized;&lt;/li&gt;
&lt;li&gt;to actually collect the feedback various interactions in multiple pages will be needed;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually these consideration would lead to &lt;strong&gt;stateful&lt;/strong&gt; computations, where state would be expressed in various points, and mutated. But the class &lt;code&gt;FeedbackCollector&lt;/code&gt; can generate a signal triggered each time a new feedback is collected with a single expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func collectFeedbackModelChange() -&amp;gt; Signal&amp;lt;FeedbackModelChange&amp;gt; {
  return pageFactory.signalMakeMainPage
    .flatMap { $0.signalPolarizedChanged }
    .map(FeedbackModel.transformWithPolarized)
    + pageFactory.signalMakeSelectionPage
      .flatMap { $0.signalSelection }
      .map(FeedbackModel.transformWithFeedback)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator will literally &lt;em&gt;add&lt;/em&gt; 2 signals together, producing a signal that is triggered each time either of the signals is triggered. The app uses the &lt;code&gt;Signal&amp;lt;FeedbackModelChange&amp;gt;&lt;/code&gt; produced by the &lt;code&gt;collectFeedbackModelChange()&lt;/code&gt; to update the model in the &lt;code&gt;ModelController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another example of asynchronous reaction to signals is shown in the &lt;code&gt;AppDelegate&lt;/code&gt;&amp;rsquo;s method &lt;code&gt;handleGoodFeedbacksWithAlert()&lt;/code&gt;; here&amp;rsquo;s the logic: if the user leaves a positive feedback, that is better than the previously left feedback, the app will show an alert, thanking the user. The entire logic for this is handled in the following expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;feedbackModelController.deltaSignal
  .filter { $0.feedback.rawValue &amp;lt; $1.feedback.rawValue}
  .filter { $1.feedback == .Good || $1.feedback == .ReallyGood }
  .onReception Â§ eachTime Â§ inAnyCase Â§ showThankYouAlert
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ModelController&lt;/code&gt;&amp;rsquo;s &lt;code&gt;deltaSignal&lt;/code&gt; is triggered each time the model changes, and contains both the old and the new value: in the shown expression a signal is created by &lt;em&gt;filtering&lt;/em&gt; the &lt;code&gt;deltaSignal&lt;/code&gt;, because we need a signal that is triggered only when the new feedback is different from the previous and positive.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:98c10da2faa40144e7de0ba94dc701c4&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;A clean and decoupled architecture is hard to get right, and can be obtained in different ways. Using signals will help us achieve the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can work on &lt;strong&gt;a single piece at a time&lt;/strong&gt;, thinking about what &lt;em&gt;values&lt;/em&gt; are exchanged between classes, instead of interfaces and abstractions;&lt;/li&gt;
&lt;li&gt;we&amp;rsquo;ll be able to focus on what a view controller, or any class, really has to &lt;em&gt;produce&lt;/em&gt;, that is, what value is going to yield in the economy of the app;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Signals are not application-wide events: we don&amp;rsquo;t need a router or a dispatcher (like   &lt;code&gt;NSNotificationCenter&lt;/code&gt;) to properly handle them, because each object will declare its observation of specific signals. Also, because signals are easily transformed and composed, we can declaratively express our bindings without worrying about &lt;em&gt;when&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; things are going to happen, but just &lt;em&gt;what&lt;/em&gt; we need. Of course our architecture has to take into account the fact that getting a &lt;em&gt;precise sequence of events&lt;/em&gt; is basically impossible when working with signals: actually, &lt;em&gt;sequencing&lt;/em&gt; is not even considered in declarative programming, because, along with &lt;em&gt;state&lt;/em&gt;, is a great cause of complexity. In the end, a declarative architecture, like everything, has its tradeoffs, but I still think it&amp;rsquo;s worth trying.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GraphQL: an introduction</title>
      <link>/blog/eng/graphql-an-introduction/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/graphql-an-introduction/</guid>
      <description>

&lt;h2 id=&#34;the-lesson-we-learned-with-rest:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;The lesson we learned with REST&lt;/h2&gt;

&lt;p&gt;For many developers, nowadays, building an &lt;strong&gt;API&lt;/strong&gt; for their applications essentially means mapping the &lt;em&gt;resources&lt;/em&gt; of the domain to &lt;em&gt;URIs&lt;/em&gt;, with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34;&gt;REST&lt;/a&gt; principles in mind.
Usually creating a &lt;strong&gt;&lt;em&gt;RESTful&lt;/em&gt;&lt;/strong&gt; system is not difficult, and the simplicity of the idea makes the task easier.
Let&amp;rsquo;s see some of the consequences and benefits of choosing REST:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every HTTP verb has its own meaning, allowing the developer to understand immediately what kind of operation (typically among the CRUD ones) is going to be performed on the resource identified by the URI.&lt;/li&gt;
&lt;li&gt;Often the same URI can be used with multiple verbs to accomplish different tasks (e.g. &amp;ldquo;example.com/tag/123&amp;rdquo; refers to a particular tag that you can retrieve, update or delete).&lt;/li&gt;
&lt;li&gt;Controllers in many server-side frameworks can be created with a RESTful approach, each one of them representing one or more resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, unfortunately, it&amp;rsquo;s often easy to come across some problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complex URIs can be difficult to write or understand and sometimes they are subject to arbitrary interpretations.&lt;/li&gt;
&lt;li&gt;In order to filter collections you may need to use one or more ids embedded in the URL, but also &lt;em&gt;query parameters&lt;/em&gt;, e.g. when you want to sort the results of a GET by one particular field or retrieve resources by some field other than the id.&lt;/li&gt;
&lt;li&gt;There is no standard or easy way for the client to specify the list of fields that it needs, and the server will usually return all the data related to the requested resource.&lt;/li&gt;
&lt;li&gt;More importantly, there is no standard way for the client to decide which resources related to the one requested should be returned, resulting in a lot of noise in the response content (unless the server application offers multiple endpoints to access the same resource but with different subsets of data&amp;hellip; but this could lead to API design problems).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can&amp;rsquo;t really blame REST for these and other cons. Its power comes from simplicity and developers are thankful for this breath of fresh air. You have just one transport layer, i.e. HTTP, with its features and rules.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s see how we can take a step forward and add some salt to our APIs, to make them even more powerful and expressive.&lt;/p&gt;

&lt;h2 id=&#34;a-new-way-to-design-api-graphql:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;A new way to design API: GraphQL&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt; maintains all the advantages of REST (relies on HTTP, very small overhead on requests, stateless and cacheable) and adds some very useful enhancements.
One of the main reasons why &lt;strong&gt;Facebook&lt;/strong&gt; created it back in 2012 was the need to find a way to access data on their server that allowed any type of client and device (especially mobile site and app) to decide exactly what fields they need, reducing the payload and then minimizing the traffic.&lt;/p&gt;

&lt;p&gt;Instead of explaining all the features, which can be read in the &lt;a href=&#34;http://graphql.org/docs/getting-started/&#34;&gt;official guide&lt;/a&gt;, in this post we&amp;rsquo;ll focus on what makes GraphQL interesting.
In the next section we&amp;rsquo;ll use types and queries presented in our example project, that you can clone from &lt;a href=&#34;https://github.com/poetcyborg/graphql-node-starter-kit&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;types-and-fields-driven-queries:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;Types and fields driven queries&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Example #1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games {
        id
	    title
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previous snippet describes a query issued by the client when it just needs to retrieve &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;title&lt;/em&gt; of a &lt;strong&gt;&lt;em&gt;game&lt;/em&gt;&lt;/strong&gt;.
Since no argument has been passed to filter the data of the specified type (&lt;em&gt;game&lt;/em&gt;), all the games will be retrieved.
The output for this query is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;games&amp;quot;: [{
        &amp;quot;id&amp;quot;: 1,
        &amp;quot;title&amp;quot;: &amp;quot;Frogger&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 2,
        &amp;quot;title&amp;quot;: &amp;quot;Galaxian&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 3,
        &amp;quot;title&amp;quot;: &amp;quot;Tiger Road&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 4,
        &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With REST, the same task could be accomplished with the following url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game?fields=id,title
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unless the server applications is taking care of field filtering based on query params, all the information about every game will be returned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games(id:2) {
        id
        title
        year
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example #3&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games(title:&amp;quot;Frogger&amp;quot;) {
		id
        title
        year
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples #2 and #3 show a way to filter games by their &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;title&lt;/em&gt; respectively.
As you can see, the id has no semantic meaning like in REST, so you can describe the filter criterion in the same manner (&lt;em&gt;fieldname: &amp;ldquo;value&amp;rdquo;&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The REST equivalent (selected fields are omitted) for Example #2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game/2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and #3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game?title=Frogger
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;relations-between-entities-graph-representation:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;Relations between entities: graph representation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Example #4&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    games(id:2) {
        title
        developer {
            name
            nation
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;types&lt;/strong&gt; called &lt;em&gt;Game&lt;/em&gt; and &lt;em&gt;Company&lt;/em&gt; are related to each other; in our example, for the sake of simplicity, a game can only have one company as developer and one as publisher, while any company can have multiple developed or published games.
In Example #4, you can notice the complex field &lt;em&gt;developer&lt;/em&gt;; we want to know the name and the nation of the company that developed the game with id = 2.&lt;/p&gt;

&lt;p&gt;The same two types can be reused to express the opposite of the relation described in the previous example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #5:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    companies(name:&amp;quot;Game Freak&amp;quot;) {
        name
        gamesAsDeveloper {
            title
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see briefly how you can describe these relations in the &lt;strong&gt;Javascript&lt;/strong&gt; implementation.&lt;/p&gt;

&lt;p&gt;In the &amp;lsquo;&lt;em&gt;Game&lt;/em&gt;&amp;rsquo; type definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;developer: {
	type: Company,
    description: &#39;The developer of the game&#39;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in the &amp;lsquo;&lt;em&gt;Company&lt;/em&gt;&amp;rsquo; type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gamesAsDeveloper: {
    type: new GraphQLList(Game),
    description: &#39;The games created as a developer&#39;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The field &lt;em&gt;developer&lt;/em&gt; is defined as type &lt;em&gt;Company&lt;/em&gt;, while the field &lt;em&gt;gamesAsDeveloper&lt;/em&gt; is a list of &lt;em&gt;Game&lt;/em&gt;.
Please refer to the &lt;a href=&#34;https://github.com/poetcyborg/graphql-node-starter-kit&#34;&gt;demo project&lt;/a&gt; for the full implementation of this example.&lt;/p&gt;

&lt;h3 id=&#34;minimizing-the-number-of-requests-to-the-server:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;Minimizing the number of requests to the server&lt;/h3&gt;

&lt;p&gt;This time we need the list of the &lt;em&gt;Japanese companies&lt;/em&gt; and some information about the games they worked on, but only for the &lt;em&gt;NES&lt;/em&gt; (Nintendo Entertainment System) platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #6:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    companies(nation:&amp;quot;Japan&amp;quot;) {
	    name
        gamesAsDeveloper(platform:&amp;quot;NES&amp;quot;) {
		    title
	        year
        }
        gamesAsPublisher(platform:&amp;quot;NES&amp;quot;) {
            title
            year
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This query&amp;rsquo;s output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;companies&amp;quot;: [{
        &amp;quot;name&amp;quot;: &amp;quot;Konami&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Namco&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [],
        &amp;quot;gamesAsPublisher&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1989&amp;quot;
          }]
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Game Freak&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1989&amp;quot;
          }],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Capcom&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Tiger Road&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1987&amp;quot;
          }],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the REST world, the same response could be obtained in several ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by sending a request to an endpoint that was built exactly for the purpose of filtering companies and games by some fields, e.g.:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;GET /companyWithGames?companyNation=Japan&amp;amp;gamePlatform=NES&amp;amp;fields=...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;by sending several requests to more generic endpoints, e.g.:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;GET /company?nation=Japan&amp;amp;fields=...
GET /game?developerName=[developer 1 name]&amp;amp;gamePlatform=NES&amp;amp;fields=...
GET /game?developerName=[developer 2 name]&amp;amp;gamePlatform=NES&amp;amp;fields=...
GET ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a couple of notable things here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the expressivity of the query language becomes more evident when things start becoming more interesting; filtering subsets of data feels natural and easy as you can just specify the criteria for the filters directly on the subtree root (companies -&amp;gt; nation, gamesAsDeveloper -&amp;gt; platform, gamesAsPublisher -&amp;gt; platform);&lt;/li&gt;
&lt;li&gt;on server side, the developer can write the code to retrieve the data for every subset of data independently, considering that, when a request is sent, every subtree receives the data returned by the upper levels (in this case, filtering &lt;em&gt;games&lt;/em&gt; with the given &lt;em&gt;platform&lt;/em&gt; is performed only on companies with the selected &lt;em&gt;nation&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;api-documentation:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;API Documentation&lt;/h3&gt;

&lt;p&gt;When you design a REST WebService, for every endpoint you&amp;rsquo;re mostly going to take care of its URI and the structure of the request and the response body.
Unfortunately, there is no standard way to document this information and make it available to the client developers.&lt;/p&gt;

&lt;p&gt;With GraphQL, using &lt;strong&gt;&lt;em&gt;introspection&lt;/em&gt;&lt;/strong&gt; you can ask the server information about the available types and their fields.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #7&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    __schema {
        types {
            kind
            name
            description
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A query with the query root &lt;strong&gt;&lt;em&gt;__schema&lt;/em&gt;&lt;/strong&gt; returns the list of types with their descriptions and fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;__schema&amp;quot;: {
      &amp;quot;types&amp;quot;: [
		...
        {
          &amp;quot;kind&amp;quot;: &amp;quot;OBJECT&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;Company&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;A company object&amp;quot;,
          &amp;quot;fields&amp;quot;: [...]
        }, {
          &amp;quot;kind&amp;quot;: &amp;quot;OBJECT&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;Game&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;A game object&amp;quot;
          &amp;quot;fields&amp;quot;: [...]
        },
        ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to get the information about the types is using the query root &lt;strong&gt;&lt;em&gt;__type&lt;/em&gt;&lt;/strong&gt;, passing a specific type name:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #8&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    __type(name:&amp;quot;Game&amp;quot;) {
        fields {
            name
            description
            type {
                name
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;data&amp;quot;: {
        &amp;quot;__type&amp;quot;: {
            &amp;quot;fields&amp;quot;: [{
                &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;The id of a game&amp;quot;,
                &amp;quot;type&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;Int&amp;quot;
                }
            }, {
	            &amp;quot;name&amp;quot;: &amp;quot;title&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;The title of a game&amp;quot;,
                &amp;quot;type&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;String&amp;quot;
                }
            },
            ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mutations:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;Mutations&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve already talked about queries, but a few words need to be spent about the other important operation that you can perform on a GraphQL server: &lt;strong&gt;mutations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #9&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mutation {
	updateGameRating(id:2, rating:7) {
		id
		title
		rating
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax is no different from the previous ones, except for the &lt;strong&gt;&lt;em&gt;mutation&lt;/em&gt;&lt;/strong&gt; root.
It is the equivalent of a POST or a PATCH in REST, and lets us change the value of some fields in a resource.
In this example we are assigning a value (7) to the &lt;em&gt;rating&lt;/em&gt; field of the &lt;em&gt;Game&lt;/em&gt; types; this mutation could be defined in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	name: &#39;UpdateGameRating&#39;,
	type: Game,
	args: {
	    rating: { type: new GraphQLNonNull(GraphQLInt) },
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the specified type for the mutation is &lt;em&gt;Game&lt;/em&gt;; this means not only that the update should be performed on games, but also that the &lt;em&gt;Game&lt;/em&gt; field included in the request (id, title and rating) should be returned, just like a normal query.&lt;/p&gt;

&lt;h2 id=&#34;implementations:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;Implementations&lt;/h2&gt;

&lt;p&gt;In the present article we sometimes referred to the official &lt;strong&gt;Javascript&lt;/strong&gt; library for GraphQL, but as you can see in &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql&#34;&gt;this project&lt;/a&gt; there are many different implementations for the most popular languages.&lt;/p&gt;

&lt;h2 id=&#34;the-future-of-graphql:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;The future of GraphQL&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s difficult to say what will become of GraphQL in the next year.
Sure there&amp;rsquo;s a lot of hype around it, and for some very solid reasons.
It&amp;rsquo;s not going to replace REST in developers&amp;rsquo; hearts anytime soon, but if they&amp;rsquo;re brave enough, they can add a &lt;strong&gt;GraphQL layer&lt;/strong&gt; over an existing REST API in their application.
In fact, in my opinion, another good point of interest regarding GraphQL is the ability to aggregate multiple endpoints that reference various resources. Its nature is very domain-centric and it&amp;rsquo;s more  focused on &lt;strong&gt;&lt;em&gt;what&lt;/em&gt;&lt;/strong&gt; data needs to be precisely retrieved, rather than on &lt;strong&gt;&lt;em&gt;how to&lt;/em&gt;&lt;/strong&gt; get it.&lt;/p&gt;

&lt;p&gt;Some questions arise when you think about GraphQL in a more vast spectrum:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to &lt;strong&gt;cache&lt;/strong&gt; resources on server-side, even if they were originally fetched using different queries? (Facebook is trying to give some answers with &lt;a href=&#34;https://facebook.github.io/relay/docs/thinking-in-relay.html&#34;&gt;Relay&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;how to &lt;strong&gt;limit the access&lt;/strong&gt; to the resources (or the introspection on them) only to some users? GraphQL is authorization-agnostic, but as you can read in &lt;a href=&#34;https://github.com/graphql/graphql-js/issues/113&#34;&gt;this Github issue&lt;/a&gt; its a common problem that needs to be at least faced.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The entire Facebook ecosystem of open source projects is worth of attention (don&amp;rsquo;t forget about React, Flux and the other Flux-like architectures) and, even if it&amp;rsquo;s very young, it has become very popular and used by many little and big companies around the world.&lt;/p&gt;

&lt;p&gt;My personal hope is that every lesson that can be learned while working with these projects, especially GraphQL, might lead to a better World Wide Web and a better developing experience, maybe with more standard and free implementations than the Facebook (or Google, or Microsoft, or Apple) ones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write a filesystem with FUSE</title>
      <link>/blog/eng/write-filesystem-fuse/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/write-filesystem-fuse/</guid>
      <description>

&lt;p&gt;During the past year I experimented a lot with file systems in Userspace using FUSE, I wrote this post to share my thoughts about what I did and to give you a starting point to do something by yourself.&lt;/p&gt;

&lt;h1 id=&#34;introduction:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;A filesystem is that piece of software that is in charge of storing, organizing and generally taking care of data represented as files and directories.
If you are using a device to read this post you are probably using at least one filesystem at the moment.&lt;/p&gt;

&lt;p&gt;Implementing a filesystem is not an easy task to accomplish and requires that a few parts of it have to be written at kernel level, fortunately that&amp;rsquo;s not our case since we are not writing a real on-disk filesystem, but rather we want to write something on top of it to solve a specific problem.&lt;/p&gt;

&lt;p&gt;The most common tool to do that in user space is precisely &lt;strong&gt;FUSE, Filesystem in USErspace&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are a lot of filesystem examples built on top of FUSE out there that cover the most different use cases like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gluster.org/&#34;&gt;GlusterFS&lt;/a&gt;: scalable network filesystem&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/libfuse/sshfs&#34;&gt;SSHFS&lt;/a&gt;: allows mounting a remote filesystem over SSH&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sr71.net/projects/gmailfs/&#34;&gt;GMailFS&lt;/a&gt;: allows to use GMail storage as a filesystem&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://loggedfs.sourceforge.net/&#34;&gt;LoggedFS&lt;/a&gt;: filesystem that logs operations that happens in it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main &lt;strong&gt;advantages&lt;/strong&gt; of FUSE over writing a low level kernel filesystem are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is usable by non-privileged users;&lt;/li&gt;
&lt;li&gt;Clean and easy interface to do FS operations;&lt;/li&gt;
&lt;li&gt;Has bindings in most available programming language;&lt;/li&gt;
&lt;li&gt;No need of advanced kernel development skills;&lt;/li&gt;
&lt;li&gt;Comes with user isolation, more secure;&lt;/li&gt;
&lt;li&gt;Since you are not hacking in kernel space there are a few chances that a crash in your program takes down the entire system;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However there are also a few &lt;strong&gt;disadvantages&lt;/strong&gt; of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The target system need libfuse installed;&lt;/li&gt;
&lt;li&gt;Slower than low level implementations;&lt;/li&gt;
&lt;li&gt;Not the best option if you need multiple users to access your filesystem;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s a flow-chart diagram showing how FUSE works, source: &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:FUSE_structure.svg&#34;&gt;Wikimedia Commons&lt;/a&gt;
&lt;img src=&#34;/images/write-filesystem-fuse/FUSE_structure.svg&#34; alt=&#34;A flow-chart diagram showing how FUSE works&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;getting-started-with-fuse:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Getting started with FUSE&lt;/h1&gt;

&lt;p&gt;This section of the post is designed to introduce you on how to practically get your hands dirt with FUSE. Anyway you can understand what&amp;rsquo;s going on whether you execute the code or not.&lt;/p&gt;

&lt;h2 id=&#34;build-dependencies:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Build dependencies&lt;/h2&gt;

&lt;p&gt;From now you&amp;rsquo;ll need a few build dependencies and a text editor or an IDE to build and edit the code and do your experiments.&lt;/p&gt;

&lt;h3 id=&#34;linux:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Linux&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;GCC or Clang&lt;/li&gt;
&lt;li&gt;CMake &amp;gt;= 3&lt;/li&gt;
&lt;li&gt;make&lt;/li&gt;
&lt;li&gt;FUSE 2.6 or later&lt;/li&gt;
&lt;li&gt;FUSE development files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To obtain those dependencies you can issue the following commands (depending on your Linux distribution).&lt;/p&gt;

&lt;p&gt;Fedora/CentOS&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install gcc fuse fuse-devel make cmake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Debian/Ubuntu&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install gcc fuse libfuse-dev make cmake
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mac-osx:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Mac OSX&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Command line tools for Xcode (contains Clang and make)&lt;/li&gt;
&lt;li&gt;CMake &amp;gt;= 3&lt;/li&gt;
&lt;li&gt;FUSE &amp;gt;= 2.6 or later&lt;/li&gt;
&lt;li&gt;FUSE development files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can obtain all the needed dependencies at the following sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/xcode/features/&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/download/&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://osxfuse.github.io/&#34;&gt;OSXFuse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fuse-api:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;FUSE API&lt;/h2&gt;

&lt;p&gt;The most important thing to be aware of when working with FUSE is its API.
The libfuse library exposes a set of callbacks that you have to implement in order to tell your filesystem how to behave.&lt;/p&gt;

&lt;p&gt;The most complete source of documentation on what are the callbacks and their behavior is the &lt;code&gt;fuse.h&lt;/code&gt; declaration file. You can find an online version &lt;a href=&#34;https://github.com/libfuse/libfuse/blob/579c3b03f57856e369fd6db2226b77aba63b59ff/include/fuse.h#L102-L577&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;example-project:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Example project&lt;/h2&gt;

&lt;p&gt;For the purpose of showing you how simple is the creation of a FUSE filesystem, I wrote this little implementation that, when mounted, only exposes a file named &lt;code&gt;file&lt;/code&gt; and its content.&lt;/p&gt;

&lt;p&gt;You can find the example project on &lt;a href=&#34;https://github.com/fntlnz/fuse-example&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think that the best way to start your own implementation is to take an example and start adding your features.&lt;/p&gt;

&lt;p&gt;So, as first thing clone the example project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/fntlnz/fuse-example.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the project structure is quite simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
â”œâ”€â”€ CMake
â”‚Â Â  â””â”€â”€ FindFUSE.cmake
â”œâ”€â”€ CMakeLists.txt
â””â”€â”€ fuse-example.c
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cmakelists-txt-https-github-com-fntlnz-fuse-example-blob-master-cmakelists-txt:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;&lt;a href=&#34;https://github.com/fntlnz/fuse-example/blob/master/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;As you may know CMake is a tool used to manage project builds in a cross platform way. The scope of this file is to define what CMake is supposed to do for our project. The &lt;code&gt;CMake/FindFuse.cmake&lt;/code&gt; is needed in order to tell CMake where to find the FUSE related things while compiling/linking.&lt;/p&gt;

&lt;h3 id=&#34;fuse-example-c-https-github-com-fntlnz-fuse-example-blob-master-fuse-example-c:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;&lt;a href=&#34;https://github.com/fntlnz/fuse-example/blob/master/fuse-example.c&#34;&gt;fuse-example.c&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s where the magic actually happen!&lt;/p&gt;

&lt;p&gt;In this example I implemented four of the FUSE API callbacks namely: getattr, open, read, readdir.&lt;/p&gt;

&lt;h4 id=&#34;getattr:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;getattr&lt;/h4&gt;

&lt;p&gt;The getattr callback is in charge of reading the metadata of a given path, this  callback is always called before any operation made on the filesystem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int getattr_callback(const char *path, struct stat *stbuf) {
  memset(stbuf, 0, sizeof(struct stat));

  if (strcmp(path, &amp;quot;/&amp;quot;) == 0) {
    stbuf-&amp;gt;st_mode = S_IFDIR | 0755;
    stbuf-&amp;gt;st_nlink = 2;
    return 0;
  }

  if (strcmp(path, filepath) == 0) {
    stbuf-&amp;gt;st_mode = S_IFREG | 0777;
    stbuf-&amp;gt;st_nlink = 1;
    stbuf-&amp;gt;st_size = strlen(filecontent);
    return 0;
  }

  return -ENOENT;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we are doing here is simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the value of path equals to root &lt;code&gt;/&lt;/code&gt;, we declare it as a directory and return.&lt;/li&gt;
&lt;li&gt;if the value of path equals to filepath &lt;code&gt;/file&lt;/code&gt;, we declare it as a file and explicit its size and then return.&lt;/li&gt;
&lt;li&gt;Otherwise nothing exists at the given path, and we return &lt;code&gt;-ENOENT&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, we are telling FUSE that the current entry is a file or a directory using the &lt;code&gt;stat&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;In general, if the entry is a directory, &lt;code&gt;st_mode&lt;/code&gt; have to be set to &lt;code&gt;S_IFDIR&lt;/code&gt; and &lt;code&gt;st_nlink&lt;/code&gt; to 2, while if it&amp;rsquo;s a file, &lt;code&gt;st_mode&lt;/code&gt; have to be set to &lt;code&gt;S_IFREG&lt;/code&gt; (that stands for regular file) and &lt;code&gt;st_nlink&lt;/code&gt; to 1. Files also require that the &lt;code&gt;st_size&lt;/code&gt; (the full file size) is specified.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/007908799/xsh/sysstat.h.html&#34;&gt;Here&lt;/a&gt; you can find more information about &lt;code&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;open:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;open&lt;/h4&gt;

&lt;p&gt;The open callback is called when the system requests for a file to be opened. Since we don&amp;rsquo;t have real file but only in-memory representations, we are going to implement this callback just because is needed for FUSE to work and therefore return 0.&lt;/p&gt;

&lt;h4 id=&#34;read:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;read&lt;/h4&gt;

&lt;p&gt;This callback is called when FUSE is reading data from an opened file.
It should return exactly the number of bytes requested and fill the second argument &lt;code&gt;buf&lt;/code&gt; with the content of those bytes.
As done in the getattr callback, here I&amp;rsquo;m checking if the given path equals to a known one, I copy the &lt;code&gt;filecontent&lt;/code&gt; into the &lt;code&gt;buf&lt;/code&gt; and then return the requested number of bytes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int read_callback(const char *path, char *buf, size_t size, off_t offset,
    struct fuse_file_info *fi) {

  if (strcmp(path, filepath) == 0) {
    size_t len = strlen(filecontent);
    if (offset &amp;gt;= len) {
      return 0;
    }

    if (offset + size &amp;gt; len) {
      memcpy(buf, filecontent + offset, len - offset);
      return len - offset;
    }

    memcpy(buf, filecontent + offset, size);
    return size;
  }

  return -ENOENT;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;readdir:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;readdir&lt;/h4&gt;

&lt;p&gt;The readdir callback has the task of telling FUSE the exact structure of the accessed directory.
Since at the moment the only available directory is &lt;code&gt;/&lt;/code&gt;, this function always return its representation, we are doing it by filling &lt;code&gt;buf&lt;/code&gt; with the two links for the upper directory &lt;code&gt;..&lt;/code&gt; and current directory &lt;code&gt;.&lt;/code&gt; and with the only file we have: &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int readdir_callback(const char *path, void *buf, fuse_fill_dir_t filler,
    off_t offset, struct fuse_file_info *fi) {
  (void) offset;
  (void) fi;

  filler(buf, &amp;quot;.&amp;quot;, NULL, 0);
  filler(buf, &amp;quot;..&amp;quot;, NULL, 0);

  filler(buf, filename, NULL, 0);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;main:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;main&lt;/h4&gt;

&lt;p&gt;Last but not least, the &lt;code&gt;main&lt;/code&gt; function here is acting as a proxy to the &lt;code&gt;fuse_main&lt;/code&gt; passing arguments through it and configuring it with the implemented FUSE operation callbacks via the &lt;code&gt;fuse_example_operations&lt;/code&gt; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static struct fuse_operations fuse_example_operations = {
  .getattr = getattr_callback,
  .open = open_callback,
  .read = read_callback,
  .readdir = readdir_callback,
};

int main(int argc, char *argv[])
{
  return fuse_main(argc, argv, &amp;amp;fuse_example_operations, NULL);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;build-and-run:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Build and run&lt;/h3&gt;

&lt;p&gt;Do you remember that you installed CMake, make, gcc and libfuse? It&amp;rsquo;s time to use them!&lt;/p&gt;

&lt;p&gt;The first tool we are using is CMake to &lt;strong&gt;check dependencies, setup environment and generate Makefiles&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake -DCMAKE_BUILD_TYPE=Debug .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t want Debug flags and other development related enabled features, just change &lt;code&gt;Debug&lt;/code&gt; to &lt;code&gt;Release&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The second tool we are using is &lt;code&gt;make&lt;/code&gt;, that using the CMake generated &lt;strong&gt;Makefiles&lt;/strong&gt; is now able to build our project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make -j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-j&lt;/code&gt; parts tells make to parallelize the build to all your cores, remove it if you run out of CPU.&lt;/p&gt;

&lt;p&gt;Now that everything is ready, if no build error has occurred, we can enjoy our new filesystem!&lt;/p&gt;

&lt;h3 id=&#34;run:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Run!&lt;/h3&gt;

&lt;p&gt;Before doing anything we need a mountpoint, so let&amp;rsquo;s create the directory where the filesystem will be mounted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir /tmp/example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then, mount the filesystem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./bin/fuse-example -d -s -f /tmp/example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now check that it has been mounted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -la
total 0
drwxr-xr-x.  2 root root   0 Jan  1  1970 .
drwxrwxrwt. 14 root root 320 Jan 10 16:03 ..
-rwxrwxrwx.  1 root root  49 Jan  1  1970 file

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ mount | grep fuse-example
fuse-example on /tmp/example type fuse.fuse-example (rw,nosuid,nodev,relatime,user_id=1000,group_id=1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you may notice, we mounted the filesystem with three arguments which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;d&lt;/strong&gt;: enable debugging&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt;: run single threaded&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;f&lt;/strong&gt;: stay in foreground&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see the list of all mount options using &lt;code&gt;-h&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;thoughts-and-notes:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Thoughts and notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An important thing to notice is that write and read operations by default have a size of 4kb so if your file is, let&amp;rsquo;s say, 399kb you have to deal with the fact that to read it the read callback will be called 100 times with 100 different offset and 99 equals size but one that will have 3kb as size because the file is 399kb and not 400kb so the latest chunk has size 3kb and not 4kb.&lt;/li&gt;
&lt;li&gt;FUSE is more secure than low level kernel development, but security is not free so if you are going to write a network filesystem, for example you may want not to mount it as root.&lt;/li&gt;
&lt;li&gt;By default, accessing the mounted filesystem for other users is not allowed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other-resources:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Other resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hanwen/go-fuse&#34;&gt;Fuse bindings in Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bcle/fuse4js&#34;&gt;Fuse bindings in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/terencehonles/fusepy&#34;&gt;Fuse bindings in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EtiennePerot/fuse-jna&#34;&gt;Fuse bindings in Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/libfuse/libfuse/tree/master/example&#34;&gt;Other examples in C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were my 2 cents, if you are interested in seeing something from me I started a little project on GitHub to create a filesystem that can use online services via FUSE to store data. You can find the project here: &lt;a href=&#34;https://github.com/fntlnz/webfs&#34;&gt;WebFS on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code reuse: a primer</title>
      <link>/blog/eng/code-reuse-a-primer/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/code-reuse-a-primer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://engineering.facile.it/optionals-in-objective-c/&#34;&gt;Last time&lt;/a&gt; we looked at a possible implementation for the &lt;a href=&#34;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID330&#34;&gt;Optional&lt;/a&gt; type in Objective-C; while the main point was to port to Objective-C a tool that&amp;rsquo;s frequently used in Swift, making use of the &lt;code&gt;Optional&lt;/code&gt; class can be considered an application of a much more general concept: &lt;strong&gt;code reuse&lt;/strong&gt;. In fact, &lt;code&gt;Optional&lt;/code&gt; is not tied to a particular domain, and can be reused over and over again in multiple projects: that&amp;rsquo;s what actually happens in Swift. But, to think about it, that&amp;rsquo;s what happens for a wide range of &lt;em&gt;classes&lt;/em&gt; in Objective-C, or &lt;em&gt;types&lt;/em&gt; in Swift: for example, &lt;code&gt;NSArray&lt;/code&gt; and &lt;code&gt;Array&lt;/code&gt; are both constructs that expose a certain interface, have a certain implementation, and are reused multiple times within methods and functions. And again, &lt;code&gt;NSArray&lt;/code&gt; and &lt;code&gt;Array&lt;/code&gt; are not tied to a particular domain, and have two important properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they are &lt;strong&gt;generic&lt;/strong&gt;, that is, they are not dependent on a particular subtype: an array of numbers and an array of strings will work in the exact same way when it comes to behavior that&amp;rsquo;s strictly associated to arrays, like counting elements, removing or adding an element, mapping, filtering, reducing et cetera;&lt;/li&gt;
&lt;li&gt;they are &lt;strong&gt;composable&lt;/strong&gt;, that is, they can be stacked on top of each other, and assembled with other more specific things, while keeping the same &lt;strong&gt;predictable behavior&lt;/strong&gt;: an array of &lt;em&gt;customers&lt;/em&gt;, each with their own array of &lt;em&gt;purchased products&lt;/em&gt;, can be mapped to an array of arrays of &lt;em&gt;products&lt;/em&gt;, that can be flattened into an array of &lt;em&gt;products&lt;/em&gt;, that can be reduced into a number representing the total cost;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Array&lt;/code&gt;, like &lt;code&gt;Optional&lt;/code&gt;, is a nice example of perfectly reusable code, but there are many more constructs that satisfy the aforementioned rules: &lt;em&gt;genericity&lt;/em&gt; and &lt;em&gt;composability&lt;/em&gt;. What doesn&amp;rsquo;t satisfy the rules is domain-specific objects, even when it seems like an object is sufficiently generic to be reused. A &lt;code&gt;Customer&lt;/code&gt; class, for example, could seem a good candidate, but trying to reuse the same class in two different projects will result in &lt;strong&gt;bad news&lt;/strong&gt; and headaches: either we&amp;rsquo;ll need to &lt;strong&gt;specialize&lt;/strong&gt; the class for each project, making the two diverge, or we&amp;rsquo;ll need to add levels of &lt;strong&gt;indirection&lt;/strong&gt;, because we&amp;rsquo;re forcing an object into a project it doesn&amp;rsquo;t belong to.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another thing to consider: if we really want to reuse code, we&amp;rsquo;ll also need to make &lt;strong&gt;design choices&lt;/strong&gt; that allow that code to be reused. I could actually forget about the &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Optional&lt;/code&gt; types, and create classes that never expose their underlying components; for example, I could create a class that represents a collection of optional objects, without ever exposing in the interface the fact that I&amp;rsquo;m using &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Optional&lt;/code&gt; for its implementation: it would result in some serious &lt;strong&gt;contortion&lt;/strong&gt; of methods&amp;rsquo; signature, but it&amp;rsquo;s possible. Also, is it a good idea? &lt;strong&gt;I don&amp;rsquo;t think so&lt;/strong&gt;. Creating a specific, incomposable class for every possible need will result in thousands of lines of what&amp;rsquo;s essentially &lt;strong&gt;boilerplate&lt;/strong&gt; code, complicated interfaces, and ridiculously long class names. If we aspire to code reuse, other than the two rules we just defined, we also need to pay attention to the way we architect our apps, and the main design principle to follow here is one of &lt;strong&gt;composition&lt;/strong&gt;, that can be summed up with the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Domain-specific constructs and behaviors should be realized by composing atomic and generic building blocks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This basically means that, instead of creating every time a specific implementation for our needs, we should try and satisfy that need by composing reusable, atomic objects. This looks complex, and at this point we should ask ourselves if code reuse is really something we want to pursue. My answer is a definitive &lt;strong&gt;yes&lt;/strong&gt;, for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with reusable components we can &lt;strong&gt;encapsulate&lt;/strong&gt; a particular behavior, and avoid rewriting essentially the same thing over and over again;&lt;/li&gt;
&lt;li&gt;we&amp;rsquo;ll have a &lt;strong&gt;guideline&lt;/strong&gt; for designing the architecture of our app, because we wont&amp;rsquo;t need to constantly define new interfaces for the same behaviors;&lt;/li&gt;
&lt;li&gt;a reusable component is very easy to &lt;strong&gt;test&lt;/strong&gt;, because it&amp;rsquo;s small and atomic, so by using it we will be more confident about the correctness of our code;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That, again, is what happens when we use types like &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Optional&lt;/code&gt;. As I said, there are many more of these building blocks, and actually the definition of their interfaces is a problem in itself, and has no obvious solution, but I think it&amp;rsquo;s a very interesting problem to tackle. By following the &lt;em&gt;generic&lt;/em&gt; and &lt;em&gt;composable&lt;/em&gt; rules we already have a guideline for designing them, but if we want to create our owns we should probably add one more rule:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a reusable object has to be &lt;strong&gt;simple&lt;/strong&gt;, that is, it should have a unique, linear, easily describable responsibility;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Optional&lt;/code&gt; follows this rule: it&amp;rsquo;s a generic container that represents an object that could be there, or not. &lt;code&gt;Array&lt;/code&gt; follows this rule: it represents and &lt;em&gt;ordered&lt;/em&gt; collection of objects, each one them accessible in constant time. Let&amp;rsquo;s try to apply the rule and create a new reusable object.&lt;/p&gt;

&lt;p&gt;Consider this real, kind of frequent use case: different objects must be notified when a certain object changes state or does something. A way to solve the problem is represented by the &lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;observer pattern&lt;/a&gt;, that is, make our objects implement an interface that exposes a &lt;a href=&#34;https://en.wikipedia.org/wiki/Publishâ€“subscribe_pattern&#34;&gt;publish-subscribe&lt;/a&gt; behavior. The point is, implementing an interface &lt;strong&gt;is not reusable&lt;/strong&gt;: each time we want to use this pattern we are going to &lt;strong&gt;rewrite&lt;/strong&gt; very similar code; instead, we want to encapsulate the behavior in a generic object, and reuse that object instead. What follows is a possible implementation, the one that I use in production, but there are many more: actually, &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming&#34;&gt;functional reactive programming&lt;/a&gt; has spawned from this very problem, that is, finding a generic, composable way of representing and manipulating observable streams, but in this case we&amp;rsquo;re going to create a much simpler &lt;strong&gt;Signal&lt;/strong&gt; object.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Signal&lt;/code&gt; class we want to implement is going to represent an &lt;em&gt;update&lt;/em&gt; for a certain object: that update can be everything, like a new value for a property, or an action that was taken. We&amp;rsquo;ll use the Swift language, which is also going to give us a lot of &lt;strong&gt;type-safety&lt;/strong&gt; for free. Here&amp;rsquo;s a summary of what we want for the &lt;code&gt;Signal&lt;/code&gt; class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it has to a have a &lt;strong&gt;parametric&lt;/strong&gt; subtype, that is, the type of the value that will be signaled in each update;&lt;/li&gt;
&lt;li&gt;it has to have an &lt;code&gt;observe&lt;/code&gt; method, that takes a closure representing an action that has to be taken every time an update is given;&lt;/li&gt;
&lt;li&gt;it has to have a &lt;code&gt;send&lt;/code&gt; method, which takes a new value of the underlying subtype;&lt;/li&gt;
&lt;li&gt;it has to have some simple methods for composition, that follow the usual naming conventions, like &lt;code&gt;map&lt;/code&gt;, for generating a new &lt;code&gt;Signal&lt;/code&gt; from an existing one by transforming the observed value, and &lt;code&gt;forwardTo&lt;/code&gt; to make another &lt;code&gt;Signal&lt;/code&gt; &lt;em&gt;trigger&lt;/em&gt; when a certain &lt;code&gt;Signal&lt;/code&gt; is producing a new value;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Semantically, we can describe a &lt;code&gt;Signal&lt;/code&gt; as a container for a value that&amp;rsquo;s going to be there at a certain point in time, and it&amp;rsquo;s going to update itself indefinitely.&lt;/p&gt;

&lt;p&gt;What follows is the entire implementation of the &lt;code&gt;Signal&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum SignalContinuation
{
  case Continue
  case Stop
}

public class Signal&amp;lt;Subtype&amp;gt;
{
  private var observers: [(Subtype -&amp;gt; SignalContinuation)] = []

  public init() {}

  public func observe (observeFunction: Subtype -&amp;gt; SignalContinuation)
  {
    observers.append(observeFunction)
  }

  public func send (value: Subtype)
  {
    var continuations: [(Subtype -&amp;gt; SignalContinuation)] = []
    while observers.count &amp;gt; 0
    {
      let observer = observers.removeFirst()
      let continuation = observer(value)
      switch continuation
      {
      case .Continue:
        continuations.append(observer)
      case .Stop: break
      }
    }
    observers = continuations
  }

  public func forwardTo (otherSignal: Signal&amp;lt;Subtype&amp;gt;) -&amp;gt; Signal
  {
    observe { action in
      otherSignal.send(action)
      return .Continue
    }
    return self
  }

  public func forwardTo &amp;lt;OtherSubtype&amp;gt; (
    otherSignal: Signal&amp;lt;OtherSubtype&amp;gt;,
    mappingFunction: Subtype -&amp;gt; OtherSubtype) -&amp;gt; Signal
  {
    observe { action in
      otherSignal.send(mappingFunction(action))
      return .Continue
    }
    return self
  }

  public func map &amp;lt;OtherSubtype&amp;gt; (transform: Subtype -&amp;gt; OtherSubtype) -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt;
  {
    let mappedSignal = Signal&amp;lt;OtherSubtype&amp;gt;()
    forwardTo(mappedSignal, mappingFunction: transform)
    return mappedSignal
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is really simple, but still, really powerful. A problem that&amp;rsquo;s frequently found when implementing the observer pattern is how to manage unsubscriptions; it&amp;rsquo;s a responsibility of the observer object to stop observing something, and in this &lt;code&gt;Signal&lt;/code&gt; implementation this is easily managed within the closure passed to the &lt;code&gt;observe&lt;/code&gt; method: the closure must return a &lt;code&gt;SignalContinuation&lt;/code&gt; value, that can be simply &lt;code&gt;.Continue&lt;/code&gt; (that is, keep observing updates) or &lt;code&gt;.Stop&lt;/code&gt;. Another problem is memory management: we need to make sure that when an observer&amp;rsquo;s memory is released, it will also stop observing, or a message will be sent to a dangling pointer, resulting in the app crashing. Swift&amp;rsquo;s &lt;code&gt;weak&lt;/code&gt; memory semantics actually makes this really easy to do: we&amp;rsquo;ll put a &lt;code&gt;guard&lt;/code&gt; clause at the beginning of the closure passed to the &lt;code&gt;observe&lt;/code&gt; method; if the object has become &lt;code&gt;nil&lt;/code&gt;, we&amp;rsquo;ll simply return &lt;code&gt;.Stop&lt;/code&gt;. The following example shows a simple use of the &lt;code&gt;Signal&lt;/code&gt; class, including the &lt;em&gt;stop-observing-on-nil&lt;/em&gt; mechanism:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Sender
{
  let signal = Signal&amp;lt;Int&amp;gt;()

  func sendNew(value: Int)
  {
    signal.send(value)
  }
}

class Receiver&amp;lt;Type: CustomStringConvertible&amp;gt;
{
  func startObserving(signal: Signal&amp;lt;Type&amp;gt;)
  {
    signal.observe { [weak self] value in
      guard let this = self else { return .Stop }
      this.printNewValue(value)
      return .Continue
    }
  }

  func printNewValue(value: Type)
  {
    print(value)
  }
}

let sender = Sender()
let receiver = Receiver&amp;lt;Int&amp;gt;()

receiver.startObserving(sender.signal)

sender.signal.send(3)
sender.signal.send(5)
sender.signal.send(10)
sender.signal.send(20)
/// this will print 3, 5, 10, 20 on console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example we can see an application of the concepts we talked about at the beginning of this article: instead of creating yet another interface for the same behavior, we are directly using and reusing the &lt;code&gt;Signal&lt;/code&gt; object. A more complex example would be the addition of something like a &lt;em&gt;resonator&lt;/em&gt;, that is, an object with a &lt;code&gt;Signal&lt;/code&gt; that resonates with another, like in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class DoublingResonator
{
  let signal = Signal&amp;lt;Int&amp;gt;()

  func resonateWith(otherSignal: Signal&amp;lt;Int&amp;gt;)
  {
    otherSignal.forwardTo(signal) { $0*2 }
  }
}

let resonator = DoublingResonator()
resonator.resonateWith(sender.signal)

let receiver = Receiver&amp;lt;Int&amp;gt;()

receiver.startObserving(resonator.signal)

sender.signal.send(3)
sender.signal.send(5)
sender.signal.send(10)
sender.signal.send(20)
/// this will print 6, 10, 20, 40 on console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many other options for composition of signals, but as long as we don&amp;rsquo;t need them, it&amp;rsquo;s better to keep the class &lt;strong&gt;simple&lt;/strong&gt;: then, gradually over time, we can start adding features to the class, and as long as they&amp;rsquo;re properly generic and tested, we will be able to use them in all of our projects.&lt;/p&gt;

&lt;p&gt;To conclude, finding the right abstractions for reusability is of course a problem, and the solution is not an easy one: plenty of academic papers address the problem in several ways (classic Charles W. Krueger&amp;rsquo;s paper &lt;a href=&#34;http://www.biglever.com/papers/Krueger_AcmReuseSurvey.pdf&#34;&gt;Software Reuse&lt;/a&gt; contains a good overview of the used techniques), and the reason why &lt;a href=&#34;https://en.wikipedia.org/wiki/Category_theory&#34;&gt;category theory&lt;/a&gt; has many applications in functional programming is because it offers an excellent set of abstractions for tackling several classes of problems. But still, I think the advantages of code reuse are many, and that achieving a compositional design through atomic, reusable components is &lt;strong&gt;a worthy goal&lt;/strong&gt; to pursue.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Optionals in Objective-C</title>
      <link>/blog/eng/optionals-in-objective-c/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/optionals-in-objective-c/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Objective-C is not going anywhere&lt;/strong&gt;. While Swift is most certainly the new hotness for iOS and OS X programming, there are some concrete reasons to stick with Objective-C for a while:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Objective-C based projects still need maintenance and new features to be added, and mixing Swift and Objective-C, while possible, &lt;strong&gt;can be tricky&lt;/strong&gt; and possibly unconvenient, due to the dynamic nature of the latter;&lt;/li&gt;
&lt;li&gt;Swift is changing rapidly, has still some bugs and &lt;strong&gt;performance problems&lt;/strong&gt;, and still lacks some features that professionals need, while Objective-C is mature and has a strong community;&lt;/li&gt;
&lt;li&gt;some may &lt;strong&gt;prefer a more dynamic language&lt;/strong&gt;, and Objective-C support from Apple &lt;a href=&#34;https://netguru.co/blog/objective-c-generics&#34;&gt;is still strong&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, while I naturally lean towards a more static, &lt;a href=&#34;http://engineering.facile.it/type-first-development-in-swift/&#34;&gt;type-first&lt;/a&gt; approach to programming, from time to time I like to work in a more dynamic environment, so both for preference and for business needs, I still didn&amp;rsquo;t put Objective-C completely away. But just after a few weeks of Swift I found myself missing one of the most powerful features of the language: &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID330&#34;&gt;Optionals&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Table of contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-optional-type&#34;&gt;The &lt;code&gt;Optional&lt;/code&gt; type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optionals-in-swift&#34;&gt;Optionals in Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#back-to-objective-c&#34;&gt;Back to Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-a-json-parser&#34;&gt;Example: a JSON parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;the-optional-type&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-optional-type:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;The &lt;code&gt;Optional&lt;/code&gt; type&lt;/h2&gt;

&lt;p&gt;A Optional is a &lt;em&gt;generic&lt;/em&gt; type, that is, a type that&amp;rsquo;s dependent  (actually, &lt;em&gt;parametric&lt;/em&gt;) on another &lt;strong&gt;subtype&lt;/strong&gt;, so whe can have, for example, a &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt; or a &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt;: thanks to some syntactic sugar, those types are written in Swift as &lt;code&gt;String?&lt;/code&gt; and &lt;code&gt;Int?&lt;/code&gt;. So, what is an &lt;code&gt;Optional&lt;/code&gt;? It&amp;rsquo;s a representation   of a value that could be there, and be of a particular subtype, or could not, therefore being &lt;strong&gt;nil&lt;/strong&gt;: by &lt;em&gt;wrapping&lt;/em&gt; the subtype into an &lt;code&gt;Optional&lt;/code&gt;, the Swift compiler knows that the value could be nil, and complain in the cases where we are using an &lt;code&gt;Optional&lt;/code&gt; where a value that&amp;rsquo;s &lt;strong&gt;never&lt;/strong&gt; nil is expected. By itself, this simple feature grants us a lot of type-safety for free: for example, in Swift we can&amp;rsquo;t initialize a non-optional value with nil, and considering that, for the Swift&amp;rsquo;s compiler, a value cannot be used before being initialized, by saying that a value&amp;rsquo;s type is &lt;code&gt;String&lt;/code&gt; the compiler will assure us that the value will &lt;strong&gt;always&lt;/strong&gt; be a string, no matter what.&lt;/p&gt;

&lt;p&gt;In contrast, Objective-C objects can always be nil, and if we expect something not to be nil, we are forced to check for the actual existence of everything at any time. But actually, that&amp;rsquo;s not necessarily a big deal: it&amp;rsquo;s a classic &lt;strong&gt;tradeoff&lt;/strong&gt; of dynamic languages, and it can be even considered a &lt;em&gt;feature&lt;/em&gt; by some people: in using a dynamically typed language, we are always expected to design our APIs with &lt;a href=&#34;https://en.wikipedia.org/wiki/Late_binding&#34;&gt;late binding&lt;/a&gt; in mind. Also, the new &lt;a href=&#34;https://developer.apple.com/swift/blog/?id=25&#34;&gt;Objective-C nullability specifiers&lt;/a&gt; will help the compiler trigger warnings when nil is passed to a property or method parameter when &lt;code&gt;nonnull&lt;/code&gt; is expected. But the problem is still there: we need a lot of boilerplate to always check for &lt;em&gt;nullness&lt;/em&gt;, and that can produce error-prone, less readable code. The need for this boilerplate is missing in Swift, and that&amp;rsquo;s thanks to the nature of the &lt;code&gt;Optional&lt;/code&gt; type: in fact, it works in the same way as the &lt;code&gt;Maybe&lt;/code&gt; type in Haskell, or the &lt;code&gt;Option&lt;/code&gt; type in Scala, that is, &lt;code&gt;Optional&lt;/code&gt; is actually a &lt;strong&gt;monad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The concept of &lt;em&gt;monad&lt;/em&gt; is inherited by functional programming from &lt;a href=&#34;https://en.wikipedia.org/wiki/Category_theory&#34;&gt;category theory&lt;/a&gt; and there are plenty of &lt;a href=&#34;https://wiki.haskell.org/Monad&#34;&gt;introductions&lt;/a&gt; &lt;a href=&#34;https://www.haskell.org/tutorial/monads.html&#34;&gt;about it&lt;/a&gt; &lt;a href=&#34;http://learnyouahaskell.com/a-fistful-of-monads&#34;&gt;on the web&lt;/a&gt;, so I&amp;rsquo;m not going into the specifics here: let me just say that a monad is a &lt;em&gt;computational context&lt;/em&gt;, that is, a specification for the way some &lt;em&gt;computations&lt;/em&gt; need to be resolved. Applying a certain transformation to a monad will result in another instance of the same monad, different from the first, based on the specific kind of monad. For example, applying some transformation to an &lt;code&gt;Optional&lt;/code&gt; monad will result in applying the same transformation to the contained value if it&amp;rsquo;s there, or absolutely nothing if the &lt;code&gt;Optional&lt;/code&gt; contains nil: in both cases, the transformation&amp;rsquo;s output will be another &lt;code&gt;Optional&lt;/code&gt;, possibly of different subtype.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;optionals-in-swift&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;optionals-in-swift:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Optionals in Swift&lt;/h2&gt;

&lt;p&gt;Consider the following Swift code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalIntFrom(value: Int, ifTrue: Bool) -&amp;gt; Int?
{
  return ifTrue ? value : nil
}

let optionalInt = makeOptionalIntFrom(3, ifTrue: true)
print(optionalInt.dynamicType) /// prints &#39;Optional&amp;lt;Int&amp;gt;&#39;

let toString: Int -&amp;gt; String = { &amp;quot;\($0)&amp;quot; }

let optionalString = optionalInt.map(toString)
print(optionalString.dynamicType) /// prints &#39;Optional&amp;lt;String&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example, &lt;code&gt;optionalInt&lt;/code&gt; is a &lt;code&gt;Int&lt;/code&gt; wrapped into an &lt;code&gt;Optional&lt;/code&gt;, thus having type &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; (Swift&amp;rsquo;s syntactic sugar allows us to write &lt;code&gt;Int?&lt;/code&gt;), and by applying the &lt;code&gt;toString&lt;/code&gt; function to that &lt;code&gt;Optional&lt;/code&gt; we get an instance of &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt;. We can see that, to actually apply the &lt;code&gt;toString&lt;/code&gt; function to the &lt;code&gt;Optional&lt;/code&gt;, we passed the function to the &lt;code&gt;map&lt;/code&gt; method: this operation is usually called &lt;a href=&#34;https://wiki.haskell.org/Lifting&#34;&gt;&lt;em&gt;lifting&lt;/em&gt; a function&lt;/a&gt;, because the function &lt;code&gt;toString&lt;/code&gt;, of type &lt;code&gt;Int -&amp;gt; String&lt;/code&gt;, is &lt;em&gt;lifted&lt;/em&gt; into the type &lt;code&gt;Optional&amp;lt;Int&amp;gt; -&amp;gt; Optional&amp;lt;String&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As we can see, no conditional statements were used in manipulating the optional integer: by &lt;em&gt;lifting&lt;/em&gt; our transformations with the &lt;code&gt;map&lt;/code&gt; method, we can apply them directly to the &lt;code&gt;Optional&lt;/code&gt; instances, and we can also chain them pretty easily, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalIntFrom(value: Int, ifTrue: Bool) -&amp;gt; Int?
{
  return ifTrue ? value : nil
}

let optionalInt = makeOptionalIntFrom(3, ifTrue: true)
print(optionalInt.dynamicType) /// prints &#39;Optional&amp;lt;Int&amp;gt;&#39;

let doubled: Int -&amp;gt; Int = { $0*2 }

let toString: Int -&amp;gt; String = { &amp;quot;\($0)&amp;quot; }

let optionalDoubledString = optionalInt.map(doubled).map(toString)
print(optionalDoubledString.dynamicType) /// prints &#39;Optional&amp;lt;String&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to express the opposite operation, we run into a problem: transforming a &lt;code&gt;String&lt;/code&gt; into a &lt;code&gt;Int&lt;/code&gt; is not always considered possible by Swift (for example, no numbers in the string), therefore the operation is optional. In fact:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalStringFrom(value: String, ifTrue: Bool) -&amp;gt; String?
{
  return ifTrue ? value : nil
}

let toInt: String -&amp;gt; Int? = { Int($0) }

let anotherOptionalString = makeOptionalStringFrom(&amp;quot;3&amp;quot;, ifTrue: true)

let anotherOptionalInt = anotherOptionalString.map(toInt).map(doubled)
/// this won&#39;t compile!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem here is that &lt;code&gt;toInt&lt;/code&gt; is a function of type &lt;code&gt;String -&amp;gt; Optional&amp;lt;Int&amp;gt;&lt;/code&gt;, and lifting the function to the &lt;code&gt;Optional&lt;/code&gt; &amp;ldquo;world&amp;rdquo; will turn its type into something like &lt;code&gt;Optional&amp;lt;String&amp;gt; -&amp;gt; Optional&amp;lt;Optional&amp;lt;Int&amp;gt;&amp;gt;&lt;/code&gt;, that is, an optional integer wrapped into another optional: in &lt;em&gt;monadic&lt;/em&gt; terminology, to lift functions that transforms the wrapped type into another instance of the same monad, we need a &lt;code&gt;flatMap&lt;/code&gt; operation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let anotherOptionalInt = anotherOptionalString.flatMap(toInt).map(doubled)
/// this is fine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, for the &lt;code&gt;Optional&lt;/code&gt; type, &lt;code&gt;flatMap&lt;/code&gt; works like &lt;code&gt;map&lt;/code&gt; but for functions that transform the wrapped type into another &lt;code&gt;Optional&lt;/code&gt;. In reading the code, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; can be basically treated as the same: they both indicate a transformation, and the fact that computations passed to &lt;code&gt;flatMap&lt;/code&gt; are of slightly different type can be considered an implementation detail.&lt;/p&gt;

&lt;p&gt;Actually, Swift treats these types &lt;strong&gt;a little differently&lt;/strong&gt; than in other languages: for example, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; are usually &lt;em&gt;free functions&lt;/em&gt; in most &lt;em&gt;functional&lt;/em&gt; languages, while in Swift they are &lt;strong&gt;methods&lt;/strong&gt;. In general, Swift encourages the use of methods and &lt;strong&gt;method chaining&lt;/strong&gt; instead of free functions composed with special operators: it&amp;rsquo;s mostly a matter of philosophy, but in bringing these features back to Objective-C, the method-based approach is going to be really useful because there&amp;rsquo;s no easy syntax for free functions in the language, while methods have the signature clean and readable syntax that we&amp;rsquo;re used to.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;back-to-objective-c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;back-to-objective-c:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Back to Objective-C&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s implement the &lt;code&gt;Optional&lt;/code&gt; class in Objective-C:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

#import &amp;lt;Foundation/Foundation.h&amp;gt;

NS_ASSUME_NONNULL_BEGIN

@interface Optional : NSObject

+ (Optional*)with:(id _Nullable)value;

- (Optional*)map:(id(^)(id))mapBlock;
- (Optional*)flatMap:(Optional*(^)(id))flatMapBlock;

@end

NS_ASSUME_NONNULL_END
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

#import &amp;quot;Optional.h&amp;quot;

@interface Optional ()

@property (strong, nonatomic, nullable) id value;

@end

@implementation Optional

+ (Optional*)with:(id _Nullable)value
{
  Optional* optional = [Optional new];
  optional.value = value;
  return optional;
}

- (Optional *)map:(id  _Nonnull (^)(id _Nonnull))mapBlock
{
  if (self.value != nil)
  {
    return [Optional with:mapBlock(self.value)];
  }
  return self;
}

- (Optional *)flatMap:(Optional* _Nonnull (^)(id _Nonnull))flatMapBlock
{
  if (self.value != nil)
  {
    return flatMapBlock(self.value);
  }
  return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see, the &lt;code&gt;with:&lt;/code&gt; class method will create an &lt;code&gt;Optional&lt;/code&gt; object by wrapping some other object, of unspecified class: because there&amp;rsquo;s no true &lt;em&gt;generics&lt;/em&gt; in Objective-C, we won&amp;rsquo;t be able to make our Optional type as type-safe as in Swift, but as we&amp;rsquo;ll see, it won&amp;rsquo;t be a big deal and we&amp;rsquo;ll still be able to get some really &lt;strong&gt;powerful features&lt;/strong&gt;. The &lt;code&gt;map:&lt;/code&gt; method will check if the wrapped object is not nil, and apply the transformation expressed by the &lt;code&gt;mapBlock&lt;/code&gt; block only if the object is actually there: in this case, Objective-C nullability specifiers really help us in designing our APIs, because we clearly specified that &lt;code&gt;mapBlock&lt;/code&gt; will accept and will return non-nil objects only. The &lt;code&gt;flatMapBlock&lt;/code&gt; block will return instead another &lt;code&gt;Optional&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can test this by essentially recreating the same Swift example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Test.h

#import &amp;lt;Foundation/Foundation.h&amp;gt;

@interface Test : NSObject

+ (void)testOptional;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Test.m

#import &amp;quot;Test.h&amp;quot;
#import &amp;quot;Optional.h&amp;quot;

@implementation Test

+ (void)testOptional
{
  Optional* optionalInt = [self makeOptionalIntFrom:@3 ifTrue:YES];
  Optional* optionalDoubledString = [[optionalInt
                                      map:[self doubled]]
                                     map:[self toString]];
  NSLog(@&amp;quot;%@&amp;quot;, optionalDoubledString);
}

+ (Optional*)makeOptionalIntFrom:(NSNumber*)fromInt ifTrue:(BOOL)ifTrue
{
  return [Optional with:ifTrue ? fromInt : nil];
}


+ (NSNumber*(^)(NSNumber*))doubled
{
  return ^NSNumber*(NSNumber* value)  {
    return @(value.integerValue*2);
  };
}

+ (NSString*(^)(NSNumber*))toString
{
  return ^NSString*(NSNumber* value)  {
    return [NSString stringWithFormat:@&amp;quot;%@&amp;quot;, value];
  };
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we applied our transformations, we need a way to &lt;em&gt;unwrap&lt;/em&gt; the object inside our &lt;code&gt;Optional&lt;/code&gt;: in Swift this is done at language level, with some syntactic sugar, while in Objective-C we can follow the standard conventions of the functional programming community, that is, we can &lt;em&gt;get&lt;/em&gt; the wrapped object via a &lt;code&gt;get&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (id _Nullable)get;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (id)get
{
  return self.value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course the &lt;code&gt;get&lt;/code&gt; method will return an &lt;code&gt;id _Nullable&lt;/code&gt;, which means that the returned object can (obviously) be nil. A frequent pattern when dealing with &lt;code&gt;nil&lt;/code&gt; objects is replacing them with &amp;ldquo;default&amp;rdquo; versions: that can be useful when we don&amp;rsquo;t really care about the data contained in an object, but we don&amp;rsquo;t want to be exposed to the risk of possibly null references. Once again, with the &lt;code&gt;Optional&lt;/code&gt; class we can avoid conditional statements and express the &amp;ldquo;defaulting&amp;rdquo; mechanism in a more declarative way: we just need to add a &lt;code&gt;getOrElse:&lt;/code&gt; method, that will return the wrapped object if it&amp;rsquo;s there, or will return a default object, that we&amp;rsquo;ll pass to the method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (id)getOrElse:(id(^)())elseBlock;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (id)getOrElse:(id  _Nonnull (^)())elseBlock
{
  if (self.value != nil)
  {
    return self.value;
  }
  return elseBlock();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see, &lt;code&gt;getOrElse:&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; return a &lt;code&gt;_Nullable&lt;/code&gt; object, and that&amp;rsquo;s thanks to &lt;code&gt;elseBlock&lt;/code&gt;: we&amp;rsquo;re not passing the actual default object here, but a block that will produce one; this way, we can get the default object &lt;strong&gt;lazily&lt;/strong&gt;, because if the wrapped object is not nil, the default object doesn&amp;rsquo;t need to be allocated.&lt;/p&gt;

&lt;p&gt;For the rest of the article we&amp;rsquo;ll work on a more real-world example, and in doing so we&amp;rsquo;ll add more features to the &lt;code&gt;Optional&lt;/code&gt; class, making it more and more powerful.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;example-a-json-parser&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-a-json-parser:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Example: a JSON parser&lt;/h2&gt;

&lt;p&gt;Suppose we want to create an app that shows movie informations: we are retrieving those informations in JSON format from a website like &lt;a href=&#34;http://api.myapifilms.com&#34;&gt;myapifilms&lt;/a&gt;. Each movie has a JSON representation like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{
    &amp;quot;countries&amp;quot;: [
        &amp;quot;USA&amp;quot;
    ],
    &amp;quot;directors&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Frank Darabont&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0001104&amp;quot;
        }
    ],
    &amp;quot;filmingLocations&amp;quot;: [
        &amp;quot;St. Croix&amp;quot;,
        &amp;quot;U.S. Virgin Islands&amp;quot;
    ],
    &amp;quot;genres&amp;quot;: [
        &amp;quot;Crime&amp;quot;,
        &amp;quot;Drama&amp;quot;
    ],
    &amp;quot;idIMDB&amp;quot;: &amp;quot;tt0111161&amp;quot;,
    &amp;quot;languages&amp;quot;: [
        &amp;quot;English&amp;quot;
    ],
    &amp;quot;metascore&amp;quot;: &amp;quot;80/100&amp;quot;,
    &amp;quot;originalTitle&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;plot&amp;quot;: &amp;quot;Andy Dufresne is a young and successful banker whose life changes drastically when he is convicted and sentenced to life imprisonment for the murder of his wife and her lover. Set in the 1940s, the film shows how Andy, with the help of his friend Red, the prison entrepreneur, turns out to be a most unconventional prisoner.&amp;quot;,
    &amp;quot;ranking&amp;quot;: 1,
    &amp;quot;rated&amp;quot;: &amp;quot;R&amp;quot;,
    &amp;quot;rating&amp;quot;: &amp;quot;9.3&amp;quot;,
    &amp;quot;releaseDate&amp;quot;: &amp;quot;19941014&amp;quot;,
    &amp;quot;runtime&amp;quot;: [
        &amp;quot;142 min&amp;quot;
    ],
    &amp;quot;simplePlot&amp;quot;: &amp;quot;Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.&amp;quot;,
    &amp;quot;title&amp;quot;: &amp;quot;The Shawshank Redemption&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;Movie&amp;quot;,
    &amp;quot;urlIMDB&amp;quot;: &amp;quot;http://www.imdb.com/title/tt0111161&amp;quot;,
    &amp;quot;urlPoster&amp;quot;: &amp;quot;http://ia.media-imdb.com/images/M/MV5BODU4MjU4NjIwNl5BMl5BanBnXkFtZTgwMDU2MjEyMDE@._V1_SX214_AL_.jpg&amp;quot;,
    &amp;quot;votes&amp;quot;: &amp;quot;1,533,914&amp;quot;,
    &amp;quot;writers&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Stephen King&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0000175&amp;quot;
        },
        {
            &amp;quot;name&amp;quot;: &amp;quot;Frank Darabont&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0001104&amp;quot;
        }
    ],
    &amp;quot;year&amp;quot;: &amp;quot;1994&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course we want to define our own internal representation with a value object, change some structure and ignore the parts that we consider not relevant. Here&amp;rsquo;s a possible interface for the &lt;code&gt;Movie&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NS_ASSUME_NONNULL_BEGIN

@interface Movie : NSObject

@property (copy, nonatomic, readonly) NSString* title;
@property (copy, nonatomic, readonly) NSNumber* rating;
@property (copy, nonatomic, readonly) NSNumber* year;
@property (copy, nonatomic, readonly) NSNumber* lengthInMinutes;

+ (Movie*)withJSONDict:(NSDictionary*)dict;

@end

NS_ASSUME_NONNULL_END
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The class method &lt;code&gt;withJSONDict:&lt;/code&gt; will create an instance of &lt;code&gt;Movie&lt;/code&gt; from a JSON dictionary like the one showed before: as we can see from the interface declaration, we decided to not allow nil values for any of the properties; but when dealing with JSON, we must consider &lt;strong&gt;every possibility&lt;/strong&gt;, including missing keys, null values or wrong types. We&amp;rsquo;re going to use the &lt;code&gt;Optional&lt;/code&gt; type to parse the JSON dict in a clean, declarative and error-proof way.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with the title. From the JSON, the title should be given by the &amp;ldquo;title&amp;rdquo; key, and should be a string (&lt;code&gt;NSString&lt;/code&gt; in Objective-C), so we can get the title via the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt; NSString* title = [[[[Optional
                        with:[dict objectForKey:@&amp;quot;title&amp;quot;]]
                       
                       flatMap:^Optional*(id title) {
                         return [Optional with:[title isKindOfClass:[NSString class]] ? title : nil];
                       }]
                      
                      flatMap:^Optional*(NSString* title) {
                        return [Optional with:title.length &amp;gt; 0 ? title : nil];
                      }]
                     
                     getOrElse:^NSString*{
                       return @&amp;quot;NO TITLE&amp;quot;;
                     }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first &lt;code&gt;flatMap:&lt;/code&gt; step means that we want the title to be of &lt;code&gt;NSString&lt;/code&gt; class. It&amp;rsquo;s convenient to abstract this operation directly into the &lt;code&gt;Optional&lt;/code&gt; constructor, because we&amp;rsquo;re going to do it all the time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;+ (Optional *)with:(id)value as:(Class)valueClass
{
  if ([value isKindOfClass:valueClass])
  {
    return [Optional with:value];
  }
  return [Optional with:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second &lt;code&gt;flatMap:&lt;/code&gt; step means that if the found string is of length 0 (that is, empty), we are going to treat it as unknown. Actually, this step will act as a &lt;strong&gt;filter&lt;/strong&gt;, because it will only &lt;em&gt;let pass&lt;/em&gt; the strings that are not empty; with that in mind, let&amp;rsquo;s add a &lt;code&gt;filter:&lt;/code&gt; method to the &lt;code&gt;Optional&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (Optional*)filter:(BOOL(^)(id))filterBlock;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (Optional*)filter:(BOOL (^)(id _Nonnull))filterBlock
{
  return [self flatMap:^Optional*(id value) {
    if (filterBlock(value))
    {
      return self;
    }
    else
    {
      return [Optional with:nil];
    }
  }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;filter:&lt;/code&gt; method takes as parameter a block that returns a &lt;code&gt;BOOL&lt;/code&gt; based on the wrapped value: internally, &lt;code&gt;filter:&lt;/code&gt; will actually call &lt;code&gt;flatMap:&lt;/code&gt;, with a conditional expression to check if the &lt;code&gt;filterBlock&lt;/code&gt; succeeds or fails.&lt;/p&gt;

&lt;p&gt;Finally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSString* title = [[[Optional
                       with:[dict objectForKey:@&amp;quot;title&amp;quot;]
                       as:[NSString class]]
                      
                      filter:^BOOL(NSString* string) {
                        return string.length &amp;gt; 0;
                      }]
                     
                     getOrElse:^NSString*{ return @&amp;quot;NO TITLE&amp;quot;; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, no conditional statements, and very few lines of code, completely declarative.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;rating&lt;/code&gt; and &lt;code&gt;year&lt;/code&gt; parameters we need to add a &lt;code&gt;map&lt;/code&gt; to convert the &lt;code&gt;NSString&lt;/code&gt; into an &lt;code&gt;NSNumber&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSNumber* rating = [[[[Optional
                         with:[dict objectForKey:@&amp;quot;rating&amp;quot;]
                         as:[NSString class]]
                        
                        filter:^BOOL(NSString* string) {
                          return string.length &amp;gt; 0;
                        }]
                       
                       map:^NSNumber*(NSString* stringValue) {
                         return [NSDecimalNumber decimalNumberWithString:stringValue];
                       }]
                      
                      getOrElse:^NSNumber*{ return @0; }];
  movie.rating = rating;
  
  NSNumber* year = [[[[Optional
                       with:[dict objectForKey:@&amp;quot;year&amp;quot;]
                       as:[NSString class]]
                      
                      filter:^BOOL(NSString* string) {
                        return string.length &amp;gt; 0;
                      }]
                     
                     map:^NSNumber*(NSString* stringValue) {
                       return [NSDecimalNumber decimalNumberWithString:stringValue];
                     }]
                    
                    getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;lenghtInMinutes&lt;/code&gt; parameter is a little tricky; from the JSON we can see that the value is represented like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;&amp;quot;runtime&amp;quot;: [ 
	&amp;quot;142 min&amp;quot; 
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we expect an array, of which we&amp;rsquo;re only interested in the first element (thus, the array must not be empty), that has to be a string; of this string we only need the first part, removing the &lt;code&gt;min&lt;/code&gt; portion. Luckily, we already have all the tools for the job:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;  NSNumber* lengthInMinutes =
  [[[[[[Optional
        with:[dict objectForKey:@&amp;quot;runtime&amp;quot;]
        as:[NSArray class]]
       
       flatMap:^Optional*(NSArray* array) {
         return [Optional with:[array firstObject]];
       }]
      
      map:^NSString*(NSString* string) {
        return [string
                stringByReplacingOccurrencesOfString:@&amp;quot; min&amp;quot;
                withString:@&amp;quot;&amp;quot;];
      }]
     
     filter:^BOOL(NSString* string) {
       return string.length &amp;gt; 0;
     }]
    
    map:^NSNumber*(NSString* stringValue) {
      return @([stringValue integerValue]);
    }]
   
   getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actually, something is missing: the method &lt;code&gt;[array firstObject]&lt;/code&gt; returns the first object of the array if the array has at least one element, or nil if the array is empty: there&amp;rsquo;s no indication that the first object is actually a &lt;code&gt;NSString&lt;/code&gt;, so we need to add a &lt;code&gt;filter&lt;/code&gt; step to insure that the object is an instance of the correct class. Let&amp;rsquo;s do it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt; NSNumber* lengthInMinutes =
  [[[[[[[Optional
         with:[dict objectForKey:@&amp;quot;runtime&amp;quot;]
         as:[NSArray class]]
        
        flatMap:^id(NSArray* array) {
          return [Optional with:[array firstObject]];
        }]
       
       filter:^BOOL(id value) {
         return [value isKindOfClass:[NSString class]];
       }]
      
      map:^NSString*(NSString* string) {
        return [string
                stringByReplacingOccurrencesOfString:@&amp;quot; min&amp;quot;
                withString:@&amp;quot;&amp;quot;];
      }]
     
     filter:^BOOL(NSString* string) {
       return string.length &amp;gt; 0;
     }]
    
    map:^NSNumber*(NSString* stringValue) {
      return @([stringValue integerValue]);
    }]
   
   getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see, when we work with the &lt;code&gt;Optional&lt;/code&gt; class, adding a condition simply means &lt;strong&gt;adding a step&lt;/strong&gt; in the linear &lt;strong&gt;flow of expressions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;conclusion&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Bringing back the &lt;code&gt;Optional&lt;/code&gt; type from Swift to Objective-C allowed us to build a JSON parsing routine, often something hard to maintain and error-prone, in a simple, linear and readable way. Of course there&amp;rsquo;s &lt;strong&gt;plenty of cases&lt;/strong&gt; where working with optionals can give us the same advantages: by composing &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; operations we can express our intent in a clean and readable way. But this is not just about the &lt;code&gt;Optional&lt;/code&gt; type: some readers may have probably noticed that many languages (including Swift) allow operations with the same names on lists and arrays, and the meanings are also the same: &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt;, in particular, are &lt;strong&gt;generic concepts&lt;/strong&gt; related to monads (in fact, the array type is also a monad) and allow declarative compositions of transformations. This concept is at the core of &lt;strong&gt;functional programming&lt;/strong&gt;, and I think there&amp;rsquo;s plenty of reasons to apply similar concepts to a more object-oriented environment: they will help the programmer in reasoning about the code and express the intent in a more declarative way.&lt;/p&gt;

&lt;p&gt;The code for the &lt;code&gt;Optional&lt;/code&gt; class used throughout the article can be found on &lt;a href=&#34;https://gist.github.com/broomburgo/e318228a5f7d6a605e82&#34;&gt;GitHub Gist&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From development to production with Docker and AWS Elastic Beanstalk</title>
      <link>/blog/eng/from-development-to-production-with-docker-and-amazon-ecs/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/from-development-to-production-with-docker-and-amazon-ecs/</guid>
      <description>

&lt;h1 id=&#34;it-works-on-my-machine:824629f989995bd0ef3a2fb42ac10127&#34;&gt;It works on my machine&lt;/h1&gt;

&lt;p&gt;This post is addressed to people who already have &lt;a href=&#34;https://docs.docker.com/articles/basics&#34;&gt;basic knowledge about docker&lt;/a&gt;, about how it works and are looking for a way to move to the next step with the goal of using it in development and production day by day.&lt;/p&gt;

&lt;p&gt;Having a development/testing environment &lt;strong&gt;as close as possible&lt;/strong&gt; to the production one helps a lot in assuring that &lt;strong&gt;things will behave correctly when delivered&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In a typical scenario, the developer has all the services on which the application depends installed on his local machine, which means the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there&amp;rsquo;s no isolation between projects using the same services (versions, configurations, data);&lt;/li&gt;
&lt;li&gt;it&amp;rsquo;s hard to have and maintain production-like services&amp;rsquo; versions and configurations in development;&lt;/li&gt;
&lt;li&gt;sharing the development environment with co-workers is difficult if not impossible;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of that leads to one of the worst sentences I&amp;rsquo;ve ever heard saying in my experience:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It works on my machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/wmm.jpg&#34; alt=&#34;It works on my machine meme&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You might think that I could obtain the same results using Vagrant or plain virtual machines but that solution wouldn&amp;rsquo;t give me the benefit of having an extra layer of abstraction without having to worry about the overhead. In fact I can have more and more containers running on a single machine than I can have with virtualization.&lt;/p&gt;

&lt;h1 id=&#34;bookshelf-application:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Bookshelf application&lt;/h1&gt;

&lt;p&gt;To streamline this article I prepared a &lt;a href=&#34;https://github.com/pennyphp/bookshelf&#34;&gt;demo application&lt;/a&gt; using the &lt;a href=&#34;http://github.com/pennyphp/penny&#34;&gt;Penny PHP Framework&lt;/a&gt;: it&amp;rsquo;s a simple book archiving application, that allows the user to create and view a list of books.&lt;/p&gt;

&lt;h2 id=&#34;download-and-dependencies:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Download and dependencies&lt;/h2&gt;

&lt;p&gt;First, download the demo application from its repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/pennyphp/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP Dependencies are managed through &lt;a href=&#34;https://getcomposer.org/&#34;&gt;composer&lt;/a&gt;, and to get them just issue the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Frontend assets are managed through &lt;a href=&#34;http://bower.io&#34;&gt;Bower&lt;/a&gt; + &lt;a href=&#34;http://gruntjs.com/&#34;&gt;Grunt&lt;/a&gt;; the following two commands will respectively download build dependencies and then build the assets, by copying them in the public directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
grunt dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;up-and-running-development-environment:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Up and running development environment&lt;/h2&gt;

&lt;p&gt;As you can see the demo app comes with a docker development environment that can be found under the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/tree/master/docker/development&#34;&gt;docker/development&lt;/a&gt; folder.&lt;/p&gt;

&lt;p&gt;By inspecting the content of the &lt;code&gt;docker/development&lt;/code&gt; folder we can find two directories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nginx/&lt;/code&gt;: this directory contains a Dockerfile that inherits from the &lt;a href=&#34;https://github.com/fntlnz/dockerfiles/tree/master/nginx&#34;&gt;fntlnz/nginx&lt;/a&gt; image to create a new one with the needed nginx configurations;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fpm/&lt;/code&gt;: this directory contains a Dockerfile that inherits from the &lt;a href=&#34;https://github.com/fntlnz/dockerfiles/tree/master/php&#34;&gt;fntlnz/php&lt;/a&gt; image to create a new one with the needed php-fpm configurations and extensions;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because we don&amp;rsquo;t have Elastic Beanstalk on our local machine (we&amp;rsquo;ll talk about it later) and we need a way to orchestrate our containers, we&amp;rsquo;ll do it by using &lt;strong&gt;docker-compose&lt;/strong&gt;. I decided to use Docker Compose instead of using the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-local.html&#34;&gt;&lt;strong&gt;eb local&lt;/strong&gt;&lt;/a&gt; command (which allows to run elastic beanstalk environment in local) because at the state of art compose is easier to use and to manage in local.&lt;/p&gt;

&lt;h4 id=&#34;the-docker-compose-yml:824629f989995bd0ef3a2fb42ac10127&#34;&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;In order to do so we have to create a &lt;code&gt;docker-compose.yml&lt;/code&gt; in our project root.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp docker/docker-compose.yml.development docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, in our &lt;code&gt;docker-compose.yml&lt;/code&gt; we should have four containers to start:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;Nginx&lt;/strong&gt; container, which contains a server block  for the bookshelf application listening on port 80.&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;fpm&lt;/strong&gt; container, which does have a shared volume with the host machine so you can change the code without the need to rebuild the container image; also, the container is linked with the mysql container to allow mysql access from php scripts;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;mysql&lt;/strong&gt; container, which will contain our development data;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;redis&lt;/strong&gt; container, used for caching purposes, mainly by Doctrine;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that since &lt;a href=&#34;https://docs.docker.com/userguide/dockerlinks/&#34;&gt;containers are linked&lt;/a&gt; you can access to an exposed service by using the name given to the linked container; for example, in our case the fpm container is &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/docker/docker-compose.yml.development#L19-L20&#34;&gt;linked to the mysql container&lt;/a&gt;: that&amp;rsquo;s why the configured host is &lt;code&gt;mysql&lt;/code&gt; in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/config/doctrine.local.php.dist#L13&#34;&gt;doctrine local connection configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t done it yet, you need to build the &lt;code&gt;fpm&lt;/code&gt; docker image and download the &lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt; and &lt;code&gt;redis&lt;/code&gt; images; to do so, issue the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you have all what you need you can start the containers with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point the four containers should be up and running: you can check if everything&amp;rsquo;s okay by issuing the &lt;code&gt;docker ps&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;To proceed, we need to know the ip address of our nginx container. Since the nginx container&amp;rsquo;s port forwarding configuration is &lt;code&gt;80:80&lt;/code&gt;, on &lt;strong&gt;linux&lt;/strong&gt; it should be available at &lt;code&gt;127.0.0.1:80&lt;/code&gt; or &lt;code&gt;localhost:80&lt;/code&gt;,Â while on &lt;strong&gt;OS X&lt;/strong&gt; it should be available at the ip address associated to the docker-machine host; to retrieve it, issue the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine env &amp;lt;yourmachinename&amp;gt; | grep DOCKER_HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s time to point your browser to the nginx container ip address!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/books.png&#34; alt=&#34;Bookshelf screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yay! Our development environment is up and running!&lt;/p&gt;

&lt;h2 id=&#34;up-and-running-production-environment:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Up and running production environment&lt;/h2&gt;

&lt;p&gt;At this point we need a solution to deploy our application in production that can: run Docker containers, scale without hassle and possibly have other nice things already setup like, let&amp;rsquo;s say, monitoring.&lt;/p&gt;

&lt;p&gt;The choice fell on &lt;a href=&#34;https://aws.amazon.com/elasticbeanstalk&#34;&gt;AWS Elastic Beanstalk&lt;/a&gt; because it has all those things and in addition it has a more competitive pricing model with an initial &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;Free Tier&lt;/a&gt; which it is enough to run this demo.&lt;/p&gt;

&lt;p&gt;Before we start we need an &lt;strong&gt;Amazon Web Services&lt;/strong&gt; account, if you don&amp;rsquo;t have one yet, you can create it &lt;a href=&#34;https://aws.amazon.com/account&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To configure, deploy and manage our infrastructure we are going to need the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html&#34;&gt;eb command&lt;/a&gt;, to get it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install awsebcli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to obtain access to the platform from your command line using the &lt;strong&gt;eb&lt;/strong&gt; command you have to setup an &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.roles.aeb.html&#34;&gt;&lt;strong&gt;IAM ROLE&lt;/strong&gt;&lt;/a&gt; and associate it to an &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html&#34;&gt;&lt;strong&gt;IAM User&lt;/strong&gt;&lt;/a&gt;. The IAM User creation wizard will &lt;strong&gt;give you two keys&lt;/strong&gt;, namely the &lt;em&gt;AWS Access Key ID&lt;/em&gt; and the &lt;em&gt;AWS Secret Access Key&lt;/em&gt;. We are going to need them during the next step.&lt;/p&gt;

&lt;p&gt;At this point we can &lt;strong&gt;initialize&lt;/strong&gt; our bookshelf project. This command will prompt us for the two Access keys plus a few question about our setup.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the project is initialized we have to &lt;strong&gt;create a new environment&lt;/strong&gt;. This will actually start a &lt;strong&gt;t2.micro EC2&lt;/strong&gt; instance, create the security groups, the load balancer, cloudwatch alarms etc..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb create bookshelf-production
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before deploying the application to production we have to generate a &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;Github Token for composer&lt;/a&gt;.
This is needed to allow composer to download dependencies without hassle.
To add the token to your environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb setenv COMPOSER_TOKEN=&amp;lt;your-token-here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can check if the system is ready issuing a:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the status becomes &lt;strong&gt;Ready&lt;/strong&gt; you can actually deploy the application with a:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The deployment will create the containers described in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/Dockerrun.aws.json&#34;&gt;Dockerrun.aws.json&lt;/a&gt; and create the files described in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/.ebextensions/dependencies.config&#34;&gt;dependencies.config&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;If you are asking yourslef what the &lt;strong&gt;Dockerrun.aws.json&lt;/strong&gt; actually is, suffice it to say that is to Elastic beanstalk as the &lt;code&gt;docker-compose.yml&lt;/code&gt; is to the local environment.&lt;/p&gt;

&lt;p&gt;The files contained in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/.ebextensions/&#34;&gt;.ebextensions&lt;/a&gt; allows you to customize and configure the software that your application depends on. The &lt;strong&gt;dependencies.config&lt;/strong&gt; is one of them. It actually resolves composer dependencies, build frontend assets using grunt and bower and create the PHP FPM image using the production &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/docker/production/fpm/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;. It&amp;rsquo;s important to note that the image is rebuilt only if changes are made to the Dockerfile.&lt;/p&gt;

&lt;p&gt;As you may have noticed, the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/Dockerrun.aws.json&#34;&gt;Dockerrun.aws.json&lt;/a&gt; contains definitions just for the Nginx and fpm containers. This is because for &lt;strong&gt;Redis&lt;/strong&gt; and &lt;strong&gt;Mysql&lt;/strong&gt; we are going to use respectively &lt;a href=&#34;https://aws.amazon.com/elasticache/&#34;&gt;&lt;strong&gt;Elasticache&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/rds/&#34;&gt;&lt;strong&gt;RDS&lt;/strong&gt;&lt;/a&gt;. RDS and Elasticache are two production ready, scalable and reliable solutions that makes easier to setup a cost-efficient relational database and key value store taking charge of common database administration tasks.&lt;/p&gt;

&lt;p&gt;The Bookshelf application by default is configured to take Mysql and Redis connection parameters &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/config/doctrine.global.php&#34;&gt;from environment variables&lt;/a&gt; which are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MYSQL_HOST
MYSQL_PORT
MYSQL_USERNAME
MYSQL_PASSWORD
MYSQL_DATABASE
REDIS_HOST
REDIS_PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each one of these environment variables can be set using the command we previously used for the &lt;code&gt;COMPOSER_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can obtain Mysql and Redis connection parameters after creating an &lt;a href=&#34;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CreateInstance.html&#34;&gt;RDS Mysql DB instance&lt;/a&gt; and an &lt;a href=&#34;http://docs.aws.amazon.com/opsworks/latest/userguide/other-services-redis-cluster.html&#34;&gt;ElastiCache Redis Cluster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point with the running Nginx and fpm containers and configured databases you can issue an &lt;code&gt;eb open&lt;/code&gt; to open the live production application and see if all&amp;rsquo;s okay!&lt;/p&gt;

&lt;p&gt;As well as ready your infrastructure is also ready to scale and auto scale, to move a first step trough this direction you can take a look at the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-scale.html&#34;&gt;&lt;code&gt;eb scale&lt;/code&gt;&lt;/a&gt; command and at the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.managing.as.html&#34;&gt;AWS documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;: If something went wrong you can ssh into the elastic beanstalk EC2 machine with a &lt;code&gt;eb ssh&lt;/code&gt; and inspect containers status using tools you already know like &lt;code&gt;docker logs&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;you-are-done:824629f989995bd0ef3a2fb42ac10127&#34;&gt;You are done!&lt;/h1&gt;

&lt;p&gt;You can now save a lot of time automating your workflow using docker while having a fully working, self-contained and shareable development environment very close to your running, stable and efficient production infrastructure over which you have full control of the resources.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/good-job.jpg&#34; alt=&#34;congratulations&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Protection of sensitive data using encryption</title>
      <link>/blog/eng/protection-of-sensitive-data-using-encryption/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/protection-of-sensitive-data-using-encryption/</guid>
      <description>

&lt;p&gt;Data protection is one of the major and recurrent problems in recent years: whether it is private information of users, or the company for which we work, the problem is always the same.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to protect such data from any attackers who would - and could (!!) - be able to gain possession?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before arriving at the solution of this problem, however, is right to split the series in at least two branches. In the wwww data can be &amp;ldquo;obtained&amp;rdquo; in two different moments: 1) as they pass over the network in packets, or 2) after their storing (eg. database or file) in one or more servers.&lt;/p&gt;

&lt;p&gt;This article will explore the second case, and will be proposed a solution: how to protect the data that we have accumulated sparingly &amp;ldquo;in house&amp;rdquo; ?.&lt;/p&gt;

&lt;h2 id=&#34;putting-data-in-the-safe:cba7ee5925403671cf2cdf5f560f7388&#34;&gt;Putting data in the safe&lt;/h2&gt;

&lt;p&gt;In case of stored data, for example, within a database; it is certainly more difficult to achieve our treasure, because they are &amp;ldquo;safe&amp;rdquo; in a protected environment, which we trust more than the volatility of the net.
However it is better not to feel too sure: the more our data will be valuable, as any interested parties will be encouraged to seek every way to obtain them.
Any flaw, both hardware and software, however limited in time could expose our wealth to various attacks, allowing anyone (or almost) to get them.&lt;/p&gt;

&lt;p&gt;A possible and effective protection technique in these cases is &lt;strong&gt;making useless or unreadable data&lt;/strong&gt; for those who have obtained them in an illegitimate manner, through their storage in encrypted form.&lt;/p&gt;

&lt;p&gt;What we propose below is a possible solution to the problem of how to store and encrypt this data, in order to obtain an adequate level of safety and maintain good elasticity, so as to allow different implementations and to cover as many possible use cases.&lt;/p&gt;

&lt;p&gt;The same solution provides that the first part of the exposed problematic (data protection during transit) is resolved, and will be based on the combined use of two different types of encryption algorithms.&lt;/p&gt;

&lt;h2 id=&#34;cryptographic-algorithms-symmetric-and-asymmetric:cba7ee5925403671cf2cdf5f560f7388&#34;&gt;Cryptographic Algorithms Symmetric and asymmetric&lt;/h2&gt;

&lt;p&gt;With cryptographic algorithms ** refer to all processes and procedures aimed at obtaining a given &amp;ldquo;clouded&amp;rdquo; so as not to be understandable / intelligible ** by persons not authorized to read it.&lt;/p&gt;

&lt;h3 id=&#34;symmetric-algorithms:cba7ee5925403671cf2cdf5f560f7388&#34;&gt;Symmetric Algorithms&lt;/h3&gt;

&lt;p&gt;This type of algorithm is based on the use of encryption keys said symmetrical that allow  &lt;strong&gt;to encrypt and decrypt data using the same cryptographic key&lt;/strong&gt;.
An example is &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&#34;&gt;AES&lt;/a&gt; (Advanced Encryption Standard) algorithm, evolution of &lt;a href=&#34;https://en.wikipedia.org/wiki/Rijndael_key_schedule&#34;&gt;Rijndael&lt;/a&gt; the whose characteristics can be summarized in a good level of safety and excellent speed, whether it is implemented in hardware or software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/protezione-di-dati-sensibili-usando-la-crittografia/aes.png&#34; alt=&#34;AES&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;asymmetric-algorithms:cba7ee5925403671cf2cdf5f560f7388&#34;&gt;Asymmetric Algorithms&lt;/h3&gt;

&lt;p&gt;The asymmetric algorithms are distinguished from the previous to the use of two distinct ** cryptographic keys, said public and private, to perform the encryption and decryption operations.
The name derives from the method by which the two keys are to be used. The public key is freely exchanged, &lt;strong&gt;The private key is known only to those who have to be able to read&lt;/strong&gt; data or messages exchanged.
The feature that characterizes these keys is the impossibility of obtaining, for example, the private key being in possession of the public key. Unless a particular algorithm exploits, the only method to obtain this key is the brute force **on that data.
In this case the example for excellence is &lt;a href=&#34;https://en.wikipedia.org/wiki/RSA_(cryptosystem&#34;&gt;RSA&lt;/a&gt;), a de facto standard in the security on data transmission: it is in fact widely used to encrypt the communications that take place between the client and server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/protezione-di-dati-sensibili-usando-la-crittografia/rsa.png&#34; alt=&#34;RSA&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-solution-combining-rsa-and-aes:cba7ee5925403671cf2cdf5f560f7388&#34;&gt;The solution combining RSA and AES&lt;/h2&gt;

&lt;p&gt;Now that we have rehearsed the technological basis, we can think about how to implement a solution.&lt;/p&gt;

&lt;p&gt;Imagine we have a platform that allows various users to connect with their credentials and perform various operations, including storing their own private documents (photos, documents, passwords, contracts, etc.) that need a more high level of security, and maybe we can share this information with each other in the near future.&lt;/p&gt;

&lt;p&gt;From these simple conditions, and preparing all the future &amp;ldquo;sharable&amp;rdquo; document, a possible solution is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We will use AES to encrypt individual documents;&lt;/li&gt;
&lt;li&gt;For the sharing, we will use a table (exchange) of our database; inside the owner of the document will be tracked and users can access it;&lt;/li&gt;
&lt;li&gt;Each user will have his key ring containing the RSA keys that serve as &amp;ldquo;lock&amp;rdquo; for the individual document key;&lt;/li&gt;
&lt;li&gt;You will need to also obfuscate the private key of each user, so as to allow access only to the owner;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;managing-users:cba7ee5925403671cf2cdf5f560f7388&#34;&gt;Managing Users&lt;/h3&gt;

&lt;p&gt;At the creation of a new user, we must &lt;strong&gt;generate a new RSA key pair&lt;/strong&gt; , which will go tied to the user.
Before storing these keys in the database (along with the user&amp;rsquo;s credentials on another table), the private key will need to be obfuscated. It is good practice, in these cases, to let the user to choose a &lt;strong&gt;masterkey&lt;/strong&gt;**, to be used in turn to encrypt the private key with a symmetric algorithm.
Masterkey chosen will be very important as it will be required each time we have to decipher our data (unfortunately, the user experience is sacrificed in favor of a much higher level of security).
&lt;strong&gt;N.B.&lt;/strong&gt; It is strongly recommended not to store the masterkey (in any form) on the server: the attacker could easily access it and groped to force unlocking consequently all the other keys.&lt;/p&gt;

&lt;h3 id=&#34;encrypt-document:cba7ee5925403671cf2cdf5f560f7388&#34;&gt;Encrypt Document&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Each time&lt;/strong&gt; a user will upload a file or insert a text to be protected, you will need to generate a new &lt;strong&gt;unique&lt;/strong&gt; symmetric key. We will use the key to encrypt the document using AES and store it in our database.&lt;/p&gt;

&lt;h3 id=&#34;associate-the-file-to-the-user:cba7ee5925403671cf2cdf5f560f7388&#34;&gt;Associate the file to the user&lt;/h3&gt;

&lt;p&gt;As a last step we have to associate the encrypted data to the user who is storing them. It&amp;rsquo;s time to use the &amp;ldquo;exchange table&amp;rdquo;. We will insert a record containing references to the user and the file, together with the unique key tied to it. But the key will be encrypted before using the user&amp;rsquo;s public key.&lt;/p&gt;

&lt;p&gt;We got a similar system to the one shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/protezione-di-dati-sensibili-usando-la-crittografia/system.png&#34; alt=&#34;System&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;share:cba7ee5925403671cf2cdf5f560f7388&#34;&gt;Share!&lt;/h3&gt;

&lt;p&gt;Each time a document (or who has obtained the right to read it) owner user wants to share it with a second user we will simply do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Require user masterkey;&lt;/li&gt;
&lt;li&gt;Decrypt the private key of the same user using the key you just obtained;&lt;/li&gt;
&lt;li&gt;Decipher the key document related to (recovered from the exchange table);&lt;/li&gt;
&lt;li&gt;Make a copy of the exchange record, replacing the user with the target and re-encrypting the key exchange with the public of the recipient;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;and-now:cba7ee5925403671cf2cdf5f560f7388&#34;&gt;And now?&lt;/h3&gt;

&lt;p&gt;Now that we have completed (at least theoretically) our data protection system &lt;strong&gt;we are definitely safe?&lt;/strong&gt; &lt;strong&gt;Absolutely not&lt;/strong&gt; Leaving aside the smooth technical operation carried out so far, we must remember that we have entrusted much of &lt;strong&gt;our system security to the user&lt;/strong&gt; .
The weakness lies in the fact masterkey is left in the hands of our users: if they were to share it, or lose it, it would be impossible to guarantee the security or the recovery of stored data.
Also a key - which is user&amp;rsquo;s choice - too simple would be easy to circumvent through brute force or other techniques.&lt;/p&gt;

&lt;p&gt;Finally, I want to urge you to comply with all &lt;a href=&#34;https://en.wikipedia.org/wiki/Password#Factors_in_the_security_of_a_password_system&#34;&gt;general rules concerning the composition of the password&lt;/a&gt;, avoid users to choose a too simple one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>No Country For If Else</title>
      <link>/blog/eng/no-country-for-if-else/</link>
      <pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/no-country-for-if-else/</guid>
      <description>

&lt;p&gt;There is an &lt;strong&gt;unwanted guest&lt;/strong&gt; with us as we write code and build software projects: it&amp;rsquo;s the code that&amp;rsquo;s &lt;strong&gt;already written&lt;/strong&gt;, and we must take into account its complexity as the code base increases in size. High complexity of the existing code can make the following activities particularly difficult:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;understanding the meaning of old code, written by others or ourselves;&lt;/li&gt;
&lt;li&gt;tracing the causes of bugs, i.e. errors, in code;&lt;/li&gt;
&lt;li&gt;making changes to a certain procedure;&lt;/li&gt;
&lt;li&gt;adding features to existing structures;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if we approach the development of new software with &lt;a href=&#34;https://en.wikipedia.org/wiki/Agile_software_development&#34;&gt;agile methodologies&lt;/a&gt;, we always have to deal with the existing code, and to do that we must at least be able to &lt;strong&gt;understand it without overexertion&lt;/strong&gt;. So when I talk about &lt;em&gt;complexity&lt;/em&gt; I am referring in particular to the difficulty with which a programmer can &lt;em&gt;reason about&lt;/em&gt; the existing code: the preface of the well-known academic textbook &lt;a href=&#34;http://deptinfo.unice.fr/~roy/sicp.pdf&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt; contains the following sentence:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;programs must be written for people to read, and only incidentally for machines to execute&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I couldn&amp;rsquo;t agree more: the time spent by a programmer in writing new code is &lt;strong&gt;only a fraction&lt;/strong&gt; of his/her total working time; much of it is spent reading the existing code, to correct, extend, modify or simply understand it. Generating more understandable code, about which it&amp;rsquo;s easier to reason, we can more easily evaluate the &lt;strong&gt;correctness&lt;/strong&gt; of what we wrote so far or, if the obtained behavior is not the one expected, find the error. Of course this shouldn&amp;rsquo;t undo the techniques that we routinely use to test the correctness of software &lt;em&gt;a posteriori&lt;/em&gt;: indeed, no technical or scientific discipline is exempt from empirical tests, and in fact the empirical approach to software engineering is accepted in the academic community, as evidenced by the &lt;a href=&#34;http://static.springer.com/sgw/documents/1525357/application/pdf/10664_JournalMetrics_Flyer.pdf&#34;&gt;existence&lt;/a&gt; of the &lt;a href=&#34;http://link.springer.com/journal/10664&#34;&gt;Empirical Software Engineering&lt;/a&gt; journal. My personal position is in the middle: software testing is important, but it&amp;rsquo;s also important to think in advance about its correctness, to avoid causes of &lt;strong&gt;accidental complexity&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;index:c252b88516f644ca0545d16795aa645d&#34;&gt;Index&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-importance-of-abstraction&#34;&gt;The importance of abstraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#measuring-complexity&#34;&gt;Measuring complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-structured-solution&#34;&gt;Example: structured solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-oo-solution&#34;&gt;Example: OO solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-functional-solution&#34;&gt;Example: functional solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#an-empirical-validation&#34;&gt;An empirical validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusions&#34;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;the-importance-of-abstraction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-importance-of-abstraction:c252b88516f644ca0545d16795aa645d&#34;&gt;The importance of abstraction&lt;/h2&gt;

&lt;p&gt;As we&amp;rsquo;ve seen in a &lt;a href=&#34;http://engineering.facile.it/programmazione-funzionale-perche-preoccuparsi/&#34;&gt;previous article&lt;/a&gt;, rather than the inherent complexity related to the logic of our software, we must worry about the &lt;a href=&#34;http://shaffner.us/cs/papers/tarpit.pdf&#34;&gt;accidental complexity&lt;/a&gt; we introduce in the code by adopting &lt;strong&gt;non-optimal, pointlessly complicated solutions&lt;/strong&gt;: the excessive use of &lt;em&gt;if-else-for-switch&lt;/em&gt; control structures tends to make the code hard to understand, maintain and test; see for example the well-known &lt;a href=&#34;http://c2.com/cgi/wiki?ArrowAntiPattern&#34;&gt;Arrow Anti-Pattern&lt;/a&gt;. It should be noted that the introduction of &lt;a href=&#34;https://en.wikipedia.org/wiki/Structured_programming&#34;&gt;structured programming&lt;/a&gt;, i.e. programming based on the aforementioned control structures, was a &lt;strong&gt;major step forward&lt;/strong&gt; in software development between the &amp;lsquo;60s and the &amp;lsquo;70s: it allowed to program at a higher level of abstraction than the previous style, removing the need to manually manage code execution order with the &lt;a href=&#34;https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF&#34;&gt;infamous&lt;/a&gt; &lt;code&gt;goto&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;Software development paradigms change when programmers find themselves managing larger and more complex projects: to avoid being entangled by the excessive complexity of our own code, or code written by others that we still maintain, we have to work at &lt;strong&gt;higher levels of abstraction&lt;/strong&gt;. How much high? A good answer could be the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;at a high level of abstraction we can tell the system to do what we want, without specifying how to do it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At an appropriate level of abstraction we can focus on the &lt;em&gt;what&lt;/em&gt; and let the system decide the &lt;em&gt;how&lt;/em&gt;. Obviously there&amp;rsquo;s no &amp;ldquo;maximum&amp;rdquo; level of abstraction, and as programmers we always find ourselves working &lt;strong&gt;halfway&lt;/strong&gt; between the moving electrical charges in a microprocessor, and the needs of our company&amp;rsquo;s business: however, working at a low abstraction level will greatly increase the risk of introducing accidental complexity, and we must be able to identify those cases. For example, when we use a control structure such as &lt;em&gt;if-else&lt;/em&gt; within a relatively large procedure, we are &lt;em&gt;manually&lt;/em&gt; making a decision based on the current state of our system: it would be much better to develop a software component, for example an object, which is able to &lt;strong&gt;make that kind of decision for us&lt;/strong&gt;; our role, at that point, will be to &lt;em&gt;declare&lt;/em&gt; the required functionality. Mixing the &lt;em&gt;what&lt;/em&gt; with the &lt;em&gt;how&lt;/em&gt; will make it particularly hard to understand what a block of code is going to do, because it can lead to the obfuscation of a procedure&amp;rsquo;s &lt;strong&gt;intent&lt;/strong&gt; - connected to the business logic - with the &lt;strong&gt;implementation details&lt;/strong&gt;, which are separate concepts, often completely independent (the same intention can be expressed with different lower level implementations).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simple example. Suppose we have the following function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func &amp;lt;A&amp;gt; optionalValue1 (value: A, cond1: Bool, cond2: Bool) -&amp;gt; A? {
	var x: A?
	if cond1 == true {
		if cond2 == true {
			x = nil
		}
		else {
			x = value
		}
	}
	else {
		if cond2 == true {
			x = value
		}
		else {
			x = nil
		}
	}
	return x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although the expressed intent is rather simple, what&amp;rsquo;s really going on is not immediately obvious; let&amp;rsquo;s analyze the function step-by-step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a variable &lt;code&gt;x&lt;/code&gt; of type &lt;code&gt;A?&lt;/code&gt; is declared;&lt;/li&gt;
&lt;li&gt;the first condition is checked:

&lt;ul&gt;
&lt;li&gt;if the first condition is true, then the second condition is checked:

&lt;ul&gt;
&lt;li&gt;if the second condition is true, then the variable is set to &lt;code&gt;nil&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;if the second condition is false, then the variable is set to &lt;code&gt;value&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;if the first condition is false, the second condition is checked:

&lt;ul&gt;
&lt;li&gt;if the second condition is true, then the variable is set to &lt;code&gt;value&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;if the second condition is false, then the variable is set to &lt;code&gt;nil&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the variable &lt;code&gt;x&lt;/code&gt; is returned;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To think about it, the intent is the following: return &lt;code&gt;value&lt;/code&gt; if the conditions are different from each other, otherwise return &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func &amp;lt;A&amp;gt; optionalValue2 (value: A, cond1: Bool, cond2: Bool) -&amp;gt; A? {
	return cond1 != cond2 ? value : nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have greatly simplified the function, making it easier to understand &lt;strong&gt;just by looking at it&lt;/strong&gt; once. But in a more complex case, with many different conditions and possible code routes, it may not suffice to just try and simplify the conditions.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;measuring-complexity&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;measuring-complexity:c252b88516f644ca0545d16795aa645d&#34;&gt;Measuring complexity&lt;/h2&gt;

&lt;p&gt;A unit of measure often taken into account in assessing the complexity of a method or function is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cyclomatic_complexity&#34;&gt;cyclomatic complexity&lt;/a&gt; (CC): it&amp;rsquo;s defined as the degree of complexity generated by the use of multiple control structures in a procedure. You can calculate the number of CC for a structured procedure by representing it with a &lt;a href=&#34;https://en.wikipedia.org/wiki/Directed_graph&#34;&gt;directed graph&lt;/a&gt; and counting the number of nodes and arcs. For example, we can represent the &lt;code&gt;optionalValue1&lt;/code&gt; function with the following graph:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[(value,cond1,cond2)]
|
|-&amp;gt; [var x] -&amp;gt; [cond1 == true ?]
               |
               |-y-&amp;gt; [cond2 == true ?]
               |     |
               |     |-y-&amp;gt; [x = nil] --------|
               |     |-n-&amp;gt; [x = value] ------|
               |                             |
               |-n-&amp;gt; [cond2 == true ?]       |
                     |                       |
                     |-y-&amp;gt; [x = value] ------|
                     |-n-&amp;gt; [x = nil] --------|
                                             |-&amp;gt; [return x]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a single connected graph, the number of CC is calculated according to the following formula:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CC = [number of arcs] - [number of nodes] + 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the &lt;code&gt;defaultValue1&lt;/code&gt; you can see that CC = 4. Apparently the simplified version&lt;code&gt;defaulValue2&lt;/code&gt; has a lower cyclomatic complexity, but in reality, as indicated in T.J.McCabe&amp;rsquo;s &lt;a href=&#34;http://www.literateprogramming.com/mccabe.pdf&#34;&gt;original article&lt;/a&gt;, CC can only be calculated for a &lt;em&gt;completely structured&lt;/em&gt; procedure, that is a procedure with a single entry point and a single exit point; CC should also take into account &lt;strong&gt;all the possible cases&lt;/strong&gt; for a condition, and &lt;code&gt;if cond1 != cond2&lt;/code&gt; has precisely four possible cases. A dissertation of possible evolutions of CC, considering multiple entry/exit points for a module, is a available &lt;a href=&#34;http://www.acis.pamplin.vt.edu/faculty/tegarden/wrk-pap/SQJ.PDF&#34;&gt;here&lt;/a&gt;. Thus, we won&amp;rsquo;t keep account of CC in the rest of the article for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the complexity that interests us is the one related to the &amp;ldquo;understandability&amp;rdquo; of a function, and unstructured patterns (such as &lt;code&gt;guard clause&lt;/code&gt;, early &lt;code&gt;return&lt;/code&gt; or conditional expressions like the one generated by the ternary operator &lt;code&gt;?:&lt;/code&gt;) can often make a function or method easier to understand;&lt;/li&gt;
&lt;li&gt;the goal is to write a program by composing many small functions whose complexity is the &lt;strong&gt;minimum possible&lt;/strong&gt;, e.g. no control structures, so it will have little value to measure the number of CC for each function;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, it seemed important to mention cyclomatic complexity in this article, but rather than &lt;em&gt;measuring&lt;/em&gt; accidental complexity, we are interested in &lt;strong&gt;removing it completely&lt;/strong&gt; by replacing conditional statements, often used of structured programming, with something else. Notice that a conditional &lt;em&gt;expression&lt;/em&gt; is a &lt;strong&gt;simpler&lt;/strong&gt; concept than a conditional &lt;em&gt;statement&lt;/em&gt;: in the former, the entire expression simply returns something based on one or more conditions; in the latter, based on some state, the code could contain various statements, i.e., commands that could be executed or not.&lt;/p&gt;

&lt;p&gt;Say you have a function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func getCorrectValueConsideringConditions &amp;lt;A&amp;gt; (cond1: Condition&amp;lt;A&amp;gt;, cond2: Condition&amp;lt;A&amp;gt;, cond3: Condition&amp;lt;A&amp;gt; ...) -&amp;gt; A? {
	/// do stuff
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case we have a large number of conditions attached to a value of type &lt;code&gt;A&lt;/code&gt;, and we might need to evaluate each of these conditions with several &lt;em&gt;if-else&lt;/em&gt; and/or nested &lt;em&gt;switch&lt;/em&gt; statements. One way to simplify this problem could consist in &lt;em&gt;abstracting&lt;/em&gt; the concept of &lt;em&gt;condition&lt;/em&gt;, turning it into a &lt;em&gt;static relationship&lt;/em&gt; between a few parameters and a value of type &lt;code&gt;A&lt;/code&gt;: we should therefore create a system that is able to &lt;em&gt;solve&lt;/em&gt; any number of relations, possibly in &lt;strong&gt;any order&lt;/strong&gt;, and according to them deduce the resulting value.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see a practical example.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;example-structured-solution&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-structured-solution:c252b88516f644ca0545d16795aa645d&#34;&gt;Example: structured solution&lt;/h2&gt;

&lt;p&gt;A person goes to the employment office to find a job: according to certain attributes (job preferences, young/old, number of children younger than 18) the person could be sent to a certain desk to choose a job, or outside in case no job is available for a person with those attributes. Here is the complete procedure (the realism is not important, it&amp;rsquo;s just an example):&lt;/p&gt;

&lt;p&gt;A person &lt;strong&gt;p1&lt;/strong&gt; comes to the desk &lt;strong&gt;d1&lt;/strong&gt; to seek employment; &lt;strong&gt;p1&lt;/strong&gt; has a list of job preferences, but could also accept other jobs outside the list; &lt;strong&gt;p1&lt;/strong&gt; also has a list of jobs that would certainly never accept;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if &lt;strong&gt;p1&lt;/strong&gt; is young you get from &lt;strong&gt;p1&lt;/strong&gt; a list &lt;strong&gt;l1&lt;/strong&gt; of preferences;

&lt;ul&gt;
&lt;li&gt;if &lt;strong&gt;l1&lt;/strong&gt; is too small, you ask &lt;strong&gt;p1&lt;/strong&gt; to enlarge the list with secondary preferences;&lt;/li&gt;
&lt;li&gt;you match the preferences with the available jobs and get list &lt;strong&gt;l2&lt;/strong&gt; of jobs to choose;&lt;/li&gt;
&lt;li&gt;if &lt;strong&gt;l2&lt;/strong&gt; is empty, you ask &lt;strong&gt;p1&lt;/strong&gt; if they want the full list of the positions;&lt;/li&gt;
&lt;li&gt;if &lt;strong&gt;p1&lt;/strong&gt; chooses a job, they&amp;rsquo;re sent to desk &lt;strong&gt;d2&lt;/strong&gt; to continue the procedure;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;if &lt;strong&gt;p1&lt;/strong&gt; is elderly, you ask &lt;strong&gt;p1&lt;/strong&gt; to choose from the list &lt;strong&gt;l3&lt;/strong&gt; of suitable jobs for older people;

&lt;ul&gt;
&lt;li&gt;if &lt;strong&gt;p1&lt;/strong&gt; chooses a job, they&amp;rsquo;re sent to desk &lt;strong&gt;d3&lt;/strong&gt; to continue the procedure;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;if &lt;strong&gt;p1&lt;/strong&gt; has children, in any case the list of available jobs will be affected by the number of children:

&lt;ul&gt;
&lt;li&gt;if &lt;strong&gt;p1&lt;/strong&gt; has one child younger than 18, they will choose a job from the list &lt;strong&gt;l4&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;if &lt;strong&gt;p1&lt;/strong&gt; has two children younger than 18, they will choose a job from the list &lt;strong&gt;l5&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;in the two previous cases, if &lt;strong&gt;p1&lt;/strong&gt; chooses a job, &lt;strong&gt;p1&lt;/strong&gt; is sent to desk &lt;strong&gt;d4&lt;/strong&gt; to continue with the procedure;&lt;/li&gt;
&lt;li&gt;if &lt;strong&gt;p1&lt;/strong&gt; has three or more children younger than 18, &lt;strong&gt;p1&lt;/strong&gt; is sent to desk &lt;strong&gt;d5&lt;/strong&gt; to continue the procedure;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &amp;ldquo;structured&amp;rdquo; approach to the problem could consist in writing a function in which the entire procedure is expressed with a series of &lt;em&gt;if-else&lt;/em&gt; statements, or &lt;em&gt;switch&lt;/em&gt; in the case of the number of children.&lt;/p&gt;

&lt;p&gt;The project related to this article is available on &lt;a href=&#34;https://github.com/broomburgo/NoCountryForIfElse&#34;&gt;github&lt;/a&gt;: I strongly recommend to check the code as the article goes on; &lt;code&gt;.swift&lt;/code&gt; files are just text files, and can be opened with any text editor. In the file &lt;code&gt;common.swift&lt;/code&gt; you&amp;rsquo;ll find common structures and functions to all the proposed solutions. In particular, we will represent a &amp;ldquo;person&amp;rdquo; with &lt;code&gt;struct Person&lt;/code&gt;, basically a immutable &lt;em&gt;value object&lt;/em&gt; that collects the various attributes considered in the problem:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Person {
Â Â Â Â 
Â Â Â Â let name: String
Â Â Â Â let isYoung: Bool
Â Â Â Â let childrenCount: Int
Â Â Â Â let likedJobsMain: [String]
Â Â Â Â let likedJobsSecondary: [String]
Â Â Â Â let dislikedJobs: [String]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea is to write a function called &lt;code&gt;placeNameForPerson&lt;/code&gt;, returning the next destination&amp;rsquo;s name for the input person: the destination could be another desk &lt;code&gt;d2, d3, d4, d5&lt;/code&gt;, or &lt;code&gt;outside&lt;/code&gt; in case the person leaves the employment agency without a job. &lt;code&gt;placeNameForPerson_structured&lt;/code&gt; returns the name of the destination considering the input &lt;code&gt;Person&lt;/code&gt; and also requires a second input, a &lt;code&gt;DeskWithJobs&lt;/code&gt;, i.e. a desk with several lists of available jobs, considering the various cases. In the structured solution, the entire execution logic is written in the function &lt;code&gt;placeNameForPerson_structured&lt;/code&gt;, and is in fact based upon nested conditional tests.&lt;/p&gt;

&lt;p&gt;We can immediately see that it is rather hard to understand what happens in the function just by reading it once: probably, in a &amp;ldquo;real&amp;rdquo; software, a function like this would probably be annotated with &lt;strong&gt;several comments&lt;/strong&gt;. In addition, it can be easily seen that to trace a bug in a function like this would require a step-by-step debugging procedure, because the large number of conditions makes the function basically not testable in an efficient way. Finally, changing conditions or introducing more of them would probably be really hard.&lt;/p&gt;

&lt;p&gt;The underlying problem is actually due to the fact that, with a structured approach, we&amp;rsquo;re &lt;strong&gt;mixing the intent with the implementation&lt;/strong&gt;: in this case the intent is to associate groups of conditions to specific results, but these relations are &amp;ldquo;hidden&amp;rdquo; within the code and must be deduced from it; for example, if we are asked what is the door for an elderly person with two children, we&amp;rsquo;d be forced to follow the flow of code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;because the first condition is related to the number of children, we immediately enter the branch &lt;code&gt;childrenCount != 0&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;at this point we enter the &lt;code&gt;case 2&lt;/code&gt; for the number of children;&lt;/li&gt;
&lt;li&gt;there&amp;rsquo;s a condition for checking that there&amp;rsquo;s a job available;&lt;/li&gt;
&lt;li&gt;a positive choice would lead to the &amp;ldquo;d4&amp;rdquo; desk;&lt;/li&gt;
&lt;li&gt;where&amp;rsquo;s the &amp;ldquo;young/old&amp;rdquo; condition? Is there a bug? By analyzing the branch &lt;code&gt;childrenCount == 0&lt;/code&gt; we can verify that this condition is actually checked, but it&amp;rsquo;s simply irrelevant for the other branch;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is a relatively long way to understand one simple thing, and it is noteworthy that if we wanted to make changes to the procedure, we should always run the entirety of it to make sure we covered all possible cases and there are no conflicts or ambiguities.&lt;/p&gt;

&lt;p&gt;We can do better.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;example-oo-solution&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-oo-solution:c252b88516f644ca0545d16795aa645d&#34;&gt;Example: OO solution&lt;/h2&gt;

&lt;p&gt;OO design is a often a work of &lt;strong&gt;both reason and creativity&lt;/strong&gt;: frequently, a same problem can be solved with multiple OO approaches. As said before, our intent is to &lt;em&gt;abstract&lt;/em&gt; the concept of &lt;em&gt;condition&lt;/em&gt;; considering this approach, let&amp;rsquo;s try and establish some foundation, in order to identify the responsibilities and behaviors to be assigned to each class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we want to represent each condition as if it were a single &lt;em&gt;check&lt;/em&gt; separated from the others, e.g. with a &lt;code&gt;Check&lt;/code&gt; type characterized by methods that verify whether a given person passes a step or not;&lt;/li&gt;
&lt;li&gt;we want to represent separately the checks related to a person&amp;rsquo;s attribute, like the number of children, to those related to the list of jobs to choose from;&lt;/li&gt;
&lt;li&gt;we want to build objects that are able to combine multiple checks into a single check;&lt;/li&gt;
&lt;li&gt;we want to create an object that represents a list of checks, and is able to assess whether the person is going to pass one and only one of those checks, or no check;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The file &lt;code&gt;oo.swift&lt;/code&gt; contains the complete implementation of the OO solution. We define a &lt;code&gt;protocol PersonCheckType&lt;/code&gt;, i.e., an interface that declares a &lt;code&gt;personIsValid&lt;/code&gt; method that returns &lt;code&gt;true&lt;/code&gt; if a certain &lt;code&gt;Person&lt;/code&gt; passes the check:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol PersonCheckType {
Â Â Â Â func personIsValid(person: Person) -&amp;gt; Bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then some classes implementing the &lt;code&gt;PersonCheckType&lt;/code&gt; protocol are declared, which individually test the various inherent attributes of a &lt;code&gt;Person&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The type &lt;code&gt;JobsType&lt;/code&gt; simply declares a &lt;code&gt;availableJobs&lt;/code&gt; property to collect the available jobs: from it more &lt;em&gt;checks&lt;/em&gt; are derived, also of type &lt;code&gt;PersonCheckType&lt;/code&gt;, that verify whether a person is valid from the point of view of preferred jobs.&lt;/p&gt;

&lt;p&gt;Finally, the type &lt;code&gt;NextDeskType&lt;/code&gt; declares a &lt;code&gt;nextDeskNameForPerson&lt;/code&gt; method by which you can define what the name of the next desk for a person will be; the method returns &lt;code&gt;String?&lt;/code&gt; because maybe there&amp;rsquo;s no desk for a certain person:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol NextDeskType {
Â Â Â Â func nextDeskNameForPerson(person: Person) -&amp;gt; String?
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From &lt;code&gt;NextDeskType&lt;/code&gt; we derive the following classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CheckNode&lt;/code&gt;, which represents a node in the decision-making structure of the software;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CheckStructure&lt;/code&gt;, which represents the entire tree of nodes;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, the implementation of &lt;code&gt;nextDeskNameForPerson&lt;/code&gt; in &lt;code&gt;CheckStructure&lt;/code&gt; corresponds exactly to the solution of the problem: find the name of destination desk.&lt;/p&gt;

&lt;p&gt;The idea is to create some simple &lt;strong&gt;unit checks&lt;/strong&gt;, using various classes of type &lt;code&gt;PersonCheckType&lt;/code&gt;, and combine those into concrete objects of the class &lt;code&gt;CheckNode&lt;/code&gt;, thus defining our &lt;code&gt;CheckStructure&lt;/code&gt;. In &amp;ldquo;pure&amp;rdquo; OO style, we defined classes called &lt;code&gt;ComposedCheck&lt;/code&gt; and &lt;code&gt;MultipleCheck&lt;/code&gt; to compose more checks into one, and &lt;code&gt;FailingCheck&lt;/code&gt; to encapsulate a check that is required to fail. None of the implemented methods has conditional structures related to the &lt;em&gt;business logic&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As an example, here&amp;rsquo;s the implementation for the class &lt;code&gt;ChildrenCountCheck&lt;/code&gt;, which validates a person considering the number of children:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ChildrenCountCheck: PersonCheckType {
    
    let childrenCount: Int
    init(_ childrenCount: Int) {
        self.childrenCount = childrenCount
    }
    
    func personIsValid(person: Person) -&amp;gt; Bool {
        return person.childrenCount == childrenCount
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;structure&lt;/code&gt; object defined in &lt;code&gt;main.swift&lt;/code&gt; contains the list of conditions, in the form of properly configured objects; as you can see, the list is easily readable and the conditions are clear: thus, we can &lt;em&gt;declare&lt;/em&gt; the intent, separated from the implementation details.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;example-functional-solution&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-functional-solution:c252b88516f644ca0545d16795aa645d&#34;&gt;Example: functional solution&lt;/h2&gt;

&lt;p&gt;In structuring the OO solution we have adopted a &lt;strong&gt;composition principle&lt;/strong&gt;: atomic objects with simple behavior, properly prepared, composed with each other in order to obtain more complex structures. In particular, each of our objects represents a specific &lt;em&gt;atomic behavior&lt;/em&gt;, that&amp;rsquo;s combined with others to obtain a &lt;em&gt;compound behavior&lt;/em&gt;. &lt;strong&gt;The abstraction holds&lt;/strong&gt;, and we can accept the fact that the objects we&amp;rsquo;re using are black boxes that encapsulate a single decision on a person: by creating a larger box with smaller boxes inside, we can define a more complex condition. However there are two problems specific to the OO approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;each class requires a lot of code just to build the &amp;ldquo;decision-in-the-box&amp;rdquo; abstraction;&lt;/li&gt;
&lt;li&gt;objects&amp;rsquo; composition is based on the methods of the objects themselves, that results, again, in writing a lot of code, which could obfuscate the intent;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can get the same result, namely to create a complex decision-making structure from simple components, more clearly by using &lt;strong&gt;functional programming&lt;/strong&gt;. The functional code is described in &lt;code&gt;functional.swift&lt;/code&gt;. We always start by the immutable &lt;code&gt;struct Person&lt;/code&gt; and create, for convenience, another simple data container, &lt;code&gt;struct DeskNode&lt;/code&gt;, which simply pairs the name of a node to the name of a optional destination desk. For the rest, we will exclusively define functions, by modeling the entire problem as a series of data transformations.&lt;/p&gt;

&lt;p&gt;In this case &lt;code&gt;PersonCheck&lt;/code&gt; is a &lt;strong&gt;type of function&lt;/strong&gt;, which associates a &lt;code&gt;Person&lt;/code&gt; to a &lt;code&gt;Bool&lt;/code&gt;. We also define the type of function &lt;code&gt;PersonNode&lt;/code&gt;, which associates a certain &lt;code&gt;DeskNode&lt;/code&gt; to a &lt;code&gt;Person&lt;/code&gt;, and that has basically the purpose that the &lt;code&gt;nextDeskNameForPerson&lt;/code&gt; method had in the OO solution.&lt;/p&gt;

&lt;p&gt;Finally, we represent the various &amp;ldquo;nodes&amp;rdquo; with a function of type &lt;code&gt;JobsNode&lt;/code&gt;, which constructs a &lt;code&gt;PersonNode&lt;/code&gt; based on a certain &lt;code&gt;PersonCheck&lt;/code&gt;: in this way, to build a list of &lt;code&gt;PersonNode&lt;/code&gt; we&amp;rsquo;ll just need to apply the various checks (&lt;code&gt;PersonCheck&lt;/code&gt;) to the respective nodes (&lt;code&gt;JobsNode&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The method most frequently adopted in functional programming to compose functions is to use custom operators. We want, for example, compose the various &lt;code&gt;PersonCheck&lt;/code&gt; as if we were composing simple &lt;code&gt;Bool&lt;/code&gt; values, by defining &lt;strong&gt;AND&lt;/strong&gt; and &lt;strong&gt;OR&lt;/strong&gt; operators. By association with the classic &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; we define respectively the operators &lt;code&gt;&amp;lt;&amp;amp;&amp;gt;&lt;/code&gt; is &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt;, also copying &lt;a href=&#34;https://en.wikipedia.org/wiki/Operator_associativity&#34;&gt;precedence and associativity&lt;/a&gt; rules from the standard library. To improve readability and clarity of functions&amp;rsquo; composition, we also declare a &lt;em&gt;function application&lt;/em&gt; operator, defined as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;infix operator &amp;lt;*&amp;gt; {
Â Â Â Â associativity left
Â Â Â Â precedence 100
}
func &amp;lt;*&amp;gt; &amp;lt;A, B&amp;gt; (left: A -&amp;gt; B, right: A) -&amp;gt; B {
Â Â Â Â return left(right)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see from the definition that the operator &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; basically applies an argument (positioned to the right of the operator) to a certain function (positioned to the left of the operator): thus, it represents an alternative way to apply a function other than writing its arguments in &lt;strong&gt;parentheses&lt;/strong&gt;, and is particularly suitable for improving the readability of the code when we use &lt;a href=&#34;https://en.wikipedia.org/wiki/Higher-order_function&#34;&gt;higher-order functions&lt;/a&gt;. We can see these operators at work in &lt;code&gt;main.swift&lt;/code&gt;, when we define our nodes, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;node(&amp;quot;old&amp;quot;, nextDeskName: &amp;quot;d3&amp;quot;)
Â Â Â Â &amp;lt;*&amp;gt; oldCheck
Â Â Â Â &amp;lt;&amp;amp;&amp;gt; mustFail(childrenChecks)
Â Â Â Â &amp;lt;&amp;amp;&amp;gt; checkExtendedJobs(availableJobsElderly)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above-mentioned function builds a &lt;code&gt;PersonNode&lt;/code&gt; named &amp;ldquo;old&amp;rdquo; that returns the desk &amp;ldquo;d3&amp;rdquo; if the input &lt;code&gt;Person&lt;/code&gt; complies with following conditions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;oldCheck&lt;/code&gt;: the person is elderly;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mustFail(childrenChecks)&lt;/code&gt;: the person must not have children;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkExtendedJobs(availableJobsElderly)&lt;/code&gt;: the senior citizens jobs set and the person&amp;rsquo;s favorite jobs set must have some intersection;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At first glance it may seem difficult to understand, but you just need to get the basic abstractions on which functional composition is based in order to appreciate its &lt;strong&gt;power and expressiveness&lt;/strong&gt;. The array &lt;code&gt;nodes&lt;/code&gt;, in &lt;code&gt;main.swift&lt;/code&gt;, contains all the nodes of the problem, represented as functions: compared to the OO solution contained in &lt;code&gt;structure&lt;/code&gt;, the functional one is more clear and readable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;an-empirical-validation&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;an-empirical-validation:c252b88516f644ca0545d16795aa645d&#34;&gt;An empirical validation&lt;/h2&gt;

&lt;p&gt;In designing the &amp;ldquo;OO&amp;rdquo; and &amp;ldquo;functional&amp;rdquo; solutions it was made the specific choice that the order in which the checks occur should be irrelevant: in this way we can remove a known cause of accidental complexity, the one of &amp;ldquo;control&amp;rdquo;, i.e, the &lt;strong&gt;order&lt;/strong&gt; in which the operations are carried out (we talked about it &lt;a href=&#34;http://engineering.facile.it/programmazione-funzionale-perche-preoccuparsi/#cause-di-complessita&#34;&gt;here&lt;/a&gt;). To do this, you must have &lt;strong&gt;non-ambiguous&lt;/strong&gt; checks: at most one check must pass for a certain person. It&amp;rsquo;d be probably possible to write a formal method to prove that a given set of conditions is non-ambiguous, and then write a unit test based on such proof, but in this case an &lt;em&gt;empirical approach&lt;/em&gt; seems more suitable and &lt;strong&gt;easier&lt;/strong&gt; to implement.&lt;/p&gt;

&lt;p&gt;It was therefore choosen to use a &lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt; approach: QuickCheck is a library for the &lt;a href=&#34;https://www.haskell.org&#34;&gt;Haskell&lt;/a&gt; language, that allows you to automatically test that certain functions satisfy certain properties. The idea is to verify that a particular function always behaves in the same way, testing it with &lt;strong&gt;a large number of random inputs&lt;/strong&gt;: in our case, the function is just the list of checks, and the input is a value of type &lt;code&gt;Person&lt;/code&gt;. To verify that the checks are not ambiguous we can just try them with a large number of randomly generated persons: if for a certain value of &lt;code&gt;Person&lt;/code&gt; two or more checks are positive, the test stops and the ambiguous checks&amp;rsquo; names are logged. In the case of two ambiguous checks, to solve the problem it will suffice to make one of them more specific, for example by requiring that the other fails. We will use here the term &lt;em&gt;QuickCheck&lt;/em&gt; to indicate the empirical test implemented, but in fact the original library does much more: please refer to the &lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck&#34;&gt;linked&lt;/a&gt; page for all the information.&lt;/p&gt;

&lt;p&gt;The functions &lt;code&gt;quickCheck_functional&lt;/code&gt; and &lt;code&gt;quickCheck_oo&lt;/code&gt;  implement the required feature: they generate a large number of random &lt;code&gt;Person&lt;/code&gt;, and verify that the number of passed checks for each person is either 0 or 1. We can try this test by adding a new node. For example, suppose that at some point, after some time that the code was successfully used to solve the problem, you choose to add a new condition: there&amp;rsquo;s a special desk for older people with only one child. Notice that modifying the code of the function &lt;code&gt;placeNameForPerson_structured&lt;/code&gt; would be rather complicated: we should probably &lt;strong&gt;change more than one decision branch&lt;/strong&gt;, adding the same condition at different points, and the likelyhood of error would be high. On the other side, with the other two solutions we just need to add a new node. However, after adding the node, by executing the program we will see that QuickCheck fails, printing the following message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ambiguous nodes: [1 child, 1 child old]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;QuickCheck is informing us that the nodes called &amp;ldquo;one child&amp;rdquo; and &amp;ldquo;one child old&amp;rdquo; are &lt;strong&gt;ambiguous&lt;/strong&gt;: in fact, if the &lt;code&gt;Person&lt;/code&gt; has one child and is old, the check for both nodes will pass. To solve the problem it will suffice to introduce another condition in the &amp;ldquo;one child&amp;rdquo; node: the seniority check must fail.&lt;/p&gt;

&lt;p&gt;In the project you&amp;rsquo;ll also find a &lt;code&gt;quickCheck_consistency&lt;/code&gt; function, which performs a &lt;em&gt;sanity check&lt;/em&gt;: it verifies that the target desk for a large number of randomly generated &lt;code&gt;Person&lt;/code&gt; remains the same in the 3 cases: structured, oo and functional.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;conclusions&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusions:c252b88516f644ca0545d16795aa645d&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;We have seen three ways to solve the same relatively complex problem, and in two of them we were able to get a &lt;strong&gt;more manageable&lt;/strong&gt;, extensible and modifiable code by working at a &lt;strong&gt;higher level of abstraction&lt;/strong&gt;. In particular, the &amp;ldquo;functional&amp;rdquo; way allowed us to write more compact code, characterized by a more evident intent, at the (low) cost of an initial step of abstraction, represented by custom operators. But the key to the whole process is once again to be found in the aforementioned phrase in &lt;em&gt;Structure and Interpretation of Computer Programs&lt;/em&gt;, which I quote again:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;programs must be written for people to read, and only incidentally for machines to execute&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Adopting a more &lt;strong&gt;declarative&lt;/strong&gt; style, where the &lt;em&gt;business logic&lt;/em&gt; code &amp;ldquo;declares the intent&amp;rdquo;, describing the &amp;ldquo;what&amp;rdquo; and not the &amp;ldquo;how&amp;rdquo;, you can write more clear and readable software. This software will probably also be more &lt;em&gt;testable&lt;/em&gt; because it is based on lower level &lt;strong&gt;atomic components&lt;/strong&gt;, easy to test individually, which are combined through patterns of composition, also easily testable and provable. The ultimate goal is to build software architectures that are able to &lt;strong&gt;automatically solve problems&lt;/strong&gt;, which are described in code by using &lt;strong&gt;basic building blocks&lt;/strong&gt;. Finally, we have seen how a mixed &amp;ldquo;reasoned&amp;rdquo; and &amp;ldquo;empirical&amp;rdquo; approach can give excellent results; &lt;em&gt;a priori&lt;/em&gt; reasoning and &lt;em&gt;a posteriori&lt;/em&gt; verification are both useful tools, but their union is particularly powerful: indeed, every scientific discipline requires both the logical-mathematical reasoning for the definition of the theories, and the experimental verification to test their validity.&lt;/p&gt;

&lt;p&gt;The tools are there, we just need to &lt;strong&gt;start using them&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>