<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Italiano on Facile.it Engineering</title>
    <link>/categories/italiano/</link>
    <description>Recent content in Italiano on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/italiano/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Puli: Universal Packages for PHP</title>
      <link>/blog/ita/puli-universal-packages-for-php/</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/puli-universal-packages-for-php/</guid>
      <description>

&lt;h2 id=&#34;composer-e-l-ecosistema-php:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Composer e l&amp;rsquo;ecosistema PHP&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;ecosistema PHP è notevolmente cambiato negli ultimi anni grazie all&amp;rsquo;introduzione di &lt;em&gt;Composer&lt;/em&gt;.
Esso ha definito degli standard per risolvere problemi comuni come l&amp;rsquo;autoloading e la gestione di pacchetti e dipendenze.
In questi ultimi anni si è assistito ad un proliferare di numerose componenti software riusabili che hanno significativamente modificato le strategie di sviluppo.&lt;/p&gt;

&lt;p&gt;Nonostante Composer si sia evoluto molto, in alcuni contesti le sue funzionalità risultano essere limitanti e incomplete.
I framework e i pacchetti più complessi hanno bisogno di una gestione personalizzata delle dipendenze. Generalmente sono necessarie operazioni di configurazione e registrazione. Ciò è specialmente vero per pacchetti core dei framework come i &lt;em&gt;template engines&lt;/em&gt;.
Composer, inoltre, possiede una cattiva gestione delle risorse non PHP. I file di configurazione devono essere gestiti manualmente oppure è necessario adottare standard strettamente legati a ciascun framework.&lt;/p&gt;

&lt;h2 id=&#34;la-soluzione-puli:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;La soluzione: Puli&lt;/h2&gt;

&lt;p&gt;A partire dal gennaio 2014 è stato sviluppato &lt;strong&gt;Puli, Universal Packages for PHP&lt;/strong&gt;, da Bernhard Schussek.
Puli mira a risolvere i problemi d&amp;rsquo;integrazione menzionati in precedenza creando un &lt;strong&gt;layer d&amp;rsquo;astrazione aggiuntivo tra Composer e l&amp;rsquo;applicazione&lt;/strong&gt;. Tale layer consente di gestire le risorse secondo convenzioni indipendenti dai framework. Ciò significa che Puli può essere usato anche dalle applicazioni che non ne fanno uso.
Attualmente Puli è in Beta, la versione stabile non è stata ancora annunciata ma è prevista per l&amp;rsquo;inizio del 2016.
&lt;strong&gt;Puli è stato ideato per affiancare Composer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Puli lavora ad un livello più alto per fornire le seguenti funzionalità:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#puli-path&#34;&gt;Gestione dei path virtuali per risorse non PHP&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#override-puli-path&#34;&gt;Overriding dei path virtuali&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#binding-type&#34;&gt;Interazione semplificata dei pacchetti con l&amp;rsquo;uso di Binding Type&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#url-generation&#34;&gt;Generazione automatica di URL per risorse pubbliche&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#assets-install&#34;&gt;Installazione automatica delle risorse pubbliche nelle document root&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;le-componenti-di-puli:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Le componenti di Puli&lt;/h2&gt;

&lt;p&gt;Puli offre svariate funzionalità organizzate nei seguenti componenti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resource repository&lt;/li&gt;
&lt;li&gt;Discovery service&lt;/li&gt;
&lt;li&gt;Public resources manager&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;configurazione:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Configurazione&lt;/h3&gt;

&lt;p&gt;Nell&amp;rsquo;offire questi servizi, Puli legge e scrive un proprio file di configurazione &lt;code&gt;puli.json&lt;/code&gt; presente nella root directory del pacchetto, allo stesso modo del &lt;code&gt;composer.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tale configurazione può essere modificata manualmente oppure utilizzando l&amp;rsquo;&lt;strong&gt;interfaccia CLI di Puli&lt;/strong&gt;;
Tale strumento può essere installato da Packagist tramite il pacchetto &lt;code&gt;puli/cli&lt;/code&gt;.
Al pari di Composer, sono disponibili archivi Phar per un uso immediato.&lt;/p&gt;

&lt;h3 id=&#34;installazione:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Installazione&lt;/h3&gt;

&lt;p&gt;Affiché le applicazioni possano usare i servizi offerti da Puli è necessario procedere all&amp;rsquo;installazione.
Per applicazioni che non fanno uso di framework è sufficiente abilitare il &lt;em&gt;Composer Plugin&lt;/em&gt; &lt;code&gt;puli/composer-plugin&lt;/code&gt;.
Quest&amp;rsquo;azione viene svolta da Composer con il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ composer require puli/composer-plugin:^1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tale plugin consente di generare atomaticamente la cosiddetta &lt;strong&gt;Puli Factory Class&lt;/strong&gt;: componente chiave da cui è possibile accedere a tutti i servizi offerti da Puli.&lt;/p&gt;

&lt;p&gt;A questo punto è possibile usare Puli nel modo seguente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require &#39;./vendor/autoload.php&#39;;

// La costante PULI_FACTORY_CLASS viene 
// definita al &amp;quot;composer install&amp;quot;
$factoryClass = PULI_FACTORY_CLASS;
$factory = new $factoryClass();

$puliRepository = $factory-&amp;gt;createRepository();
$puliDiscovery  = $factory-&amp;gt;createDiscovery($puliRepository);
$puliGenerator  = $factory-&amp;gt;createUrlGenerator($puliDiscovery);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;resource-repository:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Resource repository&lt;/h3&gt;

&lt;p&gt;Il resource repository fornisce un &lt;strong&gt;file system virtuale&lt;/strong&gt; per accedere alle risorse non PHP.
Ciò consente di localizzare facilmente i file senza conoscere la loro effettiva posizione.&lt;/p&gt;

&lt;h4 id=&#34;accesso-alle-risorse-con-composer:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Accesso alle risorse con Composer&lt;/h4&gt;

&lt;p&gt;Con Composer era frequente scrivere codice di questo tipo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$translationFileName = realpath(__DIR__ . &#39;/../vendor/acme/blog/resources/translation-it.xml&#39;);
$translationContent = file_get_contents($translationFileName);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tale operazione fa uso di dettagli implementativi: il layout delle directory fornito da Composer. La soluzione non è riusabile nè configurabile.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;puli-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;accesso-alle-risorse-con-puli:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Accesso alle risorse con Puli&lt;/h4&gt;

&lt;p&gt;Ciascun pacchetto compatibile con Puli può registrare diversi &lt;strong&gt;Path Mapping&lt;/strong&gt; utilizzati per tradurre i &lt;strong&gt;percorsi virtuali (Puli path)&lt;/strong&gt; in &lt;strong&gt;percorsi reali&lt;/strong&gt;.
Tali Path Mapping sono elencati nel &lt;code&gt;puli.json&lt;/code&gt; e normalmente sono modificati con il comando Puli CLI &lt;code&gt;map&lt;/code&gt;.
Ad esempio, il maintainer di acme/blog può eseguire questo comando per definire un nuovo mapping:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli map /acme/blog resources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tale operazione crea un&amp;rsquo;associazione tra il prefisso del path virtuale &lt;code&gt;/acme/blog&lt;/code&gt; e la directory &lt;code&gt;resources&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Un ipotetico utilizzatore del pacchetto acme/blog potrà quindi accedere alle risorse nel seguente modo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$puliPath = &#39;/acme/blog/translation-it.xml&#39;;
$translationContent = $puliRepository-&amp;gt;get($puliPath)-&amp;gt;getBody();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;È importante notare come i Path mapping siano definiti dal maintainer del pacchetto. Le altre componenti si limitano ad usarli per accedere alle risorse.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;override-puli-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;resource-overriding:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Resource overriding&lt;/h4&gt;

&lt;p&gt;È tuttavia presente un&amp;rsquo;eccezione a questa regola, tale concetto è alla base del &lt;strong&gt;Resource overriding&lt;/strong&gt;.
Immaginiamo di dover lavorare con due pacchetti: A e B.
Il pacchetto B è dipendente dal pacchetto A.
B, tuttavia, vuole personalizzare alcune risorse fornite da A.
Il maintainer di B può quindi rimpiazzare (&lt;em&gt;override&lt;/em&gt;) tali risorse aggiungengo nuovi Path Mapping.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;binding-type&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;discovery-service:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Discovery service&lt;/h3&gt;

&lt;p&gt;Il componente discovery semplifica l&amp;rsquo;interazione tra pacchetti: consente di condividere le risorse senza codice boilerplate attraverso l&amp;rsquo;uso di &lt;strong&gt;Binding Type&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Per il componente Discovery i pacchetti sono siddivisi in due categorie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Resource providers&lt;/strong&gt;: pacchetti che offrono risorse;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource consumers&lt;/strong&gt;: pacchetti che richiedono risorse.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I Binding Types sono definiti dai resource consumers. Ciascun Binding Type è idendificato da un nome (es. &lt;code&gt;acme/translator/messages&lt;/code&gt;).
I resource providers possono quindi associare una o più risorse a tali Binding Type.
&lt;strong&gt;L&amp;rsquo;associazione avviene legando un Puli Path ad un Binding Type&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;Binding Type&lt;/em&gt; sono quindi un&amp;rsquo;interfaccia per la condivisione di risorse.&lt;/p&gt;

&lt;h4 id=&#34;esempio:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Esempio&lt;/h4&gt;

&lt;p&gt;Esaminiamo, con un esempio, l&amp;rsquo;interazione tra due pacchetti: &lt;code&gt;acme/md2html&lt;/code&gt; e &lt;code&gt;acme/blog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;acme/md2html&lt;/code&gt; è un componente per tradurre contenuto Markdown verso pagine Html. Md2html è un sistema configurabile: la resa dell&amp;rsquo;output avviene attraverso template Twig modificabili.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;acme/blog&lt;/code&gt; fornisce tools per la gestione di articoli da blog. Siccome questi ultimi possono essere scritti in Markdown, &lt;code&gt;acme/blog&lt;/code&gt; fa uso di &lt;code&gt;acme/md2html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Il componente &lt;code&gt;acme/blog&lt;/code&gt; può personalizzare i template di Md2html in questo modo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$md2html = new Md2Html();
$md2html-&amp;gt;useHeaderTemplate(__DIR__ . &#39;/resources/templates/markdown-header.twig&#39;);

$htmlContent = $md2html-&amp;gt;translate(&#39;## markdown content&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Questo approccio ha due svantaggi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;acme/blog&lt;/code&gt; ha la diretta responsabilità di configurare correttamente Md2html utilizzando l&amp;rsquo;API fornita;&lt;/li&gt;
&lt;li&gt;Gli utenti di &lt;code&gt;acme/blog&lt;/code&gt; non possono modificare facilmente le personalizzazioni apportate a Md2html.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tali problemi possono essere risolti con Puli.&lt;/p&gt;

&lt;p&gt;Il mantainer di Md2html decide di rendere il suo pacchetto compatibile con Puli.&lt;/p&gt;

&lt;p&gt;Definisce quindi il Binding Type: &lt;code&gt;acme/md2html/header-template&lt;/code&gt; con il seguente comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli type --define acme/md2html/header-template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il maintainer di &lt;code&gt;acme/blog&lt;/code&gt; può quindi usare tale Binding Type nel seguente modo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli map /acme/blog resources
$ puli bind /acme/blog/templates/markdown-header.twig acme/md2html/header-template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Così &lt;code&gt;acme/md2html&lt;/code&gt; può leggere il nuovo template &lt;code&gt;markdown-header.twig&lt;/code&gt; in modo trasparente.&lt;/p&gt;

&lt;p&gt;Gli utilizzatori di acme/blog che desiderassero modificare tale template hanno due strategie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modificare l&amp;rsquo;associazione al Binding Type &lt;code&gt;acme/md2html/header-template&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sovrascrivere il Puli Path &lt;code&gt;/acme/blog/templates/markdown-header.twig&lt;/code&gt; con il meccanismo dell&amp;rsquo;overriding esaminato in precedenza.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;url-generation&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;public-resources-manager:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Public resources manager&lt;/h3&gt;

&lt;p&gt;Puli gestisce anche le risorse pubbliche, gli assets. In particolare, è in grado di generare path e URL da usare nei template o nei fogli di stile.&lt;/p&gt;

&lt;p&gt;Come primo passo, è necessario &lt;strong&gt;registrare i server web che servono tali risorse&lt;/strong&gt;.
È possibile aggiungere un nuovo server con il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli server --add localhost public_html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In questo esempio, &lt;code&gt;localhost&lt;/code&gt; è il nome del server, mentre &lt;code&gt;public_html&lt;/code&gt; è la sua &lt;em&gt;document root&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ora è possibile pubblicare delle risorse sul server &lt;code&gt;localhost&lt;/code&gt; con il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli publish /acme/blog/public localhost /blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ciò mappa il Puli Path &lt;code&gt;/acme/blog/public&lt;/code&gt; alla directory &lt;code&gt;blog&lt;/code&gt; della document root del server &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Puli ora ha tutte le informazioni per generare i persorsi delle risorse pubbliche:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$puliPath = &#39;/acme/blog/public/images/logo.png&#39;;
$url = $puliGenerator-&amp;gt;generateUrl($puliPath);
echo $url; // -&amp;gt; &amp;quot;/blog/images/logo.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;ultima operazione può essere eseguita in un template Twig con l&amp;rsquo;utilizzo dell&amp;rsquo;estensione &lt;code&gt;puli/twig-extension&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-twig&#34;&gt;&amp;lt;img src=&amp;quot;{{ resource_url(&#39;/acme/blog/public/images/logo.png&#39;) }}&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;assets-install&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;installazione-delle-risorse:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Installazione delle risorse&lt;/h4&gt;

&lt;p&gt;Puli può installare automaticamente le risorse pubbliche nella document root dei web server.&lt;/p&gt;

&lt;p&gt;Il comando è il seguente:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli publish --install
Installing /acme/blog/public into public_html via symlink...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gli autori di Puli hanno annunciato che &lt;strong&gt;tale funzionalità sarà rimossa da Puli CLI in favore di estensioni Gulp o altri tool simili&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusioni:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Conclusioni&lt;/h3&gt;

&lt;p&gt;Abbiamo visto come Puli offra numerose funzionalità aggiuntive rispetto al solo utilizzo di Composer.
Puli è un progetto giovane, nel corso del tempo saranno aggiunte ulteriori funzionalità che lo renderanno ancora più potente.
Per approfondire, la documentazione ufficiale è molto chiara e completa ed è disponibile all&amp;rsquo;indirizzo: &lt;a href=&#34;http://docs.puli.io/&#34;&gt;http://docs.puli.io/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Codice riusabile: un primer</title>
      <link>/blog/ita/codice-riusabile-un-primer/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/codice-riusabile-un-primer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://engineering.facile.it/optionals-in-objective-c-ita/&#34;&gt;L&amp;rsquo;ultima volta&lt;/a&gt; abbiamo visto una possibile implementazione del tipo &lt;a href=&#34;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID330&#34;&gt;Optional&lt;/a&gt; in Objective-C; l&amp;rsquo;obiettivo primario dell&amp;rsquo;articolo era quello di importare in Objective-C uno strumento frequentemente utilizzato in Swift, ma usare una classe come &lt;code&gt;Optional&lt;/code&gt; può essere considerato un&amp;rsquo;applicazione di un concetto molto più generale: il &lt;strong&gt;riutilizzo del codice&lt;/strong&gt;. In effetti, &lt;code&gt;Optional&lt;/code&gt; non è legato a un particolare dominio, e può essere riutilizzato più e più volte in molti progetti: questo è esattamente ciò che accade in Swift. Ma a pensarci bene, questo è ciò che accade per una grande varietà di &lt;em&gt;classi&lt;/em&gt; in Objective-C (e di &lt;em&gt;tipi&lt;/em&gt; in Swift): ad esempio, &lt;code&gt;NSArray&lt;/code&gt; e &lt;code&gt;Array&lt;/code&gt; sono entrambi costrutti che espongono una specifica interfaccia, possiedono una certa implementazione, e vengono riutilizzati continuamente in metodi e funzioni. &lt;code&gt;NSArray&lt;/code&gt; e &lt;code&gt;Array&lt;/code&gt; non sono legati a un particolare dominio, e possiedono due importanti caratteristiche:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sono &lt;strong&gt;generici&lt;/strong&gt;, quindi non sono legati a un particolare sottotipo: un array di numeri e un array di stringhe funzioneranno esattamente allo stesso modo per quanto riguarda le funzioni strettamente associate agli array, come il conteggio degli elementi, rimuovere o aggiungere un elemento, mappare, filtrare, ridurre e così via;&lt;/li&gt;
&lt;li&gt;sono &lt;strong&gt;componibili&lt;/strong&gt;, quindi possono essere combinati tra loro e con altri oggetti più specifici, mantenendo comunque lo stesso &lt;strong&gt;comportamento predicibile&lt;/strong&gt;: un array di &lt;em&gt;clienti&lt;/em&gt;, ciascuno con il suo array &lt;em&gt;prodotti acquistati&lt;/em&gt;, può essere mappato in un array di array di &lt;em&gt;prodotti&lt;/em&gt;, che può essere appiattito in un array di &lt;em&gt;prodotti&lt;/em&gt;, che può essere ridotto a un numero che rappresenta il costo totale;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Array&lt;/code&gt;, come &lt;code&gt;Optional&lt;/code&gt;, è un ottimo esempio di codice perfettamente riutilizzabile, ma ci sono molti altri costrutti che soddisfano le regole di cui sopra, cioè &lt;em&gt;genericità&lt;/em&gt; e &lt;em&gt;componibilità&lt;/em&gt;. Gli oggetti specifici di dominio, invece, tipicamente non soddisfano queste regole, anche quando un oggetto sembra essere sufficientemente generico da poter essere riutilizzato. Una classe &lt;code&gt;Cliente&lt;/code&gt;, ad esempio, potrebbe sembrare un buon candidato, ma cercare di usare la stessa classe in due diversi progetti si rivelerebbe &lt;strong&gt;una pessima idea&lt;/strong&gt;: probabilmente saremo costretti a &lt;strong&gt;specializzare&lt;/strong&gt; la classe per ciascun progetto, portando a divergenza tra le implementazioni, o usare diversi livelli di &lt;strong&gt;indirezione&lt;/strong&gt;, perché stiamo inserendo a forza un oggetto in un dominio che non gli appartiene.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;è un&amp;rsquo;altra cosa da considerare: se davvero vogliamo riutilizzare del codice, dovremo anche stare attenti alle nostre &lt;strong&gt;scelte di design&lt;/strong&gt;, perché non tutti i design permettono l&amp;rsquo;utilizzo di codice generico. Potrei dimenticarmi dell&amp;rsquo;esistenza dei tipi &lt;code&gt;Optional&lt;/code&gt; e &lt;code&gt;Array&lt;/code&gt;, e creare classi che non espongono mai i loro componenti di base; ad esempio, potrei creare una classe che rappresenta una collezione di oggetti opzionali, senza mai esporre nell&amp;rsquo;interfaccia il fatto che sto utilizzando &lt;code&gt;Array&lt;/code&gt; e &lt;code&gt;Optional&lt;/code&gt; nell&amp;rsquo;implementazione: ne risulterebbe una certa &lt;strong&gt;complicazione&lt;/strong&gt; della firma dei metodi, ma è possibile. Ma, a pensarci bene, è una buona idea? &lt;strong&gt;Ne dubito&lt;/strong&gt;. Creare una nuova e specifica classe, non componibile, per ogni possibile necessità produrrà migliaia di linee di codice &lt;strong&gt;boilerplate&lt;/strong&gt;, interfacce complicate, e nomi di classi assurdamente lunghi. Se vogliamo scrivere codice riutilizzabile, oltre a seguire le due regole già viste, dobbiamo anche prestare attenzione al modo in cui architettiamo le nostre app, e il principio di design da seguire in questo caso è il principio di &lt;strong&gt;composizione&lt;/strong&gt;, che può essere sintetizzato con la seguente frase:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Costrutti e comportamenti specifici del dominio dovrebbero essere realizzati componendo blocchi costruttivi atomici e generici.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ciò significa sostanzialmente che, invece di creare di volta in volta una specifica implementazione per ovviare alle nostre necessità, dovremmo costruire le nuove funzionalità aggregando oggetti atomici già definiti. Sembra un&amp;rsquo;idea complessa, e forse dovremmo fermarci un attimo e chiederci se scrivere codice riutilizzabile sia davvero una buona idea. La mia risposta è un definitivo &lt;strong&gt;si&lt;/strong&gt;, per i seguenti motivi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;scrivendo componenti riutilizzabili possiamo &lt;strong&gt;incapsulare&lt;/strong&gt; uno specifico comportamento, evitando di dover riscrivere di continuo sostanzialmente lo stesso codice;&lt;/li&gt;
&lt;li&gt;potremmo disporre di &lt;strong&gt;linee guida&lt;/strong&gt; per progettare l&amp;rsquo;architettura delle nostre app, perché non avremmo bisogno di definire sempre nuove interfacce per rappresentare gli stessi comportamenti;&lt;/li&gt;
&lt;li&gt;un componente riutilizzabile è molto facile da &lt;strong&gt;testare&lt;/strong&gt;, perché piccolo e atomico, quindi usandolo potremmo confidare maggiormente sulla correttezza del nostro codice;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Questi stessi vantaggi si ottengono, infatti, proprio usando oggetti come &lt;code&gt;Array&lt;/code&gt; e &lt;code&gt;Optional&lt;/code&gt;. Ma, come ho detto, esistono molti altri componenti di questo tipo, e in effetti definire le loro interfacce è un problema a sé, di non facile soluzione: lo trovo tuttavia un problema molto interessante. Seguendo le regole &lt;em&gt;generico&lt;/em&gt; e &lt;em&gt;componibile&lt;/em&gt; abbiamo già una linea guida per definire nuovi componenti riusabili, ma per chiudere il cerchio abbiamo bisogno di una terza regola, non meno importante:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un oggetto riusabile deve essere &lt;strong&gt;semplice&lt;/strong&gt;, cioè deve avere una unica responsabilità, lineare e facile da descrivere;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Optional&lt;/code&gt; segue questa regola: è un contenitore generico per un oggetto che potrebbe esserci, oppure no. &lt;code&gt;Array&lt;/code&gt; segue questa regola: rappresenta una collezione ordinata di oggetti, ai quali posso accedere in un tempo costante. Proviamo a creare un nuovo componente riutilizzabile applicando le regole.&lt;/p&gt;

&lt;p&gt;Consideriamo questo caso d&amp;rsquo;uso reale (piuttosto frequente): diversi oggetti devono essere notificati quando un certo oggetto cambia il suo stato, o compie qualche azione. Un modo per risolvere il problema è rappresentato dall&amp;rsquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;observer pattern&lt;/a&gt;, che consiste nel far implementare ai nostri oggetti un&amp;rsquo;interfaccia che indica un comportamento di tipo &lt;a href=&#34;https://it.wikipedia.org/wiki/Publish/subscribe&#34;&gt;publish-subscribe&lt;/a&gt;. Tuttavia, far implementare agli oggetti un&amp;rsquo;interfaccia &lt;strong&gt;non è riusabile&lt;/strong&gt;: ogni volta in cui useremo questo pattern finiremo per &lt;strong&gt;riscrivere&lt;/strong&gt; codice molto simile. Vogliamo invece incapsulare il comportamento alla base di questo pattern in un oggetto generico, e riutilizzare quell&amp;rsquo;oggetto. Quanto segue è una possibile implementazione di tale oggetto, quella che personalmente uso in produzione, ma ce ne sono molte altre: in effetti, l&amp;rsquo;idea di trovare un modo generico e componibile di rappresentare e manipolare &lt;em&gt;flussi&lt;/em&gt; di segnali osservabili ha fatto nascere un intero paradigma di programmazione, chiamato &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming&#34;&gt;functional reactive programming&lt;/a&gt;. Ma nel nostro caso siamo interessati a creare un ben più semplice oggetto &lt;strong&gt;Signal&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La classe &lt;code&gt;Signal&lt;/code&gt; che vogliamo implementare deve rappresentare un &lt;em&gt;aggiornamento&lt;/em&gt; per un certo oggetto: l&amp;rsquo;aggiornamento può riguardare qualsiasi cosa, per esempio un nuovo valore per un attributo, o il fatto che una certa azione è stata compiuta. Useremo il linguaggio Swift, grazie al quale potremo godere anche di ottima sicurezza sulla manipolazione dei &lt;strong&gt;tipi&lt;/strong&gt; coinvolti. Ecco in sintesi cosa chiediamo alla classe &lt;code&gt;Signal&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deve avere un sottotipo &lt;strong&gt;parametrico&lt;/strong&gt;, che sarà appunto il tipo del valore segnalato ad ogni aggiornamento;&lt;/li&gt;
&lt;li&gt;deve dichiarare un metodo &lt;code&gt;observe&lt;/code&gt;, che prende in ingresso una &lt;em&gt;closure&lt;/em&gt; che rappresenta l&amp;rsquo;azione da compiere a ogni aggiornamento;&lt;/li&gt;
&lt;li&gt;deve dichiarare un metodo &lt;code&gt;send&lt;/code&gt;, che prende in ingresso un nuovo valore del tipo sottostante;&lt;/li&gt;
&lt;li&gt;deve dichiarare semplici metodi di composizione, che seguano le convenzioni classiche per i nomi, come &lt;code&gt;map&lt;/code&gt; per generare un nuovo &lt;code&gt;Signal&lt;/code&gt; da uno esistente trasformando il valore osservato, e &lt;code&gt;forwardTo&lt;/code&gt; per fare in modo che un altro &lt;code&gt;Signal&lt;/code&gt;, quando produce un nuovo valore, &lt;em&gt;attivi&lt;/em&gt; il segnale di partenza;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dal punto di vista semantico, possiamo descrivere un &lt;code&gt;Signal&lt;/code&gt; come un contenitore di un valore che esisterà a un certo punto nel futuro, e continuerà ad aggiornarsi indefinitamente.&lt;/p&gt;

&lt;p&gt;Segue l&amp;rsquo;intera implementazione della classe &lt;code&gt;Signal&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum SignalContinuation
{
  case Continue
  case Stop
}

public class Signal&amp;lt;Subtype&amp;gt;
{
  private var observers: [(Subtype -&amp;gt; SignalContinuation)] = []

  public init() {}

  public func observe (observeFunction: Subtype -&amp;gt; SignalContinuation)
  {
    observers.append(observeFunction)
  }

  public func send (value: Subtype)
  {
    var continuations: [(Subtype -&amp;gt; SignalContinuation)] = []
    while observers.count &amp;gt; 0
    {
      let observer = observers.removeFirst()
      let continuation = observer(value)
      switch continuation
      {
      case .Continue:
        continuations.append(observer)
      case .Stop: break
      }
    }
    observers = continuations
  }

  public func forwardTo (otherSignal: Signal&amp;lt;Subtype&amp;gt;) -&amp;gt; Signal
  {
    observe { action in
      otherSignal.send(action)
      return .Continue
    }
    return self
  }

  public func forwardTo &amp;lt;OtherSubtype&amp;gt; (
    otherSignal: Signal&amp;lt;OtherSubtype&amp;gt;,
    mappingFunction: Subtype -&amp;gt; OtherSubtype) -&amp;gt; Signal
  {
    observe { action in
      otherSignal.send(mappingFunction(action))
      return .Continue
    }
    return self
  }

  public func map &amp;lt;OtherSubtype&amp;gt; (transform: Subtype -&amp;gt; OtherSubtype) -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt;
  {
    let mappedSignal = Signal&amp;lt;OtherSubtype&amp;gt;()
    forwardTo(mappedSignal, mappingFunction: transform)
    return mappedSignal
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;implementazione è semplice, ma potente. Un problema affrontato di frequente quando si implementa l&amp;rsquo;&lt;em&gt;observer pattern&lt;/em&gt; è la gestione delle disiscrizioni; è responsabilità di chi osserva smettere di farlo, e in questa implementazione di &lt;code&gt;Signal&lt;/code&gt; la cosa è gestita direttamente nella &lt;em&gt;closure&lt;/em&gt; passata al metodo &lt;code&gt;observe&lt;/code&gt;: la &lt;em&gt;closure&lt;/em&gt; deve ritornare un valore di tipo &lt;code&gt;SignalContinuation&lt;/code&gt; che può essere appunto &lt;code&gt;.Continue&lt;/code&gt; o &lt;code&gt;.Stop&lt;/code&gt;. Un altro problema è la gestione della memoria: dobbiamo assicurarci che quando la memoria di un osservatore è rilasciata, questo debba anche smettere di osservare i segnali, o il messaggio verrà inviato a un puntatore non valido, con conseguente crash dell&amp;rsquo;app. Swift definisce alcuni descrittori di &lt;em&gt;memory ownership&lt;/em&gt;, e &lt;code&gt;weak&lt;/code&gt; fa al caso nostro: sarà sufficiente inserire una &lt;em&gt;guard clause&lt;/em&gt; all&amp;rsquo;inizio della &lt;em&gt;closure&lt;/em&gt; passata al metodo &lt;code&gt;observe&lt;/code&gt;; se l&amp;rsquo;oggetto è diventato &lt;code&gt;nil&lt;/code&gt;, la &lt;em&gt;closure&lt;/em&gt; ritornerà &lt;code&gt;.Stop&lt;/code&gt;. L&amp;rsquo;esempio seguente mostra un possibile utilizzo della classe &lt;code&gt;Signal&lt;/code&gt;, incluso il meccanismo appena descritto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Sender
{
  let signal = Signal&amp;lt;Int&amp;gt;()

  func sendNew(value: Int)
  {
    signal.send(value)
  }
}

class Receiver&amp;lt;Type: CustomStringConvertible&amp;gt;
{
  func startObserving(signal: Signal&amp;lt;Type&amp;gt;)
  {
    signal.observe { [weak self] value in
      guard let this = self else { return .Stop }
      this.printNewValue(value)
      return .Continue
    }
  }

  func printNewValue(value: Type)
  {
    print(value)
  }
}

let sender = Sender()
let receiver = Receiver&amp;lt;Int&amp;gt;()

receiver.startObserving(sender.signal)

sender.signal.send(3)
sender.signal.send(5)
sender.signal.send(10)
sender.signal.send(20)
/// this will print 3, 5, 10, 20 on console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nell&amp;rsquo;esempio possiamo osservare l&amp;rsquo;applicazione dei concetti introdotti all&amp;rsquo;inizio dell&amp;rsquo;articolo: invece di creare una nuova interfaccia per lo stesso comportamento, stiamo direttamente usando e riusando l&amp;rsquo;oggetto &lt;code&gt;Signal&lt;/code&gt;. Un esempio più complesso potrebbe essere rappresentato dall&amp;rsquo;aggiunta di un &lt;em&gt;resonator&lt;/em&gt;, cioè di un oggetto che possiede un segnale che risuona con un altro, quindi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class DoublingResonator
{
  let signal = Signal&amp;lt;Int&amp;gt;()

  func resonateWith(otherSignal: Signal&amp;lt;Int&amp;gt;)
  {
    otherSignal.forwardTo(signal) { $0*2 }
  }
}

let resonator = DoublingResonator()
resonator.resonateWith(sender.signal)

let receiver = Receiver&amp;lt;Int&amp;gt;()

receiver.startObserving(resonator.signal)

sender.signal.send(3)
sender.signal.send(5)
sender.signal.send(10)
sender.signal.send(20)
/// this will print 6, 10, 20, 40 on console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ci sono molte altre opzioni per comporre segnali, ma finché non ne avremo bisogno sarà meglio mantenere la classe &lt;strong&gt;semplice&lt;/strong&gt;: gradualmente nel tempo potremo aggiungere nuove funzionalità, e fintanto che queste saranno sufficientemente generiche e propriamente testate, saremo in grado di usarle in tutti i nostri progetti.&lt;/p&gt;

&lt;p&gt;Per concludere, definire le giuste astrazioni per conseguire riusabilità del codice non è un problema di semplice soluzione: molte pubblicazioni accademiche affrontano il problema (il classico articolo &lt;a href=&#34;http://www.biglever.com/papers/Krueger_AcmReuseSurvey.pdf&#34;&gt;Software Reuse&lt;/a&gt; di Charles W. Krueger fornisce una buona panoramica delle tecniche considerate), e il motivo per il quale la &lt;a href=&#34;https://it.wikipedia.org/wiki/Teoria_delle_categorie&#34;&gt;teoria delle categorie&lt;/a&gt; ha trovato molte applicazioni in programmazione funzionale è perché essa offre un eccellente insieme di astrazioni per affrontare diverse classi di problemi. Tuttavia sono convinto che i vantaggi legati allo scrivere codice riutilizzabile siano molti, e che poter basare un design sulla composizione di oggetti atomici sia &lt;strong&gt;un degno obiettivo&lt;/strong&gt; da perseguire.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facile.it devs @ Codemotion Milan 2015</title>
      <link>/blog/ita/facile-it-devs-codemotion-milan-2015/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/facile-it-devs-codemotion-milan-2015/</guid>
      <description>

&lt;p&gt;L&amp;rsquo;appuntamento con il &lt;a href=&#34;http://milan2015.codemotionworld.com&#34;&gt;Codemotion&lt;/a&gt; di quest&amp;rsquo;anno a Milano è stato particolarmente &lt;strong&gt;ricco&lt;/strong&gt;: tante tracce, moltissimi contenuti suddivisi tra talk tecnici, workshop e keynote, e alcuni ospiti illustri, tra cui il celebre &lt;a href=&#34;https://twitter.com/rasmus&#34;&gt;Rasmus Lerdorf&lt;/a&gt;, creatore del linguaggio &lt;strong&gt;PHP&lt;/strong&gt;. Come già fatto per il &lt;a href=&#34;http://engineering.facile.it/php-day-2015/&#34;&gt;PHP Day 2015&lt;/a&gt;, proponiamo le nostre impressioni sulla conferenza, citando i talk che ci hanno colpito maggiormente: la scelta dei talk è basata sul gusto personale dei vari membri della redazione di Facile.it Engineering, e le considerazioni esposte non vanno lette come recensioni, ma come riflessioni di vario genere sulle tematiche trattate, volte a stimolare nei lettori l&amp;rsquo;interesse a &lt;strong&gt;partecipare&lt;/strong&gt; a conferenze come il Codemotion.&lt;/p&gt;

&lt;p&gt;I talk sono in ordine cronologico.&lt;/p&gt;

&lt;h2 id=&#34;indice:fd439f196c3125ae563b4be0e3399006&#34;&gt;Indice&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#a-programmer-is&#34;&gt;A programmer is&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tdd-per-android&#34;&gt;TDD per Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#platformer-2d&#34;&gt;Platformer 2D: jumping from XNA to Unity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#grocery-site-in-react&#34;&gt;Building the world&amp;rsquo;s largest grocery site in React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#alert-overload&#34;&gt;Alert overload: How to adopt a microservices architecture without being overwhelmed with noise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#f-sharp-not-a-game&#34;&gt;F#, not a game!!!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#polymer-firebase&#34;&gt;Applicazioni Real-Time con Polymer e Firebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#offline-web-applications&#34;&gt;The new Mobile Challenge: Offline-Enablement for Web Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#feature-gluttony&#34;&gt;How to defeat feature gluttony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#webassembly&#34;&gt;Is WebAssembly the killer of JavaScript?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fatal-error&#34;&gt;The evolution in the design of FATAL ERROR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ancora-cpp&#34;&gt;Perché nel 2015 parliamo ancora di C++?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mobile-senza-unity&#34;&gt;Mobile senza Unity: il caso SBK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#php-7&#34;&gt;Speeding up the Web with PHP 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;a-programmer-is&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-programmer-is:fd439f196c3125ae563b4be0e3399006&#34;&gt;A Programmer is&amp;hellip;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Birgitta Boeckeler (&lt;a href=&#34;https://twitter.com/birgitta410&#34;&gt;@birgitta410&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 10:15 - 11:00 - Keynote Motivational (&lt;a href=&#34;http://www.slideshare.net/Codemotion/keynote-birgitta-boeckeler-track-motivational-a-programmer-is&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In uno dei due &lt;em&gt;keynote&lt;/em&gt; di apertura della prima giornata Birgitta Boeckeler ha affrontato la spinosa questione di &lt;a href=&#34;http://milan2015.codemotionworld.com/talk-detail/?detail=1980&amp;amp;sub=1&#34;&gt;&amp;ldquo;cosa è un programmatore&amp;rdquo;&lt;/a&gt;, mostrando che assunzioni e incomprensioni &lt;strong&gt;vecchie di 50 anni&lt;/strong&gt; ancora oggi influenzano la professione di programmatore e il modo in cui essa è considerata nel mondo, da addetti ai lavori e non.&lt;/p&gt;

&lt;p&gt;La &lt;a href=&#34;http://engineering.facile.it/programmazione-funzionale-perche-preoccuparsi/&#34;&gt;software crisis&lt;/a&gt; degli anni &amp;lsquo;60 aveva spinto aziende e università a elaborare metodi per distinguere i &amp;ldquo;buoni programmatori&amp;rdquo; sulla base di &lt;strong&gt;test attitudinali&lt;/strong&gt; come l&amp;rsquo;&lt;em&gt;IBM PAT&lt;/em&gt;, e influenti pubblicazioni accademiche come &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=1142628&#34;&gt;A vocational interest scale for computer programmers&lt;/a&gt;(1966) hanno contribuito alla definizione del programmatore tipo come una persona che &amp;ldquo;ama i puzzle&amp;rdquo;, &amp;ldquo;ama sperimentare e rischiare&amp;rdquo; e &amp;ldquo;odia la gente&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Purtroppo questo archetipo sopravvive ancora oggi, e forse la sua conseguenza più grave è stato lo sviluppo dell&amp;rsquo;idea che una delle professioni più belle e appaganti che esistano sia una &amp;ldquo;cosa da uomini&amp;rdquo;. Ma Birgitta nel suo &lt;em&gt;keynote&lt;/em&gt; cita anche &lt;a href=&#34;https://en.wikipedia.org/wiki/Jean_Bartik&#34;&gt;Jean Bartik&lt;/a&gt;, programmatrice di uno dei primi computer mai costruiti, l&amp;rsquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/ENIAC&#34;&gt;ENIAC&lt;/a&gt;, annunciato nel 1946: quando quella del &amp;ldquo;programmatore&amp;rdquo; non era ancora considerata una &lt;strong&gt;vera professione&lt;/strong&gt;, ma era vista come poco più di un lavoro di segreteria, gran parte dei programmatori negli USA era composta da donne. Ma in una recente &lt;a href=&#34;http://computerhistory.org/revolution/birth-of-the-computer/4/78/2258&#34;&gt;intervista&lt;/a&gt; la Bartik ha fatto notare che molte delle tecniche che usiamo e delle problematiche che ci troviamo ad affrontare in quanto programmatori erano &lt;strong&gt;già vere&lt;/strong&gt; negli anni &amp;lsquo;40: ad esempio, erano già evidenti i vantaggi del &lt;a href=&#34;https://en.wikipedia.org/wiki/Pair_programming&#34;&gt;pair programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;ultima parte del talk, Birgitta mostra come questa erronea visione della professione di programmatore porti ancora oggi molte donne, interessate a una carriera nello sviluppo software, a &lt;strong&gt;sentirsi escluse&lt;/strong&gt; dal club perché pensano che &lt;em&gt;veri&lt;/em&gt; programmatori si nasca, e che se la propria passione non sia in realtà una vera e propria &lt;em&gt;ossessione&lt;/em&gt; non si riuscirà mai ad eccellere: in realtà questo &lt;em&gt;status quo&lt;/em&gt; è, come si è visto, il prodotto di decenni di incompresioni e &lt;a href=&#34;http://www.npr.org/sections/money/2014/10/21/357629765/when-women-stopped-coding&#34;&gt;incredibili scivoloni&lt;/a&gt; nello sviluppo della professione di programmatore, e che è possibile aspirare ai massimi livelli di tale professione anche con un approccio più &lt;em&gt;bilanciato&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nel seguente tweet Birgitta cita libri, articoli e talk che hanno ispirato il suo &lt;em&gt;keynote&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;it&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Here is the material I used to put together my talk, &lt;a href=&#34;https://twitter.com/hashtag/Codemotion?src=hash&#34;&gt;#Codemotion&lt;/a&gt;. Read! Especially &amp;quot;Unlocking the Clubhouse&amp;quot; &lt;a href=&#34;https://t.co/ZKmdC1zvkf&#34;&gt;pic.twitter.com/ZKmdC1zvkf&lt;/a&gt;&lt;/p&gt;&amp;mdash; Birgitta B. (@birgitta410) &lt;a href=&#34;https://twitter.com/birgitta410/status/667646910161883136&#34;&gt;20 Novembre 2015&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;tdd-per-android&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;tdd-per-android:fd439f196c3125ae563b4be0e3399006&#34;&gt;TDD per Android&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Matteo Vaccari (&lt;a href=&#34;https://twitter.com/xpmatteo&#34;&gt;@xpmatteo&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 11:20 - 12:00 - Mobile track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/matteo-vaccari-tdd-per-android-codemotion-milan-2015&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Matteo Vaccari porta al codemotion un talk, dal titolo alla prima apparenza banale, ma indicato come livello &lt;em&gt;intermediate&lt;/em&gt;. Con TDD per Android infatti, &lt;em&gt;non vuole introdurre né al testing di applicazioni Android, né al TDD&lt;/em&gt;.
Piuttosto durante il talk vengono mostrati alcuni trucchi da lui scovati durante la sua esperienza per fare vero &lt;em&gt;Test Driven Development&lt;/em&gt;. Come primo passo consiglia e spiega come affiancare al TestCase ufficiale dell&amp;rsquo; SDK Android, un altro strumento &lt;strong&gt;semplificato ed ottimizzato&lt;/strong&gt; per una esecuzione veloce dei test unitari: esso, basandosi esclusivamente su JUnit, permette l’esecuzione veloce del “ciclo” Red, Green, Refactor, senza dover attendere i tempi del device virtuale (o meno). Matteo  quindi  passa a sviscerare alcuni &lt;em&gt;trick&lt;/em&gt; più ricercati e specifici, dimostrandoli con due app d&amp;rsquo;esempio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xpmatteo/unit-doctor&#34;&gt;esempio 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xpmatteo/fairy-fingers&#34;&gt;esempio 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;platformer-2d&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platformer-2d-jumping-from-xna-to-unity:fd439f196c3125ae563b4be0e3399006&#34;&gt;Platformer 2D: jumping from XNA to Unity&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Paolo Cattaneo (&lt;a href=&#34;https://twitter.com/RavenTravelStd&#34;&gt;Raven Travel Studios&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 12:10 - 13:10 - Game Dev track&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il vecchio ambiente di sviluppo &lt;strong&gt;XNA&lt;/strong&gt; è ormai stato abbandonato da Microsoft da anni. Molti sviluppatori si sono quindi visti costretti a migrare su altri &lt;em&gt;tool&lt;/em&gt;, come per esempio Unity, che con XNA condivide l’adozione del linguaggio C# per gli script. Il passaggio da una programmazione vecchio stampo ad un ambiente visuale può creare qualche problema, soprattutto per via di alcuni ostacoli apparentemente invalicabili. È realmente necessario creare manualmente per ogni &lt;em&gt;asset&lt;/em&gt; di un progetto un GameObject in Unity? Diffidate delle guide ufficiali e sfruttate la generazione a &lt;em&gt;runtime&lt;/em&gt; di nuovi GameObject, associando uno script di creazione ad un solo GameObject padre!&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;grocery-site-in-react&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;building-the-world-s-largest-grocery-site-in-react:fd439f196c3125ae563b4be0e3399006&#34;&gt;Building the world&amp;rsquo;s largest grocery site in React&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Robbie McCorkell (&lt;a href=&#34;https://twitter.com/robbiemccorkell&#34;&gt;@robbiemccorkell&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 14:10 - 14:50 - Architecture track&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo speaker Robbie McCorkell, tech lead presso &lt;a href=&#34;http://red-badger.com&#34;&gt;Red Badger&lt;/a&gt;, società londinese che si occupa di web design per grossi partner internazionali, ci ha raccontato del viaggio che ha portato la sua azienda a creare il sito web di &lt;strong&gt;Tesco&lt;/strong&gt;, negozio online e distributore di prodotti di vario genere che opera principalmente in Europa, Nord America ed Estremo Oriente.
La tecnologia chiave impiegata per la realizzazione è stata &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;, libreria open source realizzata da Facebook che consente di creare la view di applicazioni web mediante &lt;strong&gt;componenti&lt;/strong&gt;.
Una delle esigenze alla base dello sviluppo di un sito per un marchio così famoso era la possibilità di fruire di esso sul &lt;strong&gt;maggior numero possibile di dispositivi e browser&lt;/strong&gt;, cercando di minimizzare il traffico. La soluzione adottata da Red Badger a questo problema è stata la realizzazione di un applicazione &lt;strong&gt;isomorfica&lt;/strong&gt;, cioè un sistema che condivide lo stesso codice sia lato server sia lato client ed è in grado di fornire al browser delle pagine &lt;strong&gt;già renderizzate&lt;/strong&gt; che soltanto opzionalmente possono sfruttare javascript per l&amp;rsquo;interazione con gli elementi grafici.
Anche le ottimizzazioni per il SEO traggono benefici da un sito costruito in questo modo in quanto tutte le pagine sono &lt;strong&gt;indicizzabili&lt;/strong&gt; dai motori di ricerca.
L&amp;rsquo;impiego di React è stata quasi una scelta obbligata, visto che esso mette a disposizione degli strumenti semplici ma potenti per raggiungere l&amp;rsquo;obiettivo che si sono posti.
Particolare attenzione durante il talk è stata posta sulla necessità di essere sempre al passo con le varie versioni di React e delle librerie ad esso collegate (soprattutto quelle ufficiali che Facebook stessa sviluppa ed utilizza per i suoi prodotti, tipo &lt;a href=&#34;https://facebook.github.io/relay/&#34;&gt;Relay&lt;/a&gt; e &lt;a href=&#34;https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html&#34;&gt;GraphQL&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;alert-overload&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;alert-overload-how-to-adopt-a-microservices-architecture-without-being-overwhelmed-with-noise:fd439f196c3125ae563b4be0e3399006&#34;&gt;Alert overload: How to adopt a microservices architecture without being overwhelmed with noise&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Sarah Wells (&lt;a href=&#34;https://twitter.com/sarahjwells&#34;&gt;@sarahjwells&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 14:10 - 14:50 - DevOps track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/sarah-wells-alert-overload-how-to-adopt-a-microservices-architecture-without-being-overwhelmed-with-noise&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il talk di Sarah, come promesso dal titolo, dava una serie di consigli su come mantenere in produzione un&amp;rsquo;architettura a microservizi senza venir &lt;strong&gt;sommersi dalle notifiche&lt;/strong&gt; di errore e dagli alert che ne derivano in caso di malfunzionamento:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pensare al monitoring dall&amp;rsquo;inizio, non è un attività che può essere posticipata;&lt;/li&gt;
&lt;li&gt;Gli alert devono presentarsi &lt;strong&gt;solo quando richiedono un&amp;rsquo;interazione&lt;/strong&gt; da parte di chi amministra il sistema;&lt;/li&gt;
&lt;li&gt;Costruire il proprio sistema &lt;strong&gt;pensando al supporto&lt;/strong&gt; (documentazione, test, etc..);&lt;/li&gt;
&lt;li&gt;Utilizzare il &lt;strong&gt;tool giusto per il lavoro che bisogna compiere&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Configurare un&amp;rsquo;alert fa parte del fix del problema! &lt;em&gt;(Code -&amp;gt; Test -&amp;gt; Alert)&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Spegnere tutte le mail di notifica dai sistemi di monitoring (ci sono tool migliori: IRC, Slack, etc..;&lt;/li&gt;
&lt;li&gt;Assicurarsi di sapere se uno degli alert ha smesso di funzionare;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oltre a questo Sarah ha anche parlato di alcuni &lt;strong&gt;tool&lt;/strong&gt; che utilizza più o meno frequentemente quali:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nagios.org&#34;&gt;Nagios&lt;/a&gt;: Monitoring e alerting&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.splunk.com&#34;&gt;Splunk&lt;/a&gt;: Log aggregation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://grafana.org&#34;&gt;Grafana&lt;/a&gt;: Per creare grafici e dashboard&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getsentry.com/welcome&#34;&gt;Sentry&lt;/a&gt;: Per aggregare gli errori&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dashing.io&#34;&gt;Dashing&lt;/a&gt;: Framework per creare dashboard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;f-sharp-not-a-game&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;f-not-a-game:fd439f196c3125ae563b4be0e3399006&#34;&gt;F#, not a game!!!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Andrea Magnorsky (&lt;a href=&#34;https://twitter.com/silverspoon&#34;&gt;@silverspoon&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 14:10 - 14:50 - Game Dev track (&lt;a href=&#34;http://www.roundcrisis.com/presentations/2015-codemotion-milan/#/&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Andrea Magnorsky di &lt;a href=&#34;http://www.digitalfurnacegames.com&#34;&gt;Digital Furnace Games&lt;/a&gt; ha parlato dell&amp;rsquo;uso dei pattern di &lt;strong&gt;programmazione funzionale&lt;/strong&gt; nello sviluppo del loro prossimo gioco &lt;em&gt;Onikira: Demon Killer&lt;/em&gt;, per il quale hanno adottato il linguaggio funzionale &lt;a href=&#34;https://en.wikipedia.org/wiki/F_Sharp_(programming_language&#34;&gt;F#&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Nel giustificare un approccio più funzionale allo sviluppo software in generale, Andrea parla del bellissimo articolo &lt;a href=&#34;http://shaffner.us/cs/papers/tarpit.pdf&#34;&gt;Out of the Tar Pit&lt;/a&gt;, di Ben Moseley e Peter Marks, già citato più volte su questo blog. L&amp;rsquo;eccessiva &lt;strong&gt;complessità&lt;/strong&gt; può rendere ingestibili i progetti software, compresi i giochi, e un linguaggio come F#, basato - come ogni linguaggio funzionale - sull&amp;rsquo;uso di strutture dati immbutabili, funzioni pure e &lt;em&gt;pattern matching&lt;/em&gt;, permette di gestire lo stato del sistema in maniera più semplice: F# risulta essere particolarmente potente per questo scopo, grazie agli &lt;a href=&#34;http://fsharpforfunandprofit.com/posts/convenience-active-patterns/&#34;&gt;&lt;em&gt;active patterns&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nel corso del talk Andrea ha parlato anche dell&amp;rsquo;ottima interoperabilità di F# con C#, e dell&amp;rsquo;uso di librerie di &lt;a href=&#34;https://en.wikipedia.org/wiki/Property_testing&#34;&gt;&lt;em&gt;property testing&lt;/em&gt;&lt;/a&gt; come &lt;a href=&#34;https://github.com/fscheck/FsCheck&#34;&gt;FsCheck&lt;/a&gt;, e &lt;em&gt;building tools&lt;/em&gt; come &lt;a href=&#34;http://fsharp.github.io/FAKE/&#34;&gt;FAKE&lt;/a&gt;, mostrando quindi un ecosistema ricco di strumenti di sviluppo, perfettamente adeguato alla realizzazione di software ad alto livello, e cosa c&amp;rsquo;è di più &lt;em&gt;elevato&lt;/em&gt; di un videogioco?&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;polymer-firebase&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;applicazioni-real-time-con-polymer-e-firebase:fd439f196c3125ae563b4be0e3399006&#34;&gt;Applicazioni Real-Time con Polymer e Firebase&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Michel Murabito (&lt;a href=&#34;https://twitter.com/michelmurabito&#34;&gt;@michelmurabito&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 15:00 - 16:00 - Server-Side track&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il talk, portato al Codemotion 2015 dal GDG (Google Developer Group) Community Manager Italia  Michel Murabito, tratta due tecnologie emergenti nel panorama realtime, javascript (e non solo). Michael, attraverso un live tutorial atto a creare una todolist ci ha introdotto a &lt;a href=&#34;https://www.polymer-project.org&#34;&gt;Polymer&lt;/a&gt;, accompagnandoci per mano alla scoperta dei &lt;a href=&#34;https://elements.polymer-project.org/&#34;&gt;suoi components&lt;/a&gt;, spiegando come utilizzarli per ottenere senza sforzo un’interfaccia veloce e pulita, come personalizzarli e come crearne di nuovi. Successivamente ha integrato nell’applicazione ottenuta la persistenza dei dati utilizzando &lt;a href=&#34;https://www.firebase.com/&#34;&gt;Firebase&lt;/a&gt;, un servizio API, basato su DB NO SQL, veloce e tecnologicamente avanzato, tra le cui peculiarità troviamo, ad esempio, la capacità di mantenere aggiornati in realtime i client connessi.
&lt;a href=&#34;https://t.co/kukysY8sgZ&#34;&gt;App dimostrativa&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;offline-web-applications&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-new-mobile-challenge-offline-enablement-for-web-applications:fd439f196c3125ae563b4be0e3399006&#34;&gt;The new Mobile Challenge: Offline-Enablement for Web Applications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Christiane Kurz (&lt;a href=&#34;https://twitter.com/learnui5&#34;&gt;@learnui5&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 15:00 - 16:00 - Mobile track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/christiane-kurz-the-new-mobile-challenge-offlineenablement-for-web-applications&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ottimo talk che introduce tecnologie ancora poco conosciute nello sviluppo web, e offre un’ottima soluzione per iniziare a pensare a come rendere disponibili i nostri siti web anche in modalità offline. Questo apre orizzonti a nuove soluzioni e a nuove sfide, come salvare i dati lato client (nel talk si parla di &lt;a href=&#34;https://developer.mozilla.org/it/docs/Web/API/IndexedDB_API&#34;&gt;indexedDB&lt;/a&gt;), e gestire conflitti tra i dati durante la sincronizzazione col server, cercando possibili strumenti di compatibilità con vecchi browser: in effetti l&amp;rsquo;unica piccola pecca della soluzione proposta è la ridotta compatibilità con i browser, soprattutto mobile, consultabile anche a questo &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API#Browser_compatibility&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Che altro dire… questo è un ottimo spunto per iniziare a pensare a qualche possibile implementazione in vista di un maggior supporto.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;feature-gluttony&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-defeat-feature-gluttony:fd439f196c3125ae563b4be0e3399006&#34;&gt;How to defeat feature gluttony&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Kasia Mrowca (&lt;a href=&#34;https://twitter.com/MrowcaKasia&#34;&gt;@MrowcaKasia&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 15:00 - 16:00 - Startup track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/kasia-mrowca-how-to-defeat-feature-gluttony-codemotion-milan-2015-55472938&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kasia Mrowca, ex programmatrice ed ora product owner, ci spiega le sue strategie per ovviare ai &lt;strong&gt;problemi di backlog&lt;/strong&gt;: desiderare buone e nuove feature è una cosa buona, ma esagerare è male.&lt;/p&gt;

&lt;p&gt;Per spiegarci tutto questo ci porta la sua esperienza, ad esempio come ha visto un backlog crescere così tanto da necessitare fino a 15 (!) persone per essere gestito; ovviamente questo è uno scenario catastrofico, i cui &lt;strong&gt;costi di organizzazione&lt;/strong&gt; e comunicazione necessari tra tutte queste persone porta ad un rallentamento irrisolvibile. Nel suo talk ci illustra alcune tecniche utili di visualizzazione e organizzazione delle feature richieste, per selezionarle e prioritizzarle con criterio.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;webassembly&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;is-webassembly-the-killer-of-javascript:fd439f196c3125ae563b4be0e3399006&#34;&gt;Is WebAssembly the killer of JavaScript?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Boyan Mihaylov (&lt;a href=&#34;https://twitter.com/bmihaylov&#34;&gt;@bmihaylov&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 17:10 - 17:50 - Languages track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/boyan-mihaylov-is-web-assembly-the-killer-of-javascript&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La presentazione è condotta da Boyan Mihaylov ed è un&amp;rsquo;introduzione al nuovo mondo di &lt;a href=&#34;https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6#.ee7hgs4df&#34;&gt;WebAssembly&lt;/a&gt;: una tecnologia in fase di sviluppo molto promettente nell&amp;rsquo;ambito internet.
JavaScript è il linguaggio del web. È nato nel 1995 per risolvere specifici problemi di computazione lato browser. Per molto tempo è stato un linguaggio &lt;strong&gt;senza specifiche&lt;/strong&gt;, con conseguenti difficoltà nello scrivere script compatibili cross-broswer. Con il passare del tempo, sono stati definiti degli standard (ECMA) che hanno parzialmente risolto il problema.
Nell&amp;rsquo;ultimo periodo JavaScript si è diffuso molto. Oggi lo si usa praticamente ovunque per sviluppare applicazioni client-side, server-side, mobile e desktop.&lt;/p&gt;

&lt;p&gt;Tuttavia molti problemi rimangono irrisolti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Il browser esegue solo codice scritto in JavaScript;&lt;/li&gt;
&lt;li&gt;JavaScript è spesso considerato verboso e carente di funzionalità rispetto ad altri linguaggi;&lt;/li&gt;
&lt;li&gt;Ad ogni esecuzione, la sintassi dei programmi JavaScript deve essere elaborata con un significativo impatto sulle performance;&lt;/li&gt;
&lt;li&gt;JavaScript è text-based, i file con codice sorgente possono raggiungere dimensioni notevoli per il trasferimento via rete;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Diverse strategie sono state attuate per aggirare questi problemi.
È frequente l&amp;rsquo;uso di tool di &lt;strong&gt;minificazione&lt;/strong&gt; del sorgente per ridurre le dimensioni.
Sono stati sviluppati differenti flavour di JavaScript per aumentare l&amp;rsquo;espressività del linguaggio (CoffeeScript, TypeScript, ecc.);
Sono stati creati dei compilatori per tradurre in JavaScript programmi scritti in altri linguaggi.&lt;/p&gt;

&lt;p&gt;Ciò tuttavia è molto inefficiente: perché non compilare il codice sorgente in una specie di bytecode? Sarebbe più performante in fase d&amp;rsquo;esecuzione e download.&lt;/p&gt;

&lt;p&gt;La risposta è WebAssembly o WASM.
WASM è un linguaggio binario destinato ad essere eseguito da una virtual machine integrata nei browser.
Teoricamente qualsiasi linguaggio dotato di compilatore WebAssembly può essere utilizzato per sviluppare applicazioni browser-based.&lt;/p&gt;

&lt;p&gt;WebAssembly beneficia di tutti i vantaggi di JS, compresa l&amp;rsquo;esecuzione in Sandbox.
WASM non sostituirà JavaScript in quanto quest&amp;rsquo;ultimo, tramite compilazione, genererà istruzioni WebAssembly.&lt;/p&gt;

&lt;p&gt;WebAssembly è ancora in fase di prototipazione, è una tecnologia molto interessante e si pensa che essa detterà le basi per sviluppare virtual machine d&amp;rsquo;ultima generazione.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;fatal-error&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-evolution-in-the-design-of-fatal-error:fd439f196c3125ae563b4be0e3399006&#34;&gt;The evolution in the design of FATAL ERROR&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ciro Continisio (&lt;a href=&#34;https://twitter.com/ccontinisio&#34;&gt;@ccontinisio&lt;/a&gt;), Ennio Pirolo (&lt;a href=&#34;https://twitter.com/santennio&#34;&gt;@SantEnnio&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 2 - 11:20 - 12:00 - Game Dev track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/ciro-continisio-ennio-pirolo-the-evolution-in-the-design-of-fatal-error&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A volte lo sviluppo di un videogioco può protrarsi per mesi, anche anni. È quello che è accaduto con FATAL ERROR, titolo nato dalle menti di Ciro Continisio ed Ennio Pirolo ben 2 anni fa in occasione della GamesWeek di Milano. Nel corso degli anni il processo di sviluppo iterativo tipico dei videogiochi ha portato a vari miglioramenti tecnici, rimanendo però fedeli alle prime linee guida di game design. L’IA nel gioco ha adottato un interessante meccanismo di comportamenti che, una volta associati ad un bot governato dalla CPU, permettono a seconda dell’azione su schermo di attivare un determinato comportamento. Un approccio applicabile anche al di fuori dello sviluppo di videogiochi.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;ancora-cpp&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;perché-nel-2015-parliamo-ancora-di-c:fd439f196c3125ae563b4be0e3399006&#34;&gt;Perché nel 2015 parliamo ancora di C++?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Marco Arena (&lt;a href=&#34;https://twitter.com/italiancpp&#34;&gt;@italiancpp&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 2 - 12:10 - 13:10 - Languages track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/marco-arena-perch-nel-2015-parliamo-ancora-di-c-codemotion-milan-2015&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La domanda è lecita, a 30 anni dalla presentazione del linguaggio, ma Marco Arena ha tutte le risposte nonostante quel giorno non fosse ancora nato. Il C++ è &lt;em&gt;molto popolare&lt;/em&gt;: diversi software di uso quotidiano, tra cui probabilmente il browser che state usando, sono scritti in questo linguaggio. È inoltre &lt;em&gt;compatibile con il C&lt;/em&gt; e, più in generale, si &lt;em&gt;preoccupa del passato&lt;/em&gt;: segue uno standard ISO, la retrocompatibiltà è sempre garantita e i miglioramenti sono ottenuti aggiungendo nuovi costrutti. Non è &lt;em&gt;garbage collected&lt;/em&gt;: il lifetime di oggetti e risorse è &lt;em&gt;scoped&lt;/em&gt;, garantendo in questo modo un comportamento deterministico ed evitando complicazioni in sistemi &lt;em&gt;latency-critical&lt;/em&gt;. È &lt;em&gt;indipendente dal paradigma&lt;/em&gt;, perché ne comprende diversi, ed è adatto al &lt;em&gt;system programming&lt;/em&gt; grazie al suo accesso a basso livello alla memoria. Sta inoltre &lt;em&gt;crescendo in fretta&lt;/em&gt;: dopo oltre 20 anni in cui è rimasto sostanzialmente immutato, ha recentemente presentato diverse innovazioni e molte altre sono state annunciate per i prossimi anni. Da ultimo, è immerso in un &lt;em&gt;ecosistema straordinario&lt;/em&gt;, composto da industrie, mondo accademico e user groups.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;mobile-senza-unity&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mobile-senza-unity-il-caso-sbk:fd439f196c3125ae563b4be0e3399006&#34;&gt;Mobile senza Unity: il caso SBK&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Giuseppe Navarria (&lt;a href=&#34;https://twitter.com/waveringradiant&#34;&gt;@WaveringRadiant&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 2 - 12:10 - 13:10 - Game Dev track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/giuseppe-navarria-mobile-senza-unity-il-caso-sbk&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con tool in circolazione come Unity ed Unreal Engine quasi ci si scorda di come vengono costruiti i motori grafici dei videogiochi. Giuseppe Navarria ha spiegato alcune caratteristiche del motore realizzato in C++ per le versioni mobile del gioco SBK, evidenziando alcuni pregi acquisiti grazie proprio al “fai da te”. L’utilizzo di lightmap generate da immagini HDR, gli effetti di rifrazione della luce con pixel shader e spheremaps, nonché ombre precalcolate con effetto blob shadow, hanno permesso di raggiungere livelli qualitativi di un certo spessore anche su dispositivi un po’ datati. Interessante la divisione in moduli del motore che seleziona il miglior set di componenti per il dispositivo sul quale opera.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;php-7&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;speeding-up-the-web-with-php-7:fd439f196c3125ae563b4be0e3399006&#34;&gt;Speeding up the Web with PHP 7&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rasmus Lerdorf (&lt;a href=&#34;https://twitter.com/rasmus&#34;&gt;@rasmus&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 2 - 14:10 - 14:50 - Languages track&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Da questo talk di &lt;strong&gt;Rasmus Lerdorf&lt;/strong&gt; (creatore del linguaggio PHP) ci si sarebbe potuto aspettare una semplice lista delle nuove feature di PHP 7 (di cui abbiamo già parlato in &lt;a href=&#34;/php-7-overview&#34;&gt;questo post&lt;/a&gt;, in realtà però il relatore si è spinto molto più in là mostrando alcuni &lt;strong&gt;benchmark di comparazione delle performance&lt;/strong&gt; tra PHP 7, PHP 5 e HHVM 3.10, nei quali PHP 7 stracciava PHP 5 e teneva egregiamente il passo con HHVM 3.10, per poi dare una semplice ma approfondita overview rispetto ad alcune parti del lavoro fatto per ottenere quello che oggi è PHP 7 in termini di &lt;strong&gt;performance e feature&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Rasmus ha parlato del lungo lavoro di micro ottimizzazioni e di &lt;strong&gt;refactoring&lt;/strong&gt; sulla codebase, soprattutto per quanto riguarda l&amp;rsquo;utilizzo della memoria da parte di HashTable e Zval che ora, nella maggior parte dei casi, è stato più che dimezzato.&lt;/p&gt;

&lt;p&gt;Preziose sono state anche le informazioni riguardanti l&amp;rsquo;&lt;a href=&#34;https://wiki.php.net/rfc/abstract_syntax_tree&#34;&gt;AST&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34;&gt;Abstract Syntax Tree&lt;/a&gt;) che è stata introdotta in questa nuova versione e che permette non solo di ragionare in termini più strutturati quando si effettuano modifiche agli internals del linguaggio ma che sarà causa della nascita, secondo Rasmus, di una serie infinita di tool come: analizzatori statici, compilatori, parser in userland etc..&lt;/p&gt;

&lt;p&gt;Ultime ma non meno importanti sono le informazioni date riguardo la &lt;strong&gt;FDO&lt;/strong&gt; di gcc (&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Optimize-Options.html&#34;&gt;Feedback Directed Optimization&lt;/a&gt;) con la quale, per chi compila PHP da sé, si possono ottenere degli ulteriori &lt;strong&gt;incrementi di performance facendo training&lt;/strong&gt; sulla propria codebase in fase di compilazione della SAPI.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Optionals in Objective-C</title>
      <link>/blog/ita/optionals-in-objective-c/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/optionals-in-objective-c/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Objective-C vivrà ancora per molto&lt;/strong&gt;. Nonostante Swift sia il nuovo punto di riferimento per lo sviluppo iOS e OS X, ci sono ragioni concrete per scegliere di continuare a sviluppare in Objective-C, almeno per un po&amp;rsquo;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;progetti esistenti basati su Objective-C richiedono ancora mantenimento e probabile aggiunta di nuove funzionalità, e anche se è tecnicamente possibile mescolare i linguaggi, la cosa può risultare &lt;strong&gt;poco conveniente&lt;/strong&gt; per via della natura molto dinamica di Objective-C;&lt;/li&gt;
&lt;li&gt;Swift sta cambiando rapidamente, presenta ancora alcuni bug e &lt;strong&gt;problemi di performance&lt;/strong&gt;, e il suo workflow manca ancora di alcune feature fondamentali per i professionisti, mentre Objective-C è un linguaggio maturo, con una community molto vivace;&lt;/li&gt;
&lt;li&gt;alcuni possono &lt;strong&gt;preferire un linguaggio più dinamico&lt;/strong&gt;, e il supporto di Apple su Objective-C è &lt;a href=&#34;https://netguru.co/blog/objective-c-generics&#34;&gt;ancora forte&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personalmente ho la tendenza a preferire linguaggi più statici, e un approccio &lt;a href=&#34;http://engineering.facile.it/type-first-development-in-swift/&#34;&gt;type-first&lt;/a&gt; alla programmazione, ma di tanto in tanto mi piace lavorare in un ambiente più &lt;em&gt;dinamico&lt;/em&gt;, quindi, sia per preferenza personale che per esigenze di business, non ho ancora messo Objective-C da parte. Ma dopo poche settimane di Swift, mi è mancata subito una delle sue funzionalità più potenti: gli &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID330&#34;&gt;Optionals&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;indice:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Indice&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#il-tipo-optional&#34;&gt;Il tipo &lt;code&gt;Optional&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optionals-in-swift&#34;&gt;Optionals in Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#torniamo-a-objective-c&#34;&gt;Torniamo a Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#esempio-un-parser-json&#34;&gt;Esempio: un parser JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusione&#34;&gt;Conclusione&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;il-tipo-optional&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;il-tipo-optional:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Il tipo &lt;code&gt;Optional&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Il tipo &lt;code&gt;Optional&lt;/code&gt; è un tipo &lt;em&gt;generico&lt;/em&gt; (o, più propriamente, &lt;em&gt;parametrico&lt;/em&gt;), dipendente da un &lt;strong&gt;tipo secondario&lt;/strong&gt;: è possibile ad esempio definire un &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt; oppure un &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt;: la sintassi di Swift permette di scrivere i tipi appena indicati con &lt;code&gt;String?&lt;/code&gt; e &lt;code&gt;Int?&lt;/code&gt;. Ma cos&amp;rsquo;è esattamente un &lt;code&gt;Optional&lt;/code&gt;?. È un tipo particolare che serve a rappresentare un dato che &lt;em&gt;potrebbe&lt;/em&gt; esistere, ed essere quindi di un certo tipo secondario, o potrebbe non esistere, ed essere quindi &lt;strong&gt;nil&lt;/strong&gt;: &lt;em&gt;inscatolando&lt;/em&gt; il valore opzionale in un &lt;code&gt;Optional&lt;/code&gt;, il compilatore di Swift saprà che quel valore potrà essere nil, e emettere un errore nei casi in cui stiamo usando un &lt;code&gt;Optional&lt;/code&gt; dove ci si aspetta un valore &lt;strong&gt;sempre&lt;/strong&gt; presente. Questa semplice funzionalità ci garantisce notevole rigore nella definizione dei nostri tipi di dato e funzione: ad esempio, in Swift non possiamo inizializzare un valore non opzionale con nil, e considerando che, per il compilatore, un valore non può essere usato prima di essere istanziato, se assegniamo il tipo &lt;code&gt;String&lt;/code&gt; a un valore, siamo sicuri al 100% che quel valore sarà &lt;strong&gt;sempre a comunque&lt;/strong&gt; una stringa.&lt;/p&gt;

&lt;p&gt;Al contrario, in Objective-C un oggetto può essere sempre nil, e spesso siamo costretti a controllare l&amp;rsquo;effettiva presenza di un oggetto ogni volta in cui abbiamo bisogno di un&amp;rsquo;istanza che non sia nil. In realtà non si tratta di un grosso problema: è un classico &lt;strong&gt;compromesso&lt;/strong&gt; dei linguaggi dinamici, e il fatto che posso sempre inviare un messaggio a un riferimento nil può essere anche considerato una &lt;em&gt;feature&lt;/em&gt;: usando un linguaggio dinamico, ci si aspetta che progettiamo le nostre API tenendo sempre in considerazione il concetto di &lt;a href=&#34;https://en.wikipedia.org/wiki/Late_binding&#34;&gt;late-binding&lt;/a&gt;. Inoltre, i nuovi &lt;a href=&#34;https://developer.apple.com/swift/blog/?id=25&#34;&gt;&lt;em&gt;nullability specifiers&lt;/em&gt;&lt;/a&gt; di Objective-C aiutano il compilatore a emettere avvisi quando stiamo passando nil a un metodo o una &lt;em&gt;property&lt;/em&gt; che richiedono invece che il parametro sia &lt;code&gt;nonnull&lt;/code&gt;. Ma il problema rimane: abbiamo bisogno di molto &lt;em&gt;boilerplate&lt;/em&gt; per verificare se qualcosa è nil, e ciò può portare a codice poco leggibile e comprensibile, soggetto ad errori. Swift non ha tipicamente bisogno di questo &lt;em&gt;boilerplate&lt;/em&gt; grazie alla natura stessa del tipo &lt;code&gt;Optional&lt;/code&gt;: esso ha le stesse caratteristiche del tipo &lt;code&gt;Maybe&lt;/code&gt; in Haskell, o del tipo &lt;code&gt;Option&lt;/code&gt; in Scala, cioè &lt;code&gt;Optional&lt;/code&gt; è in realtà un &lt;strong&gt;monad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Il concetto di &lt;em&gt;monad&lt;/em&gt; è ereditato, in programmazione funzionale, dalla &lt;a href=&#34;https://it.wikipedia.org/wiki/Teoria_delle_categorie&#34;&gt;teoria delle categorie&lt;/a&gt;, ed è facile trovare &lt;a href=&#34;https://wiki.haskell.org/Monad&#34;&gt;molti&lt;/a&gt; &lt;a href=&#34;https://www.haskell.org/tutorial/monads.html&#34;&gt;testi&lt;/a&gt; &lt;a href=&#34;http://learnyouahaskell.com/a-fistful-of-monads&#34;&gt;introduttivi&lt;/a&gt; sul tema, quindi non approfondirò ulteriormente: dirò solo che un &lt;em&gt;monad&lt;/em&gt; è un &lt;em&gt;contesto computazionale&lt;/em&gt;, quindi una &lt;em&gt;specifica&lt;/em&gt; per il modo in cui una espressione deve essere valutata. Applicare una certa trasformazione a un &lt;em&gt;monad&lt;/em&gt; avrà come risultato un&amp;rsquo;altra istanza dello stesso &lt;em&gt;monad&lt;/em&gt; differente dalla prima, a seconda dello specifico tipo di &lt;em&gt;monad&lt;/em&gt;. Ad esempio, applicare una trasformazione a un &lt;code&gt;Optional&lt;/code&gt; risulterà nell&amp;rsquo;applicazione della stessa trasformazione al valore &lt;em&gt;contenuto&lt;/em&gt;, se presente, o assolutamente niente se l&amp;rsquo;&lt;code&gt;Optional&lt;/code&gt; contiene nil: in entrambi i casi, il risultato della trasformazione sarà un nuovo &lt;code&gt;Optional&lt;/code&gt;, possibilmente con un tipo secondario diverso.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;optionals-in-swift&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;optionals-in-swift:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Optionals in Swift&lt;/h2&gt;

&lt;p&gt;Consideriamo il seguente codice Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalIntFrom(value: Int, ifTrue: Bool) -&amp;gt; Int?  
{
  return ifTrue ? value : nil
}

let optionalInt = makeOptionalIntFrom(3, ifTrue: true)  
print(optionalInt.dynamicType) /// prints &#39;Optional&amp;lt;Int&amp;gt;&#39;

let toString: Int -&amp;gt; String = { &amp;quot;\($0)&amp;quot; }

let optionalString = optionalInt.map(toString)  
print(optionalString.dynamicType) /// prints &#39;Optional&amp;lt;String&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nell&amp;rsquo;esempio, &lt;code&gt;optionalInt&lt;/code&gt; è un &lt;code&gt;Int&lt;/code&gt; &lt;em&gt;contenuto&lt;/em&gt; in un &lt;code&gt;Optional&lt;/code&gt;, che quindi ha tipo &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; (in Swift è possibile abbreviarlo in &lt;code&gt;Int?&lt;/code&gt;), e applicando ad esso la funzione &lt;code&gt;toString&lt;/code&gt; otteniamo un&amp;rsquo;istanza di &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt;. Possiamo vedere che, per applicare effettivamente la funzione &lt;code&gt;toString&lt;/code&gt;, abbiamo passato la funzione come argomento al metodo &lt;code&gt;map&lt;/code&gt; del &lt;code&gt;Optional&lt;/code&gt;: questa operazione è solitamente chiamata &lt;em&gt;lifting&lt;/em&gt; di una funzione, perché la funzione &lt;code&gt;toString&lt;/code&gt;, di tipo &lt;code&gt;Int -&amp;gt; String&lt;/code&gt;, è &lt;em&gt;sollevata&lt;/em&gt; (&lt;em&gt;lifted&lt;/em&gt;) fino a diventare di tipo &lt;code&gt;Optional&amp;lt;Int&amp;gt; -&amp;gt; Optional&amp;lt;String&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Come possiamo vedere, non sono state usate istruzioni condizionali nel manipolare il valore intero &lt;em&gt;opzionale&lt;/em&gt;: &lt;em&gt;sollevando&lt;/em&gt; le trasformazioni con il metodo &lt;code&gt;map&lt;/code&gt;, possiamo applicarle direttamente alle istanze di &lt;code&gt;Optional&lt;/code&gt;, e possiamo anche concatenarle molto facilmente, ad esempio:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalIntFrom(value: Int, ifTrue: Bool) -&amp;gt; Int?  
{
  return ifTrue ? value : nil
}

let optionalInt = makeOptionalIntFrom(3, ifTrue: true)  
print(optionalInt.dynamicType) /// prints &#39;Optional&amp;lt;Int&amp;gt;&#39;

let doubled: Int -&amp;gt; Int = { $0*2 }

let toString: Int -&amp;gt; String = { &amp;quot;\($0)&amp;quot; }

let optionalDoubledString = optionalInt.map(doubled).map(toString)  
print(optionalDoubledString.dynamicType) /// prints &#39;Optional&amp;lt;String&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Volendo esprimere l&amp;rsquo;operazione opposta, avremmo un problema: trasformare una stringa in un intero non è sempre possibile in Swift (ad esempio se non c&amp;rsquo;è alcun numero nella stringa), quindi l&amp;rsquo;operazione stessa risulterebbe in un &lt;code&gt;Optional&lt;/code&gt;. Infatti:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalStringFrom(value: String, ifTrue: Bool) -&amp;gt; String?  
{
  return ifTrue ? value : nil
}

let toInt: String -&amp;gt; Int? = { Int($0) }

let anotherOptionalString = makeOptionalStringFrom(&amp;quot;3&amp;quot;, ifTrue: true)

let anotherOptionalInt = anotherOptionalString.map(toInt).map(doubled)
/// errore di compilazione!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il problema qui è che la funzione &lt;code&gt;toInt&lt;/code&gt; è di tipo &lt;code&gt;String -&amp;gt; Optional&amp;lt;Int&amp;gt;&lt;/code&gt;, e il &lt;em&gt;lifting&lt;/em&gt; della funzione verso il &lt;em&gt;mondo opzionale&lt;/em&gt; la trasformerebbe in una funzione del tipo &lt;code&gt;Optional&amp;lt;String&amp;gt; -&amp;gt; Optional&amp;lt;Optional&amp;lt;Int&amp;gt;&amp;gt;&lt;/code&gt;, quindi un intero opzionale contenuto in un altro &lt;code&gt;Optional&lt;/code&gt;; in base alla terminologia accettata, abbiamo bisogno di un&amp;rsquo;operazione di &lt;code&gt;flatMap&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let anotherOptionalInt = anotherOptionalString.flatMap(toInt).map(doubled)  
/// funziona
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quindi, per quanto riguarda il tipo &lt;code&gt;Optional&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt; è simile a &lt;code&gt;map&lt;/code&gt;, ma deve essere usato per il &lt;em&gt;lifting&lt;/em&gt; di funzioni che generano altri valori opzionali. Nel leggere il codice, &lt;code&gt;map&lt;/code&gt; e &lt;code&gt;flatMap&lt;/code&gt; possono sostanzialmente essere letti nello stesso modo: indicano entrambi una trasformazione, e il fatto che le funzioni passate a &lt;code&gt;flatMap&lt;/code&gt; abbiano un tipo diverso può essere considerato un dettaglio di implementazione.&lt;/p&gt;

&lt;p&gt;In realtà Swift tratta questi tipi di dato &lt;strong&gt;in maniera differente&lt;/strong&gt; rispetto ad altri linguaggi: ad esempio, nei linguaggi &lt;em&gt;funzionali&lt;/em&gt; &lt;code&gt;map&lt;/code&gt; e &lt;code&gt;flatMap&lt;/code&gt; sono di norma &lt;em&gt;funzioni libere&lt;/em&gt;, mentre in Swift sono &lt;strong&gt;metodi&lt;/strong&gt;. In generale, Swift incoraggia l&amp;rsquo;uso dei metodi, e del loro &lt;strong&gt;concatenamento&lt;/strong&gt;, invece di funzioni libere, composte con operatori speciali: si tratta, più che altro, di una questione filosofica, ma nel trasportare queste feature in Objective-C l&amp;rsquo;approccio basato sui metodi tornerà utile poiché non c&amp;rsquo;è un modo semplice di rappresentare funzioni libere nel linguaggio, mentre i metodi hanno la classica sintassi alla quale siamo abituati.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;torniamo-a-objective-c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;torniamo-a-objective-c:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Torniamo a Objective-C&lt;/h2&gt;

&lt;p&gt;Implementiamo la classe &lt;code&gt;Optional&lt;/code&gt; in Objective-C:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

#import &amp;lt;Foundation/Foundation.h&amp;gt;

NS_ASSUME_NONNULL_BEGIN

@interface Optional : NSObject

+ (Optional*)with:(id _Nullable)value;

- (Optional*)map:(id(^)(id))mapBlock;
- (Optional*)flatMap:(Optional*(^)(id))flatMapBlock;

@end

NS_ASSUME_NONNULL_END 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

#import &amp;quot;Optional.h&amp;quot;

@interface Optional ()

@property (strong, nonatomic, nullable) id value;

@end

@implementation Optional

+ (Optional*)with:(id _Nullable)value
{
  Optional* optional = [Optional new];
  optional.value = value;
  return optional;
}

- (Optional *)map:(id  _Nonnull (^)(id _Nonnull))mapBlock
{
  if (self.value != nil)
  {
    return [Optional with:mapBlock(self.value)];
  }
  return self;
}

- (Optional *)flatMap:(Optional* _Nonnull (^)(id _Nonnull))flatMapBlock
{
  if (self.value != nil)
  {
    return flatMapBlock(self.value);
  }
  return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Come possiamo vedere, il metodo di classe &lt;code&gt;with:&lt;/code&gt; crea un oggetto &lt;code&gt;Optional&lt;/code&gt; inscatolando un altro oggetto, di tipo non specificato: poiché non esiste un vero concetto di &lt;em&gt;generic&lt;/em&gt; in Objective-C, non sarà possibile realizzare un tipo &lt;code&gt;Optional&lt;/code&gt; sicuro, dal punto di vista dei tipi, come in Swift, ma non sarà un grosso problema, e saremo comunque in grado di ereditare da Swift &lt;strong&gt;potenti features&lt;/strong&gt;. Il metodo &lt;code&gt;map:&lt;/code&gt; verifica se l&amp;rsquo;oggetto contenuto non sia nil, e in tal caso applica la trasformazione espressa con &lt;code&gt;mapBlock&lt;/code&gt;: in questo caso i &lt;em&gt;nullability specifiers&lt;/em&gt; di Objective-C ci hanno aiutato nello scrivere la firma dei metodi, infatti abbiamo chiaramente specificato che &lt;code&gt;mapBlock&lt;/code&gt; accetta e ritorna oggetti che non siano nil; &lt;code&gt;flatMapBlock&lt;/code&gt; ritorna invece un altro &lt;code&gt;Optional&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Possiamo testare la cosa riscrivendo lo stesso esempio visto per Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Test.h

#import &amp;lt;Foundation/Foundation.h&amp;gt;

@interface Test : NSObject

+ (void)testOptional;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Test.m

#import &amp;quot;Test.h&amp;quot;
#import &amp;quot;Optional.h&amp;quot;

@implementation Test

+ (void)testOptional
{
  Optional* optionalInt = [self makeOptionalIntFrom:@3 ifTrue:YES];
  Optional* optionalDoubledString = [[optionalInt
                                      map:[self doubled]]
                                     map:[self toString]];
  NSLog(@&amp;quot;%@&amp;quot;, optionalDoubledString);
}

+ (Optional*)makeOptionalIntFrom:(NSNumber*)fromInt ifTrue:(BOOL)ifTrue
{
  return [Optional with:ifTrue ? fromInt : nil];
}


+ (NSNumber*(^)(NSNumber*))doubled
{
  return ^NSNumber*(NSNumber* value)  {
    return @(value.integerValue*2);
  };
}

+ (NSString*(^)(NSNumber*))toString
{
  return ^NSString*(NSNumber* value)  {
    return [NSString stringWithFormat:@&amp;quot;%@&amp;quot;, value];
  };
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un volta applicate le trasformazioni, abbiamo bisogno di un metodo per &amp;ldquo;estrarre&amp;rdquo; l&amp;rsquo;oggetto all&amp;rsquo;interno del &lt;code&gt;Optional&lt;/code&gt;: Swift permette questa operazione a livello di sintassi, mentre in Objective-C possiamo seguire le convenzioni standard in programmazione funzionale, e cioè definire un metodo &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (id _Nullable)get;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (id)get
{
  return self.value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il metodo &lt;code&gt;get&lt;/code&gt; ritorna un &lt;code&gt;id _Nullable&lt;/code&gt;: ciò vuol dire che l&amp;rsquo;oggetto ritornato può (ovviamente) essere nil. Un pattern frequente quando si ha a che fare con oggetti nil consiste nel sostituirli con versioni di &amp;ldquo;default&amp;rdquo;: può essere utile quando non ci interessano tanto i dati contenuti in un oggetto, ma non vogliamo correre i rischi associati al lavorare riferimenti &lt;em&gt;null&lt;/em&gt;. Ancora una volta, con la classe &lt;code&gt;Optional&lt;/code&gt; possiamo evitare istruzioni condizionali ed esprimere il meccanismo di &amp;ldquo;defaulting&amp;rdquo; in un modo più dichiarativo: dobbiamo semplicemente aggiungere un metodo &lt;code&gt;getOrElse:&lt;/code&gt;, che ritorni l&amp;rsquo;oggetto contenuto se presente, o un oggetto di default passato al metodo stesso:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (id)getOrElse:(id(^)())elseBlock;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (id)getOrElse:(id  _Nonnull (^)())elseBlock
{
  if (self.value != nil)
  {
    return self.value;
  }
  return elseBlock();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Come si può vedere, il metodo &lt;code&gt;getOrElse:&lt;/code&gt; &lt;strong&gt;non&lt;/strong&gt; ritorna un oggetto &lt;code&gt;_Nullable&lt;/code&gt;: in effetti non stiamo passando l&amp;rsquo;oggetto, ma un block che &amp;ldquo;produrrà&amp;rdquo; l&amp;rsquo;oggetto una volta invocato; in questo modo riusciamo a ottenere l&amp;rsquo;oggetto di default in maniera &lt;strong&gt;lazy&lt;/strong&gt;, perché se l&amp;rsquo;oggetto contenuto è presente, non è necessario generare l&amp;rsquo;oggetto di default.&lt;/p&gt;

&lt;p&gt;Per il resto dell&amp;rsquo;articolo lavoreremo su un esempio più concreto, e implementeremo diverse funzionalità per la classe &lt;code&gt;Optional&lt;/code&gt;, rendendola via via più utile e potente.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;esempio-un-parser-json&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;esempio-un-parser-json:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Esempio: un parser JSON&lt;/h2&gt;

&lt;p&gt;Supponiamo di voler realizzare un&amp;rsquo;app che mostra informazioni sui film: possiamo ottenerle in formato JSON da un sito come &lt;a href=&#34;http://api.myapifilms.com/index.do&#34;&gt;myapifilms&lt;/a&gt;. La rappresentazione JSON di ogni film è del tipo seguente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{
    &amp;quot;countries&amp;quot;: [
        &amp;quot;USA&amp;quot;
    ],
    &amp;quot;directors&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Frank Darabont&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0001104&amp;quot;
        }
    ],
    &amp;quot;filmingLocations&amp;quot;: [
        &amp;quot;St. Croix&amp;quot;,
        &amp;quot;U.S. Virgin Islands&amp;quot;
    ],
    &amp;quot;genres&amp;quot;: [
        &amp;quot;Crime&amp;quot;,
        &amp;quot;Drama&amp;quot;
    ],
    &amp;quot;idIMDB&amp;quot;: &amp;quot;tt0111161&amp;quot;,
    &amp;quot;languages&amp;quot;: [
        &amp;quot;English&amp;quot;
    ],
    &amp;quot;metascore&amp;quot;: &amp;quot;80/100&amp;quot;,
    &amp;quot;originalTitle&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;plot&amp;quot;: &amp;quot;Andy Dufresne is a young and successful banker whose life changes drastically when he is convicted and sentenced to life imprisonment for the murder of his wife and her lover. Set in the 1940s, the film shows how Andy, with the help of his friend Red, the prison entrepreneur, turns out to be a most unconventional prisoner.&amp;quot;,
    &amp;quot;ranking&amp;quot;: 1,
    &amp;quot;rated&amp;quot;: &amp;quot;R&amp;quot;,
    &amp;quot;rating&amp;quot;: &amp;quot;9.3&amp;quot;,
    &amp;quot;releaseDate&amp;quot;: &amp;quot;19941014&amp;quot;,
    &amp;quot;runtime&amp;quot;: [
        &amp;quot;142 min&amp;quot;
    ],
    &amp;quot;simplePlot&amp;quot;: &amp;quot;Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.&amp;quot;,
    &amp;quot;title&amp;quot;: &amp;quot;The Shawshank Redemption&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;Movie&amp;quot;,
    &amp;quot;urlIMDB&amp;quot;: &amp;quot;http://www.imdb.com/title/tt0111161&amp;quot;,
    &amp;quot;urlPoster&amp;quot;: &amp;quot;http://ia.media-imdb.com/images/M/MV5BODU4MjU4NjIwNl5BMl5BanBnXkFtZTgwMDU2MjEyMDE@._V1_SX214_AL_.jpg&amp;quot;,
    &amp;quot;votes&amp;quot;: &amp;quot;1,533,914&amp;quot;,
    &amp;quot;writers&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Stephen King&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0000175&amp;quot;
        },
        {
            &amp;quot;name&amp;quot;: &amp;quot;Frank Darabont&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0001104&amp;quot;
        }
    ],
    &amp;quot;year&amp;quot;: &amp;quot;1994&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vogliamo definire la nostra rappresentazione interna del film con un &lt;em&gt;value object&lt;/em&gt;, modificare in parte la struttura e magari ignorare alcuni elementi che non consideriamo rilevanti. Ecco un&amp;rsquo;interfaccia possibile per la classe &lt;code&gt;Movie&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NS_ASSUME_NONNULL_BEGIN

@interface Movie : NSObject

@property (copy, nonatomic, readonly) NSString* title;
@property (copy, nonatomic, readonly) NSNumber* rating;
@property (copy, nonatomic, readonly) NSNumber* year;
@property (copy, nonatomic, readonly) NSNumber* lengthInMinutes;

+ (Movie*)withJSONDict:(NSDictionary*)dict;

@end

NS_ASSUME_NONNULL_END
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il metodo di classe &lt;code&gt;withJSONDict:&lt;/code&gt; crea un&amp;rsquo;istanza di &lt;code&gt;Movie&lt;/code&gt; da un dizionario JSON come quello appena mostrato: come si può vedere dall&amp;rsquo;interfaccia dichiarata, abbiamo deciso di non permettere valori nil per le varie &lt;em&gt;property&lt;/em&gt;; ma quando abbiamo a che fare con JSON &lt;strong&gt;tutto può succedere&lt;/strong&gt;, come chiavi mancanti, valori null o di tipo diverso. Useremo il tipo &lt;code&gt;Optional&lt;/code&gt; per parsare il dizionario JSON in modo chiaro, dichiarativo e a prova di errore.&lt;/p&gt;

&lt;p&gt;Iniziamo con i titolo. Dal JSON vediamo che il titolo si trova in corrispondenza della chiave &amp;ldquo;title&amp;rdquo;, e dovrebbe essere una stringa (&lt;code&gt;NSString&lt;/code&gt; in Objective-C), quindi possiamo ottenere il titolo così:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSString* title = [[[[Optional
                        with:[dict objectForKey:@&amp;quot;title&amp;quot;]]

                       flatMap:^Optional*(id title) {
                         return [Optional with:[title isKindOfClass:[NSString class]] ? title : nil];
                       }]

                      flatMap:^Optional*(NSString* title) {
                        return [Optional with:title.length &amp;gt; 0 ? title : nil];
                      }]

                     getOrElse:^NSString*{
                       return @&amp;quot;NO TITLE&amp;quot;;
                     }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il primo &lt;code&gt;flatMap&lt;/code&gt; indica che l&amp;rsquo;oggetto &amp;ldquo;titolo&amp;rdquo; deve appartenere alla classe &lt;code&gt;NSString&lt;/code&gt;. Conviene astrarre questa operazione inserendola direttamente nel costruttore, perché l&amp;rsquo;applicheremo ogni volta per tutti i dati:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;+ (Optional *)with:(id)value as:(Class)valueClass
{
  if ([value isKindOfClass:valueClass])
  {
    return [Optional with:value];
  }
  return [Optional with:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il secondo &lt;code&gt;flatMap:&lt;/code&gt; indica che se la stringa trovata ha lunghezza 0, considereremo il titolo come &amp;ldquo;sconosciuto&amp;rdquo;. In effetti questo step avrà l&amp;rsquo;effetto di &amp;ldquo;filtro&amp;rdquo;, perché lascerà &amp;ldquo;passare&amp;rdquo; solo le stringhe non vuote; considerando ciò, aggiungiamo un metodo &lt;code&gt;filter:&lt;/code&gt; alla classe &lt;code&gt;Optional&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (Optional*)filter:(BOOL(^)(id))filterBlock;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (Optional*)filter:(BOOL (^)(id _Nonnull))filterBlock
{
  return [self flatMap:^Optional*(id value) {
    if (filterBlock(value))
    {
      return self;
    }
    else
    {
      return [Optional with:nil];
    }
  }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il metodo &lt;code&gt;filter:&lt;/code&gt; accetta come parametro un block che ritorna un &lt;code&gt;BOOL&lt;/code&gt; basato sul valore contenuto: internamente, &lt;code&gt;filter:&lt;/code&gt; chiamerà comunque &lt;code&gt;flatMap:&lt;/code&gt;, con un&amp;rsquo;espressione condizionale che verifichi se &lt;code&gt;filterBlock&lt;/code&gt; riesce o fallisce.&lt;/p&gt;

&lt;p&gt;Infine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSString* title = [[[Optional  
                       with:[dict objectForKey:@&amp;quot;title&amp;quot;]
                       as:[NSString class]]

                      filter:^BOOL(NSString* string) {
                        return string.length &amp;gt; 0;
                      }]

                     getOrElse:^NSString*{ return @&amp;quot;NO TITLE&amp;quot;; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quindi, nessuna espressione condizionale, e poche linee di codice, completamente dichiarative.&lt;/p&gt;

&lt;p&gt;Per quanto riguarda i parametri &lt;code&gt;rating&lt;/code&gt; e &lt;code&gt;year&lt;/code&gt; abbiamo bisogno di un &lt;code&gt;map&lt;/code&gt; che converta &lt;code&gt;NSString&lt;/code&gt; in &lt;code&gt;NSNumber&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSNumber* rating = [[[[Optional  
                         with:[dict objectForKey:@&amp;quot;rating&amp;quot;]
                         as:[NSString class]]

                        filter:^BOOL(NSString* string) {
                          return string.length &amp;gt; 0;
                        }]

                       map:^NSNumber*(NSString* stringValue) {
                         return [NSDecimalNumber decimalNumberWithString:stringValue];
                       }]

                      getOrElse:^NSNumber*{ return @0; }];
  movie.rating = rating;

  NSNumber* year = [[[[Optional
                       with:[dict objectForKey:@&amp;quot;year&amp;quot;]
                       as:[NSString class]]

                      filter:^BOOL(NSString* string) {
                        return string.length &amp;gt; 0;
                      }]

                     map:^NSNumber*(NSString* stringValue) {
                       return [NSDecimalNumber decimalNumberWithString:stringValue];
                     }]

                    getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il parametro &lt;code&gt;lengthInMinutes&lt;/code&gt; è un po&amp;rsquo; complicato; dal JSON possiamo vedere che la sua rappresentazione è la seguente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;&amp;quot;runtime&amp;quot;: [ 
    &amp;quot;142 min&amp;quot; 
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quindi ci aspettiamo un array, del quale siamo interessati solo al primo elemento (quindi l&amp;rsquo;array non deve essere vuoto), che deve essere una stringa; di questa stringa abbiamo bisogno solo della prima parte, rimuovendo &lt;code&gt;min&lt;/code&gt;. Fortunatamente abbiamo già tutti gli strumenti necessari per procedere:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSNumber* lengthInMinutes =
  [[[[[[Optional
        with:[dict objectForKey:@&amp;quot;runtime&amp;quot;]
        as:[NSArray class]]

       flatMap:^Optional*(NSArray* array) {
         return [Optional with:[array firstObject]];
       }]

      map:^NSString*(NSString* string) {
        return [string
                stringByReplacingOccurrencesOfString:@&amp;quot; min&amp;quot;
                withString:@&amp;quot;&amp;quot;];
      }]

     filter:^BOOL(NSString* string) {
       return string.length &amp;gt; 0;
     }]

    map:^NSNumber*(NSString* stringValue) {
      return @([stringValue integerValue]);
    }]

   getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In realtà manca qualcosa: il metodo &lt;code&gt;[array firstObject]&lt;/code&gt; ritorna il primo oggetto dell&amp;rsquo;array se questo ha almeno un elemento, oppure ritorna nil se l&amp;rsquo;array è vuoto: non c&amp;rsquo;è alcuna indicazione sul fatto che vogliamo che il primo elemento sia di tipo &lt;code&gt;NSString&lt;/code&gt;, quindi dobbiamo aggiungere uno step &lt;code&gt;filter&lt;/code&gt; per assicurarci che la classe dell&amp;rsquo;istanza trovata sia corretta. Quindi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSNumber* lengthInMinutes =
  [[[[[[[Optional
         with:[dict objectForKey:@&amp;quot;runtime&amp;quot;]
         as:[NSArray class]]

        flatMap:^id(NSArray* array) {
          return [Optional with:[array firstObject]];
        }]

       filter:^BOOL(id value) {
         return [value isKindOfClass:[NSString class]];
       }]

      map:^NSString*(NSString* string) {
        return [string
                stringByReplacingOccurrencesOfString:@&amp;quot; min&amp;quot;
                withString:@&amp;quot;&amp;quot;];
      }]

     filter:^BOOL(NSString* string) {
       return string.length &amp;gt; 0;
     }]

    map:^NSNumber*(NSString* stringValue) {
      return @([stringValue integerValue]);
    }]

   getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Come possiamo vedere, lavorando con la classe &lt;code&gt;Optional&lt;/code&gt;, aggiungere una condizione significa semplicemente &lt;strong&gt;aggiungere uno step&lt;/strong&gt; nella sequenza lineare di espressioni.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;conclusione&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusione:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Conclusione&lt;/h2&gt;

&lt;p&gt;Implementare la classe &lt;code&gt;Optional&lt;/code&gt; in Objective-C ci ha permesso di parsare un JSON, cosa spesso difficile da mantenere e soggetta a errori, in un modo semplice e lineare. In realtà ci sono &lt;strong&gt;molti casi&lt;/strong&gt; in cui lavorare con gli &lt;em&gt;optionals&lt;/em&gt; ci può dare gli stessi vantaggi: componendo operazioni di tipo &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt; e &lt;code&gt;filter&lt;/code&gt; possiamo esprimere il nostro intento in maniera chiara e leggibile. Ma tutto questo non riguarda solo il tipo &lt;code&gt;Optional&lt;/code&gt;: alcuni lettori avranno probabilmente notato che molti linguaggi (incluso Swift) permettono operazioni dell stesso tipo su liste e array, e il loro significato è identico: &lt;code&gt;map&lt;/code&gt; e &lt;code&gt;flatMap&lt;/code&gt;, in particolare, sono &lt;strong&gt;concetti generici&lt;/strong&gt; legati ai &lt;em&gt;monad&lt;/em&gt; (in effetti, anche il tipo &lt;code&gt;Array&lt;/code&gt; è un &lt;em&gt;monad&lt;/em&gt;), e riguarda la composizione dichiarativa di trasformazioni. Questo concetto è alla base della &lt;strong&gt;programmazione funzionale&lt;/strong&gt;, e penso ci siano molti motivi per applicare concetti simili ad ambienti più &lt;em&gt;object-oriented&lt;/em&gt;, perché aiuterebbero il programmatore a ragionare sul codice ed esprimere l&amp;rsquo;intento in maniera più dichiarativa.&lt;/p&gt;

&lt;p&gt;Il codice per la classe &lt;code&gt;Optional&lt;/code&gt; mostrata nell&amp;rsquo;articolo è reperibile su &lt;a href=&#34;https://gist.github.com/broomburgo/e318228a5f7d6a605e82&#34;&gt;GitHub Gist&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit: test paralleli, Doctrine e le fixture</title>
      <link>/blog/ita/paraunit/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/paraunit/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Questo articolo è la sintesi di un talk presentato al &lt;a href=&#34;http://2015.symfonyday.it/&#34;&gt;SymfonyDay 2015&lt;/a&gt;; potete trovare le slide &lt;a href=&#34;http://jean85.github.io/slides/2015-10-paraunit-symfonyday/index.html&#34;&gt;qui&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;i-test-e-la-loro-durata:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;I test e la loro durata&lt;/h4&gt;

&lt;p&gt;Sviluppare applicazioni scrivendo &lt;strong&gt;test&lt;/strong&gt; e facendo &lt;a href=&#34;https://it.wikipedia.org/wiki/Test_driven_development&#34;&gt;Test Driven Development&lt;/a&gt; è un&amp;rsquo;ottima pratica, e dà parecchie soddisfazioni. Con l&amp;rsquo;andare del tempo, si fa &lt;strong&gt;crescere la suite di test&lt;/strong&gt; del proprio progetto, cercando di aumentarne la copertura e l&amp;rsquo;efficacia e si scrivono nuovi test corrispondenti alle nuove funzionalità che vengono man mano sviluppate.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;aumento della quantità di test però porta alla crescita (direttamente proporzionale) del &lt;strong&gt;tempo necessario&lt;/strong&gt; ad eseguire i test stessi.
Nel caso dei &lt;strong&gt;test unitari&lt;/strong&gt; questo aumento è spesso trascurabile, poiché &lt;strong&gt;si limitano a caricare una singola classe&lt;/strong&gt; e ad analizzarne il comportamento in completo isolamento, terminando la loro esecuzione nel giro di &lt;strong&gt;pochi millisecondi&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quando invece parliamo di &lt;strong&gt;test funzionali&lt;/strong&gt;, il tempo di esecuzione non è più così limitato: vengono caricate &lt;strong&gt;molte più classi&lt;/strong&gt;, spesso viene coinvolto anche il &lt;strong&gt;database&lt;/strong&gt;, deve essere messa alla prova l&amp;rsquo;interazione tra molti elementi; il tutto porta a test la cui durata è talvolta di &lt;strong&gt;quasi un secondo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Leggendo libri e blog sull&amp;rsquo;argomento, e con l&amp;rsquo;esperienza personale, ho imparato che c&amp;rsquo;è una &lt;strong&gt;soglia critica&lt;/strong&gt; che rappresenta il limite ideale oltre il quale una test suite diventa troppo lenta, e questa soglia è di &lt;strong&gt;circa dieci minuti&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ma perché proprio dieci minuti? Il motivo è molto semplice, e pratico: in dieci minuti, il programmatore può fare una pausa, prendersi un caffè o decidere di discutere brevemente una questione tecnica con un collega, e al suo ritorno troverà la suite completata e potrà procedere col lavoro. In caso contrario, possono succedere due cose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;il programmatore &lt;strong&gt;rimane a fissare lo schermo&lt;/strong&gt; mentre i test si eseguono, dando ragione ai detrattori dei test che affermano che fare TDD è una perdita di tempo;&lt;/li&gt;
&lt;li&gt;si &lt;strong&gt;smette di eseguire la test suite&lt;/strong&gt;, o per lo meno di farla eseguire per intero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La seconda opzione può sembrare fattibile: si fanno girare solo i &lt;strong&gt;test strettamente necessari&lt;/strong&gt; mentre si sviluppa, quelli che vengono scritti in quel momento o che coprono la parte di codice che si sta modificando, per poi eseguire il commit del proprio codice senza far girare l&amp;rsquo;intera suite.&lt;/p&gt;

&lt;p&gt;In realtà &lt;strong&gt;questo approccio fa perdere valore ai test&lt;/strong&gt; stessi, perché i test sono codice che non andrà mai in produzione, e che quindi può dare valore ai nostri progetti solo se viene eseguito ogni volta. Inoltre questo approccio nasconde &lt;strong&gt;una trappola&lt;/strong&gt;, dato che i test, per essere davvero efficaci, vanno eseguiti tutti ogni volta: la loro forza sta proprio nell&amp;rsquo;&lt;strong&gt;individuare gli effetti collaterali&lt;/strong&gt; imprevisti delle nostre modifiche, i bug che possono presentarsi in punti inaspettati e apparentemente lontani del nostro progetto.&lt;/p&gt;

&lt;h4 id=&#34;esecuzione-parallela-dei-test:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;Esecuzione parallela dei test&lt;/h4&gt;

&lt;p&gt;In Facile.it lavoro in un progetto basato su Symfony2 e Doctrine e mi sono trovato proprio davanti a questa problematica: avevamo una &lt;strong&gt;suite di test che stava crescendo&lt;/strong&gt; a ritmo sostenuto e che a volte impiegava ad eseguirsi, tra build di preparazione ed esecuzione vera e propria, anche 25 minuti.&lt;/p&gt;

&lt;p&gt;Dopo aver ottimizzato le prestazioni del nostro ambiente di sviluppo (passando da Vagrant a Docker, ma questa è un&amp;rsquo;altra storia), ci siamo resi conto di aver bisogno di una soluzione più drastica al nostro problema, e abbiamo pensato di &lt;strong&gt;eseguire in parallelo i nostri test&lt;/strong&gt; per sfruttare al meglio le risorse hardware e ridurre così i tempi di esecuzione.&lt;/p&gt;

&lt;p&gt;Dopo un po&amp;rsquo; di ricerche, abbiamo individuato alcuni tool esistenti che permettevano questo approccio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brianium/paratest&#34;&gt;brianium/paratest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/liuggio/fastest&#34;&gt;liuggio/fastest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entrambi i tool sono ben sviluppati e semplici da utilizzare e le prime prove sui &lt;strong&gt;test unitari&lt;/strong&gt; sono state molto promettenti: grazie alla ridotta dimensione, la loro parallelizzazione è estremamente semplice.&lt;/p&gt;

&lt;h4 id=&#34;i-problemi-di-concorrenza-nei-test-funzionali:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;I problemi di concorrenza nei test funzionali&lt;/h4&gt;

&lt;p&gt;Quando siamo passati a provare Paratest sui &lt;strong&gt;test funzionali&lt;/strong&gt; abbiamo invece incontrato grossi problemi, che si concretizzavano in &lt;strong&gt;fallimenti casuali durante l&amp;rsquo;esecuzione parallela&lt;/strong&gt;. Questi fallimenti erano dati da un problema molto semplice: stavamo accedendo più volte e in parallelo al nostro database di test.&lt;/p&gt;

&lt;p&gt;Ma perché il nostro codice, che è lo stesso che viene eseguito in produzione (dove elabora centinaia, migliaia di richieste al minuto) ha così tanti &lt;strong&gt;problemi di accesso concorrente&lt;/strong&gt; nell&amp;rsquo;ambiente di test? I motivi sono semplici:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;i dati di test sono pochi&lt;/strong&gt;, mentre in produzione abbiamo tabelle da milioni di righe;&lt;/li&gt;
&lt;li&gt;per questo motivo &lt;strong&gt;i test tentano di accedere sempre alle stesse righe&lt;/strong&gt; del database;&lt;/li&gt;
&lt;li&gt;la &lt;strong&gt;sequenza&lt;/strong&gt; di operazioni di ogni test in genere è &lt;strong&gt;lettura - elaborazione - scrittura&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;i test hanno una &lt;strong&gt;rapidità di esecuzione&lt;/strong&gt; superiore a quella di un utilizzatore umano.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tutti questi motivi contribuiscono a creare situazioni in cui &lt;strong&gt;si verificano dei &lt;a href=&#34;https://it.wikipedia.org/wiki/Deadlock&#34;&gt;deadlock&lt;/a&gt;&lt;/strong&gt; e che il nostro database può risolvere solo bloccando uno dei due tentativi di accesso ai dati, facendo così fallire il test corrispondente.&lt;/p&gt;

&lt;p&gt;Un altro problema che può verificarsi è l&amp;rsquo;&lt;strong&gt;alterazione dei dati&lt;/strong&gt;: quando due test vengono eseguiti in contemporanea, uno dei due può modificare il database e, così facendo, può far mancare i giusti dati di partenza ad un altro test che si sta avviando nello stesso istante.&lt;/p&gt;

&lt;p&gt;Purtroppo &lt;strong&gt;Paratest non offre una soluzione&lt;/strong&gt; a questo genere di problemi, mentre Fastest propone come approccio la creazione di un database di test differente per ogni core del proprio processore, per poi eseguire tanti test in parallelo quanti sono i database a disposizione.&lt;/p&gt;

&lt;p&gt;Sfortunatamente anche questo approccio non ci ha soddisfatto, in quanto la costruzione del nostro database di test era piuttosto lenta (avevamo molte migration da eseguire e altrettante fixture da caricare ogni volta) e rischiavamo di guadagnare tempo da una parte per perderlo dall&amp;rsquo;altra, inoltre, avevamo avuto &lt;strong&gt;un&amp;rsquo;idea nuova&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;facile-it-paraunit:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;facile-it/paraunit&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/paraunit/version.svg&#34; alt=&#34;Packagist&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://travis-ci.org/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://travis-ci.org/facile-it/paraunit.svg&#34; alt=&#34;Travis build&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://codeclimate.com/github/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/facile-it/paraunit/badges/gpa.svg&#34; alt=&#34;Codeclimate&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/facile-it/paraunit?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/facile-it/paraunit/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abbiamo così deciso di sviluppare la nostra soluzione: &lt;strong&gt;&lt;a href=&#34;https://github.com/facile-it/paraunit&#34;&gt;facile-it/paraunit&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;è sviluppato con i &lt;strong&gt;componenti Symfony&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sa leggere la configurazione XML di PHPUnit&lt;/strong&gt; per individuare le test suite;&lt;/li&gt;
&lt;li&gt;esegue il &lt;strong&gt;parsing e l&amp;rsquo;aggregazione dei risultati&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;grazie ai processi separati, &lt;strong&gt;sa gestire i fatal error&lt;/strong&gt; senza far bloccare completamente l&amp;rsquo;esecuzione;&lt;/li&gt;
&lt;li&gt;sempre grazie ai processi, riesce ad &lt;strong&gt;ottimizzare l&amp;rsquo;uso della memoria&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;risulta &lt;strong&gt;affidabile&lt;/strong&gt; grazie al fatto che basa il suo responso sugli exit code dei singoli processi PHPUnit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La maggior parte di questi vantaggi sono ovviamente comuni a tutti gli approcci di parallelizzazione dei test, inoltre, grazie al parsing dei risultati, &lt;strong&gt;Paraunit sa riconoscere i casi di fallimento dovuti a deadlock&lt;/strong&gt; e riesegue i test che falliscono per questo motivo.&lt;/p&gt;

&lt;p&gt;Questo però era solo un primo passo e ovviamente ci siamo concentrati sull&amp;rsquo;implementare una &lt;strong&gt;soluzione radicale ai problemi di concorrenza&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;facile-it-paraunit-testcase:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;facile-it/paraunit-testcase&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/facile-it/paraunit-testcase&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/paraunit-testcase/version.svg&#34; alt=&#34;Packagist&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La soluzione che abbiamo trovato è molto semplice: &lt;strong&gt;le transazioni&lt;/strong&gt;.
Per realizzarla nella sua totalità, abbiamo sviluppato un test-case per PHPUnit, rilasciato col pacchetto &lt;strong&gt;&lt;a href=&#34;https://github.com/facile-it/paraunit-testcase&#34;&gt;facile-it/paraunit-testcase&lt;/a&gt;&lt;/strong&gt;; ovviamente il test-case è stato sviluppato in partenza per il nostro caso d&amp;rsquo;uso, ovvero per il &lt;strong&gt;test di un&amp;rsquo;applicazione basata su Symfony2 e Doctrine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Grazie a questo test-case, ogni test può accedere al database solo dentro una transazione e questa transazione non riceve mai il &lt;em&gt;commit&lt;/em&gt;, ma sempre il &lt;strong&gt;rollback&lt;/strong&gt; al termine. Questo significa che &lt;strong&gt;nulla verrà mai realmente scritto&lt;/strong&gt; sul nostro database.&lt;/p&gt;

&lt;p&gt;I vantaggi di questo approccio sono molteplici:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nessun test può interferire&lt;/strong&gt; con gli altri, visto che non possono alterare i dati;&lt;/li&gt;
&lt;li&gt;ogni test può permettersi di &lt;strong&gt;creare al volo un dato o di alterarne uno esistente&lt;/strong&gt;, senza doversi preoccupare di ripulire il database al termine, con grande risparmio di tempo nella scrittura dei test;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;il database di test rimane sempre pulito&lt;/strong&gt; e non dobbiamo più preoccuparci di prepararlo ogni volta che la suite deve essere eseguita, o che eseguiamo un test che può sporcare i dati;&lt;/li&gt;
&lt;li&gt;anche se non viene mai realmente scritto nulla, &lt;strong&gt;il database esegue comunque le verifiche di integrità&lt;/strong&gt;, quali vincoli di unicità o di chiavi esterne;&lt;/li&gt;
&lt;li&gt;diventa &lt;strong&gt;impossibile avere test interdipendenti&lt;/strong&gt;, ovvero test che possono funzionare solo se prima ne vengono eseguiti altri, che modificano in modo ideale i dati di fixture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L&amp;rsquo;unico limite di questo approccio è che le transazioni sono disponibili solo con alcuni database e all&amp;rsquo;interno di Doctrine quindi solo con l&amp;rsquo;&lt;code&gt;EntityManager&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;la-rapidità-di-esecuzione:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;La rapidità di esecuzione&lt;/h4&gt;

&lt;p&gt;Per darvi un&amp;rsquo;idea di quanto possa essere veloce Paraunit rispetto alla normale esecuzione con PHPUnit, ho misurato il tempo di esecuzione della nostra test suite funzionale, che è sufficientemente ampia (261 classi, 1568 metodi):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/paraunit/grafico.png&#34; alt=&#34;Grafico&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Come potete vedere, Paraunit esegue l&amp;rsquo;intera test suite in soli &lt;strong&gt;6 minuti e 6 secondi&lt;/strong&gt;, mentre PHPUnit ci metterebbe &lt;strong&gt;oltre 40 minuti!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ho usato il condizionale per un motivo specifico: il tempo di esecuzione di PHPUnit è in realtà una stima (in proiezione lineare) perché, circa al 12% dell&amp;rsquo;esecuzione, il processo si è chiuso per &lt;strong&gt;esaurimento della memoria&lt;/strong&gt; a disposizione, a riprova di un altro dei vantaggi nell&amp;rsquo;uso di Paraunit.&lt;/p&gt;

&lt;h4 id=&#34;test-coverage-in-parallelo:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;Test coverage in parallelo&lt;/h4&gt;

&lt;p&gt;Un&amp;rsquo;altra caratteristica di Paraunit, attualmente in sviluppo, è la possibilità di &lt;strong&gt;parallelizzare l&amp;rsquo;elaborazione della &lt;a href=&#34;https://phpunit.de/manual/current/en/code-coverage-analysis.html&#34;&gt;coverage&lt;/a&gt;&lt;/strong&gt; dei test.&lt;/p&gt;

&lt;p&gt;Questo è possibile grazie all&amp;rsquo;opzione &lt;code&gt;--coverage-php&lt;/code&gt; di PHPUnit che salva in un file .php il risultato parziale ottenuto; dopo aver lanciato i singoli test come processi separati, Paraunit esegue l&amp;rsquo;unione di tutti questi risultati.&lt;/p&gt;

&lt;h4 id=&#34;sviluppi-futuri:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;Sviluppi futuri&lt;/h4&gt;

&lt;p&gt;Ovviamente questo è solo l&amp;rsquo;inizio, il primo &lt;strong&gt;rilascio in open source&lt;/strong&gt; della nostra soluzione.
Tra gli sviluppi futuri spero di poter realizzare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la &lt;strong&gt;prioritizzazione dei test lenti&lt;/strong&gt;, ovvero poter eseguire per primi i test noti per la loro lentezza, così da non rallentare l&amp;rsquo;esecuzione complessiva della test suite;&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;aggiunta di &lt;strong&gt;altre opzioni&lt;/strong&gt; di selezione test, come p.e. l&amp;rsquo;opzione &lt;code&gt;--group&lt;/code&gt; di PHPUnit;&lt;/li&gt;
&lt;li&gt;il miglioramento delle &lt;strong&gt;prestazioni&lt;/strong&gt; all&amp;rsquo;avvio dei processi, cosa che pesa molto per i test unitari;&lt;/li&gt;
&lt;li&gt;il &lt;strong&gt;supporto per altri framework e ORM&lt;/strong&gt; oltre a Symfony e Doctrine, creando altri test-case appositi;&lt;/li&gt;
&lt;li&gt;il miglioramento della funzionalità di test coverage parallela;&lt;/li&gt;
&lt;li&gt;una soluzione per i database non transazionali, come MongoDB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vi invito quindi a partecipare allo sviluppo di Paraunit su &lt;a href=&#34;https://github.com/facile-it/paraunit&#34;&gt;GitHub&lt;/a&gt;, proponendo pull request, aprendo issue per proporre nuove feature o anche semplicemente utilizzandolo per le vostre test suite, così da verificarne l&amp;rsquo;efficacia e la compatibilità!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Protezione di dati sensibili usando la crittografia</title>
      <link>/blog/ita/protezione-di-dati-sensibili-usando-la-crittografia/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/protezione-di-dati-sensibili-usando-la-crittografia/</guid>
      <description>

&lt;p&gt;La protezione dei dati è uno dei problemi più sentiti e ricorrenti degli ultimi anni: che si tratti di informazioni private di utenti, o dell&amp;rsquo;azienda per cui lavoriamo, il problema è sempre lo stesso.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Come proteggere questi dati da eventuali malintenzionati che vorrebbero -  e potrebbero(!!) -  riuscire a entrarne in possesso ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prima di arrivare alla soluzione di questo problema però, è doveroso suddividere la casistica in almeno due rami. Nel mondo del web i dati possono essere &amp;ldquo;ottenuti&amp;rdquo; in due momenti differenti: 1) mentre transitano sulla rete sotto forma di pacchetti, oppure 2) successivamente al loro immagazzinamento (es. database o file) all&amp;rsquo;interno di uno o più server.&lt;/p&gt;

&lt;p&gt;In questo articolo esploreremo il secondo caso, e verrà proposta una possibile soluzione: come proteggere quei dati che parsimoniosamente abbiamo accumulato &amp;ldquo;in casa&amp;rdquo;?.&lt;/p&gt;

&lt;h2 id=&#34;mettere-i-dati-in-cassaforte:f7580f2fe0a81e31d01e286edcaea792&#34;&gt;Mettere i dati in cassaforte&lt;/h2&gt;

&lt;p&gt;In caso di dati immagazzinati, ad esempio, all&amp;rsquo;interno di un database; è certamente più difficile raggiungere il nostro tesoro, in quanto già al &amp;ldquo;sicuro&amp;rdquo; all&amp;rsquo;interno di un ambiente protetto, del quale ci fidiamo maggiormente rispetto alla volatilità della rete.
Tuttavia è meglio non sentirsi troppo sicuri: più i nostri dati saranno preziosi, più eventuali interessati saranno stimolati a ricercare ogni via per ottenerli.
Una qualsiasi falla, sia hardware che software, per quanto limitata nel tempo potrebbe esporre le nostre ricchezze ad attacchi di vario genere, permettendo a chiunque (o quasi) di ottenerle.&lt;/p&gt;

&lt;p&gt;Una possibile ed efficace tecnica di protezione in questi casi è &lt;strong&gt;rendere inutili o illeggibili i dati&lt;/strong&gt; per coloro che li hanno ottenuti in maniera illegittima, attraverso il loro immagazzinamento in forma cifrata.&lt;/p&gt;

&lt;p&gt;Quella che proporrò di seguito è una possibile soluzione al problema di come immagazzinare e cifrare questi dati, in modo da ottenere un livello di sicurezza adeguato e mantenere una buona elasticità, tanto da permettere differenti implementazioni e da coprire quanti più possibili casi d&amp;rsquo;uso.&lt;/p&gt;

&lt;p&gt;La soluzione stessa prevede che la prima parte della problematica esposta (protezione dei dati durante il transito) sia risolta, e si baserà sull&amp;rsquo;uso combinato di due tipologie differenti di algoritmi di cifratura.&lt;/p&gt;

&lt;h2 id=&#34;algoritmi-crittografici-simmetrici-e-asimmetrici:f7580f2fe0a81e31d01e286edcaea792&#34;&gt;Algoritmi Crittografici Simmetrici e Asimmetrici&lt;/h2&gt;

&lt;p&gt;Con &lt;em&gt;algoritmi crittografici&lt;/em&gt; si intendono tutti quei &lt;strong&gt;processi e procedure finalizzati ad ottenere un dato &amp;ldquo;offuscato&amp;rdquo; in modo da non essere comprensibile/intelligibile&lt;/strong&gt; da persone non autorizzate a leggerlo.&lt;/p&gt;

&lt;h3 id=&#34;algoritmi-simmetrici:f7580f2fe0a81e31d01e286edcaea792&#34;&gt;Algoritmi Simmetrici&lt;/h3&gt;

&lt;p&gt;Questa tipologia di algoritmi si basa sull&amp;rsquo;uso di chiavi di cifratura dette &lt;strong&gt;simmetriche&lt;/strong&gt; che permettono di cifrare e decifrare dati &lt;strong&gt;utilizzando la medesima chiave crittografica&lt;/strong&gt;.
Un esempio è &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&#34;&gt;AES&lt;/a&gt; (Advanced Encryption Standard), evoluzione dell&amp;rsquo;algoritmo &lt;a href=&#34;https://en.wikipedia.org/wiki/Rijndael_key_schedule&#34;&gt;Rijndael&lt;/a&gt; le cui caratteristiche si possono riassumere in un buon livello di sicurezza ed un&amp;rsquo;ottima velocità, sia che venga implementato via hardware che software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/protezione-di-dati-sensibili-usando-la-crittografia/aes.png&#34; alt=&#34;AES&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;algoritmi-asimmetrici:f7580f2fe0a81e31d01e286edcaea792&#34;&gt;Algoritmi Asimmetrici&lt;/h3&gt;

&lt;p&gt;Gli algoritmi asimmetrici si distinguono dai precedenti per l&amp;rsquo;utilizzo di &lt;strong&gt;due chiavi crittografiche distinte&lt;/strong&gt;, dette pubblica e privata, per effettuare le operazioni di cifratura e decifratura.
Il nome deriva dal metodo con il quale le due chiavi devono essere utilizzate. La chiave pubblica viene &lt;strong&gt;liberamente scambiata&lt;/strong&gt;, mentre la chiave privata &lt;strong&gt;rimane a conoscenza solo di coloro che devono poter leggere i dati&lt;/strong&gt; o i messaggi scambiati.
La particolarità che caratterizza queste chiavi è l&amp;rsquo;impossibilità di ricavare, ad esempio, la chiave privata essendo in possesso della chiave pubblica. A meno di particolari exploit dell&amp;rsquo;algoritmo, l&amp;rsquo;unico metodo per ottenere tale chiave è il &lt;strong&gt;brute force&lt;/strong&gt; sui dati stessi.
In questo caso l&amp;rsquo;esempio per eccellenza è &lt;a href=&#34;https://en.wikipedia.org/wiki/RSA_(cryptosystem&#34;&gt;RSA&lt;/a&gt;), uno standard di fatto nella sicurezza riguardante la trasmissione di dati: è infatti largamente utilizzato per cifrare le comunicazioni che avvengono tra client e server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/protezione-di-dati-sensibili-usando-la-crittografia/rsa.png&#34; alt=&#34;RSA&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;la-soluzione-combinando-rsa-e-aes:f7580f2fe0a81e31d01e286edcaea792&#34;&gt;La soluzione combinando RSA e AES&lt;/h2&gt;

&lt;p&gt;Ora che abbiamo ripassato le basi tecnologiche, possiamo pensare a come implementare una soluzione.&lt;/p&gt;

&lt;p&gt;Immaginiamo di avere una piattaforma che permetta ai vari &lt;strong&gt;utenti&lt;/strong&gt; di collegarsi con le proprie credenziali e di effettuare svariate operazioni, tra cui immagazzinare i propri documenti privati (foto, documenti, password, contratti, etc.) che necessitano di un più alto livello di sicurezza, e magari di poter condividere tra loro questi dati in un futuro prossimo.&lt;/p&gt;

&lt;p&gt;Partendo da queste semplici condizioni, e predisponendo il tutto alla futura &amp;ldquo;condivisibilità&amp;rdquo; dei documenti, una possibile soluzione è la seguente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;utilizzeremo AES per cifrare i singoli documenti;&lt;/li&gt;
&lt;li&gt;per permettere la condivisione, utilizzeremo una tabella (di scambio) del nostro database; al suo interno verranno tracciati il proprietario del documento e gli utenti che potranno accedervi;&lt;/li&gt;
&lt;li&gt;ogni singolo utente avrà il suo portachiavi, contenente le chiavi RSA che fungeranno da &amp;ldquo;lucchetto&amp;rdquo; per la chiave del singolo documento;&lt;/li&gt;
&lt;li&gt;sarà necessario offuscare anche la chiave privata di ogni utente, in modo da permetterne l&amp;rsquo;accesso solo al proprietario;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;gestire-gli-utenti:f7580f2fe0a81e31d01e286edcaea792&#34;&gt;Gestire gli utenti&lt;/h3&gt;

&lt;p&gt;Alla creazione di un nuovo utente sarà nostra premura &lt;strong&gt;generare una nuova coppia di chiavi&lt;/strong&gt; RSA, che andrà legata all&amp;rsquo;utente.
Prima di memorizzare queste chiavi nel database (assieme alle credenziali dell&amp;rsquo;utente o in un&amp;rsquo;altra tabella), sarà necessario offuscare la chiave privata. È buona prassi, in questi casi, far scegliere una &lt;strong&gt;masterkey&lt;/strong&gt; all&amp;rsquo;utente, da utilizzare per cifrare a sua volta la chiave privata con algoritmo simmetrico.
La masterkey scelta sarà importantissima in quanto andrà richiesta ogni qual volta dovremo decifrare i nostri dati (purtroppo la user experience è sacrificata a favore di un livello di sicurezza nettamente maggiore).
&lt;strong&gt;N.B.&lt;/strong&gt; È assolutamente sconsigliato memorizzare la masterkey (in qualsiasi forma) sul server: l&amp;rsquo;attaccante potrebbe facilmente accedervi e tentare di forzarla sbloccando di conseguenza tutte le altre chiavi.&lt;/p&gt;

&lt;h3 id=&#34;cifrare-il-documento:f7580f2fe0a81e31d01e286edcaea792&#34;&gt;Cifrare il documento&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ogni volta&lt;/strong&gt; in cui un utente caricherà un file o inserirà un testo da proteggere, sarà necessario generare una nuova chiave simmetrica &lt;strong&gt;univoca&lt;/strong&gt;. Useremo la chiave per cifrare il documento utilizzando AES e lo memorizzeremo all&amp;rsquo;interno della nostra base dati.&lt;/p&gt;

&lt;h3 id=&#34;associare-il-file-all-utente:f7580f2fe0a81e31d01e286edcaea792&#34;&gt;Associare il file all&amp;rsquo;utente&lt;/h3&gt;

&lt;p&gt;Come ultimo passo dovremo associare i dati cifrati all&amp;rsquo;utente che li sta memorizzando. È il momento di utilizzare la &amp;ldquo;tabella di scambio&amp;rdquo;. Inseriremo un record contenente i riferimenti all&amp;rsquo;utente e al file, insieme alla chiave univoca legata a quest&amp;rsquo;ultimo. La chiave verrà però prima cifrata utilizzando la chiave pubblica dell&amp;rsquo;utente.&lt;/p&gt;

&lt;p&gt;Abbiamo ottenuto un sistema simile a quello visualizzato di seguito:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/protezione-di-dati-sensibili-usando-la-crittografia/system.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;condividere:f7580f2fe0a81e31d01e286edcaea792&#34;&gt;Condividere!&lt;/h3&gt;

&lt;p&gt;Ogni volta in cui un utente proprietario di un documento (o che ha ottenuto il diritto di leggerlo) vorrà condividerlo con un secondo utente sarà sufficiente operare come segue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;richiedere la masterkey dell&amp;rsquo;utente;&lt;/li&gt;
&lt;li&gt;decifrare la chiave privata dello stesso utente utilizzando la chiave appena ottenuta;&lt;/li&gt;
&lt;li&gt;decifrare la chiave legata al documento (recuperata dalla tabella di scambio);&lt;/li&gt;
&lt;li&gt;effettuare una copia del record di scambio, sostituendo l&amp;rsquo;utente con quello di destinazione e cifrando nuovamente la chiave di scambio con quella pubblica del destinatario;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;e-ora:f7580f2fe0a81e31d01e286edcaea792&#34;&gt;E ora?&lt;/h3&gt;

&lt;p&gt;Ora che abbiamo ultimato (almeno teoricamente) il nostro sistema di protezione dei dati &lt;strong&gt;siamo definitivamente al sicuro?&lt;/strong&gt; &lt;strong&gt;Assolutamente no!&lt;/strong&gt; Tralasciando il buon esercizio tecnico svolto fin ora, dobbiamo ricordarci che &lt;strong&gt;abbiamo affidato buona parte della sicurezza del nostro sistema all&amp;rsquo;utente&lt;/strong&gt;.
Il punto debole infatti risiede nella masterkey che resta nelle mani dei nostri utenti: se questi ultimi dovessero condividerla, o perderla, sarebbe impossibile garantire la sicurezza o il recupero dei dati immagazzinati.
Inoltre una chiave - che è scelta dell&amp;rsquo;utente - troppo semplice sarebbe facilmente aggirabile tramite brute force o altre tecniche.&lt;/p&gt;

&lt;p&gt;In conclusione, tengo ad esortarvi a rispettare tutte le &lt;a href=&#34;https://en.wikipedia.org/wiki/Password#Factors_in_the_security_of_a_password_system&#34;&gt;regole generali riguardanti la composizione delle password&lt;/a&gt;, impendendo agli utenti di sceglierne una troppo semplice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WAMP, Web Application Messaging Protocol.. e PHP!</title>
      <link>/blog/ita/wamp-web-application-messaging-protocol-e-php/</link>
      <pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/wamp-web-application-messaging-protocol-e-php/</guid>
      <description>

&lt;p&gt;Dalle notifiche di Facebook ad un tweet stream, da Google Docs ai giochi multiplayer in HTML5, la necessità di uno &lt;strong&gt;scambio dati&lt;/strong&gt; in &lt;strong&gt;due direzioni&lt;/strong&gt;, &lt;strong&gt;efficiente&lt;/strong&gt; e a &lt;strong&gt;bassa latenza&lt;/strong&gt;, ha determinato l’ascesa negli ultimi anni di &lt;strong&gt;soluzioni basate su &lt;a href=&#34;https://www.websocket.org/&#34; target=&#34;_blank&#34;&gt;WebSocket&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Internet delle cose e web 2.0 trovano oramai sempre &lt;strong&gt;meno spazio&lt;/strong&gt; all’interno del protocollo &lt;strong&gt;HTTP/1&lt;/strong&gt;. Le tecniche di &lt;strong&gt;polling e long polling&lt;/strong&gt;, in voga fino a pochi anni fa, non permettevano di trasmettere in &lt;a href=&#34;https://it.wikipedia.org/wiki/Duplex&#34; target=&#34;_blank&#34;&gt;full duplex&lt;/a&gt; (tra server e client) contemporaneamente, erano costrette ad un alto overhead HTTP e richiedevano &lt;strong&gt;diversi sforzi&lt;/strong&gt; per simulare notifiche push server side.&lt;/p&gt;

&lt;h2 id=&#34;il-protocollo-wamp:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;Il protocollo WAMP&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wamp.ws/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;WAMP&lt;/strong&gt;&lt;/a&gt; (Web Application Messaging Protocol e non Windows, Apache, etc.!) offre un moderno &lt;strong&gt;pattern di messaggistica&lt;/strong&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_procedure_call&#34; target=&#34;_blank&#34;&gt;RPC&lt;/a&gt; e &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34; target=&#34;_blank&#34;&gt;Pub/Sub&lt;/a&gt; in maniera unificata. Registrato presso lo &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_Assigned_Numbers_Authority&#34; target=&#34;_blank&#34;&gt;IANA&lt;/a&gt; come sottoprotocollo WebSocket, definisce uno &lt;strong&gt;standard aperto&lt;/strong&gt; per lo scambio di &lt;strong&gt;messaggi in tempo reale&lt;/strong&gt; tra applicazioni e componenti, e permette la creazione di architetture &lt;strong&gt;debolmente accoppiate&lt;/strong&gt; basate su &lt;strong&gt;microservizi&lt;/strong&gt;. Utilizza canali full-duplex ordinati ed è quindi adatto ad implementazioni basate su WebSocket, ma supporta allo stesso modo socket Unix, socket raw o long polling HTTP.&lt;/p&gt;

&lt;p&gt;Il protocollo risulta piuttosto &lt;strong&gt;completo ed adeguato&lt;/strong&gt; a diversi scenari di utilizzo se comparato ad altri sistemi di messaggistica ed RPC.&lt;/p&gt;

&lt;p&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Technology&lt;/th&gt;
&lt;th&gt;PubSub&lt;/th&gt;
&lt;th&gt;RPC&lt;/th&gt;
&lt;th&gt;Routed RPC&lt;/th&gt;
&lt;th&gt;Web native&lt;/th&gt;
&lt;th&gt;Cross Language&lt;/th&gt;
&lt;th&gt;Open Standard&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WAMP&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AJAX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AMQP&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REST&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SOAP&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Socket.io&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SockJS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XMPP&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZeroMQ&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;em&gt;fonte: Wikipedia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Può essere utilizzato con profitto per sviluppare una piattaforma di gioco &lt;strong&gt;online multiplayer&lt;/strong&gt;, strumenti di &lt;strong&gt;business intelligence&lt;/strong&gt; real time e &lt;strong&gt;piattaforme collaborative&lt;/strong&gt; per numerosi utenti.&lt;/p&gt;

&lt;p&gt;Una piattaforma web di help desk ad esempio, può beneficiare di notifiche, chat, strumenti di scrittura multi-utente ed analisi dell’andamento in tempo reale  &lt;strong&gt;sullo stesso protocollo WAMP&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Per funzionare WAMP necessità di uno o più server di &lt;strong&gt;routing centralizzati&lt;/strong&gt;, allo stesso modo di &lt;strong&gt;RabbitMQ per AMQP&lt;/strong&gt;.
Per quanto esistano diverse implementazioni di router, in diversi linguaggi, lo standard &lt;em&gt;de facto&lt;/em&gt; è rappresentato da &lt;a href=&#34;http://crossbar.io/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Crossbar&lt;/strong&gt;&lt;/a&gt;, sviluppato da &lt;a href=&#34;http://tavendo.com/&#34; target=&#34;_blank&#34;&gt;Tavendo&lt;/a&gt;, alla quale si deve anche la &lt;strong&gt;definizione del protocollo&lt;/strong&gt; stesso.&lt;/p&gt;

&lt;h2 id=&#34;crossbar:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;Crossbar&lt;/h2&gt;

&lt;p&gt;Crossbar, scritto in python (&lt;a href=&#34;https://github.com/crossbario/crossbar&#34; target=&#34;_blank&#34;&gt;open source&lt;/a&gt;, licenza AGPL v3), supporta completamente le funzionalità descritte dal protocollo oltre a vantare &lt;strong&gt;configurazioni avanzate&lt;/strong&gt; come ad esempio le subscriptions &lt;a href=&#34;http://crossbar.io/docs/Pattern-Based-Subscriptions/&#34; target=&#34;_blank&#34;&gt;basate su pattern&lt;/a&gt;, le &lt;a href=&#34;http://crossbar.io/docs/Progressive-Call-Results/&#34; target=&#34;_blank&#34;&gt;progressive result&lt;/a&gt; su RPC e profili di autenticazione ed &lt;a href=&#34;http://crossbar.io/docs/Authorization/&#34; target=&#34;_blank&#34;&gt;autorizzazione&lt;/a&gt; dinamici.&lt;/p&gt;

&lt;p&gt;Nessuna delle altre implementazioni è poi al momento in grado di vantare le stesse &lt;strong&gt;prestazioni&lt;/strong&gt; e la &lt;strong&gt;stabilità&lt;/strong&gt; di Crossbar: una istanza del router è in grado di servire 1000 messaggi/secondo su Pub/Sub, a 1000 client, con una &lt;strong&gt;latenza di 25ms&lt;/strong&gt; su una &lt;strong&gt;RaspberryPi&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt;Router&lt;/th&gt;
&lt;th&gt;Broker&lt;/th&gt;
&lt;th&gt;Dealer&lt;/th&gt;
&lt;th&gt;Advanced Profile&lt;/th&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Crossbar&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;Pyhton&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thruway&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;PHP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wamp.rt&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;NodeJS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jawampa&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WampSharp&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Erwa&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Erlang&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;em&gt;fonte: WAMP.ws&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;e-php:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;..e PHP?&lt;/h2&gt;

&lt;p&gt;Diverse applicazioni web di backend usate presso Facile.it permettono ad un gran numero di operatori di lavorare sulle stesse pratiche in maniera collaborativa in &lt;strong&gt;tempo reale&lt;/strong&gt;.
Il protocollo WAMP è una tecnologia sulla quale è possibile sviluppare in maniera efficiente &lt;strong&gt;dashboard collaborative&lt;/strong&gt; e realtime.. ma sarà anche in grado di funzionare adeguatamente assieme alle soluzioni PHP (spesso in Symfony 2) sviluppate in casa e &lt;strong&gt;non precedentemente disegnate per l&amp;rsquo;uso con WebSocket&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Esistono diverse librerie (come &lt;a href=&#34;https://github.com/voryx/Thruway&#34; target=&#34;_blank&#34;&gt;Thruway&lt;/a&gt;) che permettono di operare come &lt;strong&gt;client PHP&lt;/strong&gt; in ambiente WAMP, ma per &lt;strong&gt;semplificare&lt;/strong&gt; l&amp;rsquo;integrazione del protocollo con altri servizi, Crossbar supporta il &lt;a href=&#34;http://crossbar.io/docs/HTTP-Bridge-Services/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;bridge HTTP&lt;/strong&gt;&lt;/a&gt; delle funzionalità Pub/Sub e RPC.&lt;/p&gt;

&lt;p&gt;In pratica, parlando ad esempio di Pub/Sub, è possibile &lt;strong&gt;pubblicare via HTTP&lt;/strong&gt; (o HTTPS) su Crossbar messaggi che saranno inoltrati su topic ai &lt;strong&gt;client connessi via WebSocket&lt;/strong&gt; in maniera trasparente. Altresì è possibile &lt;strong&gt;iscriversi ai topic&lt;/strong&gt; fornendo un &lt;strong&gt;endpoint HTTP&lt;/strong&gt; da chiamare per ricevere i messaggi pubblicati da client WebSocket.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;esempio sottostante configura un router Crossbar in grado di accettare connessioni websocket, pubblicazioni via HTTP e che si occupa di forwardare alcuni messaggi ad un endpoint HTTPS:&lt;/p&gt;

&lt;p&gt;&lt;style type=&#34;text/css&#34;&gt;
  .gist-file
  .gist-data {max-height: 500px;}
&lt;/style&gt;
&lt;script src=&#34;https://gist.github.com/peelandsee/51417b3c7c1dc400e85f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Il gist precedente può essere lanciato al volo con &lt;a href=&#34;https://docs.docker.com/&#34; target=&#34;_blank&#34;&gt;docker&lt;/a&gt;:
&lt;code&gt;docker run -p 80:80 -p 8080:8080 -v $PWD/crossbar-config.json:/.crossbar/config.json vinelab/crossbar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ovviamente l&amp;rsquo;esempio non tiene conto di profili di configurazione più avanzati, come &lt;strong&gt;cifratura TLS&lt;/strong&gt;, autenticazione, ruoli separati di pubblicazione e/o iscrizione, disponibili nella documentazione di Crossbar.&lt;/p&gt;

&lt;p&gt;Features come la firma delle richieste HTTP, richiedono più di qualche minuto di sviluppo, ma sono indispensabili in un &lt;strong&gt;ambiente di produzione&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Per semplificare l&amp;rsquo;adozione del bridge HTTP in &lt;strong&gt;ambito PHP&lt;/strong&gt;, in Facile.it abbiamo sviluppato e rilasciato un &lt;strong&gt;bundle&lt;/strong&gt; che permette la configurazione automatica di &lt;strong&gt;servizi di Publisher WAMP nel service container&lt;/strong&gt; di Symfony 2.&lt;/p&gt;

&lt;p&gt;Il bundle, disponibile su &lt;a href=&#34;https://packagist.org/packages/facile-it/crossbar-http-publisher-bundle&#34; target=&#34;_blank&#34;&gt;Packagist (composer)&lt;/a&gt; può essere installato con
&lt;code&gt;$ composer require facile-it/crossbar-http-publisher-bundle dev-master&lt;/code&gt;
e richiede una &lt;strong&gt;configurazione rapida&lt;/strong&gt; ed intuitiva:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;facile_crossbar_http_publisher:
  connections:
    foo_publisher_1:
        protocol: http
        host: 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;uso è molto semplice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// recupero del servizio
$fooPublisher = $container
                -&amp;gt;get(&#39;facile.crossbar.publisher.foo_publisher_1&#39;);

$topic = &#39;com.myapp.hello&#39;;

// pubblicazione
$firstPublisher-&amp;gt;publish($topic, [&#39;foo&#39;,1]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con le poche righe sopra riportate, attraverso il metodo &lt;code&gt;publish()&lt;/code&gt; viene effettuata una &lt;strong&gt;chiamata HTTP POST&lt;/strong&gt; verso il router WAMP, ed il messaggio &lt;code&gt;[&#39;foo&#39;,1]&lt;/code&gt; raggiunge in tempo (quasi) reale tutti i client (ad esempio &lt;strong&gt;tutti i browser degli utenti&lt;/strong&gt;) iscritti al topic &lt;code&gt;com.myapp.hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Anche in questo caso, la &lt;a href=&#34;http://crossbar.io/docs/Processes/&#34; target=&#34;_blank&#34;&gt;configurazione&lt;/a&gt; può supportare diversi host, porte, uso TLS, signed request, e attraverso GitHub è possibile trovare &lt;a href=&#34;https://github.com/crossbario/crossbarexamples&#34; target=&#34;_blank&#34;&gt;diversi esempi&lt;/a&gt; di &lt;strong&gt;possibili configurazioni&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ma-i-miei-utenti-lo-supporteranno:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;..ma i miei utenti lo supporteranno?&lt;/h2&gt;

&lt;p&gt;Lato browser, passare a WAMP è davvero &lt;strong&gt;semplice&lt;/strong&gt;:
la libreria &lt;a href=&#34;http://autobahn.ws/js/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Autobahn|JS&lt;/strong&gt;&lt;/a&gt; garantisce piena &lt;strong&gt;compatibilità&lt;/strong&gt; anche per &lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34;&gt;node.js&lt;/a&gt;, supporta l&amp;rsquo;autenticazione, ed è in grado di gestire in maniera &lt;strong&gt;asincronia&lt;/strong&gt; sia RPC che Pub/Sub.&lt;/p&gt;

&lt;p&gt;Qualora il browser di un vostro utente non supportasse WebSocket (e &lt;a href=&#34;http://caniuse.com/#feat=websockets&#34; target=&#34;_blank&#34;&gt;dovrebbe&lt;/a&gt; oramai!), Autobahn|JS è in grado di fornire un &lt;strong&gt;fallback automatico&lt;/strong&gt; a long polling.&lt;/p&gt;

&lt;p&gt;Iscriversi ad un topic o pubblicare un messaggio richiede poche linee:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/peelandsee/c853bc3fd3971e78527c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Nell&amp;rsquo;esempio sopra riportato, il client JS &lt;strong&gt;si iscrive&lt;/strong&gt; al topic &lt;code&gt;com.myapp.hello&lt;/code&gt; e passa i messaggi ricevuti ad una semplice funzione &lt;code&gt;console.log()&lt;/code&gt;; inoltre &lt;strong&gt;pubblica un messaggio&lt;/strong&gt; sul topic &lt;code&gt;com.myapp.topic1&lt;/code&gt;. Quest&amp;rsquo;ultimo, sarà anche &lt;strong&gt;forwardato da Crossbar sul nostro endpoint HTTPS&lt;/strong&gt; &lt;code&gt;https://hostname/subscriptions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Grazie alle &lt;strong&gt;funzionalità HTTP bridge&lt;/strong&gt; di Crossabar l&amp;rsquo;utilizzo di WAMP in ambito PHP, senza connessioni persistenti o consumer sempre accesi, è &lt;strong&gt;semplice ed immediato&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Per un ulteriore &lt;strong&gt;approfondimento su WAMP&lt;/strong&gt;, saranno inoltre utili le slide che seguono:&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/MEmo82CFgt1xND&#34; width=&#34;700&#34; height=&#34;550&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;riferimenti:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;Riferimenti&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wamp.ws/&#34;&gt;WAMP Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crossbar.io/docs/TOC/&#34;&gt;Crossbar - Documentazione&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crossbar.io/docs/HTTP-Bridge-Services/&#34;&gt;Crossbar - HTTP Bridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://autobahn.ws/js/&#34;&gt;Autobahn|JS - Documentazione&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facile-it/crossbar-http-publisher-bundle&#34;&gt;Facile.it CrossbarHTTPPublisherBundle - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>No Country For If Else</title>
      <link>/blog/ita/no-country-for-if-else/</link>
      <pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/no-country-for-if-else/</guid>
      <description>

&lt;p&gt;C&amp;rsquo;è un &lt;strong&gt;ospite indesiderato&lt;/strong&gt; che ci accompagna sempre mentre scriviamo codice e realizziamo progetti software: si tratta del &lt;strong&gt;codice già esistente&lt;/strong&gt;, e dobbiamo tener conto della sua complessità man mano che la &lt;em&gt;code base&lt;/em&gt; aumenta di dimensioni. Un&amp;rsquo;elevata complessità del codice può rendere le seguenti attività particolarmente difficili:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;comprendere il significato di codice vecchio, scritto da altri o da se stessi;&lt;/li&gt;
&lt;li&gt;tracciare le cause di bug, cioè errori, nel codice;&lt;/li&gt;
&lt;li&gt;eseguire modifiche a una certa procedura;&lt;/li&gt;
&lt;li&gt;aggiungere funzionalità a strutture già esistenti;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anche approcciando lo sviluppo di nuovo software con &lt;a href=&#34;https://en.wikipedia.org/wiki/Agile_software_development&#34;&gt;metodologie agili&lt;/a&gt;, dobbiamo comunque fare i conti con il codice esistente, e per farlo dobbiamo almeno essere in grado di &lt;strong&gt;comprenderlo senza sforzi eccessivi&lt;/strong&gt;. Dunque quando parlo di &lt;em&gt;complessità&lt;/em&gt; mi riferisco in particolare alla difficoltà con la quale una programmatore è in grado di &lt;em&gt;ragionare&lt;/em&gt; sul codice. La prefazione del noto testo accademico &lt;a href=&#34;http://deptinfo.unice.fr/~roy/sicp.pdf&#34;&gt;Structure and interpretation of computer programs&lt;/a&gt; contiene la seguente frase:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;programs must be written for people to read, and only incidentally for machines to execute&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Non potrei essere più d&amp;rsquo;accordo: il tempo speso da un programmatore a scrivere nuovo codice rappresenta solo &lt;strong&gt;una minima parte&lt;/strong&gt; del suo tempo totale di lavoro; molto tempo è passato a leggere il codice esistente, per correggerlo, estenderlo, modificarlo o semplicemente comprenderlo. Generando codice più comprensibile, sul quale sia più semplice ragionare, possiamo valutare più facilmente la &lt;strong&gt;correttezza&lt;/strong&gt; di quanto abbiamo scritto o, in caso di comportamento non atteso, trovare agevolmente l&amp;rsquo;errore. Ovviamente tutto questo non deve prescindere dalle tecniche che abitualmente utilizziamo per testare la correttezza del software &lt;em&gt;a posteriori&lt;/em&gt;: d&amp;rsquo;altronde, nessuna disciplina tecnico/scientifica è esente da verifiche empiriche, e in effetti l&amp;rsquo;approccio empirico all&amp;rsquo;ingegneria del software è preso in considerazione anche in ambito accademico, come dimostra l&amp;rsquo;&lt;a href=&#34;http://static.springer.com/sgw/documents/1525357/application/pdf/10664_JournalMetrics_Flyer.pdf&#34;&gt;esistenza&lt;/a&gt; della rivista &lt;a href=&#34;http://link.springer.com/journal/10664&#34;&gt;Empirical Software Engineering&lt;/a&gt;. La mia personale posizione è nel mezzo: il testing è importante, ma è anche importante ragionare &lt;em&gt;a priori&lt;/em&gt; sul proprio design, sulla sua correttezza, e sulla presenza di eventuale &lt;strong&gt;complessità accidentale&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;indice:c252b88516f644ca0545d16795aa645d&#34;&gt;Indice&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#l-importanza-dell-astrazione&#34;&gt;L&amp;rsquo;importanza dell&amp;rsquo;astrazione&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#misurare-la-complessita&#34;&gt;Misurare la complessità&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#esempio-soluzione-strutturata&#34;&gt;Esempio: soluzione strutturata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#esempio-soluzione-oo&#34;&gt;Esempio: soluzione OO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#esempio-soluzione-funzionale&#34;&gt;Esempio: soluzione funzionale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#una-verifica-empirica&#34;&gt;Una verifica empirica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusioni&#34;&gt;Conclusioni&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;l-importanza-dell-astrazione&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;l-importanza-dell-astrazione:c252b88516f644ca0545d16795aa645d&#34;&gt;L&amp;rsquo;importanza dell&amp;rsquo;astrazione&lt;/h2&gt;

&lt;p&gt;Come abbiamo visto in un &lt;a href=&#34;http://engineering.facile.it/programmazione-funzionale-perche-preoccuparsi/&#34;&gt;precedente articolo&lt;/a&gt;, più che della complessità intrinseca legata alla logica del nostro software, dobbiamo preoccuparci della &lt;a href=&#34;http://shaffner.us/cs/papers/tarpit.pdf&#34;&gt;complessità accidentale&lt;/a&gt; che introduciamo adottando &lt;strong&gt;soluzioni non ottimali e inutilmente complicate&lt;/strong&gt;: l&amp;rsquo;utilizzo eccessivo di strutture di controllo &lt;em&gt;if-else-for-switch&lt;/em&gt; tende a rendere il codice difficile da comprendere, da mantenere e da testare; si veda ad esempio il noto &lt;a href=&#34;http://c2.com/cgi/wiki?ArrowAntiPattern&#34;&gt;Arrow Anti-Pattern&lt;/a&gt;. È da notare che l&amp;rsquo;introduzione della &lt;a href=&#34;https://en.wikipedia.org/wiki/Structured_programming&#34;&gt;programmazione &lt;em&gt;strutturata&lt;/em&gt;&lt;/a&gt;, cioè quella basata proprio sulle strutture di controllo appena citate, ha rappresentato &lt;strong&gt;un grande passo avanti&lt;/strong&gt; nello sviluppo del software a cavallo tra gli anni &amp;lsquo;60 e &amp;lsquo;70: essa ha permesso di programmare a un più alto livello di astrazione rispetto allo stile precedente, rimuovendo la necessità di gestire manualmente l&amp;rsquo;ordine di esecuzione del codice con il &lt;a href=&#34;https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF&#34;&gt;famigerato&lt;/a&gt; comando &lt;code&gt;goto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I paradigmi di sviluppo cambiano quando i programmatori si ritrovano a dover gestire progetti sempre più corposi e complessi: per evitare di essere imbrigliati dalla eccessiva complessità del proprio codice, o del codice scritto altri che ci troviamo comunque a mantenere, dobbiamo lavorare a &lt;strong&gt;più alti livelli di astrazione&lt;/strong&gt;. Quanto alti? Una buona risposta a questa domanda potrebbe essere la seguente:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a un elevato livello di astrazione possiamo dire al sistema di fare ciò che vogliamo, senza specificare come farlo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A un adeguato livello di astrazione possiamo concentrarci sul &lt;em&gt;cosa&lt;/em&gt; lasciando che sia il sistema a decidere il &lt;em&gt;come&lt;/em&gt;. Ovviamente non esiste un &amp;ldquo;massimo&amp;rdquo; livello di astrazione, e in quanto programmatori ci troviamo sempre a lavorare &lt;strong&gt;a metà strada&lt;/strong&gt; tra le cariche elettriche in movimento in un microprocessore, e le necessità di business della nostra azienda: dobbiamo tuttavia essere in grado di identificare i casi nei quali stiamo lavorando a un livello di astrazione troppo basso, poiché a tale livello può aumentare molto il rischio di fare errori e introdurre complessità accidentale. Ad esempio, nel momento in cui usiamo una struttura di controllo come &lt;em&gt;if-else&lt;/em&gt; all&amp;rsquo;interno di una procedura relativamente grande, stiamo &lt;em&gt;manualmente&lt;/em&gt; prendendo una decisione in base allo stato del nostro sistema: molto meglio sarebbe sviluppare un elemento software, ad esempio un oggetto, che sia in grado di &lt;strong&gt;prendere quella decisione al posto nostro&lt;/strong&gt;; il nostro ruolo, a quel punto, sarà &lt;em&gt;dichiarare&lt;/em&gt; la funzionalità di quell&amp;rsquo;elemento. Mescolare il &lt;em&gt;cosa&lt;/em&gt; con il &lt;em&gt;come&lt;/em&gt; è una delle principali cause di difficoltà nel comprendere cosa fa un blocco di codice, perché può portare all&amp;rsquo;oscuramento dell&amp;rsquo;&lt;strong&gt;intento&lt;/strong&gt; di una procedura, legato alla logica di business, con i &lt;strong&gt;dettagli di implementazione&lt;/strong&gt;, che sono concetti separati e spesso del tutto indipendenti (uno stesso intento può essere realizzato con diverse implementazioni a più basso livello).&lt;/p&gt;

&lt;p&gt;Vediamo un semplice esempio. Supponiamo di avere la seguente funzione:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func &amp;lt;A&amp;gt; optionalValue1(value: A, cond1: Bool, cond2: Bool) -&amp;gt; A? {
	var x: A?
	if cond1 == true {
		if cond2 == true {
			x = nil
		}
		else {
			x = value
		}
	}
	else {
		if cond2 == true {
			x = value
		}
		else {
			x = nil
		}
	}
	return x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anche se la funzione è piuttosto semplice, non è immediatamente evidente cosa stia succedendo; vediamolo passo-passo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;è dichiarata una variabile &lt;code&gt;x&lt;/code&gt; di tipo &lt;code&gt;A?&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;si verifica la prima condizione:

&lt;ul&gt;
&lt;li&gt;se la prima condizione è vera, si verifica la seconda condizione:

&lt;ul&gt;
&lt;li&gt;se la seconda condizione è vera, la variabile è impostata a &lt;code&gt;nil&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;se la seconda condizione è falsa, la variabile è impostata a &lt;code&gt;value&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;se la prima condizione è falsa, si verifica la seconda condizione:

&lt;ul&gt;
&lt;li&gt;se la seconda condizione è vera, la variabile è impostata a &lt;code&gt;value&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;se la seconda condizione è falsa, la variabile è impostata a  &lt;code&gt;nil&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;è ritornata la variabile &lt;code&gt;x&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basta pensarci un attimo per capire che, perché a &lt;code&gt;x&lt;/code&gt; venga assegnato &lt;code&gt;value&lt;/code&gt; le due condizioni devono essere semplicemente diverse tra loro. Possiamo inoltre pensare a un&amp;rsquo;altra semplificazione: non è necessario dichiarare la variabile &lt;code&gt;x&lt;/code&gt;, basta ritornare &lt;code&gt;value&lt;/code&gt; se le due condizioni sono diverse, altrimenti ritornare &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func &amp;lt;A&amp;gt; optionalValue2(value: A, cond1: Bool, cond2: Bool) -&amp;gt; A? {
	return cond1 != cond2 ? value : nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Abbiamo semplificato molto la funzione, rendendola più facile da comprendere: ora &lt;strong&gt;basta un&amp;rsquo;occhiata&lt;/strong&gt; per capire cosa fa. Ma in un caso più complesso, con tante diverse condizioni e percorsi possibili, può non bastare semplificare le condizioni.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;misurare-la-complessita&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;misurare-la-complessità:c252b88516f644ca0545d16795aa645d&#34;&gt;Misurare la complessità&lt;/h2&gt;

&lt;p&gt;Un&amp;rsquo;unità di misura presa spesso in considerazione nel valutare la complessità di un metodo o una funzione è la &lt;a href=&#34;https://en.wikipedia.org/wiki/Cyclomatic_complexity&#34;&gt;complessità ciclomatica&lt;/a&gt; (CC): essa rappresenta il livello di complessità generato dall&amp;rsquo;uso di molteplici strutture di controllo in un metodo o una funzione. È possibile calcolare il numero di CC per una procedura strutturata rappresentando quest&amp;rsquo;ultima con un &lt;a href=&#34;https://en.wikipedia.org/wiki/Directed_graph&#34;&gt;grafo diretto&lt;/a&gt; e contando il numero di archi e nodi. Ad esempio, possiamo rappresentare la funzione &lt;code&gt;optionalValue1&lt;/code&gt; con il seguente grafo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[(value,cond1,cond2)]
|
|-&amp;gt; [var x] -&amp;gt; [cond1 == true ?]
               |
               |-y-&amp;gt; [cond2 == true ?]
               |     |
               |     |-y-&amp;gt; [x = nil] --------|
               |     |-n-&amp;gt; [x = value] ------|
               |                             |
               |-n-&amp;gt; [cond2 == true ?]       |
                     |                       |
                     |-y-&amp;gt; [x = value] ------|
                     |-n-&amp;gt; [x = nil] --------|
                                             |-&amp;gt; [return x]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Per un singolo grafo connesso, il numero di CC è calcolabile in base alla seguente formula:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CC = [numero archi] - [numero nodi] + 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Per la funzione &lt;code&gt;defaultValue1&lt;/code&gt; si può vedere che CC = 4. Apparentemente la versione semplificata &lt;code&gt;defaulValue2&lt;/code&gt; ha una complessità ciclomatica inferiore, ma in realtà, come indicato anche nella &lt;a href=&#34;http://www.literateprogramming.com/mccabe.pdf&#34;&gt;pubblicazione originale&lt;/a&gt; di T.J.McCabe, CC vale solo per una procedura &lt;em&gt;completamente strutturata&lt;/em&gt;, cioè una procedura con un solo punto di ingresso e un solo punto di uscita; inoltre CC dovrebbe tener conto di &lt;strong&gt;tutti i casi possibili&lt;/strong&gt; quando si verifica una condizione, e &lt;code&gt;if cond1 != cond2&lt;/code&gt; ha appunto 4 casi possibili. Una trattazione delle possibili evoluzioni di CC tenendo conto di molteplici punti di ingresso e uscita per un modulo è disponibile &lt;a href=&#34;http://www.acis.pamplin.vt.edu/faculty/tegarden/wrk-pap/SQJ.PDF&#34;&gt;qui&lt;/a&gt;. Quindi non terremo conto di CC nel resto dell&amp;rsquo;articolo per i seguenti motivi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la complessità che ci interessa è quella relativa alla &amp;ldquo;comprensibilità&amp;rdquo; di una funzione, e spesso pattern non strutturati (come &lt;code&gt;guard clause&lt;/code&gt;,&lt;code&gt;return&lt;/code&gt; anticipati o &lt;em&gt;conditional expression&lt;/em&gt; come quella prodotta dall&amp;rsquo;operatore ternario &lt;code&gt;?:&lt;/code&gt;) rendono una funzione o un metodo più semplici da capire;&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;obiettivo è scrivere un programma componendo tante piccole funzioni la cui complessità sia la &lt;strong&gt;minima possibile&lt;/strong&gt; (nessuna struttura di controllo), quindi avrà poco valore misurare il numero di CC per ogni funzione;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mi è parso comunque importante citare la complessità ciclomatica in questo articolo, ma più che &lt;em&gt;misurare&lt;/em&gt; la complessità accidentale, siamo interessati a &lt;strong&gt;rimuoverla del tutto&lt;/strong&gt;, sostituendo le decisioni condizionali tipiche della programmazione strutturata con qualcos&amp;rsquo;altro. È da notare che una &lt;em&gt;espressione&lt;/em&gt; condizionale rappresenta un concetto &lt;strong&gt;più semplice&lt;/strong&gt; rispetto a una &lt;em&gt;istruzione&lt;/em&gt; condizionale: nel primo caso, l&amp;rsquo;intera espressione ritorna semplicemente un valore in base a una o più condizioni; nel secondo caso, una o più istruzioni potrebbero essere eseguite o meno in base allo stato del sistema.&lt;/p&gt;

&lt;p&gt;Immaginiamo di avere una funzione di questo tipo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func getCorrectValueConsideringConditions &amp;lt;A&amp;gt; (#cond1: Condition&amp;lt;A&amp;gt;, cond2: Condition&amp;lt;A&amp;gt;, cond3: Condition&amp;lt;A&amp;gt; ...) -&amp;gt; A? {
	/// do stuff
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In questo caso possiamo avere un gran numero di condizioni legate a un valore di tipo &lt;code&gt;A&lt;/code&gt;, e potrebbe essere necessario valutare ciascuna di queste con diversi &lt;em&gt;if-else&lt;/em&gt; e/o &lt;em&gt;switch&lt;/em&gt; annidati. Un modo per risolvere questo problema può consistere nell&amp;rsquo;&lt;em&gt;astrarre&lt;/em&gt; il concetto stesso di &lt;em&gt;condizione&lt;/em&gt;, trasformandolo in una &lt;em&gt;relazione statica&lt;/em&gt; tra un qualche parametro e un valore di tipo &lt;code&gt;A&lt;/code&gt;: dovremmo quindi realizzare un sistema che sia in grado di &lt;em&gt;risolvere&lt;/em&gt; un qualunque numero di relazioni, possibilmente in un &lt;strong&gt;qualunque ordine&lt;/strong&gt;, e in base ad esse dedurre il valore risultante.&lt;/p&gt;

&lt;p&gt;Vediamo un esempio pratico.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;esempio-soluzione-strutturata&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;esempio-soluzione-strutturata:c252b88516f644ca0545d16795aa645d&#34;&gt;Esempio: soluzione strutturata&lt;/h2&gt;

&lt;p&gt;Una persona si reca all&amp;rsquo;ufficio di collocamento per cercare lavoro: in base ad alcuni attributi (preferenze, giovane/anziano, numero di figli di età inferiore ai 18 anni) essa può essere inviata a un certo sportello per selezionare un impiego tra i vari disponibili, oppure mandata fuori dall&amp;rsquo;ufficio nel caso in cui il set di attributi non generi una lista di lavori accettabili. Ecco la procedura completa (non è importante il realismo, è solo un esempio):&lt;/p&gt;

&lt;p&gt;Un persona &lt;strong&gt;p1&lt;/strong&gt; arriva allo sportello &lt;strong&gt;d1&lt;/strong&gt; per cercare un impiego; &lt;strong&gt;p1&lt;/strong&gt; ha una lista di preferenze lavorative, ma potrebbe accettare anche altri lavori fuori lista; &lt;strong&gt;p1&lt;/strong&gt; ha inoltre una lista di lavori che di sicuro non accetterebbe mai;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;se &lt;strong&gt;p1&lt;/strong&gt; è giovane si ottiene da &lt;strong&gt;p1&lt;/strong&gt; una lista &lt;strong&gt;l1&lt;/strong&gt; di preferenze;

&lt;ul&gt;
&lt;li&gt;se &lt;strong&gt;l1&lt;/strong&gt; è troppo piccola, si chiede a &lt;strong&gt;p1&lt;/strong&gt; di ingrandire la lista con preferenze secondarie;&lt;/li&gt;
&lt;li&gt;si inseriscono le preferenze nel sistema e si ottiene una lista &lt;strong&gt;l2&lt;/strong&gt; di posizioni disponibili;&lt;/li&gt;
&lt;li&gt;se la lista &lt;strong&gt;l2&lt;/strong&gt; è vuota, si chiede a &lt;strong&gt;p1&lt;/strong&gt; se vuole visualizzare la lista completa delle posizioni;&lt;/li&gt;
&lt;li&gt;se &lt;strong&gt;p1&lt;/strong&gt; sceglie una posizione, &lt;strong&gt;p1&lt;/strong&gt; è inviato allo sportello &lt;strong&gt;d2&lt;/strong&gt; per proseguire con la procedura;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;se &lt;strong&gt;p1&lt;/strong&gt; è anziano, si chiede a &lt;strong&gt;p1&lt;/strong&gt; di scegliere dalla lista &lt;strong&gt;l3&lt;/strong&gt; dei lavori adatti per gli anziani;

&lt;ul&gt;
&lt;li&gt;se &lt;strong&gt;p1&lt;/strong&gt; sceglie una posizione, &lt;strong&gt;p1&lt;/strong&gt; è inviato allo sportello &lt;strong&gt;d3&lt;/strong&gt; per proseguire con la procedura;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;se &lt;strong&gt;p1&lt;/strong&gt; ha figli, in ogni caso la lista delle posizioni disponibili sarà influenzata dal numero di figli:

&lt;ul&gt;
&lt;li&gt;se &lt;strong&gt;p1&lt;/strong&gt; ha 1 figlio con età inferiore ai 18 anni, si presenta a &lt;strong&gt;p1&lt;/strong&gt; la lista &lt;strong&gt;l4&lt;/strong&gt; dei lavori adatti al suo caso;&lt;/li&gt;
&lt;li&gt;se &lt;strong&gt;p1&lt;/strong&gt; ha 2 figli con età inferiore ai 18 anni, si presenta a &lt;strong&gt;p1&lt;/strong&gt; la lista &lt;strong&gt;l5&lt;/strong&gt; dei lavori adatti al suo caso;&lt;/li&gt;
&lt;li&gt;nei due casi precedenti, se &lt;strong&gt;p1&lt;/strong&gt; sceglie una posizione, &lt;strong&gt;p1&lt;/strong&gt; è inviato allo sportello &lt;strong&gt;d4&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;se &lt;strong&gt;p1&lt;/strong&gt; ha 3 figli o più, &lt;strong&gt;p1&lt;/strong&gt; è inviato allo sportello &lt;strong&gt;d5&lt;/strong&gt; per proseguire con la procedura;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un approccio &amp;ldquo;strutturato&amp;rdquo; al problema può consistere nello scrivere una funzione in cui l&amp;rsquo;intera procedura è espressa con una serie di &lt;em&gt;if-else&lt;/em&gt; e uno &lt;em&gt;switch&lt;/em&gt; (nel caso del numero di figli).&lt;/p&gt;

&lt;p&gt;Il progetto relativo a questo articolo è disponibile su &lt;a href=&#34;https://github.com/broomburgo/NoCountryForIfElse&#34;&gt;GitHub&lt;/a&gt;: suggerisco di controllare il codice nel progetto man mano che si prosegue nella lettura dell&amp;rsquo;articolo; i file &lt;code&gt;.swift&lt;/code&gt; sono semplici file di testo, e possono essere visualizzati con qualsiasi editor. Nel file &lt;code&gt;common.swift&lt;/code&gt; sono indicate alcune strutture e funzioni comuni tra tutte le soluzioni al problema proposto. In particolare, indicheremo una &amp;ldquo;persona&amp;rdquo; con &lt;code&gt;struct Person&lt;/code&gt;, in sostanza un &lt;em&gt;value object&lt;/em&gt; immutabile che contiene i vari attributi considerati nel problema:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Person {
    
    let name: String
    let isYoung: Bool
    let childrenCount: Int
    let likedJobsMain: [String]
    let likedJobsSecondary: [String]
    let dislikedJobs: [String]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;idea è quella di scrivere una funzione &lt;code&gt;placeNameForPerson&lt;/code&gt; che ritorni il nome della &lt;em&gt;destinazione successiva&lt;/em&gt; per la persona in ingresso al problema: tale destinazione può essere un altro sportello &lt;code&gt;d2,d3,d4,d5&lt;/code&gt; oppure &lt;code&gt;outside&lt;/code&gt; nel caso in cui la persona lasci l&amp;rsquo;ufficio di collocamento senza lavoro. La funzione &lt;code&gt;placeNameForPerson_structured&lt;/code&gt; ritorna appunto il nome del luogo di destinazione della persona in ingresso, e richiede anche un secondo input, un &lt;code&gt;DeskWithJobs&lt;/code&gt; cioè uno sportello con diverse liste di lavori disponibili. Nel caso strutturato, l&amp;rsquo;intera logica di esecuzione è indicata nella funzione &lt;code&gt;placeNameForPerson_structured&lt;/code&gt;, ed è appunto basata su verifiche condizionali annidate, legate alle caratteristiche dei parametri in ingresso.&lt;/p&gt;

&lt;p&gt;Si vede subito che è piuttosto difficile capire cosa succeda nella funzione semplicemente leggendola: probabilmente, in un &amp;ldquo;vero&amp;rdquo; software, una funzione di questo tipo sarebbe annotata con &lt;strong&gt;un gran numero di commenti&lt;/strong&gt;. Inoltre, si vede facilmente che per tracciare un bug in una funzione del genere sarebbe necessario un debugging passo-passo, perché il gran numero di condizioni espresse rende la funzione sostanzialmente non testabile in maniera efficiente. Infine, se ci trovassimo a dover modificare la procedura, modificando delle condizioni o introducendone altre, avremmo vita dura.&lt;/p&gt;

&lt;p&gt;Il problema di fondo è in realtà dovuto al fatto che, con un approccio strutturato, stiamo &lt;strong&gt;mescolando l&amp;rsquo;intento con l&amp;rsquo;implementazione&lt;/strong&gt;: in questo caso l&amp;rsquo;intento è associare gruppi di condizioni a specifici sportelli &amp;ldquo;target&amp;rdquo;, ma nella soluzione strutturata tali relazioni sono &amp;ldquo;nascoste&amp;rdquo; nel codice e devono essere dedotte da esso; se ad esempio ci venisse chiesto qual è lo sportello per una persona anziana con 2 figli, dovremmo necessariamente seguire il flusso di codice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;poiché la prima condizione è relativa al numero di figli, entriamo subito nel branch &lt;code&gt;childrenCount != 0&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;a questo punto entriamo nel &lt;code&gt;case 2&lt;/code&gt; per il numero di figli;&lt;/li&gt;
&lt;li&gt;c&amp;rsquo;è una condizione in base alla quale il codice verifica che c&amp;rsquo;è un lavoro disponibile;&lt;/li&gt;
&lt;li&gt;a scelta positiva lo sportello di destinazione è il &amp;ldquo;d4&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;dov&amp;rsquo;è la condizione &amp;ldquo;giovane/anziano&amp;rdquo;? C&amp;rsquo;è un bug nel codice? Analizzando il ramo &lt;code&gt;childrenCount == 0&lt;/code&gt; possiamo verificare che tale condizione è effettivamente analizzata, ma è semplicemente irrilevante per l&amp;rsquo;altro ramo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;È una strada relativamente lunga per capire una cosa semplice, ed è da notare che se volessimo fare delle modifiche, dovremmo sempre scorrere nuovamente l&amp;rsquo;intera procedura per verificare che abbiamo coperto tutti i casi possibili, e che non ci siano conflitti o ambiguità.&lt;/p&gt;

&lt;p&gt;Possiamo fare di meglio.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;esempio-soluzione-oo&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;esempio-soluzione-oo:c252b88516f644ca0545d16795aa645d&#34;&gt;Esempio: soluzione OO&lt;/h2&gt;

&lt;p&gt;Progettare una soluzione a oggetti è spesso un&amp;rsquo;operazione &lt;strong&gt;tanto razionale quanto creativa&lt;/strong&gt;: in genere è possibile immaginare moltissimi design OO per risolvere uno stesso problema. Come detto, il nostro intento è di &lt;em&gt;astrarre&lt;/em&gt; il concetto di &lt;em&gt;condizione&lt;/em&gt;; basandoci su questo approccio, proviamo fissare qualche punto, in modo da identificare le responsabilità e i comportamenti da assegnare alla classi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vogliamo essere in grado di rappresentare ciascuna condizione come se fosse un &lt;em&gt;check&lt;/em&gt; separato dagli altri, quindi avremo certamente qualcosa che assomiglia a un tipo &lt;em&gt;Check&lt;/em&gt; caratterizzato da metodi che verificano se una certa persona passa un controllo o no;&lt;/li&gt;
&lt;li&gt;vogliamo rappresentare separatamente i check relativi a un attributo della persona, tipo il numero di figli, da quelli relativi alla lista di lavori tra cui scegliere;&lt;/li&gt;
&lt;li&gt;vogliamo costruire oggetti che siano in grado di combinare più check in un unico check;&lt;/li&gt;
&lt;li&gt;vogliamo creare un oggetto che rappresenti una lista di check e sia in grado di valutare se la persona passi uno dei check della lista, uno e solo uno, oppure non passi alcun check;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il file &lt;code&gt;oo.swift&lt;/code&gt; contiene l&amp;rsquo;implementazione completa della soluzione a oggetti. È definito un &lt;code&gt;protocol PersonCheckType&lt;/code&gt;, cioè un&amp;rsquo;interfaccia che dichiara un metodo &lt;code&gt;personIsValid&lt;/code&gt; che verifica se una certa &lt;code&gt;Person&lt;/code&gt; passa il check:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol PersonCheckType {
    func personIsValid(person: Person) -&amp;gt; Bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sono quindi dichiarate alcune classi di tipo &lt;code&gt;PersonCheckType&lt;/code&gt; che permettono di verificare singolarmente ciascun attributo intrinseco di una &lt;code&gt;Person&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Il tipo &lt;code&gt;JobsType&lt;/code&gt; dichiara semplicemente un attributo &lt;code&gt;availableJobs&lt;/code&gt; per raccogliere i lavori disponibili nei vari casi: da esso derivano altri &lt;em&gt;check&lt;/em&gt;, a loro volta di tipo &lt;code&gt;PersonCheckType&lt;/code&gt;, che verificano se una persona sia valida dal punto di vista dei lavori preferiti.&lt;/p&gt;

&lt;p&gt;Infine, il tipo &lt;code&gt;NextDeskType&lt;/code&gt; dichiara un metodo &lt;code&gt;nextDeskNameForPerson&lt;/code&gt; in base al quale è possibile definire quale sia il nome del prossimo sportello per una persona; il metodo ritorna &lt;code&gt;String?&lt;/code&gt; perché per una certa persona potrebbe non essere disponibile alcuno sportello:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol NextDeskType {
    func nextDeskNameForPerson(person: Person) -&amp;gt; String?
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dal tipo &lt;code&gt;NextDeskType&lt;/code&gt; deriviamo le seguenti classi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CheckNode&lt;/code&gt;, che rappresenta un nodo nella struttura decisionale del software;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CheckStructure&lt;/code&gt;, che rappresenta l&amp;rsquo;intera struttura di nodi;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In effetti, l&amp;rsquo;implementazione di &lt;code&gt;nextDeskNameForPerson&lt;/code&gt; in &lt;code&gt;CheckStructure&lt;/code&gt; corrisponde esattamente alla soluzione del problema posto: trovare il nome dello sportello di destinazione.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;idea è quella di creare alcuni semplici &lt;strong&gt;check unitari&lt;/strong&gt;, usando le varie classi di tipo &lt;code&gt;PersonCheckType&lt;/code&gt;, e combinare questi check in oggetti concreti di classe &lt;code&gt;CheckNode&lt;/code&gt;, definendo la nostra &lt;code&gt;CheckStructure&lt;/code&gt;. In puro stile OO, abbiamo definito classi chiamate &lt;code&gt;MultipleCheck&lt;/code&gt; e &lt;code&gt;ComposedCheck&lt;/code&gt; per poter comporre più check, e &lt;code&gt;FailingCheck&lt;/code&gt; per poter incapsulare un check di cui si richiede il fallimento. Nessuno dei metodi implementati presenta strutture decisionali che influenzino la &lt;em&gt;business logic&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Come esempio si riporta l&amp;rsquo;implementazione della classe &lt;code&gt;ChildrenCountCheck&lt;/code&gt;, che si occupa di verificare se una persona abbia un certo numero di figli:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ChildrenCountCheck: PersonCheckType {
    
    let childrenCount: Int
    init(_ childrenCount: Int) {
        self.childrenCount = childrenCount
    }
    
    func personIsValid(person: Person) -&amp;gt; Bool {
        return person.childrenCount == childrenCount
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;oggetto &lt;code&gt;structure&lt;/code&gt; definito nel file &lt;code&gt;main.swift&lt;/code&gt; presenta la lista delle condizioni, sotto forma di oggetti adeguatamente configurati; come si può vedere, la lista è ben leggibile e le condizioni sono chiare: siamo quindi riusciti a &lt;em&gt;dichiarare&lt;/em&gt; l&amp;rsquo;intento in maniera semplice e separata dai dettagli di implementazione.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;esempio-soluzione-funzionale&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;esempio-soluzione-funzionale:c252b88516f644ca0545d16795aa645d&#34;&gt;Esempio: soluzione funzionale&lt;/h2&gt;

&lt;p&gt;Nello strutturare la soluzione OO abbiamo adottato un &lt;strong&gt;principio di composizione&lt;/strong&gt;: oggetti dal comportamento semplice, adeguatamente preparati, composti tra loro per poter ottenere strutture più complesse. In particolare ciascuno dei nostri oggetti rappresenta uno specifico &lt;em&gt;comportamento unitario&lt;/em&gt;, e i vari &lt;em&gt;comportamenti&lt;/em&gt; sono combinati per ottenere un &lt;em&gt;comportamento composto&lt;/em&gt;. &lt;strong&gt;L&amp;rsquo;astrazione regge&lt;/strong&gt;, e riusciamo ad accettare il fatto che gli oggetti &lt;em&gt;check&lt;/em&gt; siano scatole chiuse che incapsulano una singola decisione su una persona: creando una scatola più grande, con dentro scatole più piccole, possiamo rappresentare una condizione più complessa. Tuttavia ci sono due problemi tipici dell&amp;rsquo;approccio OO:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ogni singola classe richiede molto codice solo per costruire l&amp;rsquo;astrazione di &amp;ldquo;decisione nella scatola&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;la composizione tra oggetti è basata sui metodi degli oggetti stessi, la qual cosa comporta, di nuovo, la scrittura di molto codice, che può offuscare l&amp;rsquo;intento;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;È possibile ottenere più chiaramente lo stesso risultato, cioè creare una struttura decisionale complessa a partire da componenti semplici, usando uno stile di &lt;strong&gt;programmazione funzionale&lt;/strong&gt;. Il codice funzionale è descritto nel file &lt;code&gt;functional.swift&lt;/code&gt;. Partiamo sempre dall&amp;rsquo;immutabile &lt;code&gt;struct Person&lt;/code&gt; e definiamo, per comodità, un altro semplice contenitore di dati, &lt;code&gt;struct DeskNode&lt;/code&gt;, che accoppia il nome di un nodo al nome di uno sportello di destinazione. Per il resto, definiremo solo ed esclusivamente funzioni, modellizzando l&amp;rsquo;intero problema con una serie di trasformazioni di dati.&lt;/p&gt;

&lt;p&gt;In questo caso &lt;code&gt;PersonCheck&lt;/code&gt; è &lt;strong&gt;un tipo di funzione&lt;/strong&gt;, che associa una &lt;code&gt;Person&lt;/code&gt; a un &lt;code&gt;Bool&lt;/code&gt;. Definiamo inoltre il tipo di funzione &lt;code&gt;PersonNode&lt;/code&gt;, che associa un certo &lt;code&gt;DeskNode&lt;/code&gt; a una &lt;code&gt;Person&lt;/code&gt;, e che ha sostanzialmente lo scopo che aveva il metodo &lt;code&gt;nextDeskNameForPerson&lt;/code&gt; nella soluzione a oggetti.&lt;/p&gt;

&lt;p&gt;Rappresentiamo infine i vari &amp;ldquo;nodi&amp;rdquo; con una funzione del tipo &lt;code&gt;JobsNode&lt;/code&gt;, che costruisce un &lt;code&gt;PersonNode&lt;/code&gt; in base a un certo &lt;code&gt;PersonCheck&lt;/code&gt;: in questo modo, per costruire una lista di &lt;code&gt;PersonNode&lt;/code&gt; sarà sufficiente applicare i vari &lt;em&gt;check&lt;/em&gt; (&lt;code&gt;PersonCheck&lt;/code&gt;) ai rispettivi nodi (&lt;code&gt;JobsNode&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Il metodo più spesso adottato in programmazione funzionale per comporre le funzioni è quello di definire degli &lt;strong&gt;operatori personalizzati&lt;/strong&gt;. Vogliamo ad esempio comporre i vari &lt;code&gt;PersonCheck&lt;/code&gt; come se componessimo dei semplici &lt;code&gt;Bool&lt;/code&gt;, quindi ad esempio definendo degli operatori &lt;strong&gt;AND&lt;/strong&gt; e &lt;strong&gt;OR&lt;/strong&gt;. Ad imitazione dei classici &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; e &lt;code&gt;||&lt;/code&gt; definiremo rispettivamente gli operatori &lt;code&gt;&amp;lt;&amp;amp;&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt;, copiando regole di &lt;a href=&#34;https://en.wikipedia.org/wiki/Operator_associativity&#34;&gt;precedenza e associatività&lt;/a&gt; dalla libreria standard. Per migliorare la leggibilità e la chiarezza della composizione tra funzioni, definiremo anche un operatore di &lt;em&gt;applicazione di funzione&lt;/em&gt;, nel seguente modo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;infix operator &amp;lt;*&amp;gt; {
    associativity left
    precedence 100
}
func &amp;lt;*&amp;gt; &amp;lt;A,B&amp;gt; (left: A -&amp;gt; B, right: A) -&amp;gt; B {
    return left(right)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vediamo dalla definizione che l&amp;rsquo;operatore &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; in sostanza &lt;em&gt;applica&lt;/em&gt; un argomento (posizionato a destra dell&amp;rsquo;operatore) a una certa funzione (posizionata a sinistra dell&amp;rsquo;operatore): esso rappresenta quindi un modo alternativo di applicare una funzione rispetto allo scrivere i suoi argomenti &lt;strong&gt;tra parentesi&lt;/strong&gt;, ed è particolarmente adatto a migliorare la leggibilità del codice quando usiamo &lt;a href=&#34;https://en.wikipedia.org/wiki/Higher-order_function&#34;&gt;funzioni di ordine superiore&lt;/a&gt;. Vediamo gli operatori all&amp;rsquo;opera nel file &lt;code&gt;main.swift&lt;/code&gt;, quando definiamo i nostri nodi, ad esempio:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;node(&amp;quot;old&amp;quot;, nextDeskName: &amp;quot;d3&amp;quot;)
    &amp;lt;*&amp;gt; oldCheck
    &amp;lt;&amp;amp;&amp;gt; mustFail(childrenChecks)
    &amp;lt;&amp;amp;&amp;gt; checkExtendedJobs(availableJobsElderly)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La funzione sopraindicata costruisce un &lt;code&gt;PersonNode&lt;/code&gt; chiamato &lt;em&gt;old&lt;/em&gt; che ritorna lo sportello &lt;em&gt;d3&lt;/em&gt; se la &lt;code&gt;Person&lt;/code&gt; in ingresso rispetta un check composto formato dalle seguenti funzioni:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;oldCheck&lt;/code&gt;: la persona è anziana;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mustFail(childrenChecks)&lt;/code&gt;: la persona non deve avere figli;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkExtendedJobs(availableJobsElderly)&lt;/code&gt;: l&amp;rsquo;insieme dei lavori adatti agli anziani e l&amp;rsquo;insieme dei lavori preferiti dalla persona devono avere una qualche intersezione;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A un primo impatto lo stile funzionale può risultare poco comprensibile, ma è sufficiente capire le astrazioni di base sulle quali è realizzata la composizione funzionale per poterne apprezzare &lt;strong&gt;la potenza e l&amp;rsquo;espressività&lt;/strong&gt;. L&amp;rsquo;array &lt;code&gt;nodes&lt;/code&gt;, nel file &lt;code&gt;main.swift&lt;/code&gt;, contiene tutti i nodi del problema, rappresentati come funzioni: rispetto  alla soluzione a oggetti contenuta in &lt;code&gt;structure&lt;/code&gt;, quella funzionale appare più chiara e leggibile.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;una-verifica-empirica&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;una-verifica-empirica:c252b88516f644ca0545d16795aa645d&#34;&gt;Una verifica empirica&lt;/h2&gt;

&lt;p&gt;Nel progettare le soluzioni &amp;ldquo;OO&amp;rdquo; e &amp;ldquo;funzionale&amp;rdquo; si è specificamente scelto di costruire strutture di verifica nelle quali l&amp;rsquo;ordine con il quale i check sono eseguiti fosse irrilevante: in questo modo rimuoviamo una nota causa di complessità accidentale, quella del &amp;ldquo;controllo&amp;rdquo;, e cioè dell&amp;rsquo;&lt;strong&gt;ordine&lt;/strong&gt; con il quale le operazioni sono eseguite (ne abbiamo parlato &lt;a href=&#34;http://engineering.facile.it/programmazione-funzionale-perche-preoccuparsi/#cause-di-complessita&#34;&gt;qui&lt;/a&gt;). Per fare ciò è tuttavia necessario che i check presenti nella lista &lt;strong&gt;non siano ambigui&lt;/strong&gt;: al massimo un solo check deve poter passare per una certa persona. Probabilmente sarebbe possibile impostare un &lt;strong&gt;metodo formale&lt;/strong&gt; per poter provare che un determinato set di condizioni sia non-ambiguo, e scrivere quindi un test unitario basato su tale prova, ma in questo caso un approccio &lt;em&gt;empirico&lt;/em&gt; sembra più adatto, e &lt;strong&gt;più semplice&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Si è quindi scelto di procedere seguendo il metodo &lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt;: si tratta di una libreria scritta per il linguaggio &lt;a href=&#34;https://www.haskell.org&#34;&gt;Haskell&lt;/a&gt; che permette di testare in modo automatico che le funzioni rispettino determinate &lt;em&gt;proprietà&lt;/em&gt;. L&amp;rsquo;idea è quella di verificare che una funzione si comporti sempre nello stesso modo, testandola con &lt;strong&gt;un gran numero di input casuali&lt;/strong&gt;: nel nostro caso la funzione è proprio la lista di check, e l&amp;rsquo;input è un valore di tipo &lt;code&gt;Person&lt;/code&gt;. Per verificare che i check non siano ambigui possiamo semplicemente provarli con un gran numero di &lt;code&gt;Person&lt;/code&gt; generate casualmente: se per un certo valore di &lt;code&gt;Person&lt;/code&gt; due o più check risultano positivi, l&amp;rsquo;esecuzione del test si interrompe e sono stampati in console i nomi dei check incriminati. Se i check ambigui sono due, sarà sufficiente rendere uno di essi più specifico, ad esempio richiedendo che l&amp;rsquo;altro fallisca. Useremo qui il termine &lt;em&gt;QuickCheck&lt;/em&gt; per indicare il test empirico implementato, ma in realtà la libreria originale fa molto di più: rimando alla pagina &lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck&#34;&gt;linkata&lt;/a&gt; per tutte le informazioni.&lt;/p&gt;

&lt;p&gt;Le funzioni &lt;code&gt;quickCheck_oo&lt;/code&gt; e &lt;code&gt;quickCheck_functional&lt;/code&gt; implementano la funzionalità richiesta: generano un certo numero di &lt;code&gt;Person&lt;/code&gt; casuali, e verificano che il numero di &lt;code&gt;check&lt;/code&gt; superato per ogni &lt;code&gt;Person&lt;/code&gt; sia 0 o 1. Possiamo sfruttare immediatamente questo test aggiungendo un nuovo nodo. Supponiamo ad esempio che a un certo punto, dopo qualche tempo in cui il codice è stato usato con successo per risolvere il problema, si scelga di aggiungere una nuova condizione: è stato appositamente aperto uno sportello per persone anziane con un solo figlio. Si noti come modificare il codice della funzione &lt;code&gt;placeNameForPerson_structured&lt;/code&gt; sarebbe piuttosto complicato: probabilmente dovremmo modificare interi branch decisionali, &lt;strong&gt;aggiungendo la stessa condizione in diversi punti&lt;/strong&gt;, e la probabilità di sbagliare sarebbe molto alta. Con le altre due soluzioni, invece, si tratta semplicemente di aggiungere un nuovo check. Tuttavia, dopo aver aggiunto il nodo, se eseguiamo il programma vedremo che QuickCheck fallirà, stampando il seguente messaggio&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ambiguous nodes: [1 child, 1 child old]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;QuickCheck ci sta informando che i nodi chiamati &amp;ldquo;1 child&amp;rdquo; e &amp;ldquo;1 child old&amp;rdquo; sono &lt;strong&gt;ambigui&lt;/strong&gt;: in effetti, se la &lt;code&gt;Person&lt;/code&gt; ha un figlio ed è anziana, passeranno i check per entrambi i nodi. Per risolvere il problema sarà sufficiente introdurre una condizione di fallimento nel nodo &amp;ldquo;1 child&amp;rdquo;: perché esso passi, deve fallire il check di anzianità.&lt;/p&gt;

&lt;p&gt;Nel progetto è implementata anche una funzione &lt;code&gt;quickCheck_consistency&lt;/code&gt; che esegue un test di sicurezza del tipo &lt;em&gt;sanity check&lt;/em&gt;: verifica infatti che lo sportello di destinazione di un gran numero di &lt;code&gt;Person&lt;/code&gt; generate casualmente rimanga lo stesso nei 3 metodi implementati.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;conclusioni&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusioni:c252b88516f644ca0545d16795aa645d&#34;&gt;Conclusioni&lt;/h2&gt;

&lt;p&gt;Abbiamo visto tre metodi per risolvere uno stesso problema relativamente complesso, e in due di essi siamo riusciti a ottenere un sistema &lt;strong&gt;più facilmente gestibile&lt;/strong&gt;, estendibile e modificabile in sicurezza, lavorando a un &lt;strong&gt;più alto livello di astrazione&lt;/strong&gt;. In particolare il metodo &amp;ldquo;funzionale&amp;rdquo; ci ha permesso di scrivere codice più compatto, caratterizzato da un intento più evidente, al costo (basso) di un passo iniziale di astrazione in più, rappresentato dagli operatori personalizzati. Ma la chiave di lettura dell&amp;rsquo;intero processo è ancora una volta da ricercarsi nella già citata frase presente in &lt;em&gt;Structure and Interpretation of Computer Programs&lt;/em&gt;, che riporto nuovamente:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;programs must be written for people to read, and only incidentally for machines to execute&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Adottando uno stile più &lt;strong&gt;dichiarativo&lt;/strong&gt;, in cui il codice proprio della &lt;em&gt;business logic&lt;/em&gt; &amp;ldquo;dichiara l&amp;rsquo;intento&amp;rdquo;, descrivendo il &amp;ldquo;cosa&amp;rdquo; e non il &amp;ldquo;come&amp;rdquo;, è possibile scrivere software più chiaro e leggibile. Tale software sarà probabilmente anche più &lt;em&gt;testabile&lt;/em&gt;, perché basato su &lt;strong&gt;componenti atomici&lt;/strong&gt; a più basso livello, individualmente facili da testare, che sono combinati attraverso strutture di composizione, anch&amp;rsquo;esse agilmente testabili e provabili. L&amp;rsquo;obiettivo finale è quello di realizzare architetture software che siano in grado di &lt;strong&gt;risolvere automaticamente i problemi&lt;/strong&gt;, descritti nel codice sfruttando gli &lt;strong&gt;elementi costruttivi di base&lt;/strong&gt;. Abbiamo infine visto come un approccio misto tra &amp;ldquo;ragionato&amp;rdquo; e &amp;ldquo;empirico&amp;rdquo; possa garantire ottimi risultati; il ragionamento &lt;em&gt;a priori&lt;/em&gt; e la verifica &lt;em&gt;a posteriori&lt;/em&gt; sono entrambi strumenti utili, ma la loro unione risulta essere particolarmente potente: d&amp;rsquo;altronde, ogni disciplina scientifica richiede sia il ragionamento logico-matematico per la definizione delle teorie, sia la verifica sperimentale per poterne testare la validità.&lt;/p&gt;

&lt;p&gt;Gli strumenti sono a disposizione, basta &lt;strong&gt;iniziare ad usarli&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Php Summer Camp 2015</title>
      <link>/blog/ita/php-summer-camp-2015/</link>
      <pubDate>Tue, 08 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/php-summer-camp-2015/</guid>
      <description>

&lt;h1 id=&#34;introduzione:58029b8459d31227431cf79c0465e6bb&#34;&gt;Introduzione&lt;/h1&gt;

&lt;p&gt;Dal 26 al 29 agosto 2015 ho avuto l&amp;rsquo;occasione di partecipare al &lt;a href=&#34;http://2015.phpsummercamp.com/&#34;&gt;&lt;strong&gt;PhpSummerCamp&lt;/strong&gt;&lt;/a&gt; in Rovigno (Croazia).
Negli stessi giorni e nello stesso luogo si è svolto anche il &lt;a href=&#34;http://2015.ezsummercamp.com/&#34;&gt;&lt;strong&gt;SummerCamp EzPublish&lt;/strong&gt;&lt;/a&gt;.
Ciò ha consentito di accrescere ulteriormente la platea di partecipanti con cui è stato possibile condividere idee e soluzioni.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;evento è costituito da numerosi &lt;strong&gt;workshop&lt;/strong&gt; orientati allo sviluppo di applicazioni con il &lt;a href=&#34;http://symfony.com&#34;&gt;framework PHP Symfony&lt;/a&gt;.
Le mattine e le prime metà del pomeriggio erano interamente dedicati ai workshop.
Nel tempo rimanente venivano condotte varie attività dedicate alla community e al confronto tra i partecipanti.&lt;/p&gt;

&lt;p&gt;In questo articolo descriverò gli eventi a cui ho partecipato e gli argomenti trattati, con particolare riguardo a ciò che mi ha personalmente colpito di più.&lt;/p&gt;

&lt;h1 id=&#34;indice:58029b8459d31227431cf79c0465e6bb&#34;&gt;Indice&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#mercoledi&#34;&gt;Mercoledì 26 agosto&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ci&#34;&gt;Continuous integration with PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modernising&#34;&gt;Modernising the legacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#frontend&#34;&gt;Frontend as design to backend middleware or some JS concepts that any good PHP dev should know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#debate&#34;&gt;Celebrity debate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#giovedi&#34;&gt;Giovedì 27 agosto&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#coupling&#34;&gt;Loose coupling in practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#puli&#34;&gt;Next-gen package development with Puli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unconference&#34;&gt;Unconference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#venerdi&#34;&gt;Venerdì 28 agosto&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#profiling&#34;&gt;Profiling PHP Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#symfony3&#34;&gt;Migrating to Symfony 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#experts&#34;&gt;Meet the experts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusione&#34;&gt;Conclusione&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;mercoledi&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;mercoledì-26-agosto:58029b8459d31227431cf79c0465e6bb&#34;&gt;Mercoledì 26 agosto&lt;/h1&gt;

&lt;p&gt;Un brevissimo keynote di apertura ha illustrato la storia del SummerCamp. Esso inizialmente ospitava soltanto la sezione EzPublish; solo negli ultimi anni è stata aggiunta la parte più generica relativa a Symfony e PHP.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;ci&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;continuous-integration-with-php-michele-orselli:58029b8459d31227431cf79c0465e6bb&#34;&gt;Continuous integration with PHP (Michele Orselli)&lt;/h3&gt;

&lt;p&gt;Il primo workshop ha illustrato come configurare e utilizzare &lt;a href=&#34;https://jenkins-ci.org/&#34;&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;&lt;/a&gt;.
L&amp;rsquo;obiettivo della sessione è stato abilitare un &lt;strong&gt;sistema di continuous integration&lt;/strong&gt; su un piccolo progetto Symfony che già aveva alcune test suite.
È stato interessante notare la semplicità d&amp;rsquo;uso e di configurazione del sistema Jenkins.
Si è visto come installare e configurare il &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Clover+PHP+Plugin&#34;&gt;&lt;strong&gt;Clover PHP Plugin&lt;/strong&gt;&lt;/a&gt; per monitorare il cambiamento dello statement coverage dopo ciascuna build.
È stato dedicato anche dello spazio per parlare di &lt;a href=&#34;https://www.phing.info/&#34;&gt;&lt;strong&gt;Phing&lt;/strong&gt;&lt;/a&gt;, tool molto utile per realizzare build automatiche.
Sono state approfondite alcune configurazioni particolari di PhpUnit che consentono di dividere correttamente i test negli insiemi: test unitari, test d&amp;rsquo;integrazione e test funzionali.
È stato interessante veder utilizzare &lt;a href=&#34;https://phpunit.de/manual/current/en/database.html&#34;&gt;&lt;strong&gt;l&amp;rsquo;estenzione di PHPUnit Database&lt;/strong&gt;&lt;/a&gt; per gestire automaticamente la connessione al database, la creazione dello schema e il caricamento/reset delle fixtures per ogni test case.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;modernising&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;modernising-the-legacy-marek-matulka:58029b8459d31227431cf79c0465e6bb&#34;&gt;Modernising the legacy (Marek Matulka)&lt;/h3&gt;

&lt;p&gt;Il presentatore ha illustrato le feature implementate da un&amp;rsquo;applicazione PHP legacy. Il codice era molto disordinato e praticamente impossibile da testare.
Logica di business, data retrieval e viste erano mescolate in un&amp;rsquo;applicazione che non era dotata nemmeno di un singolo &lt;a href=&#34;https://it.wikipedia.org/wiki/Front_Controller_pattern&#34;&gt;front-controller&lt;/a&gt;.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Modernising legacy w/ &lt;a href=&#34;https://twitter.com/super_marek&#34;&gt;@super_marek&lt;/a&gt; is kicking off at &lt;a href=&#34;https://twitter.com/hashtag/phpsummer?src=hash&#34;&gt;#phpsummer&lt;/a&gt; &lt;a href=&#34;http://t.co/aOIt1CWhNb&#34;&gt;pic.twitter.com/aOIt1CWhNb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jakub Zalas (@jakub_zalas) &lt;a href=&#34;https://twitter.com/jakub_zalas/status/636506399288201216&#34;&gt;August 26, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
L&amp;rsquo;applicazione era un semplice sito di e-commerce per la vendita di articoli e comprendeva una sezione di checkout.
Nel dover aggiungere un nuova funzionalità - il calcolo real-time delle spese di spedizione - si è voluto introdurre alcune componenti di Symfony per migliorare la qualità del sistema.
È stato illustrato come introdurre e configurare le seguenti componenti: &lt;a href=&#34;http://symfony.com/it/doc/current/components/dependency_injection/introduction.html&#34;&gt;&lt;strong&gt;DependencyInjection&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;http://twig.sensiolabs.org/&#34;&gt;&lt;strong&gt;Twig&lt;/strong&gt;&lt;/a&gt; e &lt;a href=&#34;http://symfony.com/it/doc/current/components/http_foundation/index.html&#34;&gt;&lt;strong&gt;HttpFoundation&lt;/strong&gt;&lt;/a&gt;.
È stato interessante notare come i componenti di Symfony fossero altamente disaccoppiati e, per questo, introducibili sequenzialmente e senza grandi difficoltà.
Il miglioramento del design ha permesso di implementare alcuni test unitari per la nuova funzionalità. Si è visto quindi come configurare l&amp;rsquo;ambiente e i tool per il testing.
La struttura del workshop era particolare: ciascun macro-task era diviso in molti sotto-task. Il repository Git del progetto già conteneva, in branch diversi, tutte le soluzioni. Ciò ha consentito di evitare ritardi causati dai partecipanti che non riuscivano, per vari problemi, a seguire l&amp;rsquo;avanzamento della sessione.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;frontend&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;frontend-as-design-to-backend-middleware-or-some-js-concepts-that-any-good-php-dev-should-know-damir-brekalo:58029b8459d31227431cf79c0465e6bb&#34;&gt;Frontend as design to backend middleware or some JS concepts that any good PHP dev should know (Damir Brekalo)&lt;/h3&gt;

&lt;p&gt;Purtroppo, data la scarsa presenza di partecipanti con competenze avanzate di JavaScript, la presentazione ha trattato argomenti abbastanza basilari rispetto a quelli pianificati.
Si è visto come applicare il &lt;a href=&#34;https://it.wikipedia.org/wiki/Programmazione_orientata_agli_oggetti&#34;&gt;paradigma object oriented&lt;/a&gt; in JavaScript con numerosi confronti di funzionalità e sintassi tra JS e PHP che hanno consentito a tutti di comprendere l&amp;rsquo;argomento.
La seconda parte del workshop ha analizzato e proposto soluzioni al problema dell&amp;rsquo;import di librerie di terze parti in applicazioni complesse.
È stato analizzato un progetto che implementava una &lt;a href=&#34;https://en.wikipedia.org/wiki/Single-page_application&#34;&gt;single page application&lt;/a&gt; senza alcun uso di framework. Essa era soltanto una composizione di più componenti eterogenei tra di loro.
Ciò ha permesso di apprendere che &lt;strong&gt;la scelta affrettata di framework complessi non è sempre la migliore&lt;/strong&gt;. Talvolta può essere più produttivo ricorrere a componenti specifici per il problema da risolvere.
In generale il workshop è stato interessante ma, rispetto agli altri, conteneva molto meno lavoro pratico.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;debate&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;celebrity-debate:58029b8459d31227431cf79c0465e6bb&#34;&gt;Celebrity debate&lt;/h3&gt;

&lt;p&gt;È stata una gara scherzosa tra i due partecipanti Ryan Weaver e Bernhard Schussek nel sostenere le loro opinioni su molteplici domande, alcune delle quali anche stabilite dal pubblico.
Alcuni esempi di domande: Mac vs Linux, &lt;a href=&#34;http://engineering.facile.it/programmazione-funzionale-perche-preoccuparsi/&#34;&gt;Functional programming&lt;/a&gt; vs &lt;a href=&#34;https://it.wikipedia.org/wiki/Programmazione_orientata_agli_oggetti&#34;&gt;OOP&lt;/a&gt;, Tea vs Coffee, USA vs Europe
Il vincitore Ryan Weaver è stato selezionato dal pubblico in base ad un conteggio di consensi.
È stato un momento divertente con argomenti molto vari anche al di fuori dell&amp;rsquo;ambito informatico.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/symfony&#34;&gt;@symfony&lt;/a&gt; vs &lt;a href=&#34;https://twitter.com/laravelphp&#34;&gt;@laravelphp&lt;/a&gt; debate on &lt;a href=&#34;https://twitter.com/hashtag/ezsummer?src=hash&#34;&gt;#ezsummer&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/phpsummer?src=hash&#34;&gt;#phpsummer&lt;/a&gt; wanna bet on the winner? :-) &lt;a href=&#34;http://t.co/f7HXqkoLXU&#34;&gt;pic.twitter.com/f7HXqkoLXU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Igor Vrdoljak (@ivrdoljak) &lt;a href=&#34;https://twitter.com/ivrdoljak/status/636571466104967168&#34;&gt;August 26, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;giovedi&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;giovedì-27-agosto:58029b8459d31227431cf79c0465e6bb&#34;&gt;Giovedì 27 agosto&lt;/h1&gt;

&lt;p&gt;&lt;a name=&#34;coupling&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;loose-coupling-in-practice-jakub-zalas:58029b8459d31227431cf79c0465e6bb&#34;&gt;Loose coupling in practice (Jakub Zalas)&lt;/h3&gt;

&lt;p&gt;L&amp;rsquo;obiettivo della sessione era disaccoppiare l&amp;rsquo;applicazione &lt;a href=&#34;http://symfony.com/blog/introducing-the-symfony-demo-application&#34;&gt;Symfony Demo&lt;/a&gt; da &lt;a href=&#34;http://www.doctrine-project.org/&#34;&gt;Doctrine ORM/DBAL&lt;/a&gt; e di consentire lo switch ad altre strategie di storage.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Quite a crowd at &lt;a href=&#34;https://twitter.com/jakub_zalas&#34;&gt;@jakub_zalas&lt;/a&gt; workshop on loose coupling with &lt;a href=&#34;https://twitter.com/symfony&#34;&gt;@Symfony&lt;/a&gt;! &lt;a href=&#34;https://twitter.com/PHPSummerCamp&#34;&gt;@PHPSummerCamp&lt;/a&gt; &lt;a href=&#34;http://t.co/KnvqaafRfG&#34;&gt;pic.twitter.com/KnvqaafRfG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Marek ✈ (@super_marek) &lt;a href=&#34;https://twitter.com/super_marek/status/636805256987455488&#34;&gt;August 27, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
Nonostante il sistema fosse un semplice gestionale per articoli di blog, il lavoro si è subito rilevato molto più lungo e complesso del previsto.
È stato interessante notare come Symfony full-stack abbia numerosi legami &amp;ldquo;nascosti&amp;rdquo; con Doctrine. Esempi sono il componente &lt;a href=&#34;http://symfony.com/it/doc/current/book/security.html&#34;&gt;Security&lt;/a&gt; e il &lt;a href=&#34;http://symfony.com/it/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html&#34;&gt;ParamConverter&lt;/a&gt;.
Si è iniziato nel creare i &lt;strong&gt;repository as services&lt;/strong&gt; in modo da consentire la rimozione di qualsiasi riferimento a Doctrine nei controller.
Successivamente sono stati realizzate delle classi ad hoc per i componenti: Security (definizione esplicita dallo UserProvider) e ParamConverter.
In seguito è stato richiesto di implementare una nuova strategia di storage utilizzando &lt;a href=&#34;http://php.net/manual/en/book.pdo.php&#34;&gt;PDO&lt;/a&gt; e &lt;a href=&#34;https://it.wikipedia.org/wiki/Structured_Query_Language&#34;&gt;SQL&lt;/a&gt;.
Per questo task è stato interessante notare l&amp;rsquo;uso frequente del design pattern &lt;a href=&#34;https://it.wikipedia.org/wiki/Adapter_pattern&#34;&gt;Adapter&lt;/a&gt; nonché la definizione di &lt;strong&gt;alias di servizi&lt;/strong&gt; per consentire di spostarsi da una modalità di storage all&amp;rsquo;altra senza troppe modifiche.
L&amp;rsquo;applicazione comprendeva già numerosi test che consentivano di verificare il corretto funzionamento dell&amp;rsquo;applicazione anche su differenti driver di persistenza.
Successivamente è stato richiesto di utilizzare il &lt;a href=&#34;http://doctrine-orm.readthedocs.org/en/latest/reference/caching.html&#34;&gt;componente cache di Doctrine&lt;/a&gt; per introdurre un layer di ottimizzazione tra applicazione e persistenza PDO.
A causa del poco tempo rimasto non è stato possibile affrontare l&amp;rsquo;ultimo task: implementare una nuova astrazione di storage su &lt;a href=&#34;https://www.elastic.co/&#34;&gt;elastic-search&lt;/a&gt;.
Anche in questo workshop le soluzioni ai problemi erano già presenti nel repository Git. Ciò ha consentito di continuare e approfondire l&amp;rsquo;argomento anche dopo il termine della sessione.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;puli&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;next-gen-package-development-with-puli-bernhard-schussek:58029b8459d31227431cf79c0465e6bb&#34;&gt;Next-gen package development with Puli (Bernhard Schussek)&lt;/h3&gt;

&lt;p&gt;Questa sessione è stata divisa in due parti. La prima è una presentazione del &lt;strong&gt;progetto &lt;a href=&#34;http://docs.puli.io/en/latest/&#34;&gt;Puli&lt;/a&gt;&lt;/strong&gt;. Sono state illustrate le funzionalità dell&amp;rsquo;applicazione e i problemi che essa risolve.
Puli è un gestore della configurazione di pacchetti che mira a rendere &lt;strong&gt;le librerie PHP più omogenee e più semplici da configurare&lt;/strong&gt;. Esso, per funzionare, usa &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; che continua a gestire il package retrieval e l&amp;rsquo;autoloading.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Finally learning about &lt;a href=&#34;https://twitter.com/hashtag/Puli?src=hash&#34;&gt;#Puli&lt;/a&gt; from &lt;a href=&#34;https://twitter.com/webmozart&#34;&gt;@webmozart&lt;/a&gt;. Great stuff! &lt;a href=&#34;https://twitter.com/hashtag/phpsummer?src=hash&#34;&gt;#phpsummer&lt;/a&gt; &lt;a href=&#34;http://t.co/l72oOuwtjY&#34;&gt;pic.twitter.com/l72oOuwtjY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Paweł Jędrzejewski (@pjedrzejewski) &lt;a href=&#34;https://twitter.com/pjedrzejewski/status/636889138252357632&#34;&gt;August 27, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
Puli consente l&amp;rsquo;accesso alle risorse di un pacchetto in modo semplice e veloce. Le risorse qualitativamente possono essere molto varie: immagini, template, file per la localizzazione, fogli di stile, basi di dati, ecc.
Puli introduce il concetto di &lt;strong&gt;percorso virtuale&lt;/strong&gt;, un nuovo standard per l&amp;rsquo;accesso alle risorse condivise da uno o più pacchetti.
Ciascun componente Puli definisce dei mappings che consentono di tradurre un percorso virtuale in percorso reale.
Questo significa che è possibile richiedere a Puli una risorsa locata virtualmente in &lt;code&gt;/vendorName/projectName/config/file.xml&lt;/code&gt; senza conoscere esattamente dove tale risorsa sarà collocata nel file system.
Puli offre inoltre la possibilità di modificare alcune risorse tramite il meccanismo dell&amp;rsquo;&lt;strong&gt;overriding&lt;/strong&gt;.
Similmente al composer.json, la configurazione di Puli risiede nel file puli.json.
Puli è integrabile con altre applicazioni per l&amp;rsquo;installazione e l&amp;rsquo;aggiornamento degli assets.
La seconda parte della presentazione è stata dedicata alla pratica.
L&amp;rsquo;obbiettivo era usare alcuni pacchetti Puli compatibili su un&amp;rsquo;applicazione &lt;a href=&#34;http://silex.sensiolabs.org/&#34;&gt;Silex&lt;/a&gt; per concludere lo sviluppo varie funzionalità.
È stato possibile vedere come Puli sia integrabile con altri tool per la gestione degli assets (nell&amp;rsquo;esercitazione è stato usato &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;).
Il format del workshop è stato diverso dal solito: ogni partecipante aveva a disposizione l&amp;rsquo;elenco dei problemi da risolvere con i relativi tutorial.
Ciò a consentito ai partecipanti di proseguire in autonomia senza ritardi collettivi.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;unconference&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;unconference:58029b8459d31227431cf79c0465e6bb&#34;&gt;Unconference&lt;/h3&gt;

&lt;p&gt;A fine giornata si è svolta la sessione &amp;ldquo;unconference&amp;rdquo;.
Sono stati trattati diversi argomenti interessanti, tra cui:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://it.wikipedia.org/wiki/HTTP/2&#34;&gt;&lt;strong&gt;HTTP 2&lt;/strong&gt;&lt;/a&gt; e gestione migliorata della rete;&lt;/li&gt;
&lt;li&gt;analisi delle strategie per consumer di &lt;a href=&#34;https://en.wikipedia.org/wiki/Message_queue&#34;&gt;&lt;strong&gt;code di messaggi&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/a&gt; per eseguire applicazioni desktop dotate di GUI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;venerdi&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;venerdì-28-agosto:58029b8459d31227431cf79c0465e6bb&#34;&gt;Venerdì 28 agosto&lt;/h1&gt;

&lt;p&gt;&lt;a name=&#34;profiling&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;profiling-php-apps-nicolas-grekas:58029b8459d31227431cf79c0465e6bb&#34;&gt;Profiling PHP Apps (Nicolas Grekas)&lt;/h3&gt;

&lt;p&gt;Una prima presentazione ha illustrato i concetti fondamentali della &lt;a href=&#34;https://en.wikipedia.org/wiki/Profiling_(computer_programming&#34;&gt;&lt;strong&gt;profilazione&lt;/strong&gt;&lt;/a&gt;).
Sono state esaminate le tecniche principali di collezione delle informazioni: &lt;a href=&#34;https://en.wikipedia.org/wiki/Hooking&#34;&gt;&lt;strong&gt;function hooks&lt;/strong&gt;&lt;/a&gt; e &lt;strong&gt;sampling&lt;/strong&gt;, così come diversi tool per la profilazione: &lt;a href=&#34;http://xdebug.org/&#34;&gt;XDebug&lt;/a&gt;, &lt;a href=&#34;http://xhprof.io/&#34;&gt;Xhprof&lt;/a&gt; e &lt;a href=&#34;http://newrelic.com/&#34;&gt;New Relic&lt;/a&gt;.
Prove pratiche con questi tool hanno consentito di evidenziare le loro peculiarità e differenze. È stato interessante notare, ad esempio, l&amp;rsquo;accuratezza e la semplicità delle informazioni fornite dalla libreria Xhprof rispetto ai concorrenti.
Le prove pratiche hanno inoltre evidenziato che l&amp;rsquo;attività di profilazione non è semplice, soprattutto a causa del setup richiesto.
Anche l&amp;rsquo;interpretazione dei dati restituiti dal profiler può essere problematico: una buona rappresentazione delle informazioni conduce a soluzioni migliori.
Successivamente è stato introdotto il **profiler &lt;a href=&#34;https://blackfire.io/&#34;&gt;Blackfire**&lt;/a&gt;: una collezione di tecnologie che consentono di semplificare l&amp;rsquo;attività di profilazione.
È stata analizzata la sua struttura interna. Esso è composto da 4 componenti: il server Blackfire, l&amp;rsquo;agente collettore, l&amp;rsquo;estensione Php e il companion lato browser per avviare la profilazione.
In seguito si è discusso su come individuare i punti critici dell&amp;rsquo;applicazione e le strategie per risolvere i problemi.
Ad esempio si è visto che un &lt;strong&gt;autoloader non correttamente ottimizzato&lt;/strong&gt; rallenta significamente l&amp;rsquo;applicazione (sia pensi alla generazione dell&amp;rsquo;autoload non ottimizzato di Composer).
Le attività di Input/Output superflue causano rallentamenti, esempi sono le scritture sui &lt;strong&gt;log troppo verbosi&lt;/strong&gt;.
È stato un workshop davvero completo facilmente comprensibile anche dai principianti della profilazione.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;symfony3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;migrating-to-symfony-3-nicolas-grekas:58029b8459d31227431cf79c0465e6bb&#34;&gt;Migrating to Symfony 3 (Nicolas Grekas)&lt;/h3&gt;

&lt;p&gt;Questo workshop ha consentito di apprendere la &lt;strong&gt;roadmap a lungo termine del framework Symfony&lt;/strong&gt;.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;on the way to symfony 3 at &lt;a href=&#34;https://twitter.com/hashtag/phpsummer?src=hash&#34;&gt;#phpsummer&lt;/a&gt; with &lt;a href=&#34;https://twitter.com/nicolasgrekas&#34;&gt;@nicolasgrekas&lt;/a&gt; &lt;a href=&#34;http://t.co/vijn5ttzPG&#34;&gt;pic.twitter.com/vijn5ttzPG&lt;/a&gt;&lt;/p&gt;&amp;mdash; dbu (@dbu) &lt;a href=&#34;https://twitter.com/dbu/status/637233201635835904&#34;&gt;August 28, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
È stato annunciato che l&amp;rsquo;ultima versione LTS di Symfony 2 sarà &lt;strong&gt;la versione 2.8 completamente compatibile, quanto a funzionalità, con la versione 3.0&lt;/strong&gt;.
È interessante notare che non ci saranno cambiamenti stravolgenti per Symfony vesione 3.0: essa infatti rimuove soltanto le funzionalità deprecate nelle versioni precedenti.
Sono stati alresì spiegati i concetti di &lt;a href=&#34;http://engineering.facile.it/git-flow-semantic-versioning/&#34;&gt;versionamento semantico&lt;/a&gt; adottati dal framework a partire dalla versione 2.3.
L&amp;rsquo;obiettivo della sessione pratica è stato migrare l&amp;rsquo;applicazione &lt;em&gt;Symfony Demo&lt;/em&gt; alla versione Symfony 3.
Sono state esaminate diverse strategie per rilevare le deprecation: debug toolbar, file di log, fallimenti di test.
È stato inoltre annunciato che sarà presto possibile &lt;strong&gt;definire un servizio come deprecato nel service container&lt;/strong&gt;.
Ciò consente all&amp;rsquo;utente di rilevare subito eventuali utilizzi non corretti già durante la compilazione del container.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;experts&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;meet-the-experts:58029b8459d31227431cf79c0465e6bb&#34;&gt;Meet the experts&lt;/h3&gt;

&lt;p&gt;Diversi gruppi di persone si sono riunite per parlare di molteplici argomenti.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Ecommerce on Symfony roundtable at &lt;a href=&#34;https://twitter.com/PHPSummerCamp&#34;&gt;@PHPSummerCamp&lt;/a&gt; &lt;a href=&#34;http://t.co/RD8ueJX7Nj&#34;&gt;pic.twitter.com/RD8ueJX7Nj&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ivo Lukač (@ilukac) &lt;a href=&#34;https://twitter.com/ilukac/status/637288188231450625&#34;&gt;August 28, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
Ciascun gruppo comprendeva, tra gli altri partecipanti, un paio di persone esperte dell&amp;rsquo;argomento per moderare la discussione.
Io ho partecipato alla discussione di: &lt;a href=&#34;https://it.wikipedia.org/wiki/Commercio_elettronico&#34;&gt;&lt;strong&gt;E-commerce&lt;/strong&gt;&lt;/a&gt; su Symfony (con particolare riguardo a &lt;a href=&#34;http://sylius.org/&#34;&gt;Sylius&lt;/a&gt;), &lt;a href=&#34;https://it.wikipedia.org/wiki/Collaudo_del_software&#34;&gt;&lt;strong&gt;software testing&lt;/strong&gt;&lt;/a&gt; e &lt;strong&gt;&lt;a href=&#34;https://it.wikipedia.org/wiki/Application_programming_interface&#34;&gt;API&lt;/a&gt; design&lt;/strong&gt;.
È stato interessante discutere su come progettare architetture orientate a microservizi cercando di definire API stabili e solide.
È emerso anche che le &lt;strong&gt;applicazioni monolitiche&lt;/strong&gt; evolvono, a lungo termine, verso &lt;strong&gt;design complessi&lt;/strong&gt; che hanno frequenti &lt;strong&gt;problemi di manutenibilità&lt;/strong&gt;.
A tal proposito si parlava di build CI lente, deploy lento e isolamento delle responsabilità alquanto complessa.
Un confronto tra esperti, il miglior modo per chiudere la giornata.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;conclusione&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusione:58029b8459d31227431cf79c0465e6bb&#34;&gt;Conclusione&lt;/h1&gt;

&lt;p&gt;Il PhpSummerCamp è un evento particolare: presentazioni, discussioni, workshop e attività extra lo hanno reso interessante e divertente allo stesso tempo.
Tesi rafforzata dalla continua affluenza di sviluppatori che ogni anno non vogliono perdersi tale evento.
Il SummerCamp è il luogo ideale per chi vuole sentirsi parte delle comunità Php e EzPublish.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MiniIAD Vimercate 2015: reportage</title>
      <link>/blog/ita/miniiad-vimercate-2015-reportage/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/miniiad-vimercate-2015-reportage/</guid>
      <description>

&lt;p&gt;Lo scorso 23 Maggio 2015, si è tenuto a Vimercate, presso la sede di Alcatel-Lucent all&amp;rsquo;Energy Park, il &lt;a href=&#34;http://www.agileday.it/mini/2015/vimercate/&#34;&gt;Mini Italian Agile Day&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anche in occasione di questo evento Facile.it si è presentata con una piccola delegazione. Sono andato all&amp;rsquo;incontro cercando di polarizzare bene le mie aspettative della giornata. Da un evento della &lt;strong&gt;comunità Agile&lt;/strong&gt; mi aspetto un &lt;strong&gt;confronto&lt;/strong&gt;, una &lt;strong&gt;crescita&lt;/strong&gt;, nonché l&amp;rsquo;occasione di incontrare qualche volto amico, qualche ex collega o qualche guru a cui chiedere consiglio!&lt;/p&gt;

&lt;p&gt;Parlare di recensione della giornata mi sembra inappropriato. Preferisco soffermarmi su cosa mi ha colpito e cosa mi sono portato a casa da questa esperienza.&lt;/p&gt;

&lt;h2 id=&#34;welcome-coffee:1f5d804dca1b5af8fd406d2b72199bbf&#34;&gt;Welcome coffee&lt;/h2&gt;

&lt;p&gt;Partiamo dal primo impatto: la location. Beh, complimenti ad Alcatel perché ha una sede molto bella! raggiungerla in auto non è stato tanto difficile e tutto quel verde dentro e fuori dagli uffici trasmette una bella sensazione. Come al solito sono in ritardo, giusto il tempo di un caffè, offerto dal nostro host, e qualche stretta di mano e subito si comincia.&lt;/p&gt;

&lt;h2 id=&#34;keynote:1f5d804dca1b5af8fd406d2b72199bbf&#34;&gt;Keynote&lt;/h2&gt;

&lt;p&gt;Il keynote è di &lt;a href=&#34;https://twitter.com/ixhd&#34;&gt;Cliff Hazell&lt;/a&gt;, un ragazzo che fa l&amp;rsquo;agile coach in Spotify. Ha illustrato una &lt;strong&gt;tecnica di visualizzazione&lt;/strong&gt; della conoscenza e dei processi su una grande parete con dei post-it. Un qualcosa che mi ha ricordato l&amp;rsquo;&lt;a href=&#34;http://ziobrando.blogspot.it/2013/11/introducing-event-storming.html&#34;&gt;event storming&lt;/a&gt; che ho visto raccontare da &lt;a href=&#34;http://www.avanscoperta.it/it/author/a-brandolini/&#34;&gt;Alberto Brandolini&lt;/a&gt; a BetterSoftware, tuttavia mi è parso ci siano alcune differenze. In entrambi i metodi il risultato finale è &lt;strong&gt;una parete piena di post-it che spiegano il modello&lt;/strong&gt; da sviluppare. Nell&amp;rsquo;event storming, la creazione partecipata della parete è l&amp;rsquo;evoluzione degli stati del modello sono il punto focale. Non ho mai avuto il piacere di usare event storming, ma tutte le presentazioni che ho visto delineano il modo in cui la parete &amp;ldquo;si riempie&amp;rdquo;, mentre ho poche informazioni su come questa poi si traduca in software. Piuttosto, mi pare di aver colto che Cliff ponga molta enfasi su come man mano la conoscenza che stiamo visualizzando si evolva e man mano si traduca in componenti software. Mi intriga l&amp;rsquo;ipotesi di combinare le due cose!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/miniiad-vimercate-2015-reportage/visualization.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;agile-e-il-business-delle-aziende:1f5d804dca1b5af8fd406d2b72199bbf&#34;&gt;Agile e il business delle aziende&lt;/h2&gt;

&lt;p&gt;La mia giornata prosegue parlando di &lt;strong&gt;&lt;a href=&#34;http://www.ideastartup.it/startupzionario/&#34;&gt;Startup&lt;/a&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;a href=&#34;https://it.wikipedia.org/wiki/Produzione_snella&#34;&gt;Lean&lt;/a&gt;&lt;/strong&gt; con &lt;a href=&#34;https://twitter.com/felicepescatore&#34;&gt;Felice Pescatore&lt;/a&gt;. Una sessione sul percorso &amp;ldquo;&lt;a href=&#34;http://www.agileday.it/mini/2015/vimercate/#leanstartup&#34;&gt;dal garage al grattacielo&lt;/a&gt;&amp;rdquo;. Bello stile, coinvolgente! Ho già letto tanto su Lean, purtroppo non ho portato via nulla di nuovo.
Anche il talk successivo &lt;a href=&#34;http://www.agileday.it/mini/2015/vimercate/#Kanban_experiment&#34;&gt;Kanban experiment&lt;/a&gt;, su &lt;strong&gt;&lt;a href=&#34;https://it.wikipedia.org/wiki/Kanban&#34;&gt;Kanban&lt;/a&gt;&lt;/strong&gt;, non mi ha detto nulla di nuovo. Mi piace però constatare che molti gruppi di lavoro che si stanno avvicinando alle metodologie Agili, scelgono Kanban.&lt;/p&gt;

&lt;h2 id=&#34;large-scaling-scrum:1f5d804dca1b5af8fd406d2b72199bbf&#34;&gt;Large Scaling SCRUM&lt;/h2&gt;

&lt;p&gt;Dopo un buon pranzo, ho assistito ad una &lt;a href=&#34;http://www.agileday.it/mini/2015/vimercate/#LeSS_Adoption&#34;&gt;sessione&lt;/a&gt; su &lt;strong&gt;&lt;a href=&#34;http://less.works/&#34;&gt;Less&lt;/a&gt;&lt;/strong&gt;. E quì rimango veramente sorpreso in positivo. Non conoscevo Less e penso se ne dovrebbe parlare di più, soprattutto in aziende con tanti gruppi di lavoro diversi. &lt;a href=&#34;https://www.youtube.com/watch?v=PTjnw9EXsD4&#34;&gt;Francesco Sferlazza&lt;/a&gt; ha raccontato come in Alcatel hanno introdotto Less (Large Scaling SCRUM). In sostanza, si tratta di un framework per &lt;strong&gt;attuare SCRUM in aziende composte da svariati sottogruppi che fanno SCRUM che però hanno delle dipendenze vicendevoli&lt;/strong&gt;. Con SCRUM si dovrebbero costituire dei gruppi completamente indipendenti, composti da tutte le risorse necessarie per realizzare l&amp;rsquo;obiettivo. In realtà estremamente complesse, come appunto una grandissima azienda di telefonia, non è possibile considerare nello stesso aggregato i manutentori delle centraline telefoniche con gli esperti di design dei dispositivi da installare. In sostanza, si deve armonizzare il lavoro di gruppi diversi in cui in ciascuno si applica SCRUM.
Tutto questo mi ha colpito moltissimo perché anche nella nostra realtà (non certo così grande e complessa) alcuni elementi della filiera non riusciamo a portarli dentro tutti i team. Ad esempio i web designer o il team di marketing. Tutti i team condividono il tempo e le competenze di questi gruppi, che a loro volta fanno iterazioni settimanali (non SCRUM). Il talk mi ha illustrato alcuni dei vantaggi di Less ed ha stuzzicato la mia curiosità. Ora dovrò capire come applicarlo concretamente!&lt;/p&gt;

&lt;h2 id=&#34;retrospettive-creative:1f5d804dca1b5af8fd406d2b72199bbf&#34;&gt;Retrospettive creative&lt;/h2&gt;

&lt;p&gt;Si è andato avanti parlando di &lt;strong&gt;&lt;a href=&#34;http://retrospectivewiki.org/index.php?title=Main_Page&#34;&gt;retrospettive&lt;/a&gt;&lt;/strong&gt; con Marco Di Biase, uno SCRUM Master di Bravofly. Su questo tema, devo dare il merito a Marco di aver &lt;a href=&#34;http://www.agileday.it/mini/2015/vimercate/#Miglioramento_continuo&#34;&gt;condiviso&lt;/a&gt; un sacco di idee e scoperte fatte nel corso della sua esperienza. Io, ad esempio, ho iniziato a fare retrospettive con un certo format e da allora son riuscito a coinvolgere gli interlocutori più disparati del team (facciamo retrospettive tra team di addetti alla vendita e vengono fuori continue azioni di miglioramento come dalle retrospettive tra programmatori). Ma non ho mai provato a fare e farmi delle &lt;strong&gt;domande diverse durante gli incontri&lt;/strong&gt;. Marco accennava che &lt;a href=&#34;https://twitter.com/p_pugliese&#34;&gt;Pierluigi Pugliese&lt;/a&gt; gli abbia mostrato decine di approcci diversi.&lt;/p&gt;

&lt;p&gt;Mi ha colpito in particolare il format della retrospettiva con i cerchi concentrici che Marco suggerisce di usare per le iterazioni o per i periodi in cui le cose non vanno particolarmente bene, per ragionare sui problemi: ogni cerchio è un attore; il cerchio di cosa posso controllare io per fare meglio, di cosa può controllare il team per fare meglio e cosa invece è fuori dal nostro controllo ma sta facendo andare male le cose.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/miniiad-vimercate-2015-reportage/retrospettiva-cerchi.jpg&#34; alt=&#34;Retrospettiva con cerchi&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusioni:1f5d804dca1b5af8fd406d2b72199bbf&#34;&gt;Conclusioni&lt;/h2&gt;

&lt;p&gt;La serata si è poi conclusa con una carrellata di &lt;a href=&#34;http://www.agileday.it/mini/2015/vimercate/#Agile_Coaches&#34;&gt;esperienze&lt;/a&gt; vissute da tre coach. Dalla tastiera al coaching (senza lasciare la tastiera!). Le storie delle persone sono una delle cose di maggiore ispirazione. Per me penso sia bello ripartire da qui, con qualche pillola in più, inseguendo quel miglioramento continuo che ogni giorno sa riempirci di soddisfazioni.&lt;/p&gt;

&lt;p&gt;A presto con i prossimi grandi eventi dell&amp;rsquo;autunno!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programmazione Funzionale: perché preoccuparsi?</title>
      <link>/blog/ita/programmazione-funzionale-perche-preoccuparsi/</link>
      <pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/programmazione-funzionale-perche-preoccuparsi/</guid>
      <description>

&lt;p&gt;Nel suo discorso di accettazione del &lt;a href=&#34;http://amturing.acm.org/award_winners/dijkstra_1053701.cfm&#34;&gt;Premio Turing 1972&lt;/a&gt;, dal titolo &amp;ldquo;&lt;a href=&#34;https://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html&#34;&gt;The humble programmer&lt;/a&gt;&amp;rdquo;, &lt;strong&gt;Edsger Wybe Dijkstra&lt;/strong&gt;, uno dei più celebri &lt;em&gt;computing scientists&lt;/em&gt; del 20° secolo (morto nel 2002), affrontò le cause della nota &lt;a href=&#34;https://it.wikipedia.org/wiki/Software_crisis&#34;&gt;Software Crisis&lt;/a&gt;, cioè la crisi che colpì l&amp;rsquo;industria del software nella seconda metà degli anni sessanta: la potenza e la capacità di elaborazione dei computer stavano &lt;strong&gt;crescendo esponenzialmente&lt;/strong&gt;, molto più rapidamente dell&amp;rsquo;abilità dei programmatori di &lt;strong&gt;gestire la complessità&lt;/strong&gt; e scrivere software funzionante. Nello stesso discorso, Dijkstra propose anche delle possibili strade da intraprendere che a suo avviso avrebbero portato aziende e università a migliorare la qualità del loro software. Riporto qui una frase che a mio parere riassume abbastanza bene l&amp;rsquo;intero discorso:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I now suggest that we confine ourselves to the design and implementation of intellectually manageable programs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Il suggerimento è quindi il seguente: un programmatore dovrebbe limitarsi a lavorare su programmi &lt;strong&gt;intellettualmente gestibili&lt;/strong&gt;, cioè programmi dei quali è possibile stabilire la correttezza semplicemente &lt;strong&gt;attraverso il ragionamento&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;indice:ba51084cbefae16f67c65bf54f6283db&#34;&gt;Indice&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#la-software-crisis-nei-decenni&#34;&gt;La &lt;em&gt;Software Crisis&lt;/em&gt; nei decenni&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cause-di-complessita&#34;&gt;Cause di complessità&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pensare-ad-oggetti&#34;&gt;Pensare ad oggetti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#un-vecchio-paradigma-programmazione-funzionale&#34;&gt;Un vecchio paradigma: Programmazione Funzionale&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;la-software-crisis-nei-decenni&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;la-software-crisis-nei-decenni:ba51084cbefae16f67c65bf54f6283db&#34;&gt;La &lt;em&gt;Software Crisis&lt;/em&gt; nei decenni&lt;/h2&gt;

&lt;p&gt;Molti anni sono passati da allora, e la pratica dello sviluppo software ha attraversato varie evoluzioni e trasformazioni. Rispetto ai tempi di &lt;a href=&#34;https://it.wikipedia.org/wiki/Fortran&#34;&gt;FORTRAN&lt;/a&gt; e &lt;a href=&#34;https://en.wikipedia.org/wiki/ALGOL_60&#34;&gt;Algol 60&lt;/a&gt;, nuovi linguaggi di programmazione sono emersi e si sono affermati come standard; nuove tecniche e paradigmi, come la programmazione orientata agli oggetti, si sono diffuse nell&amp;rsquo;industria del software dopo un lungo periodo di gestazione in &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-oriented_programming#History&#34;&gt;università e centri di ricerca privati&lt;/a&gt;; diversi modi di gestire il processo di realizzazione del software e il suo ciclo di vita sono stati elaborati nei decenni, dal classico modello &lt;a href=&#34;https://en.wikipedia.org/wiki/Waterfall_model&#34;&gt;Waterfall&lt;/a&gt; alle moderne metodologie &lt;a href=&#34;http://engineering.facile.it/un-flusso-di-lavoro-agile/&#34;&gt;Agile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ma &lt;strong&gt;il problema di fondo&lt;/strong&gt; espresso in &lt;em&gt;The humble programmer&lt;/em&gt; è praticamente &lt;strong&gt;rimasto intatto&lt;/strong&gt; nel corso dei decenni: lo sviluppo di funzionalità elaborate e la progettazione di strutture complesse portano al rilascio di software caratterizzato da molti &lt;em&gt;bug&lt;/em&gt;, o per meglio dire, &lt;strong&gt;errori&lt;/strong&gt; dovuti a una difficile, &lt;strong&gt;a volte apparentemente impossibile&lt;/strong&gt;, gestione della complessità. La possibilità di rilasciare software rapidamente e in maniera iterativa ha portato a &lt;strong&gt;integrare&lt;/strong&gt; del tutto questi errori nel processo di sviluppo e rilascio: questa integrazione è realizzata attraverso diverse tecniche, dal &lt;em&gt;debugging&lt;/em&gt;, praticato già dai primissimi programmatori oltre mezzo secolo fa, al &lt;a href=&#34;http://engineering.facile.it/tag/software-testing/&#34;&gt;&lt;em&gt;software testing&lt;/em&gt;&lt;/a&gt;, che permette, in maniera decisamente più efficace rispetto al &lt;em&gt;debugging&lt;/em&gt;, di &lt;strong&gt;identificare gli errori commessi&lt;/strong&gt; e porvi rimedio. Sfortunatamente il &lt;em&gt;testing&lt;/em&gt;, pur essendo una pratica ottima per verificare se ci siano errori in un particolare software, non è sufficiente a &lt;strong&gt;garantire&lt;/strong&gt; che questi errori non ci siano.&lt;/p&gt;

&lt;p&gt;Notiamo inoltre che l&amp;rsquo;idea di integrare gli errori nel processo di &lt;em&gt;design&lt;/em&gt; è una caratteristica praticamente esclusiva dell&amp;rsquo;ingegneria del software, che &lt;strong&gt;la distingue radicalmente&lt;/strong&gt; dalle altre discipline ingegneristiche: in esse, tipicamente, si progettano componenti usando &lt;strong&gt;metodi matematici rigorosi&lt;/strong&gt; o software di calcolo numerico che permettono comunque di ottenere dati molto precisi, e poi si applicano margini di sicurezza per tener conto della variabilità dei processi di sviluppo dei materiali, delle imperfezioni di assemblaggio e delle oscillazioni nelle condizioni di esercizio. Da una parte questa differenza rappresenta &lt;strong&gt;un grande vantaggio&lt;/strong&gt; per l&amp;rsquo;ingegneria del software: non si può &amp;ldquo;iterare&amp;rdquo; nella costruzione di un grattacielo! D&amp;rsquo;altra parte penso sia necessario evitare che lo sviluppo software si trasformi in un banale processo di &lt;em&gt;trial and error&lt;/em&gt; perché, per quanto esso possa dimostrarsi efficace in alcuni casi, spesso &lt;strong&gt;non ci permette di capire razionalmente cosa stiamo facendo&lt;/strong&gt;, e può portare alla produzione di codice instabile e difficilmente gestibile. La verifica &lt;em&gt;a posteriori&lt;/em&gt; attuata grazie al &lt;em&gt;testing&lt;/em&gt; non dovrebbe essere considerata sufficiente a giudicare un software corretto. A mio parere, inoltre, non dovremmo considerare i &lt;em&gt;bug&lt;/em&gt; come se fossero &lt;strong&gt;concetti filosofici&lt;/strong&gt;, necessari e impossibili da eliminare. Ovviamente gli esseri umani compiono errori, ma la differenza tra un comune errore dovuto alle non perfette abilità di una persona, e un bug causato dall&amp;rsquo;eccessiva complessità di un software, è simile alla differenza che c&amp;rsquo;è tra lo scivolare su un pavimento bagnato perché non si è notato il messaggio di avviso, e lo sfracellarsi al suolo dopo aver tentato una scalata difficilissima senza attrezzatura e senza aver alcuna esperienza di montagna: nel secondo caso, &lt;strong&gt;ce la siamo cercata&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In effetti, in un &lt;em&gt;essay&lt;/em&gt; scritto nel 1997 per il libro &lt;a href=&#34;https://books.google.it/books?id=9P5uwNpP1JAC&amp;amp;redir_esc=y&#34;&gt;Beyond Calculation: The Next Fifty Years of Computing&lt;/a&gt;, pubblicato a celebrazione dei primi 50 anni di vita del computer, lo stesso Dijkstra torna ad affrontare il tema della complessità non gestita, suggerendo che &lt;strong&gt;poco è cambiato&lt;/strong&gt; in merito al problema di fondo che già si era presentato più di 50 anni fa. Raccolgo qui poche parole prese dal &lt;em&gt;essay&lt;/em&gt; che, di nuovo, penso ne distillino il succo (grassetto mio):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Computing&amp;rsquo;s core challenge is &lt;strong&gt;how not to make a mess of it&lt;/strong&gt;. [&amp;hellip;] Because we are dealing with artefacts, all unmastered complexity is of our own making; &lt;strong&gt;there is no one else to blame&lt;/strong&gt; and so we had better learn how &lt;strong&gt;not to introduce the complexity in the first place&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;cause-di-complessita&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;cause-di-complessità:ba51084cbefae16f67c65bf54f6283db&#34;&gt;Cause di complessità&lt;/h2&gt;

&lt;p&gt;Ma quali sono le cause di tutta questa complessità? La fonte che, a mio parere, affronta in maniera più completa il problema della complessità nel software, proponendo soluzioni concrete, è il bellissimo (e lungo) articolo di Ben Moseley e Peter Marks &amp;ldquo;Out of the Tar Pit&amp;rdquo;(2006), reperibile &lt;a href=&#34;https://www.dropbox.com/s/nov94b39ikijwqd/tarpit.pdf?dl=0&#34;&gt;QUI&lt;/a&gt;. Per poter identificare i punti principali dell&amp;rsquo;articolo dobbiamo intanto dare &lt;strong&gt;una possibile definizione di &amp;ldquo;complessità&lt;/strong&gt;&amp;rdquo;, almeno per quanto riguarda lo sviluppo software; un primo tentativo potrebbe essere il seguente:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;la complessità di un software rappresenta la difficoltà nel ragionare sul suo funzionamento&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In base a questa definizione, ad esempio, nel caso in cui un software presenti un qualche errore potremmo giudicare tale software più o meno complesso in base a quanto sia difficile trovare l&amp;rsquo;errore utilizzando il solo ragionamento. Basandoci su questa definizione, possiamo estrapolare da &lt;em&gt;Out of the Tar Pit&lt;/em&gt; due principali cause di complessità:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lo &lt;strong&gt;stato&lt;/strong&gt; delle variabili nel sistema&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;&lt;strong&gt;ordine&lt;/strong&gt; di esecuzione delle procedure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In sintesi: la mente umana ha relativa difficoltà a tener traccia del modo in cui &lt;strong&gt;evolve nel tempo lo stato di molti parametri&lt;/strong&gt; in base a vari processi di trasformazione, specialmente se tale stato dipende anche &lt;strong&gt;dall&amp;rsquo;ordine in cui questi processi sono eseguiti&lt;/strong&gt;. In realtà riusciamo tranquillamente a gestire processi relativamente semplici attraverso una serie di trasformazioni di stato, si pensi all&amp;rsquo;atto di &amp;ldquo;fare una torta&amp;rdquo;: gli ingredienti di base &amp;ldquo;diventano&amp;rdquo; torta dopo una serie di stadi di trasformazione, che possiamo tranquillamente a tenere a mente, e se il risultato finale non è quello che ci aspettavamo riusciamo rapidamente a identificare l&amp;rsquo;errore nella procedura (la torta è troppo cotta, o abbiamo usato il sale al posto dello zucchero). In effetti seguire l&amp;rsquo;evoluzione di un processo di trasformazione costituito da una serie di procedure è assolutamente &lt;strong&gt;intuitivo&lt;/strong&gt; per la mente umana ed è alla base del paradigma di programmazione noto come &lt;strong&gt;programmazione procedurale&lt;/strong&gt;: nella mia breve esperienza personale ho potuto notare infatti che il metodo più frequentemente adottato nei corsi base di programmazione è proprio quello basato su alberi di scelte binarie &lt;em&gt;if-else&lt;/em&gt;, iterazioni e cicli con una o più condizioni di uscita. Purtroppo è facile osservare che questo modo di ragionare, sebbene sia perfettamente adatto a risolvere molti problemi pratici nella vita di tutti i giorni, &lt;strong&gt;non costituisca una strategia particolarmente efficace&lt;/strong&gt; quando si parla di programmi corposi e complessi, e con &amp;ldquo;corposi&amp;rdquo; intendo &amp;ldquo;più lunghi di un centinaio di righe&amp;rdquo;. È stato necessario introdurre nuove astrazioni, a più alto livello, per riuscire a superare la sempre incombente &lt;em&gt;software crisis&lt;/em&gt;, abbandonando ciò che appare intuitivo in favore di qualcosa di maggiormente gestibile ed efficiente.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;pensare-ad-oggetti&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;pensare-ad-oggetti:ba51084cbefae16f67c65bf54f6283db&#34;&gt;Pensare ad oggetti&lt;/h2&gt;

&lt;p&gt;Vediamo in sintesi come il problema della complessità sia affrontato, a grandi linee, dal più diffuso e importante paradigma di sviluppo software adottato a sostituzione di quello procedurale: la programmazione orientata agli oggetti (&lt;em&gt;Object-Oriented Programming&lt;/em&gt;: &lt;strong&gt;OOP&lt;/strong&gt;). OOP adotta il principio &lt;strong&gt;dell&amp;rsquo;incapsulamento della complessità&lt;/strong&gt;: le varie strutture computazionali del nostro software, individualmente più o meno complesse, sono suddivise in porzioni sufficientemente indipendenti, rinchiuse in contenitori stagni collegati tra loro da interfacce chiare e dichiarative. Si noti intanto che questo &lt;strong&gt;non è&lt;/strong&gt; il modo in cui gli esseri umani agiscono; nel suo classico articolo &lt;a href=&#34;http://c2.com/doc/oopsla89/paper.html&#34;&gt;A Laboratory For Teaching Object-Oriented Thinking (1989)&lt;/a&gt;, il celebre &lt;a href=&#34;https://it.wikipedia.org/wiki/Kent_Beck&#34;&gt;Kent Beck&lt;/a&gt;, noto soprattutto per i fondamentali contributi alle metodologie &lt;a href=&#34;https://it.wikipedia.org/wiki/Extreme_programming&#34;&gt;Extreme Programming&lt;/a&gt; e &lt;a href=&#34;https://it.wikipedia.org/wiki/Test_driven_development&#34;&gt;Test Driven Development&lt;/a&gt;, affronta il problema che si incontra quando si cerca di &lt;strong&gt;insegnare agli studenti a &amp;ldquo;pensare a oggetti&amp;rdquo;&lt;/strong&gt;: come essere umani siamo abituati a pensare allo stato globale di una situazione; a spostarci per comunicare direttamente con chiunque; ad affidarci al modo particolare in cui le persone che conosciamo svolgeranno un certo compito. OOP è invece basato su concetti opposti: ogni oggetto dovrebbe &amp;ldquo;vedere&amp;rdquo; solo i suoi vicini diretti, e di questi non dovrebbe comunque conoscere alcun dettaglio interno. Osserviamo quindi che &lt;strong&gt;il sistema di astrazioni&lt;/strong&gt; su cui OOP è basato non ha nulla a che fare con la vita &amp;ldquo;reale&amp;rdquo; o con il nostro abituale modo di pensare agli oggetti &amp;ldquo;fisici&amp;rdquo;, e a ragione: un software è svariati ordini di grandezza più complesso rispetto a una qualsiasi struttura fisica, e richiede strumenti diversi per poter essere compreso e gestito.&lt;/p&gt;

&lt;p&gt;In effetti un presunto punto di forza di OOP, spesso citato per fornire una prova dell&amp;rsquo;accessibilità di questo paradigma di programmazione, è costituito dall&amp;rsquo;idea che sia possibile trattare gli oggetti nel software come se fossero oggetti reali. Ho potuto osservare, tuttavia, che impostando proprietà e metodi delle classi come se queste fossero &lt;em&gt;template&lt;/em&gt; di oggetti reali, si tende a generare entità eccessivamente interdipendenti e poco flessibili. Questo porta a cadere in &lt;strong&gt;labirinti di complessità&lt;/strong&gt; paragonabili a quelli ottenuti in programmazione procedurale, nei quali lo &lt;strong&gt;stato mutabile&lt;/strong&gt; rende molto difficile la gestione, manutenzione e in generale la comprensibilità del sistema. Quindi spesso i concetti di &amp;ldquo;classe&amp;rdquo; e &amp;ldquo;oggetto&amp;rdquo; sono, purtroppo, &lt;strong&gt;usati in contesti sostanzialmente procedurali&lt;/strong&gt;: non sono rari metodi lunghi centinaia di righe con molti &lt;em&gt;if-else&lt;/em&gt; annidati, o riferimenti a dettagli di implementazione di altri oggetti, che dovrebbero rimanere &amp;ldquo;nascosti&amp;rdquo; al mondo esterno.&lt;/p&gt;

&lt;p&gt;Un tentativo di soluzione a questi problemi è rappresentato dai &lt;strong&gt;design patterns&lt;/strong&gt;, cioè strutture di classi e interfacce che hanno dimostrato &lt;strong&gt;eccellente applicabilità e robustezza&lt;/strong&gt; nell&amp;rsquo;affrontare molti problemi pratici; ma essi sono appunto &lt;em&gt;pattern&lt;/em&gt;, non sono teoremi, la loro capacità di risolvere problemi è verificata dal tempo e dall&amp;rsquo;esperienza, ma essi non permettono in alcun modo di provare in maniera deterministica che un software sia corretto. Il problema di fondo è che, a causa della continua variazione di stato degli oggetti, la struttura di un software scritto in OOP non &lt;strong&gt;può essere rappresentata con un modello matematico&lt;/strong&gt;: funzioni ed equazioni rappresentano relazioni statiche tra variabili dipendenti e indipendenti, con parametri costanti per ogni relazione; variando i parametri, cambia la relazione. Quindi il sistema di astrazioni su cui OOP si basa non può essere descritto dalla matematica. Ma la matematica è proprio l&amp;rsquo;antico e potente strumento utilizzato in qualsiasi disciplina scientifica proprio quando è necessario &lt;strong&gt;fornire prove formali&lt;/strong&gt; della correttezza di sistemi che non possono essere concepiti in maniera dettagliata dalla sola intuizione umana.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;un-vecchio-paradigma-programmazione-funzionale&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;un-vecchio-paradigma-programmazione-funzionale:ba51084cbefae16f67c65bf54f6283db&#34;&gt;Un vecchio paradigma: Programmazione Funzionale&lt;/h2&gt;

&lt;p&gt;La &amp;ldquo;programmazione funzionale&amp;rdquo; (&lt;em&gt;Functional Programming&lt;/em&gt;: &lt;strong&gt;FP&lt;/strong&gt;) è un paradigma di sviluppo software in parte codificato già alla fine degli anni cinquanta, attraverso il noto linguaggio &lt;a href=&#34;https://en.wikipedia.org/wiki/Lisp_(programming_language&#34;&gt;LISP&lt;/a&gt;), e gode di solide basi matematiche nella &lt;a href=&#34;https://en.wikipedia.org/wiki/Combinatory_logic&#34;&gt;logica combinatoria&lt;/a&gt; e nel &lt;a href=&#34;https://en.wikipedia.org/wiki/Lambda_calculus&#34;&gt;lambda calcolo&lt;/a&gt;: malgrado ciò, ha trovato difficoltà nel diffondersi sia nei corsi universitari di base che nelle aziende, forse per &lt;strong&gt;un&amp;rsquo;alta barriera d&amp;rsquo;ingresso&lt;/strong&gt;, dovuta appunto alle forti basi matematiche e alla manipolazione di concetti molto astratti e poco intuitivi.&lt;/p&gt;

&lt;p&gt;FP si basa sull&amp;rsquo;idea che un software possa essere descritto attraverso l&amp;rsquo;applicazione di tre tecniche principali:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la definizione di un gran numero di &lt;strong&gt;funzioni pure&lt;/strong&gt;, cioè funzioni &lt;strong&gt;senza effetti collaterali&lt;/strong&gt;: una funzione pura ritorna &lt;strong&gt;sempre&lt;/strong&gt; un valore, e tale valore è sempre lo stesso &lt;strong&gt;a parità di condizioni di ingresso&lt;/strong&gt;, quindi non potrà mai succedere che una certa funzione ritorni due diversi valori in due diversi momenti nel corso dell&amp;rsquo;esecuzione di un software se non cambiano i dati in ingresso alla funzione;&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;applicazione di queste funzioni ai dati soggetti a manipolazione nel nostro software, e la loro combinazione attraverso particolari funzioni note come &lt;strong&gt;funzioni di più altro ordine&lt;/strong&gt;, anch&amp;rsquo;esse pure, che però presentano altre funzioni tra i dati di ingresso e/o di uscita;&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;uso di dati &lt;strong&gt;immutabili&lt;/strong&gt; e l&amp;rsquo;assenza di variazione di stato, che permettono di trattare estese porzioni di un software come se fossero &lt;strong&gt;equazioni matematiche&lt;/strong&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Funzioni pure, indipendenti dallo stato di esecuzione di un software, rappresentano quindi delle &lt;strong&gt;relazioni statiche tra entità&lt;/strong&gt;: il processo di &lt;em&gt;testing&lt;/em&gt; sarà quindi più semplice perché ogni funzione da testare sarà del tutto indipendente dalle altre. In realtà il &lt;em&gt;testing&lt;/em&gt; in sé non è particolarmente importante in FP, perché tale paradigma si basa sull&amp;rsquo;idea di verificare &lt;em&gt;a priori&lt;/em&gt; che un programma sia corretto. Un software scritto in FP nasce in primo luogo da una costruzione teorica la cui correttezza è verificabile tramite &lt;a href=&#34;http://www.haskellforall.com/2013/12/equational-reasoning.html&#34;&gt;ragionamento equazionale&lt;/a&gt;. Saremo quindi in grado di ottenere un software corretto se:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ciascuna funzione sarà stata implementata correttamente;&lt;/li&gt;
&lt;li&gt;avremo impostato le relazioni corrette tra le entità coinvolte;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In FP le funzioni sono anche &lt;strong&gt;dati&lt;/strong&gt;, nel senso che hanno un &lt;strong&gt;tipo associato&lt;/strong&gt;. Ad esempio, usando la notazione di Swift, possiamo definire il tipo di una funzione &lt;code&gt;square&lt;/code&gt;, che permette di elevare al quadrato un numero intero, nel seguente modo:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let square: Int -&amp;gt; Int&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Possiamo leggere la definizione di questo &lt;em&gt;type&lt;/em&gt; così: una funzione che prende in ingresso un numero intero e ritorna un numero intero. Se nel software che stiamo scrivendo dovessimo trasformare un &lt;em&gt;array&lt;/em&gt; di numeri interi in un altro array con gli stessi numeri elevati al quadrato, potremmo definire una funzione &lt;code&gt;map&lt;/code&gt; con la seguente notazione:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let map: ([Int], Int -&amp;gt; Int) -&amp;gt; [Int]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Questo &lt;em&gt;type&lt;/em&gt; definisce una funzione che prende in ingresso un &lt;em&gt;array&lt;/em&gt; di numeri interi e una funzione del tipo &lt;code&gt;Int -&amp;gt; Int&lt;/code&gt; (per esempio la funzione &lt;code&gt;square&lt;/code&gt;, definita prima). Abbiamo già visto in un &lt;a href=&#34;http://engineering.facile.it/type-first-development-in-swift/&#34;&gt;precedente articolo&lt;/a&gt; come &lt;strong&gt;ragionare sui tipi di dati e funzioni coinvolti&lt;/strong&gt; possa semplificare e irrobustire il design di un software: i prossimi articoli di questa serie serviranno da introduzione alla programmazione funzionale, trattando i principali strumenti utilizzati e mostrando un modo meno diffuso &lt;strong&gt;ma forse più efficace&lt;/strong&gt; di gestire la complessità del software.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GIT flow e versionamento semantico</title>
      <link>/blog/ita/git-flow-semantic-versioning/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/git-flow-semantic-versioning/</guid>
      <description>

&lt;p&gt;GIT flow è un &lt;strong&gt;flusso di sviluppo&lt;/strong&gt;, ideato da &lt;a href=&#34;http://nvie.com/about/&#34;&gt;Vincent Driessen&lt;/a&gt;, che descrive un modello di diramazione, (&lt;a href=&#34;http://git-scm.com/docs/git-branch&#34;&gt;branching&lt;/a&gt;), ben preciso costruito intorno al concetto di release software.&lt;/p&gt;

&lt;p&gt;Questo flusso è concepito per sfruttare al meglio le potenzialità del software di versionamento &lt;a href=&#34;https://git-scm.com/&#34;&gt;GIT&lt;/a&gt;, ma affinità concettuali possono essere utili anche per la gestione del lavoro con altri software dediti alla medesima funzionalità.&lt;/p&gt;

&lt;p&gt;Il flusso descritto in GIT flow è finalizzato a mantenere una storia implementativa pulita, dove un rilascio comunica a tutti gli utilizzatori la presenza di una &lt;strong&gt;nuova versione&lt;/strong&gt; del prodotto, definita da un determinato &lt;em&gt;changelog&lt;/em&gt; composto da nuove caratteristiche e correzioni.&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;vantaggi&lt;/strong&gt; derivanti da questo approccio al versionamento (&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_versioning&#34;&gt;software versioning&lt;/a&gt;), sono anzitutto quello di &lt;strong&gt;tenere una storia pulita&lt;/strong&gt; e leggibile, il che faciliterà la vita a chi decide di usare il nostro software, ma anche quello di poter &lt;strong&gt;concentrare e diversificare gli sforzi&lt;/strong&gt; del team di sviluppo sulle particolari fasi: implementazione, correzione, pulizia, rilascio, concedendo a ciascuna di esse determinati spazi all&amp;rsquo;interno del repository e determinate tempistiche all&amp;rsquo;interno del flusso.&lt;/p&gt;

&lt;p&gt;In questo articolo descriveremo git flow e uniremo l&amp;rsquo;adozione di questo flusso a quello di una strategia di versionamento semantico (semantic versioning) così come proposto e descritta da &lt;a href=&#34;http://tom.preston-werner.com/&#34;&gt;Tom Preston-Werner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Come vedremo in seguito il punto di incontro fra git e il versionamento semantico ha la sua chiave di volta nella creazione di tag appropriate sulle commit dei nostri rami o &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;tagging&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inoltre è bene tenere a mente che diversi software di gestione delle dipendenze basano il proprio flusso operativo sul presupposto una strategia di versionamento semantico simile a quella che andremo a descrivere, come ad esempio &lt;a href=&#34;https://getcomposer.org&#34;&gt;composer&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;branch-storici:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Branch storici&lt;/h3&gt;

&lt;p&gt;Anzitutto questo modello di workflow prevede la presenza di ben due master branch, &lt;strong&gt;&amp;ldquo;dev&amp;rdquo;&lt;/strong&gt; (o &amp;ldquo;develop&amp;rdquo;) utilizzato per lo sviluppo, ed il buon vecchio &lt;strong&gt;&amp;ldquo;master&amp;rdquo;&lt;/strong&gt; per i rilasci ufficiali.&lt;/p&gt;

&lt;p&gt;Questi due branch assolvono il compito di &amp;ldquo;historical branch&amp;rdquo;, cioè essi devono detenere la storia pulita del progetto, a prescindere dagli sviluppi di nuove feature e hotfix, che altrimenti confluirebbero senza filtri sul ramo principale, rendendo meno comprensibile la storia del progetto e quindi più difficoltose operazioni di reversione (&lt;a href=&#34;https://en.wikipedia.org/wiki/Reversion_%28software_development%29&#34;&gt;revert&lt;/a&gt;) a stati precedenti.&lt;/p&gt;

&lt;h3 id=&#34;branch-di-funzionalità:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Branch di funzionalità&lt;/h3&gt;

&lt;p&gt;Un branch di funzionalità, ovvero un &lt;strong&gt;&amp;ldquo;feature branch&amp;rdquo;&lt;/strong&gt;, aggiunge una nuova funzionalità (&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_feature&#34;&gt;feature&lt;/a&gt;) al software.
Nel modello proposto dal GIT flow, questi branch &lt;strong&gt;devono sempre essere derivati dal branch &amp;ldquo;develop&amp;rdquo;&lt;/strong&gt; e rappresentano una &lt;strong&gt;feature&lt;/strong&gt;, ovvero una nuova funzionalità che si intende aggiungere al software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/git-flow-semantic-versioning/feature.png&#34; alt=&#34;Git Flow - Feature branch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Questo branch conterrà tutti i pezzi di storia, le commit, relative alla funzionalità implementata.&lt;/p&gt;

&lt;p&gt;Durante lo sviluppo di questi rami non è strettamente necessario mantenere una storia delle versioni pulite o usare particolari nomenclature per le varie commit (pratica che comunque potrebbe avere i suoi vantaggi come vedremo nell&amp;rsquo;ultimo paragrafo), in quanto prima di riportare il branch su develop, &amp;ldquo;appiattiremo&amp;rdquo; la storia del branch attraverso un&amp;rsquo;operazione di &lt;strong&gt;&lt;a href=&#34;http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html&#34;&gt;squash&lt;/a&gt; delle commit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In questo modo la storia del branch di sviluppo risulterà pulita, con &lt;strong&gt;una sola commit&lt;/strong&gt;, che conterrà solo l&amp;rsquo;informazione relativa all&amp;rsquo;aggiunta della nuova funzionalità.&lt;/p&gt;

&lt;p&gt;Dopo averlo riportato su develop, è possibile rimuovere il feature branch dal repository:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$&amp;gt; git branch -D feat-nomedelfeaturebranch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In base alle dimensioni del team è possibile mantenere &lt;strong&gt;più feature branch contemporaneamente&lt;/strong&gt;, a patto di riportarli correttamente e in tempi auspicabilmente brevi sul branch di sviluppo.
Di norma un singolo sviluppatore si concentra sul rilascio di una feature per volta.&lt;/p&gt;

&lt;h3 id=&#34;branch-di-rilascio:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Branch di rilascio&lt;/h3&gt;

&lt;p&gt;Quando il ramo di sviluppo (develop) contiene abbastanza feature per un &lt;strong&gt;rilascio&lt;/strong&gt; (o in base a qualsiasi altro tipo di scadenza prefissata), da questi viene derivato un nuovo branch detto di rilascio, o &lt;strong&gt;&lt;a href=&#34;http://producingoss.com/en/release-branches.html&#34;&gt;release branch&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;È buona norma distinguere questi rami con un nome significativo e consistente, ad esempio possono tutti iniziare con il prefisso &amp;ldquo;release-&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;A questo punto dello sviluppo non possono essere più aggiunte feature e le uniche aggiunte possibili possono essere quelle di bug fixing e documentazione.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/git-flow-semantic-versioning/release-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Il team si concentrerà sull&amp;rsquo;obiettivo di riportare su master la prossima release
quindi non verranno creati altri branch di funzionalità in quanto in questa fase l&amp;rsquo;obiettivo principale è quello di rilasciare.&lt;/p&gt;

&lt;p&gt;Quando il ramo di rilascio sarà maturo e testato, a questo punto verrà eseguita  l’operazione di merge sul branch “master”, contrassegnandola con un’opportuna &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;tag&lt;/a&gt;, che ne indichi il versionamento.&lt;/p&gt;

&lt;p&gt;Come per il feature branch, la storia completa dalla nascita alla maturazione di questo ramo dovrebbe essere trasparente per i branch storici, quindi anche qui andremo ad operare un&amp;rsquo;operazione di squash.&lt;/p&gt;

&lt;p&gt;Anche durante il ciclo di vita di questi rami, è buona pratica usare nomenclature particolari per i tag delle commit, ma non indispensabile: vedremo questo concetto più avanti nell&amp;rsquo;ultimo paragrafo.&lt;/p&gt;

&lt;p&gt;Allo stesso modo il branch di rilascio verrà eseguita indietro anche sul branch “develop”, tralasciando l&amp;rsquo;aggiunta dei tag di versione.&lt;/p&gt;

&lt;p&gt;Una volta mergiato con i branch storici, il branch di release non ha più motivo di esistere e sarebbe opportuno cancellarlo.&lt;/p&gt;

&lt;h3 id=&#34;branch-di-manutenzione:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Branch di manutenzione&lt;/h3&gt;

&lt;p&gt;Una migliore organizzazione dei rilasci non scongiura sicuramente l’occorrenza di problemi da risolvere con estrema urgenza.
In questo caso, e solo in questo caso, è possibile derivare (avviare un fork) direttamente da master un branch di manutenzione, contenente la fix necessaria a risolvere il problema insorto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/git-flow-semantic-versioning/hotfix-2.png&#34; alt=&#34;Mantainance branch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;È buona norma inoltre distinguere questi branch con un nome significativo e consistente, ad esempio possono tutti iniziare con il prefisso “hotfix-”.&lt;/p&gt;

&lt;p&gt;Tale branch sarà ovviamente riportato su “master” il più presto possibile, ed in seguito anche su “develop” per mantenere la situazione dei due branch storici allineata.&lt;/p&gt;

&lt;p&gt;Come nel caso dei branch di rilascio, qundo un branch di manutenzione viene riportato su master, il tag di master verrà contrassegnato appropriatamente.&lt;/p&gt;

&lt;h3 id=&#34;versionamento-semantico:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Versionamento semantico&lt;/h3&gt;

&lt;p&gt;Il versionamento semantico (semantic versioning) è un semplice schema di denominazione dei rilasci che ruota attorno a tre numeri: major, minor e patch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/git-flow-semantic-versioning/alltogheter.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Il formato prevede la concatenazione di questi tre numeri attraverso la notazione punto.
Ad es: 1.1.2, indica major version: 1, minor version: 1 e patch: 2.&lt;/p&gt;

&lt;p&gt;Riportato sullo schema prima descritto nel GIT flow, i tre numeri di versionamento  saranno le tag dei branch.&lt;/p&gt;

&lt;p&gt;In pratica:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se abbiamo rilasciato una hotfix, che sostanzialmente non va ad intaccare le modalità di utilizzo del codice, dovremmo andare a incrementare il numero di &lt;strong&gt;patch&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Se abbiamo implementato una modifica minore, spesso l&amp;rsquo;aggiunta di una feature che non pregiudica la retrocompatibilità del codice, andremo a incrementare il numero di &lt;strong&gt;minor&lt;/strong&gt; versioning.&lt;/li&gt;
&lt;li&gt;Rilasci più consistenti che cambiano in maniera apprezzabile il funzionamento del codice andranno a incrementare il numero di &lt;strong&gt;major&lt;/strong&gt; versioning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Può essere inoltre indicato un &lt;strong&gt;suffisso di build&lt;/strong&gt;, ad esempio una sequenza alfabetica in linguaggio naturale, seguita da un numero incrementale.&lt;/p&gt;

&lt;p&gt;Ad es:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.1.2-snapshot20150602, indica una snapshot di un feature branch di 1.1.2, ovvero una &amp;ldquo;fotografia&amp;rdquo; specifica dello sviluppo di una feature&lt;/li&gt;
&lt;li&gt;1.1.2-rc1, indica una release candidate, ovvero una versione del software &amp;ldquo;papabile&amp;rdquo; per il rilascio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un suffisso di build come quello indicato nel primo esempio potrebbe essere relativo ad un feature branch, derivato dal tag 1.1.2 del branch di sviluppo e in parole povere indica che quella messa a disposizione è semplicemente un&amp;rsquo;anteprima del codice, in cui è ammissibile una certa instabilità.&lt;/p&gt;

&lt;p&gt;Questo tipo di tag dovrebbero essere provati e installati &lt;strong&gt;solo su ambienti di test&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quello nel secondo esempio invece potrebbe essere il suffisso di un tag su un branch di release che indica una versione del codice, matura al punto da poter essere inclusa in una prossima release, detta &lt;a href=&#34;https://it.wikipedia.org/wiki/Release_candidate&#34;&gt;release candidate&lt;/a&gt;, a patto di minime correzioni.
Tali modifiche modifiche e correzioni dovrebbero susseguirsi andando a incrementare il suffisso numerico dopo rc delle prossime tag sul ramo di rilascio.&lt;/p&gt;

&lt;p&gt;Questo tipo di tag indicano le versioni del software che generalmente verranno installate sugli ambienti di &lt;a href=&#34;https://en.wikipedia.org/wiki/Deployment_environment#Staging&#34;&gt;staging&lt;/a&gt;, per poterle testare prima di essere riportate su master e andare quindi in &lt;a href=&#34;https://en.wikipedia.org/wiki/Deployment_environment#Production&#34;&gt;produzione&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusioni:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Conclusioni&lt;/h3&gt;

&lt;p&gt;Alla fine di questa analisi non possiamo affermare che git flow e il versionamento semantico possano essere gli strumenti definitivi per ogni team o progetto, e sicuramente la loro adozione porta vantaggi e svantaggi.
Valutare un trade-off relativo all&amp;rsquo;impiego di git flow sta al buonsenso personale, ci limiteremo perciò ad elencare una serie di pro e contro che potrebbero aiutare nella decisione.&lt;/p&gt;

&lt;h4 id=&#34;a-cosa-non-serve-git-flow:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;A cosa non serve git flow?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Git flow non pone rimedio ad errori tecnici nella gestione del repository e nemmeno prescinde da una conoscenza approfondita di git.&lt;/li&gt;
&lt;li&gt;Git flow de facto &lt;strong&gt;non semplifica il flusso di lavoro&lt;/strong&gt; con git, imponendo una strategia di diramazione complessa.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;a-cosa-serve-git-flow:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;A cosa serve git flow?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Git flow aiuta i vari elementi del team ad avere a colpo d&amp;rsquo;occhio &lt;strong&gt;una visione precisa dello stato degli sviluppi applicativi&lt;/strong&gt; a fronte di una convenzione essenziale e immediata di tagging.&lt;/li&gt;
&lt;li&gt;Il versionamento semantico aiuta gli utilizzatori del software a capire esattamente lo stato di sviluppo del software e cosa aspettarsi, riportandosi a diverse versioni di rilascio.&lt;/li&gt;
&lt;li&gt;Git flow coaudiva la &lt;a href=&#34;https://en.wikipedia.org/wiki/Velocity_(software_development&#34;&gt;velocity&lt;/a&gt;) del team di sviluppo permettendo l&amp;rsquo;attuazione di un piano di &lt;a href=&#34;http://guide.agilealliance.org/guide/cd.html&#34;&gt;continuous deploy&lt;/a&gt; e quindi di poter rilasciare nuove feature e fix in sicurezza.&lt;/li&gt;
&lt;li&gt;Git flow è ottimo per la &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;continuous integration&lt;/a&gt;, permettendo de facto di poter differenziare i rami dedicati ai vari ambienti: sviluppo, staging e produzione&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;risorse-consultabili-online:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Risorse consultabili online&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;http://nvie.com/posts/a-successful-git-branching-model/&lt;/a&gt; Vincent Driessen espone GIT Flow&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://semver.org/&#34;&gt;http://semver.org/&lt;/a&gt; Semantic Versioning 2.0.0 proposto da Tom Preston-Werner&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow&#34;&gt;https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow&lt;/a&gt; - Tutorial messo a disposizione da Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://datasift.github.io/gitflow/Versioning.html&#34;&gt;https://datasift.github.io/gitflow/Versioning.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Swift testing avanzato: stubbing e test asincroni</title>
      <link>/blog/ita/swift-testing-avanzato-stubbing-e-test-asincroni/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/swift-testing-avanzato-stubbing-e-test-asincroni/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://engineering.facile.it/xcode-testing-in-pratica/&#34;&gt;In un precedente articolo&lt;/a&gt; abbiamo visto le impostazioni di base in Xcode per la scrittura dei &lt;strong&gt;test unitari&lt;/strong&gt;: abbiamo evidenziato inoltre &lt;strong&gt;l&amp;rsquo;importanza e l&amp;rsquo;utilità intrinseca dei test&lt;/strong&gt;, attraverso un semplice esempio riguardante un caso d&amp;rsquo;uso tipico. Nel presente articolo vedremo alcune tecniche un po&amp;rsquo; più avanzate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;implementeremo uno &lt;strong&gt;Stub Object&lt;/strong&gt; in Swift;&lt;/li&gt;
&lt;li&gt;analizzeremo un altro caso di test &lt;em&gt;asincrono&lt;/em&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lo-stub-object:4b7c206247a0a425bb1064c53b31df66&#34;&gt;Lo &lt;em&gt;Stub Object&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Uno &lt;em&gt;Stub Object&lt;/em&gt; (per il resto dell&amp;rsquo;articolo, &lt;em&gt;stub&lt;/em&gt;) rappresenta un&amp;rsquo;istanza di una certa classe, la quale &lt;em&gt;mima&lt;/em&gt; una vera classe presente nella nostra &lt;em&gt;code base&lt;/em&gt;:  l&amp;rsquo;istanza si comporta esattamente come una equivalente istanza della classe mimata, tranne alcune differenze, ad esempio &lt;strong&gt;alcuni metodi possono essere sovrascritti&lt;/strong&gt; per poter fornire &lt;strong&gt;un determinato output&lt;/strong&gt; utile per i test. Nell&amp;rsquo;implementare uno &lt;em&gt;stub&lt;/em&gt; non è generalmente consentito modificare dettagli di logica interni relativi alla classe che stiamo mimando, ma &lt;strong&gt;è possibile sovrascrivere metodi pubblici&lt;/strong&gt;, in modo che essi ritornino i valori che vogliamo, oppure che svolgano una particolare procedura necessaria per i test. Tanto per fare un esempio pratico potremmo &lt;em&gt;stubbare&lt;/em&gt; una classe che ci fornisce la data precisa in un certo istante, in modo da ottenere una data diversa da usare nei test, oppure un client che chiede a un server delle informazioni su un utente, in modo da far ritonare al client &lt;em&gt;stub&lt;/em&gt; delle informazioni arbitrarie.&lt;/p&gt;

&lt;p&gt;Gli &lt;em&gt;stub&lt;/em&gt; fanno parte di una classe di strumenti che sono usati nell&amp;rsquo;ambito dello &lt;em&gt;Unit Testing&lt;/em&gt; per verificare che determinati oggetti rispettino precisi &lt;strong&gt;contratti&lt;/strong&gt; stipulati tra essi: il classico articolo di Martin Fowler &lt;a href=&#34;http://martinfowler.com/articles/mocksArentStubs.html&#34;&gt;Mocks Aren&amp;rsquo;t Stubs&lt;/a&gt; è solitamente considerato un buon punto di riferimento per comprendere i possibili strumenti usati a tal scopo. L&amp;rsquo;idea è che, dal punto di vista dei nostri test unitari, un oggetto risulterà essere &lt;em&gt;correttamente implementato&lt;/em&gt; se avrà rispettato la sua parte del &lt;em&gt;contratto&lt;/em&gt; stipulato con altri oggetti, con la seguente conseguenza:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;se l&amp;rsquo;oggetto A è correttamente implementato e l&amp;rsquo;oggetto B rispetta il contratto stipulato con l&amp;rsquo;oggetto A, allora anche l&amp;rsquo;oggetto B è correttamente implementato&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gli &lt;em&gt;stub&lt;/em&gt; permettono di &lt;strong&gt;disaccoppiare le logiche di funzionamento degli oggetti&lt;/strong&gt; perché, se abbiamo verificato il corretto funzionamento dell&amp;rsquo;oggetto A (attraverso appropriati test unitari), possiamo usare uno &lt;em&gt;stub&lt;/em&gt; di tale oggetto per verificare il corretto funzionamento dell&amp;rsquo;oggetto B nei suoi confronti, eliminando qualsiasi dipendenza di B nei confronti della logica interna dell&amp;rsquo;oggetto A. L&amp;rsquo;obiettivo è scrivere quindi dei &lt;strong&gt;test veramente unitari&lt;/strong&gt; per l&amp;rsquo;oggetto B, anche se questo dipende dall&amp;rsquo;oggetto A. Il classico talk &lt;a href=&#34;https://vimeo.com/80533536&#34;&gt;Integration Tests are a scam&lt;/a&gt; di J.B. Rainsberger fornisce un punto di vista particolarmente &amp;ldquo;radicale&amp;rdquo; sull&amp;rsquo;argomento.&lt;/p&gt;

&lt;p&gt;Il classico caso in cui uno &lt;em&gt;stub&lt;/em&gt; risulta utile è quello del client che fa una richiesta al server: se la logica di implementazione del server è sotto il nostro controllo possiamo &lt;strong&gt;testare che il server rispetti il contratto con i suoi client&lt;/strong&gt; generando degli &lt;em&gt;stub&lt;/em&gt; di questi per ogni possibile richiesta; d&amp;rsquo;altra parte, per verificare che i client siano in grado di &lt;strong&gt;gestire correttamente ogni possibile risposta del server&lt;/strong&gt;, possiamo generare uno &lt;em&gt;stub&lt;/em&gt; del server che fornisca ogni possibile risposta: in questo modo possiamo testare in maniera disaccoppiata client e server.&lt;/p&gt;

&lt;h2 id=&#34;un-caso-d-uso-location-services:4b7c206247a0a425bb1064c53b31df66&#34;&gt;Un caso d&amp;rsquo;uso: &lt;em&gt;Location Services&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Il caso d&amp;rsquo;uso che tratteremo è relativo ai &lt;strong&gt;servizi di localizzazione&lt;/strong&gt;, uno strumento frequentemente utilizzato dagli sviluppatori iOS e in generale da chi sviluppa su &lt;strong&gt;smartphone&lt;/strong&gt;: per tali sviluppatori, quello dei servizi di localizzazione è un tema molto importante, &lt;strong&gt;fonte di complessità e sfide&lt;/strong&gt; che caratterizzano tipicamente il mondo &lt;em&gt;mobile&lt;/em&gt;. Non è infatti possibile ottenere l&amp;rsquo;attuale posizione GPS in un preciso momento: l&amp;rsquo;ultima posizione GPS disponibile si basa su una regressione, effettuata dal sistema, dei dati ricevuti da diversi sensori - antenne wifi, cellulare e ovviamente GPS, e spesso anche i sensori di movimento - in diversi momenti; &lt;strong&gt;il sistema può inviare notifiche alla nostra app in qualsiasi momento&lt;/strong&gt;, ed essa deve essere in grado di &amp;ldquo;digerire&amp;rdquo; correttamente i dati ricevuti, interpretando anche eventuali errori. Scrivere dei test unitari per verificare che la nostra app geolocalizzata funzioni correttamente può presentare non poche difficoltà: non possiamo infatti affidarci ai &amp;ldquo;veri&amp;rdquo; sensori del dispositivo, perché probabilmente i test verranno eseguiti sul simulatore, oppure magari su un vero iPhone la cui ricezione GPS in un certo istante potrà essere più o meno buona, ma essa rappresenterà un solo caso possibile rispetto a tanti. Vogliamo essere in grado di &lt;strong&gt;testare ogni possibile risposta&lt;/strong&gt; del sistema GPS del dispositivo, dall&amp;rsquo;assenza totale di segnale al cambiamento frequente di posizione, alla &lt;strong&gt;mancata autorizzazione&lt;/strong&gt; da parte dell&amp;rsquo;utente per l&amp;rsquo;accesso ai servizi di localizzazione.&lt;/p&gt;

&lt;p&gt;Supponiamo ad esempio che una certa classe, diciamo un &lt;code&gt;UIViewController&lt;/code&gt;, esegua delle &lt;strong&gt;azioni che dipendono dalla posizione ricevuta&lt;/strong&gt;. L&amp;rsquo;idea è quella di testare che il nostro &lt;code&gt;UIViewController&lt;/code&gt; si comporti &amp;ldquo;bene&amp;rdquo; rispetto alle notifiche del sistema di localizzazione. Il progetto Xcode contenente il codice mostrato in questo articolo è disponibile su &lt;a href=&#34;https://github.com/broomburgo/AsyncTestingStubbing&#34;&gt;GitHub&lt;/a&gt;: si consiglia di scaricare il progetto e tenerlo a riferimento per il resto dell&amp;rsquo;articolo.&lt;/p&gt;

&lt;p&gt;Invece di usare direttamente &lt;code&gt;CLLocationManager&lt;/code&gt; per ottenere la posizione GPS del dispositivo, implementeremo una semplice classe che fungerà da &lt;em&gt;wrapper&lt;/em&gt;, chiamata &lt;code&gt;LocationCoordinator&lt;/code&gt;: un&amp;rsquo;istanza di tale classe potrà essere configurata con due semplici funzioni &lt;code&gt;onUpdate&lt;/code&gt; e &lt;code&gt;onFailure&lt;/code&gt;, in modo da evitare l&amp;rsquo;implementazione dei vari metodi di callback del &lt;code&gt;protocol&lt;/code&gt; &lt;code&gt;CLLocationManagerDelegate&lt;/code&gt;. L&amp;rsquo;idea è quella di passare un&amp;rsquo;istanza di &lt;code&gt;LocationCoordinator&lt;/code&gt; al nostro &lt;code&gt;UIViewController&lt;/code&gt;: quest&amp;rsquo;ultimo quindi imposterà le due funzioni di callback indicate sopra, in modo da modificare il suo stato e i dati mostrati all&amp;rsquo;utente.&lt;/p&gt;

&lt;p&gt;Di seguito è riportato il codice della classe &lt;code&gt;LocationCoordinator&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
import CoreLocation

public class LocationCoordinator: NSObject {
    
    public let locationManager: CLLocationManager
    
    public override init() {
        locationManager = CLLocationManager()
        super.init()
        locationManager.delegate = self
        locationManager.requestWhenInUseAuthorization()
    }
    
    private var updated: (CLLocation -&amp;gt; ())?
    public func onUpdate(value: CLLocation -&amp;gt; ()) {
        updated = value
    }
    
    private var failed: (NSError -&amp;gt; ())?
    public func onFailure(value: NSError -&amp;gt; ()) {
        failed = value
    }
}

extension LocationCoordinator: CLLocationManagerDelegate {
    
    public func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!) {
        let location = locations.last as! CLLocation
        if let updated = self.updated {
            updated(location)
        }
    }
    
    public func locationManager(manager: CLLocationManager!, didFailWithError error: NSError!) {
        if let failed = self.failed {
            failed(error)
        }
    }
    
    public func locationManager(manager: CLLocationManager!, didChangeAuthorizationStatus status: CLAuthorizationStatus) {
        switch status {
        case .AuthorizedWhenInUse:
            locationManager.startUpdatingLocation()
        default:
            break
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Come si può vedere, la classe è configurata per richiedere l&amp;rsquo;autorizzazione a leggere la posizione GPS del dispositivo quando l&amp;rsquo;app è in uso, ma non sarà necessario fornire questa autorizzazione per i test: creeremo infatti uno &lt;em&gt;stub&lt;/em&gt; che genererà posizioni arbitrarie, senza usare i sensori di sistema. Si ricorda inoltre che usando iOS SDK &amp;gt;= 8.0, per usare i servizi di localizzazione sarà necessario inserire nel file Info.plist una chiave che descrive il motivo per il quale l&amp;rsquo;app chiede l&amp;rsquo;autorizzazione ad accedere a tali servizi:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/content/images/2015/06/Schermata-2015-06-03-alle-08-44-25-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sebbene l&amp;rsquo;aggiunta della chiave &lt;code&gt;NSLocationWhenIsUseUsageDescription&lt;/code&gt; non sia necessaria per eseguire i test, senza questa chiave l&amp;rsquo;app non potrà funzionare in iOS8 nel caso in cui provassimo ad avviarla normalmente.&lt;/p&gt;

&lt;p&gt;La classe di cui vogliamo testare il corretto funzionamento è indicata nel progetto con il nome di &lt;code&gt;LocationViewController&lt;/code&gt;, e il suo scopo è mostrare le attuali coordinate GPS dell&amp;rsquo;utente o mostrare un messaggio in caso di errore: un sua istanza è, in ogni instante, caratterizzata da un &lt;code&gt;LocationState&lt;/code&gt; che rappresenta in quale stato essa si trova rispetto alla ricerca della posizione GPS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public enum LocationState {
    case Searching
    case Found
    case Error(CLError)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;implementiamo-i-test:4b7c206247a0a425bb1064c53b31df66&#34;&gt;Implementiamo i test&lt;/h2&gt;

&lt;p&gt;Per testare la classe verificheremo che, a seconda dei diversi possibili risultati ottenibili dalla ricerca della posizione GPS, un&amp;rsquo;istanza di essa &lt;strong&gt;aggiorni correttamente il suo stato attuale&lt;/strong&gt;. È quindi necessario fare in modo che un&amp;rsquo;istanza del &lt;code&gt;LocationCoordinator&lt;/code&gt; ignori le notifiche ricevute da &lt;code&gt;CLLocationManager&lt;/code&gt;, in modo da forzare posizioni ed errori comodi per i nostri test; per farlo dichiariamo una sottoclasse di &lt;code&gt;LocationCoordinator&lt;/code&gt; chiamata &lt;code&gt;STUB_LocationCoordinator&lt;/code&gt; che modifichi la &lt;em&gt;parent class&lt;/em&gt; nel seguente modo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ignora le notifiche del &lt;code&gt;locationManager&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;locationManager.stopUpdatingLocation()
locationManager.delegate = nil
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;dichiara 4 funzioni per forzare posizione GPS e/o errori:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;forceLocation
forceError
forceRandomDelayedLocations
forceDelayedErrorLocationUnknown
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ciascuna di queste funzioni genera le stesse notifiche che normalmente genererebbe &lt;code&gt;CLLocationManager&lt;/code&gt;. Le prime due funzioni, &lt;code&gt;forceLocation&lt;/code&gt; e &lt;code&gt;forceError&lt;/code&gt; forzano immediatamente una certa posizione GPS o un certo errore, mentre la funzione &lt;code&gt;forceRandomDelayedLocations&lt;/code&gt; genera una serie di posizioni casuali dopo un certo ritardo e a intervalli regolari, e la funzione &lt;code&gt;forceDelayedErrorLocationUnknown&lt;/code&gt; forza un errore del tipo &lt;code&gt;.LocationUnknown&lt;/code&gt; dopo un certo ritardo.&lt;/p&gt;

&lt;p&gt;Prima di procedere con i test osserviamo che nel file &lt;code&gt;AsyncTestingStubbingTests.swift&lt;/code&gt; c&amp;rsquo;è una sezione &lt;em&gt;utility&lt;/em&gt; nella quale sono implementate alcune funzioni comode per &lt;strong&gt;rendere  il codice dei test più espressivo&lt;/strong&gt;. Ad esempio la funzione &lt;code&gt;mainViewController&lt;/code&gt; ritorna l&amp;rsquo;istanza del LocationViewController utilizzata nell&amp;rsquo;interfaccia grafica nell&amp;rsquo;app. Il &lt;em&gt;testing framework&lt;/em&gt; integrato in Xcode è chiamato &lt;code&gt;XCTest&lt;/code&gt;, e per quanto adeguatamente completo nelle sue funzionalità, esso è principalmente basato su funzioni del tipo &lt;code&gt;XCTAssert&lt;/code&gt; che verificano che una qualche condizione sia vera, e se non lo è stampano in console un messaggio di errore passato alla stessa funzione &lt;code&gt;XCTAssert&lt;/code&gt; nel momento in cui essa è chiamata: questo può portare alla scrittura di &lt;strong&gt;test verbosi e poco espressivi&lt;/strong&gt;. Ci sono diverse librerie facilmente integrabili nei progetti Xcode che semplificano la scrittura dei nostri &lt;em&gt;assert&lt;/em&gt;, come ad esempio &lt;a href=&#34;https://github.com/Quick/Nimble&#34;&gt;Nimble&lt;/a&gt;, ma come si può vedere dalle poche funzioni di utility implementate nel progetto associato a questo articolo, basta poco per migliorare consistentemente la leggibilità dei nostri test.&lt;/p&gt;

&lt;p&gt;A questo punto possiamo procedere all&amp;rsquo;implementazione dei test. Le funzioni &lt;code&gt;testLocation&lt;/code&gt; e &lt;code&gt;testError&lt;/code&gt; testano semplicemente che lo stato del &lt;code&gt;mainViewController&lt;/code&gt; sia corretto prima e dopo la generazione di una posizione GPS e di un errore arbitrari. Tuttavia questi test non permettono di rappresentare correttamente un caso d&amp;rsquo;uso tipico, perché &lt;strong&gt;le notifiche sulla posizione GPS posso arrivare in qualsiasi momento&lt;/strong&gt;, e il &lt;code&gt;LocationViewController&lt;/code&gt; deve essere in grado di &lt;em&gt;reagire&lt;/em&gt; alle notifiche nel momento in cui queste si presentano. Per simulare la cosa useremo due test &lt;em&gt;asincroni&lt;/em&gt;, cioè test il cui risultato non è ottenuto immediatamente, ma dopo un certo tempo: l&amp;rsquo;idea è quella di &amp;ldquo;mettere in pausa&amp;rdquo; i test per un certo numero di secondi, finché non si verifica una certa condizione oppure non scade il tempo: in quest&amp;rsquo;ultimo caso il test verrà considerato &lt;strong&gt;fallito&lt;/strong&gt; da &lt;code&gt;XCTest&lt;/code&gt; perché la condizione attesa non si è verificata entro il tempo richiesto.&lt;/p&gt;

&lt;p&gt;Riportiamo ad esempio il codice della funzione &lt;code&gt;testDelayedLocation&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func testDelayedLocation() {
        if let vc = mainViewController() {
            let locationExpectation = expectationWithDescription(&amp;quot;locationExpectation&amp;quot;)
            let coordinator = STUB_LocationCoordinator()
            vc.showLocationWithCoordinator(coordinator)
            vc.locationState.assertState(.Searching)
            coordinator.forceRandomDelayedLocations(0.25, times:3)
            after(0.5) {
                vc.locationState.assertState(.Found)
                after(0.25) {
                    vc.locationState.assertState(.Found)
                    locationExpectation.fulfill()
                }
            }
            vc.locationState.assertState(.Searching)
            waitForExpectationsWithTimeout(1, handler: nil)
        }
        else {
            fail(&amp;quot;this will never happen&amp;quot;)
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La funzione di utility &lt;code&gt;after&lt;/code&gt; semplicemente esegue del codice dopo un certo numero di secondi: in base all&amp;rsquo;implementazione di &lt;code&gt;forceRandomDelayedLocations&lt;/code&gt; presente in &lt;code&gt;STUB_LocationCoordinator&lt;/code&gt;, il &lt;code&gt;LocationViewController&lt;/code&gt; dovrebbe  ricevere alcune posizioni GPS a intervalli regolari dopo un certo ritardo, e per verificarlo inseriamo due &lt;em&gt;assert&lt;/em&gt;, dopo mezzo secondo e poi ancora un quarto di secondo. Per realizzare il test asincrono  definiamo una &lt;code&gt;XCTestExpectation&lt;/code&gt;, quindi una &amp;ldquo;aspettativa&amp;rdquo;, chiamata &lt;code&gt;locationExpectation&lt;/code&gt;: in coda al codice di test chiamiamo la funzione &lt;code&gt;waitForExpectationsWithTimeout&lt;/code&gt; che fa continuare la funzione di test - senza che essa &lt;em&gt;ritorni&lt;/em&gt; - fino alla &amp;ldquo;realizzazione&amp;rdquo; delle aspettative, tenendo conto di un certo tempo di timeout. Quindi, per &amp;ldquo;realizzare&amp;rdquo; un&amp;rsquo;aspettativa, chiamiamo la funzione &lt;code&gt;fulfill&lt;/code&gt; su &lt;code&gt;locationExpectation&lt;/code&gt;, ma solo dopo aver verificato che lo stato del &lt;code&gt;LocationViewController&lt;/code&gt; sia quello corretto.&lt;/p&gt;

&lt;p&gt;Possiamo estendere ulteriormente la &lt;em&gt;test suite&lt;/em&gt; implementando altri test che simulano ogni tipo di errore possibile, oppure che simulano una situazione in cui posizioni GPS e errori si alternano: una volta compresa la struttura di base per realizzare &lt;em&gt;stub&lt;/em&gt; e test asincroni sarà facile migliorare la &lt;a href=&#34;http://engineering.facile.it/software-testing-coverage-vs-efficacia/&#34;&gt;coverage&lt;/a&gt; dei nostri test.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facile.it devs @ PHP Day 2015</title>
      <link>/blog/ita/php-day-2015/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/php-day-2015/</guid>
      <description>

&lt;p&gt;Anche quest&amp;rsquo;anno si è svolto il &lt;strong&gt;&lt;a href=&#34;http://2015.phpday.it/&#34;&gt;PHP Day&lt;/a&gt; a Verona, il 15 e 16 maggio&lt;/strong&gt;. Noi sviluppatori di Facile.it abbiamo partecipato con un folto gruppo e seguito i vari talks.&lt;/p&gt;

&lt;p&gt;In questo breve articolo vorremmo citare quelli che in qualche maniera &lt;strong&gt;ci hanno colpito&lt;/strong&gt;, per motivi tecnici e non, per dare l&amp;rsquo;opportunità a chi non ha potuto partecipare di sapere qualcosa di più, o per dare &lt;strong&gt;un assaggio della conferenza&lt;/strong&gt; a chi non ha mai partecipato a qualcosa del genere e, speriamo, invogliarlo a far parte della community!&lt;/p&gt;

&lt;p&gt;Ovviamente non pretendiamo di fare una recensione, né quanto meno una classifica&amp;hellip; I talk che abbiamo scelto di citare sono stati scelti per puro &lt;strong&gt;gusto personale&lt;/strong&gt;, o ci hanno semplicemente colpito perché si avvicinavano di più alla nostra esperienza di sviluppatori, o perché toccavano più da vicino lo &lt;strong&gt;stack tecnologico&lt;/strong&gt; da noi utilizzato.&lt;/p&gt;

&lt;p&gt;I talk sono in ordine cronologico. Buona lettura!&lt;/p&gt;

&lt;h4 id=&#34;indice:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Indice&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#prophecy&#34;&gt;PHP object mocking framework world: let&amp;rsquo;s compare Prophecy and PHPUnit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#containerize&#34;&gt;Containerize your PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#varnish&#34;&gt;Going crazy with Symfony2 and Varnish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#psr-7&#34;&gt;Hello, PSR-7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#php7-data-structures&#34;&gt;PHP Data Structures (and the impact of PHP 7 on them)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#doctrine&#34;&gt;Doctrine ORM Good Practices and Tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;keynotes:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Keynotes&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#coderabbi&#34;&gt;Talmudic Maxims to Maximize Your Growth as a Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#calevans&#34;&gt;Down the Rabbit Hole: Lessons Learned combining Career and Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#seldaek&#34;&gt;Behind the Scenes of Maintaining an Open Source Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;talk-tecnici:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Talk tecnici&lt;/h1&gt;

&lt;p&gt;&lt;a name=&#34;prophecy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;php-object-mocking-framework-world-let-s-compare-prophecy-and-phpunit:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;PHP object mocking framework world: let&amp;rsquo;s compare Prophecy and PHPUnit&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Sarah Khalil (&lt;a href=&#34;http://twitter.com/saro0h&#34;&gt;@saro0h&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 14:30 – 15:30 - track 1 (&lt;a href=&#34;https://speakerdeck.com/saro0h/php-day-verona-2015-php-object-mocking-framework-world&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134728681&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Una buona esposizione su &lt;a href=&#34;https://github.com/phpspec/prophecy-phpunit&#34;&gt;prophecy&lt;/a&gt; la nuova tecnologia per effetuare mocking e stubbing. In questo talk sono state illustrate le API di prophecy e si è parlato di come questo strumento sarà sempre più integrato con phpunit (è già presente nella nuova versione 4.6) sino ad arrivare ad un completo rimpiazzo dei metodi nativi del famoso testing framework.&lt;/p&gt;

&lt;p&gt;Ricordatevi di aggiungere qualche altra parola (oltre a prophecy) chiave nelle vostre ricerche su google per evitare riferimenti biblici.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;containerize&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;containerize-your-php:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Containerize your PHP&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Marek Jelen (&lt;a href=&#34;http://twitter.com/marek_jelen&#34;&gt;@marek_jelen&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 15:30 – 16:30 - track 2&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134728683&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Si è parlato tanto nelle Conferences dell&amp;rsquo;ultimo anno di &lt;strong&gt;Docker e i container&lt;/strong&gt; come strumento di sviluppo, ma questo talk si è rivelato interessante, spiegando come fosse possibile utilizzare i container &lt;strong&gt;come strumento di deploy&lt;/strong&gt; e di creazione di immagini, in modo tale da contenere anche il sorgente del proprio progetto; abbiamo scoperto il tool &lt;a href=&#34;http://github.com/openshift/source-to-image&#34;&gt;Source to Image&lt;/a&gt;, che permette di creare queste immagini in maniera personalizzata e automatizzata partendo dal proprio codice (e dal &lt;code&gt;composer.json&lt;/code&gt;), e il progetto &lt;a href=&#34;http://www.openshift.com/&#34;&gt;Openshift&lt;/a&gt;, portato avanti da RedHat.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;varnish&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;going-crazy-with-symfony2-and-varnish:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Going crazy with Symfony2 and Varnish&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;David De Boer&lt;/li&gt;
&lt;li&gt;Day 1 - 17:30 – 18:00 - track 1&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134814726&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Prima di ascoltare questo talk, pensavamo che la &lt;strong&gt;cache HTTP&lt;/strong&gt; (e Varnish) fossero praticamente inutilizzabili in un &lt;strong&gt;ambito di sito non-pubblico&lt;/strong&gt;, dove i contenuti vanno serviti (e variano in base) ad utenti sempre autenticati.&lt;/p&gt;

&lt;p&gt;Abbiamo scoperto il &lt;a href=&#34;http://github.com/FriendsOfSymfony/FOSHttpCacheBundle&#34;&gt;FOSHttpCacheBundle&lt;/a&gt;, e il trucco che permette di fare caching anche di questo tipo di contenuti: Varnish prende il cookie e controlla la cache non in base a quello, ma in base ad un hash che viene fornito dall&amp;rsquo;applicazione stessa tramite un altra chiamata; questo permette di &lt;strong&gt;mappare i contenuti cachati&lt;/strong&gt; non sui singoli utenti, ma &lt;strong&gt;con logiche più ottimizzate&lt;/strong&gt; (gruppi di utenti? set di permessi?) ed eventualmente più legate alla business logic dell&amp;rsquo;applicazione stessa.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;psr-7&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;hello-psr-7:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Hello, PSR-7&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Beau Simensen (&lt;a href=&#34;http://www.twitter.com/beausimensen&#34;&gt;@beausimensen&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 11:00 – 12:00 - track 2 (&lt;a href=&#34;https://beau.io/talks/2015/05/16/hello-psr-7-phpday-2015/&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134281520&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In questo talk abbiamo potuto conoscere da vicino la genesi dello &lt;strong&gt;standard PSR-7&lt;/strong&gt; (di cui abbiamo già scritto in un &lt;a href=&#34;http://engineering.facile.it/php-fig-standard-psr-7-http-message-interfaces/&#34;&gt;altro articolo&lt;/a&gt;), raccontata da una delle persone che hanno seguito da vicino e contribuito alla scrittura della proposta stessa.&lt;/p&gt;

&lt;p&gt;Lo standard sarà approvato a brevissimo (solo 3 giorni dopo il talk!) e molti aspettano di vedere cosa comporterà a livello di framework PHP.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;php7-data-structures&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;php-data-structures-and-the-impact-of-php-7-on-them:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;PHP Data Structures (and the impact of PHP 7 on them)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Patrick Allaert (&lt;a href=&#34;http://www.twitter.com/patrick_allaert&#34;&gt;@patrick_allaert&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 12:00 – 13:00 - track 1 (&lt;a href=&#34;http://www.slideshare.net/patrick.allaert/php-data-structures-and-the-impact-of-php-7-on-them-php-days-2015&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134070469&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Questo talk, dal sapore molto tecnico, ci ha fatto addentrare negli internals degli &lt;strong&gt;array PHP&lt;/strong&gt;, e in quanto siano talmente specializzati a far tutto, da essere &lt;strong&gt;inefficienti&lt;/strong&gt; in moltissimi casi; abbiamo visto numerose &lt;strong&gt;alternative più specialistiche&lt;/strong&gt; per i vari casi d&amp;rsquo;uso (&lt;a href=&#34;http://php.net/manual/en/class.splfixedarray.php&#34;&gt;SplFixedArray&lt;/a&gt;, &lt;a href=&#34;http://php.net/manual/en/class.splqueue.php&#34;&gt;SplQueue&lt;/a&gt;, &lt;a href=&#34;http://php.net/manual/en/class.splstack.php&#34;&gt;SplStack&lt;/a&gt;&amp;hellip;); sfruttare gli uni piuttosto che gli altri impatta fortemente sulle &lt;strong&gt;prestazioni&lt;/strong&gt; nei tempi e nell&amp;rsquo;uso della memoria, e abbiamo visto nel dettaglio alcuni benchmark che mostrano come questi costi diminuiscono (spesso di gran lunga) &lt;strong&gt;tra PHP 5.6 e PHP 7&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;doctrine&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;doctrine-orm-good-practices-and-tricks:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Doctrine ORM Good Practices and Tricks&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Marco Pivetta (&lt;a href=&#34;http://www.twitter.com/Ocramius&#34;&gt;@Ocramius&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 15:30 – 16:30 - track 1&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134178140&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Usiamo &lt;strong&gt;Doctrine&lt;/strong&gt; tutti i giorni, ma questo talk, sebbene marcato come di livello &lt;strong&gt;beginner&lt;/strong&gt;, si è rivelato molto interessante e fonte di numerose discussioni e &lt;strong&gt;riflessioni&lt;/strong&gt; tra colleghi. Lo speaker è uno dei principali contributors al progetto &lt;a href=&#34;https://github.com/doctrine/doctrine2&#34;&gt;doctrine-orm&lt;/a&gt;, e ci ha elencato una serie di &lt;strong&gt;best practices&lt;/strong&gt;, partendo dal chiedersi se e quando è il caso di usare un ORM, passando poi a problemi quali l&amp;rsquo;uso e l&amp;rsquo;implementazione di entità, la loro consistenza, l&amp;rsquo;evitare di usare setter brutali o di esporre le ArrayCollection che rappresentano le nostre relazioni.&lt;/p&gt;

&lt;h1 id=&#34;keynotes-1:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Keynotes&lt;/h1&gt;

&lt;p&gt;Abbiamo voluto citare in questo articolo anche i &lt;strong&gt;3 keynote&lt;/strong&gt; della conferenza: sono stati tutti piuttosto interessanti, profondamente motivazionali e coinvolgenti.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;coderabbi&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;talmudic-maxims-to-maximize-your-growth-as-a-developer:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Talmudic Maxims to Maximize Your Growth as a Developer&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Yitzchok Willroth (&lt;a href=&#34;http://www.twitter.com/coderabbi&#34;&gt;@coderabbi&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - keynote di apertura&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yitz, studente rabbinico poi passato alla programmazione, molto famoso nella community PHP, ci ha spinto a considerare alcuni suoi consigli su come poterci &lt;strong&gt;migliorare come sviluppatori&lt;/strong&gt; e come membri della community stessa: cercare e coltivare un mentore, essere pazienti ed accettare i consigli, aiutare gli altri per ripagare tutto questo, partecipare nell&amp;rsquo;open source&amp;hellip;&lt;/p&gt;

&lt;p&gt;Personalmente, mi ha anche fatto scoprire tre siti piuttosto interessanti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://phpmentoring.org/&#34;&gt;PHP Mentoring&lt;/a&gt; e &lt;a href=&#34;http://hackpledge.org&#34;&gt;Hackpledge&lt;/a&gt;, per chi è in cerca di un &lt;strong&gt;mentore&lt;/strong&gt; o vuole diventarlo per aiutare altri a diventare programmatori migliori&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://up-for-grabs.net/&#34;&gt;Up for grabs&lt;/a&gt;, un sito raccoglitore di &lt;strong&gt;issue su GitHub *semplici&lt;/strong&gt;*, un ottimo punto di inizio per chi vorrebbe partecipare a progetti open source, ma non sa da dove cominciare&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;calevans&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;down-the-rabbit-hole-lessons-learned-combining-career-and-community:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Down the Rabbit Hole: Lessons Learned combining Career and Community&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Cal Evans (&lt;a href=&#34;http://www.twitter.com/calevans&#34;&gt;@CalEvans&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - keynote di apertura&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cal è il community manager (ma non chiamatelo così!) per Zend, e ci ha raccontato con estrema passione, qualche lacrima e in maniera molto divertente la sua storia, come è nata la sua carriera di programmatore e come il suo percorso si è intrecciato con la community PHP e il mondo dell&amp;rsquo;open source.&lt;/p&gt;

&lt;p&gt;Tutto questo per spiegarci come &lt;strong&gt;far parte della community è un valore&lt;/strong&gt; importante per tutti ma soprattutto per noi stessi, e come la nostra sia così grande, forte e basata su uno &lt;strong&gt;spirito positivo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;seldaek&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;behind-the-scenes-of-maintaining-an-open-source-project:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Behind the Scenes of Maintaining an Open Source Project&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Jordi Boggiano (&lt;a href=&#34;http://twitter.com/seldaek&#34;&gt;@seldaek&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - keynote di chiusura&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jordi è il creatore e mantainer di &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;, uno dei principali tool per un programmatore PHP. Nel suo keynote ci ha raccontato con franchezza la sua esperienza in prima persona nel &lt;strong&gt;gestire un progetto open source&lt;/strong&gt; così vasto e popolare, come spesso sia difficile accontentare tutti, e alcuni retroscena e dettagli di qualche curiosa pull request.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intelligenza artificiale: algoritmo A*</title>
      <link>/blog/ita/intelligenza-artificiale-algoritmo-a-star/</link>
      <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/intelligenza-artificiale-algoritmo-a-star/</guid>
      <description>

&lt;h1 id=&#34;introduzione:2400028604853ea154d2cde8c70195ac&#34;&gt;Introduzione&lt;/h1&gt;

&lt;p&gt;A* è un &lt;a href=&#34;https://it.wikipedia.org/wiki/Algoritmo_di_ricerca&#34;&gt;algoritmo di ricerca&lt;/a&gt; e ottimizzazione basato su grafi. Viene frequentemente impiegato nell&amp;rsquo;&lt;a href=&#34;https://it.wikipedia.org/wiki/Intelligenza_artificiale&#34;&gt;intelligenza artificiale&lt;/a&gt; perché in grado di gestire grafi ampi e
indeterminati.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;algoritmo A* può essere utilizzato per risolvere problemi come: &lt;a href=&#34;https://it.wikipedia.org/wiki/Gioco_del_quindici&#34;&gt;gioco del 15&lt;/a&gt;, percorso minimo, &lt;a href=&#34;https://it.wikipedia.org/wiki/Sudoku&#34;&gt;Sudoku&lt;/a&gt;, &lt;a href=&#34;https://it.wikipedia.org/wiki/Cubo_di_Rubik&#34;&gt;cubo di Rubik&lt;/a&gt;, ecc.&lt;/p&gt;

&lt;p&gt;In generale, A* può risolvere efficacemente i problemi che soddisfano i requisiti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La soluzione è determinata da cambamenti sequenziali di stato rappresentabili con grafi;&lt;/li&gt;
&lt;li&gt;Il nodo iniziale e il nodo finale devono essere noti. Talvolta è sufficiente conoscere solo le regole che compongono la soluzione (vedi Sudoku);&lt;/li&gt;
&lt;li&gt;Deve essere noto un &lt;strong&gt;algoritmo euristico&lt;/strong&gt; che &lt;strong&gt;stima&lt;/strong&gt; il costo del percorso tra un nodo qualsiasi e la soluzione.&lt;/li&gt;
&lt;li&gt;Deve essere sempre noto il costo che separa due nodi adiacenti. (Nella maggioranza dei problemi tale valore è sempre unitario).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;l-euristica:2400028604853ea154d2cde8c70195ac&#34;&gt;L&amp;rsquo;euristica&lt;/h1&gt;

&lt;p&gt;L&amp;rsquo;&lt;a href=&#34;https://it.wikipedia.org/wiki/Algoritmo_euristico&#34;&gt;algoritmo euristico&lt;/a&gt; ha il compito di stimare la distanza tra qualsiasi nodo e la soluzione.
L&amp;rsquo;euristica influenza fortemente i risultati conseguiti da A*. Esso, in particolare, ne determina il tempo complessivo di esecuzione.
Un algoritmo euristico molto efficace consente ad A* di trovare velocemente la soluzione.
Nel caso pessimo, una funzione euristica costante, A* diviene un algoritmo di ricerca molto simile a &lt;a href=&#34;https://it.wikipedia.org/wiki/Algoritmo_di_Dijkstra&#34;&gt;Dijkstra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;euristica determina anche la qualità della soluzione finale.
Con un&amp;rsquo;&lt;a href=&#34;http://www.okpedia.it/euristica_ammissibile&#34;&gt;euristica ammissibile&lt;/a&gt; A* è in grado di identificare la soluzione ottima (e.g. percorso con il minor costo possibile).
Un&amp;rsquo;euristica è ammissibile quando l&amp;rsquo;errore di stima non è mai in eccesso. Un esempio è la distanza in linea d&amp;rsquo;aria tra due punti su una mappa.
In termini matematici una funzione euristica h è ammissibile se:
&lt;div style=&#34;text-align: center; margin: 0 0 2em 0;&#34;&gt;
    &lt;img src=&#34;/images/intelligenza-artificiale-algoritmo-a-star/ammissibilita.gif&#34; alt=&#34;&#34; /&gt;
    &lt;!-- \forall x \in V : h(s, x) \leq g(s, x) --&gt;
&lt;/div&gt;
Dove V è l&amp;rsquo;insieme dei nodi, s è il nodo soluzione e la funzione g calcola la distanza esatta tra due nodi.&lt;/p&gt;

&lt;p&gt;La funzione euristica si dice monotòna o consistente se:
&lt;div style=&#34;text-align: center; margin: 0 0 2em 0;&#34;&gt;
    &lt;img src=&#34;/images/intelligenza-artificiale-algoritmo-a-star/monotonia.gif&#34; alt=&#34;&#34; /&gt;
    &lt;!-- \forall (x, y) \in E : h(s, x) \leq g(x, y) + h(s, y) --&gt;
&lt;/div&gt;
Dove E è l&amp;rsquo;insieme degli archi, s è il nodo soluzione e la funzione g calcola la distanza esatta tra due nodi.&lt;/p&gt;

&lt;p&gt;Una funzione euristica monotona semplifica ulteriormente la struttura di A* in quanto la lista dei nodi già visitati diviene superflua. In questi casi, la sola coda a priorità è sufficiente.
Una funzione euristica monotona è sempre ammissibile.&lt;/p&gt;

&lt;h1 id=&#34;struttura-dell-algoritmo:2400028604853ea154d2cde8c70195ac&#34;&gt;Struttura dell&amp;rsquo;algoritmo&lt;/h1&gt;

&lt;p&gt;A* rientra nella categoria degli algoritmi di &lt;strong&gt;&lt;a href=&#34;https://it.wikipedia.org/wiki/Best-first_search&#34;&gt;ricerca best-first&lt;/a&gt;&lt;/strong&gt;. Esso infatti esamina, passo dopo passo, i nodi che hanno il punteggio migliore.
Esso tuttavia non è &lt;em&gt;&lt;a href=&#34;https://it.wikipedia.org/wiki/Algoritmo_greedy&#34;&gt;greedy&lt;/a&gt;&lt;/em&gt; in quanto il punteggio non è determinato esclusivamente dall&amp;rsquo;euristica.&lt;/p&gt;

&lt;p&gt;A* usa le seguenti strutture dati per mantenere traccia dello stato d&amp;rsquo;esecuzione:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Una lista di nodi già visitati;&lt;/li&gt;
&lt;li&gt;Una &lt;a href=&#34;https://it.wikipedia.org/wiki/Coda_di_priorit%C3%A0&#34;&gt;coda a priorità&lt;/a&gt; contentente i nodi da visitare.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nel corso dell&amp;rsquo;esecuzione, ad ogni nodo vengono associati più valori: &lt;em&gt;gScore, hScore, fScore.&lt;/em&gt;
In termini matematici, dato il nodo corrente n, il nodo di partenza p e il nodo soluzione s, si deifiniscono i valori:
&lt;div style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;/images/intelligenza-artificiale-algoritmo-a-star/g-score.gif&#34; alt=&#34;&#34; /&gt;
&lt;/div&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;/images/intelligenza-artificiale-algoritmo-a-star/h-score.gif&#34; alt=&#34;&#34; /&gt;
&lt;/div&gt;
&lt;div style=&#34;text-align: center; margin: 0 0 2em 0;&#34;&gt;
    &lt;img src=&#34;/images/intelligenza-artificiale-algoritmo-a-star/f-score.gif&#34; alt=&#34;&#34; /&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;La &lt;strong&gt;funzione g&lt;/strong&gt; calcola il &lt;strong&gt;costo effettivo&lt;/strong&gt; del percorso che separa i nodi p (partenza) e n (attuale).
La &lt;strong&gt;funzione h&lt;/strong&gt; calcola una &lt;strong&gt;stima&lt;/strong&gt; del costo del percorso tra i nodi s (soluzione) e n (attuale).
La funzione h corrisponde alla definizione dell&amp;rsquo;algoritmo euristico enunciato in precedenza. Essa è infatti chiamata spesso &lt;em&gt;funzione euristica&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La struttura dell&amp;rsquo;algoritmo A* è molto semplice. Esso, ad alto livello, può essere schematizzato in 8 passi:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inserimento nella coda del nodo di partenza con priorità pari al fScore;&lt;/li&gt;
&lt;li&gt;Se la coda è vuota, l&amp;rsquo;algoritmo termina: &lt;em&gt;soluzione non trovata&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Estrazione del miglior nodo da visitare (priorità con valore più basso);&lt;/li&gt;
&lt;li&gt;Se il nodo estratto ha hScore nullo, l&amp;rsquo;algoritmo termina: &lt;em&gt;soluzione trovata&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Costruzione dei nodi figli;&lt;/li&gt;
&lt;li&gt;Eliminazione dei nodi figli già visitati e subottimi;&lt;/li&gt;
&lt;li&gt;Inserimento dei nodi rimanenti nella coda con priorità pari al fScore;&lt;/li&gt;
&lt;li&gt;Tornare al punto 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In pseudo-codice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;begin function aStar(startNode)
    queue := buildPriorityQueue()
    visited := buildList()
    queue.add(startNode)
    begin while queue.isNotEmpty()
        node := queue.pop()
        begin if hScore(node) equals 0
            return node.getPath()
        end if
        children := node.getChildren()
        toInsert := buildList()
        begin for child in children
            begin if child is visited and visited.fScore &amp;gt; child.fScore
                toInsert.add(child)
            end if
        end for
        queue.add(&amp;lt;every elem in toInsert&amp;gt;)
    end while
    return &#39;No solution found&#39;
end function
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;esempio-d-implementazione:2400028604853ea154d2cde8c70195ac&#34;&gt;Esempio d&amp;rsquo;implementazione&lt;/h1&gt;

&lt;p&gt;Si analizza un&amp;rsquo;implementazione dell&amp;rsquo;algoritmo A* che consente di risolvere il problema del &lt;a href=&#34;https://it.wikipedia.org/wiki/Gioco_del_quindici&#34;&gt;gioco del 15&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il software è disponibile su GitHub all&amp;rsquo;indirizzo &lt;a href=&#34;https://github.com/taueres/a-star-15-puzzle-solver&#34;&gt;https://github.com/taueres/a-star-15-puzzle-solver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La funzione euristica utilizzata è la &lt;a href=&#34;http://it.wikipedia.org/wiki/Geometria_del_taxi&#34;&gt;Distanza di Manhattan&lt;/a&gt;, definita nel modo seguente:
&lt;div style=&#34;text-align: center; margin: 0 0 2em 0;&#34;&gt;
    &lt;img src=&#34;/images/intelligenza-artificiale-algoritmo-a-star/distanza-di-manhattan.gif&#34; alt=&#34;&#34; /&gt;
    &lt;!-- man(p, p&#39;) = \sum_{i=1}^{15} |x_i - x&#39;_i| + |y_i - y&#39;_i| --&gt;
&lt;/div&gt;
Essa calcola, per ogni casella, la quantità minima di spostamenti necessari per arrivare dalla posizione p alla posizione p&amp;rsquo;.
È dimostrabile che la Distanza di Manhattan è &lt;em&gt;ammissibile&lt;/em&gt; e &lt;em&gt;monotona&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;implementazione ha diverse componenti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Main.py&lt;/strong&gt;:  Stabilisce la posizione di partenza, avvia l&amp;rsquo;algoritmo e mostra la soluzione;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Node.py&lt;/strong&gt;:  Struttura dati rappresentante ciascun nodo del grafo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NodeBuilder.py&lt;/strong&gt;:   Costruisce i nodi figli a partire dal nodo in ingresso;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NodePool.py&lt;/strong&gt;:  Coda a priorità con i nodi da visitare. Esso memorizza anche i nodi già visitati con il solo scopo di non inserirli nuovamente nella coda;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ManhattanDistance.py&lt;/strong&gt;: Implementazione dell&amp;rsquo;euristica. Esso determina anche la posizione risolutiva del problema;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AStar.py&lt;/strong&gt;: Implementazione dell&amp;rsquo;algoritmo A*.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L&amp;rsquo;algoritmo mostra in output la lista dei movimenti che la casella vuota deve compiere per risolvere il problema.&lt;/p&gt;

&lt;h1 id=&#34;conclusioni:2400028604853ea154d2cde8c70195ac&#34;&gt;Conclusioni&lt;/h1&gt;

&lt;p&gt;A* è un algoritmo semplice ma dalle grandi potenzialità. Esso getta le basi per ulteriori metodologie di ricerca più complesse come &lt;a href=&#34;https://en.wikipedia.org/wiki/Iterative_deepening_A*&#34;&gt;IDA*&lt;/a&gt; e &lt;a href=&#34;https://en.wikipedia.org/wiki/D*&#34;&gt;D*&lt;/a&gt;.
La sua principale limitazione è nell&amp;rsquo;assenza di &lt;em&gt;vincoli sulla profondità di ricerca&lt;/em&gt;.
Ciò non consente l&amp;rsquo;analisi di problemi troppo complessi come i giochi di dama e scacchi.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>