<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>REST on Facile.it Engineering</title>
    <link>https://engineering.facile.it/categories/rest/</link>
    <description>Recent content in REST on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://engineering.facile.it/categories/rest/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GraphQL: an introduction</title>
      <link>https://engineering.facile.it/blog/eng/graphql-an-introduction/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/graphql-an-introduction/</guid>
      <description>

&lt;h2 id=&#34;the-lesson-we-learned-with-rest&#34;&gt;The lesson we learned with REST&lt;/h2&gt;

&lt;p&gt;For many developers, nowadays, building an &lt;strong&gt;API&lt;/strong&gt; for their applications essentially means mapping the &lt;em&gt;resources&lt;/em&gt; of the domain to &lt;em&gt;URIs&lt;/em&gt;, with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34;&gt;REST&lt;/a&gt; principles in mind.
Usually creating a &lt;strong&gt;&lt;em&gt;RESTful&lt;/em&gt;&lt;/strong&gt; system is not difficult, and the simplicity of the idea makes the task easier.
Let&amp;rsquo;s see some of the consequences and benefits of choosing REST:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every HTTP verb has its own meaning, allowing the developer to understand immediately what kind of operation (typically among the CRUD ones) is going to be performed on the resource identified by the URI.&lt;/li&gt;
&lt;li&gt;Often the same URI can be used with multiple verbs to accomplish different tasks (e.g. &amp;ldquo;example.com/tag/123&amp;rdquo; refers to a particular tag that you can retrieve, update or delete).&lt;/li&gt;
&lt;li&gt;Controllers in many server-side frameworks can be created with a RESTful approach, each one of them representing one or more resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, unfortunately, it&amp;rsquo;s often easy to come across some problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complex URIs can be difficult to write or understand and sometimes they are subject to arbitrary interpretations.&lt;/li&gt;
&lt;li&gt;In order to filter collections you may need to use one or more ids embedded in the URL, but also &lt;em&gt;query parameters&lt;/em&gt;, e.g. when you want to sort the results of a GET by one particular field or retrieve resources by some field other than the id.&lt;/li&gt;
&lt;li&gt;There is no standard or easy way for the client to specify the list of fields that it needs, and the server will usually return all the data related to the requested resource.&lt;/li&gt;
&lt;li&gt;More importantly, there is no standard way for the client to decide which resources related to the one requested should be returned, resulting in a lot of noise in the response content (unless the server application offers multiple endpoints to access the same resource but with different subsets of data&amp;hellip; but this could lead to API design problems).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can&amp;rsquo;t really blame REST for these and other cons. Its power comes from simplicity and developers are thankful for this breath of fresh air. You have just one transport layer, i.e. HTTP, with its features and rules.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s see how we can take a step forward and add some salt to our APIs, to make them even more powerful and expressive.&lt;/p&gt;

&lt;h2 id=&#34;a-new-way-to-design-api-graphql&#34;&gt;A new way to design API: GraphQL&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt; maintains all the advantages of REST (relies on HTTP, very small overhead on requests, stateless and cacheable) and adds some very useful enhancements.
One of the main reasons why &lt;strong&gt;Facebook&lt;/strong&gt; created it back in 2012 was the need to find a way to access data on their server that allowed any type of client and device (especially mobile site and app) to decide exactly what fields they need, reducing the payload and then minimizing the traffic.&lt;/p&gt;

&lt;p&gt;Instead of explaining all the features, which can be read in the &lt;a href=&#34;http://graphql.org/docs/getting-started/&#34;&gt;official guide&lt;/a&gt;, in this post we&amp;rsquo;ll focus on what makes GraphQL interesting.
In the next section we&amp;rsquo;ll use types and queries presented in our example project, that you can clone from &lt;a href=&#34;https://github.com/poetcyborg/graphql-node-starter-kit&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;types-and-fields-driven-queries&#34;&gt;Types and fields driven queries&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Example #1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games {
        id
	    title
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previous snippet describes a query issued by the client when it just needs to retrieve &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;title&lt;/em&gt; of a &lt;strong&gt;&lt;em&gt;game&lt;/em&gt;&lt;/strong&gt;.
Since no argument has been passed to filter the data of the specified type (&lt;em&gt;game&lt;/em&gt;), all the games will be retrieved.
The output for this query is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;games&amp;quot;: [{
        &amp;quot;id&amp;quot;: 1,
        &amp;quot;title&amp;quot;: &amp;quot;Frogger&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 2,
        &amp;quot;title&amp;quot;: &amp;quot;Galaxian&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 3,
        &amp;quot;title&amp;quot;: &amp;quot;Tiger Road&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 4,
        &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With REST, the same task could be accomplished with the following url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game?fields=id,title
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unless the server applications is taking care of field filtering based on query params, all the information about every game will be returned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games(id:2) {
        id
        title
        year
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example #3&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games(title:&amp;quot;Frogger&amp;quot;) {
		id
        title
        year
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples #2 and #3 show a way to filter games by their &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;title&lt;/em&gt; respectively.
As you can see, the id has no semantic meaning like in REST, so you can describe the filter criterion in the same manner (&lt;em&gt;fieldname: &amp;ldquo;value&amp;rdquo;&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The REST equivalent (selected fields are omitted) for Example #2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game/2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and #3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game?title=Frogger
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;relations-between-entities-graph-representation&#34;&gt;Relations between entities: graph representation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Example #4&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    games(id:2) {
        title
        developer {
            name
            nation
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;types&lt;/strong&gt; called &lt;em&gt;Game&lt;/em&gt; and &lt;em&gt;Company&lt;/em&gt; are related to each other; in our example, for the sake of simplicity, a game can only have one company as developer and one as publisher, while any company can have multiple developed or published games.
In Example #4, you can notice the complex field &lt;em&gt;developer&lt;/em&gt;; we want to know the name and the nation of the company that developed the game with id = 2.&lt;/p&gt;

&lt;p&gt;The same two types can be reused to express the opposite of the relation described in the previous example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #5:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    companies(name:&amp;quot;Game Freak&amp;quot;) {
        name
        gamesAsDeveloper {
            title
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see briefly how you can describe these relations in the &lt;strong&gt;Javascript&lt;/strong&gt; implementation.&lt;/p&gt;

&lt;p&gt;In the &amp;lsquo;&lt;em&gt;Game&lt;/em&gt;&amp;rsquo; type definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;developer: {
	type: Company,
    description: &#39;The developer of the game&#39;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in the &amp;lsquo;&lt;em&gt;Company&lt;/em&gt;&amp;rsquo; type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gamesAsDeveloper: {
    type: new GraphQLList(Game),
    description: &#39;The games created as a developer&#39;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The field &lt;em&gt;developer&lt;/em&gt; is defined as type &lt;em&gt;Company&lt;/em&gt;, while the field &lt;em&gt;gamesAsDeveloper&lt;/em&gt; is a list of &lt;em&gt;Game&lt;/em&gt;.
Please refer to the &lt;a href=&#34;https://github.com/poetcyborg/graphql-node-starter-kit&#34;&gt;demo project&lt;/a&gt; for the full implementation of this example.&lt;/p&gt;

&lt;h3 id=&#34;minimizing-the-number-of-requests-to-the-server&#34;&gt;Minimizing the number of requests to the server&lt;/h3&gt;

&lt;p&gt;This time we need the list of the &lt;em&gt;Japanese companies&lt;/em&gt; and some information about the games they worked on, but only for the &lt;em&gt;NES&lt;/em&gt; (Nintendo Entertainment System) platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #6:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    companies(nation:&amp;quot;Japan&amp;quot;) {
	    name
        gamesAsDeveloper(platform:&amp;quot;NES&amp;quot;) {
		    title
	        year
        }
        gamesAsPublisher(platform:&amp;quot;NES&amp;quot;) {
            title
            year
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This query&amp;rsquo;s output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;companies&amp;quot;: [{
        &amp;quot;name&amp;quot;: &amp;quot;Konami&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Namco&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [],
        &amp;quot;gamesAsPublisher&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1989&amp;quot;
          }]
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Game Freak&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1989&amp;quot;
          }],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Capcom&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Tiger Road&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1987&amp;quot;
          }],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the REST world, the same response could be obtained in several ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by sending a request to an endpoint that was built exactly for the purpose of filtering companies and games by some fields, e.g.:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;GET /companyWithGames?companyNation=Japan&amp;amp;gamePlatform=NES&amp;amp;fields=...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;by sending several requests to more generic endpoints, e.g.:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;GET /company?nation=Japan&amp;amp;fields=...
GET /game?developerName=[developer 1 name]&amp;amp;gamePlatform=NES&amp;amp;fields=...
GET /game?developerName=[developer 2 name]&amp;amp;gamePlatform=NES&amp;amp;fields=...
GET ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a couple of notable things here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the expressivity of the query language becomes more evident when things start becoming more interesting; filtering subsets of data feels natural and easy as you can just specify the criteria for the filters directly on the subtree root (companies -&amp;gt; nation, gamesAsDeveloper -&amp;gt; platform, gamesAsPublisher -&amp;gt; platform);&lt;/li&gt;
&lt;li&gt;on server side, the developer can write the code to retrieve the data for every subset of data independently, considering that, when a request is sent, every subtree receives the data returned by the upper levels (in this case, filtering &lt;em&gt;games&lt;/em&gt; with the given &lt;em&gt;platform&lt;/em&gt; is performed only on companies with the selected &lt;em&gt;nation&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;api-documentation&#34;&gt;API Documentation&lt;/h3&gt;

&lt;p&gt;When you design a REST WebService, for every endpoint you&amp;rsquo;re mostly going to take care of its URI and the structure of the request and the response body.
Unfortunately, there is no standard way to document this information and make it available to the client developers.&lt;/p&gt;

&lt;p&gt;With GraphQL, using &lt;strong&gt;&lt;em&gt;introspection&lt;/em&gt;&lt;/strong&gt; you can ask the server information about the available types and their fields.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #7&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    __schema {
        types {
            kind
            name
            description
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A query with the query root &lt;strong&gt;&lt;em&gt;__schema&lt;/em&gt;&lt;/strong&gt; returns the list of types with their descriptions and fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;__schema&amp;quot;: {
      &amp;quot;types&amp;quot;: [
		...
        {
          &amp;quot;kind&amp;quot;: &amp;quot;OBJECT&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;Company&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;A company object&amp;quot;,
          &amp;quot;fields&amp;quot;: [...]
        }, {
          &amp;quot;kind&amp;quot;: &amp;quot;OBJECT&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;Game&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;A game object&amp;quot;
          &amp;quot;fields&amp;quot;: [...]
        },
        ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to get the information about the types is using the query root &lt;strong&gt;&lt;em&gt;__type&lt;/em&gt;&lt;/strong&gt;, passing a specific type name:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #8&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    __type(name:&amp;quot;Game&amp;quot;) {
        fields {
            name
            description
            type {
                name
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;data&amp;quot;: {
        &amp;quot;__type&amp;quot;: {
            &amp;quot;fields&amp;quot;: [{
                &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;The id of a game&amp;quot;,
                &amp;quot;type&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;Int&amp;quot;
                }
            }, {
	            &amp;quot;name&amp;quot;: &amp;quot;title&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;The title of a game&amp;quot;,
                &amp;quot;type&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;String&amp;quot;
                }
            },
            ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mutations&#34;&gt;Mutations&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve already talked about queries, but a few words need to be spent about the other important operation that you can perform on a GraphQL server: &lt;strong&gt;mutations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #9&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mutation {
	updateGameRating(id:2, rating:7) {
		id
		title
		rating
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax is no different from the previous ones, except for the &lt;strong&gt;&lt;em&gt;mutation&lt;/em&gt;&lt;/strong&gt; root.
It is the equivalent of a POST or a PATCH in REST, and lets us change the value of some fields in a resource.
In this example we are assigning a value (7) to the &lt;em&gt;rating&lt;/em&gt; field of the &lt;em&gt;Game&lt;/em&gt; types; this mutation could be defined in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	name: &#39;UpdateGameRating&#39;,
	type: Game,
	args: {
	    rating: { type: new GraphQLNonNull(GraphQLInt) },
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the specified type for the mutation is &lt;em&gt;Game&lt;/em&gt;; this means not only that the update should be performed on games, but also that the &lt;em&gt;Game&lt;/em&gt; field included in the request (id, title and rating) should be returned, just like a normal query.&lt;/p&gt;

&lt;h2 id=&#34;implementations&#34;&gt;Implementations&lt;/h2&gt;

&lt;p&gt;In the present article we sometimes referred to the official &lt;strong&gt;Javascript&lt;/strong&gt; library for GraphQL, but as you can see in &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql&#34;&gt;this project&lt;/a&gt; there are many different implementations for the most popular languages.&lt;/p&gt;

&lt;h2 id=&#34;the-future-of-graphql&#34;&gt;The future of GraphQL&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s difficult to say what will become of GraphQL in the next year.
Sure there&amp;rsquo;s a lot of hype around it, and for some very solid reasons.
It&amp;rsquo;s not going to replace REST in developers&amp;rsquo; hearts anytime soon, but if they&amp;rsquo;re brave enough, they can add a &lt;strong&gt;GraphQL layer&lt;/strong&gt; over an existing REST API in their application.
In fact, in my opinion, another good point of interest regarding GraphQL is the ability to aggregate multiple endpoints that reference various resources. Its nature is very domain-centric and it&amp;rsquo;s more  focused on &lt;strong&gt;&lt;em&gt;what&lt;/em&gt;&lt;/strong&gt; data needs to be precisely retrieved, rather than on &lt;strong&gt;&lt;em&gt;how to&lt;/em&gt;&lt;/strong&gt; get it.&lt;/p&gt;

&lt;p&gt;Some questions arise when you think about GraphQL in a more vast spectrum:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to &lt;strong&gt;cache&lt;/strong&gt; resources on server-side, even if they were originally fetched using different queries? (Facebook is trying to give some answers with &lt;a href=&#34;https://facebook.github.io/relay/docs/thinking-in-relay.html&#34;&gt;Relay&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;how to &lt;strong&gt;limit the access&lt;/strong&gt; to the resources (or the introspection on them) only to some users? GraphQL is authorization-agnostic, but as you can read in &lt;a href=&#34;https://github.com/graphql/graphql-js/issues/113&#34;&gt;this Github issue&lt;/a&gt; its a common problem that needs to be at least faced.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The entire Facebook ecosystem of open source projects is worth of attention (don&amp;rsquo;t forget about React, Flux and the other Flux-like architectures) and, even if it&amp;rsquo;s very young, it has become very popular and used by many little and big companies around the world.&lt;/p&gt;

&lt;p&gt;My personal hope is that every lesson that can be learned while working with these projects, especially GraphQL, might lead to a better World Wide Web and a better developing experience, maybe with more standard and free implementations than the Facebook (or Google, or Microsoft, or Apple) ones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduzione al tracciamento di eventi lato server</title>
      <link>https://engineering.facile.it/blog/ita/tracciamento-di-eventi-lato-server/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/tracciamento-di-eventi-lato-server/</guid>
      <description>

&lt;p&gt;L’adozione di strategie &lt;em&gt;DevOps&lt;/em&gt; ha portato negli ultimi anni ad incrementare le aree coperte da &lt;strong&gt;tool di monitoring&lt;/strong&gt; in maniera tale da avere un feedback in tempo reale dello stato dell’infrastruttura su cui si basa la propria applicazione, così da poter rispondere pro-attivamente a situazioni critiche. Su tale fronte infatti si sono visti comparire i tool più disparati che permettono la raccolta di informazioni, sia dei &lt;strong&gt;server&lt;/strong&gt; o delle istanze su cui vengono eseguite le applicazioni (ad esempio CPU, memoria o disco), che le &lt;strong&gt;applicazioni&lt;/strong&gt; stesse (ad esempio tempi medi di risposta, numero di query eseguite, tempo di esecuzione delle query, ecc. ecc.).&lt;/p&gt;

&lt;p&gt;Per entrambi i casi lo sviluppatore ha a disposizione sia soluzioni &lt;strong&gt;open source&lt;/strong&gt; che soluzioni &lt;strong&gt;SaaS&lt;/strong&gt;: la differenza sostanziale, a parità di feature principali, rimane la gestione dell’infrastruttura aggiuntiva, necessaria a supportare le operazioni per la raccolta dei dati inviati dai sensori predisposti a monitorare le metriche che interessano. Nonostante gli strumenti si facciano sempre più abbondanti (basti pensare a tutte le soluzioni recenti per il salvataggio di time series) e user-friendly, volersi affidare a provider terzi può essere un modo per concentrarsi maggiormente sul valore aggiunto che si vuole dare all’utente finale con la propria applicazione, senza doversi preoccupare di questioni di contorno.&lt;/p&gt;

&lt;p&gt;Tra i principali prodotti SaaS presenti sul mercato troviamo &lt;em&gt;&lt;a href=&#34;http://newrelic.com/&#34;&gt;NewRelic&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&#34;http://www.appdynamics.com/&#34;&gt;AppDynamics&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&#34;https://www.serverdensity.com&#34;&gt;ServerDensity&lt;/a&gt;&lt;/em&gt; e &lt;em&gt;&lt;a href=&#34;https://www.ruxit.com&#34;&gt;Ruxit&lt;/a&gt;&lt;/em&gt;, ciascuno con i propri prezzi e le proprie peculiarità, ma tutti che permettono di avere un costante monitoraggio della propria applicazione, dal browser dell’utente fino alla query per salvare i dati, gratis o con costi mensili contenuti e proporzionali alla dimensione della propria infrastruttura.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Facile.it&lt;/strong&gt; viene utilizzato &lt;strong&gt;NewRelic&lt;/strong&gt; non solo per il monitoraggio base dei servizi che compongono il sito ma, grazie a &lt;strong&gt;NewRelic Insights&lt;/strong&gt;, perché viene data la possibilità di salvare eventi personalizzati che possono dare maggiori informazioni sia agli sviluppatori che ai business analysts. Per poter accedere a &lt;strong&gt;NewRelic Insights&lt;/strong&gt; bisogna avere un account a pagamento, ma è comunque possibile sperimentare l’eventuale utilità per le proprie esigenze grazie al periodo di prova di 14 giorni.&lt;/p&gt;

&lt;p&gt;La raccolta dei dati può avvenire in due modi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tramite &lt;strong&gt;&lt;em&gt;custom attributes&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;tramite &lt;strong&gt;&lt;em&gt;eventi personalizzati&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;custom-attributes&#34;&gt;Custom Attributes&lt;/h4&gt;

&lt;p&gt;I &lt;em&gt;custom attributes&lt;/em&gt; sono delle coppie di chiave-valore da aggiungere alla transazione corrente (Web e Non-Web) già tracciata dagli strumenti di &lt;em&gt;NewRelic&lt;/em&gt; per i principali linguaggi di programmazione (&lt;strong&gt;PHP&lt;/strong&gt;, &lt;strong&gt;NodeJs&lt;/strong&gt;, &lt;strong&gt;Ruby&lt;/strong&gt;, &lt;strong&gt;Python&lt;/strong&gt;, &lt;em&gt;Java&lt;/em&gt;, &lt;em&gt;.NET&lt;/em&gt;). Possiamo aggiungere ad esempio l’utente attualmente collegato che sta effettuando tale transazione, il numero di oggetti presenti nel carrello o ancora il loro valore.&lt;/p&gt;

&lt;p&gt;Ad esempio, tramite l&amp;rsquo;estensione di &lt;em&gt;NewRelic&lt;/em&gt; disponibile per &lt;strong&gt;PHP&lt;/strong&gt;, è possibile aggiungere i dettagli dell&amp;rsquo;utente attualmente collegato chiamando la funzione &lt;code&gt;newrelic_add_custom_parameter (&#39;userID&#39;, $userId)&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;eventi-personalizzati&#34;&gt;Eventi personalizzati&lt;/h4&gt;

&lt;p&gt;Gli &lt;em&gt;eventi personalizzati&lt;/em&gt; vanno inviati ad un &lt;strong&gt;webservice REST&lt;/strong&gt; in formato &lt;strong&gt;JSON&lt;/strong&gt;. Ci mettono in grado di tracciare un qualsiasi evento all’interno di una normale transazione già tracciata da NewRelic, come ad esempio i tempi di risposta di un servizio esterno utilizzato dall’applicazione.&lt;/p&gt;

&lt;p&gt;Gli eventi personalizzati possono essere registrati richiamando la relativa funzione &lt;code&gt;newrelic_record_custom_event(&#39;DNDServiceCall&#39;,[&#39;business&#39; =&amp;gt; &#39;telefonia&#39;, &#39;responseTime&#39; =&amp;gt; 1500])&lt;/code&gt; disponibile nelle ultime versioni dell&amp;rsquo;estensione &lt;strong&gt;PHP&lt;/strong&gt; oppure tramite una semplice chiamata cURL come indicato dalla &lt;a href=&#34;https://docs.newrelic.com/docs/insights/new-relic-insights/adding-querying-data/inserting-custom-events-insights-api&#34;&gt;documentazione&lt;/a&gt; sui &lt;em&gt;custom events&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Una volta che i dati vengono raccolti da &lt;em&gt;NewRelic&lt;/em&gt; è possibile analizzarli tramite delle semplici query in un linguaggio simil-&lt;em&gt;SQL&lt;/em&gt;, in questo caso chiamato &lt;strong&gt;NRQL&lt;/strong&gt; (&lt;em&gt;NewRelic Query Language&lt;/em&gt;). La sintassi base di una SELECT in SQL viene mantenuta, ma vengono forniti strumenti per meglio gestire le serie temporali, tramite &lt;strong&gt;TIMESERIES&lt;/strong&gt;, &lt;strong&gt;SINCE&lt;/strong&gt;, &lt;strong&gt;UNTIL&lt;/strong&gt;: una trattazione più approfondita è disponibile alla relativa pagina della &lt;a href=&#34;https://docs.newrelic.com/docs/insights/new-relic-insights/using-new-relic-query-language/nrql-reference&#34;&gt;documentazione&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I risultati delle &lt;em&gt;query&lt;/em&gt; vengono resi disponibili in formato &lt;strong&gt;JSON&lt;/strong&gt;, oppure come widget da poter integrare poi in una dashboard, in maniera da tenere sempre sotto controllo le metriche più importanti per la conduzione del proprio business. Inoltre tramite &lt;a href=&#34;https://docs.newrelic.com/docs/insights/new-relic-insights/using-insights-interface/exploring-your-data&#34;&gt;Data Explorer&lt;/a&gt; è possibile consultare un campione degli eventi recentemente inviati dalla nostra applicazione a &lt;em&gt;NewRelic&lt;/em&gt;, così da poter eventualmente raffinare le strutture dati con cui vengono raccolti.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>