<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on Facile.it Engineering</title>
    <link>http://engineering.facile.it/categories/php/</link>
    <description>Recent content in PHP on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://engineering.facile.it/categories/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Puli: Universal Packages for PHP</title>
      <link>http://engineering.facile.it/blog/ita/puli-universal-packages-for-php/</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/puli-universal-packages-for-php/</guid>
      <description>

&lt;h2 id=&#34;composer-e-l-ecosistema-php:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Composer e l&amp;rsquo;ecosistema PHP&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;ecosistema PHP è notevolmente cambiato negli ultimi anni grazie all&amp;rsquo;introduzione di &lt;em&gt;Composer&lt;/em&gt;.
Esso ha definito degli standard per risolvere problemi comuni come l&amp;rsquo;autoloading e la gestione di pacchetti e dipendenze.
In questi ultimi anni si è assistito ad un proliferare di numerose componenti software riusabili che hanno significativamente modificato le strategie di sviluppo.&lt;/p&gt;

&lt;p&gt;Nonostante Composer si sia evoluto molto, in alcuni contesti le sue funzionalità risultano essere limitanti e incomplete.
I framework e i pacchetti più complessi hanno bisogno di una gestione personalizzata delle dipendenze. Generalmente sono necessarie operazioni di configurazione e registrazione. Ciò è specialmente vero per pacchetti core dei framework come i &lt;em&gt;template engines&lt;/em&gt;.
Composer, inoltre, possiede una cattiva gestione delle risorse non PHP. I file di configurazione devono essere gestiti manualmente oppure è necessario adottare standard strettamente legati a ciascun framework.&lt;/p&gt;

&lt;h2 id=&#34;la-soluzione-puli:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;La soluzione: Puli&lt;/h2&gt;

&lt;p&gt;A partire dal gennaio 2014 è stato sviluppato &lt;strong&gt;Puli, Universal Packages for PHP&lt;/strong&gt;, da Bernhard Schussek.
Puli mira a risolvere i problemi d&amp;rsquo;integrazione menzionati in precedenza creando un &lt;strong&gt;layer d&amp;rsquo;astrazione aggiuntivo tra Composer e l&amp;rsquo;applicazione&lt;/strong&gt;. Tale layer consente di gestire le risorse secondo convenzioni indipendenti dai framework. Ciò significa che Puli può essere usato anche dalle applicazioni che non ne fanno uso.
Attualmente Puli è in Beta, la versione stabile non è stata ancora annunciata ma è prevista per l&amp;rsquo;inizio del 2016.
&lt;strong&gt;Puli è stato ideato per affiancare Composer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Puli lavora ad un livello più alto per fornire le seguenti funzionalità:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#puli-path&#34;&gt;Gestione dei path virtuali per risorse non PHP&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#override-puli-path&#34;&gt;Overriding dei path virtuali&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#binding-type&#34;&gt;Interazione semplificata dei pacchetti con l&amp;rsquo;uso di Binding Type&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#url-generation&#34;&gt;Generazione automatica di URL per risorse pubbliche&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#assets-install&#34;&gt;Installazione automatica delle risorse pubbliche nelle document root&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;le-componenti-di-puli:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Le componenti di Puli&lt;/h2&gt;

&lt;p&gt;Puli offre svariate funzionalità organizzate nei seguenti componenti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resource repository&lt;/li&gt;
&lt;li&gt;Discovery service&lt;/li&gt;
&lt;li&gt;Public resources manager&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;configurazione:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Configurazione&lt;/h3&gt;

&lt;p&gt;Nell&amp;rsquo;offire questi servizi, Puli legge e scrive un proprio file di configurazione &lt;code&gt;puli.json&lt;/code&gt; presente nella root directory del pacchetto, allo stesso modo del &lt;code&gt;composer.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tale configurazione può essere modificata manualmente oppure utilizzando l&amp;rsquo;&lt;strong&gt;interfaccia CLI di Puli&lt;/strong&gt;;
Tale strumento può essere installato da Packagist tramite il pacchetto &lt;code&gt;puli/cli&lt;/code&gt;.
Al pari di Composer, sono disponibili archivi Phar per un uso immediato.&lt;/p&gt;

&lt;h3 id=&#34;installazione:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Installazione&lt;/h3&gt;

&lt;p&gt;Affiché le applicazioni possano usare i servizi offerti da Puli è necessario procedere all&amp;rsquo;installazione.
Per applicazioni che non fanno uso di framework è sufficiente abilitare il &lt;em&gt;Composer Plugin&lt;/em&gt; &lt;code&gt;puli/composer-plugin&lt;/code&gt;.
Quest&amp;rsquo;azione viene svolta da Composer con il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ composer require puli/composer-plugin:^1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tale plugin consente di generare atomaticamente la cosiddetta &lt;strong&gt;Puli Factory Class&lt;/strong&gt;: componente chiave da cui è possibile accedere a tutti i servizi offerti da Puli.&lt;/p&gt;

&lt;p&gt;A questo punto è possibile usare Puli nel modo seguente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require &#39;./vendor/autoload.php&#39;;

// La costante PULI_FACTORY_CLASS viene 
// definita al &amp;quot;composer install&amp;quot;
$factoryClass = PULI_FACTORY_CLASS;
$factory = new $factoryClass();

$puliRepository = $factory-&amp;gt;createRepository();
$puliDiscovery  = $factory-&amp;gt;createDiscovery($puliRepository);
$puliGenerator  = $factory-&amp;gt;createUrlGenerator($puliDiscovery);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;resource-repository:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Resource repository&lt;/h3&gt;

&lt;p&gt;Il resource repository fornisce un &lt;strong&gt;file system virtuale&lt;/strong&gt; per accedere alle risorse non PHP.
Ciò consente di localizzare facilmente i file senza conoscere la loro effettiva posizione.&lt;/p&gt;

&lt;h4 id=&#34;accesso-alle-risorse-con-composer:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Accesso alle risorse con Composer&lt;/h4&gt;

&lt;p&gt;Con Composer era frequente scrivere codice di questo tipo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$translationFileName = realpath(__DIR__ . &#39;/../vendor/acme/blog/resources/translation-it.xml&#39;);
$translationContent = file_get_contents($translationFileName);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tale operazione fa uso di dettagli implementativi: il layout delle directory fornito da Composer. La soluzione non è riusabile nè configurabile.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;puli-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;accesso-alle-risorse-con-puli:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Accesso alle risorse con Puli&lt;/h4&gt;

&lt;p&gt;Ciascun pacchetto compatibile con Puli può registrare diversi &lt;strong&gt;Path Mapping&lt;/strong&gt; utilizzati per tradurre i &lt;strong&gt;percorsi virtuali (Puli path)&lt;/strong&gt; in &lt;strong&gt;percorsi reali&lt;/strong&gt;.
Tali Path Mapping sono elencati nel &lt;code&gt;puli.json&lt;/code&gt; e normalmente sono modificati con il comando Puli CLI &lt;code&gt;map&lt;/code&gt;.
Ad esempio, il maintainer di acme/blog può eseguire questo comando per definire un nuovo mapping:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli map /acme/blog resources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tale operazione crea un&amp;rsquo;associazione tra il prefisso del path virtuale &lt;code&gt;/acme/blog&lt;/code&gt; e la directory &lt;code&gt;resources&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Un ipotetico utilizzatore del pacchetto acme/blog potrà quindi accedere alle risorse nel seguente modo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$puliPath = &#39;/acme/blog/translation-it.xml&#39;;
$translationContent = $puliRepository-&amp;gt;get($puliPath)-&amp;gt;getBody();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;È importante notare come i Path mapping siano definiti dal maintainer del pacchetto. Le altre componenti si limitano ad usarli per accedere alle risorse.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;override-puli-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;resource-overriding:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Resource overriding&lt;/h4&gt;

&lt;p&gt;È tuttavia presente un&amp;rsquo;eccezione a questa regola, tale concetto è alla base del &lt;strong&gt;Resource overriding&lt;/strong&gt;.
Immaginiamo di dover lavorare con due pacchetti: A e B.
Il pacchetto B è dipendente dal pacchetto A.
B, tuttavia, vuole personalizzare alcune risorse fornite da A.
Il maintainer di B può quindi rimpiazzare (&lt;em&gt;override&lt;/em&gt;) tali risorse aggiungengo nuovi Path Mapping.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;binding-type&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;discovery-service:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Discovery service&lt;/h3&gt;

&lt;p&gt;Il componente discovery semplifica l&amp;rsquo;interazione tra pacchetti: consente di condividere le risorse senza codice boilerplate attraverso l&amp;rsquo;uso di &lt;strong&gt;Binding Type&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Per il componente Discovery i pacchetti sono siddivisi in due categorie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Resource providers&lt;/strong&gt;: pacchetti che offrono risorse;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource consumers&lt;/strong&gt;: pacchetti che richiedono risorse.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I Binding Types sono definiti dai resource consumers. Ciascun Binding Type è idendificato da un nome (es. &lt;code&gt;acme/translator/messages&lt;/code&gt;).
I resource providers possono quindi associare una o più risorse a tali Binding Type.
&lt;strong&gt;L&amp;rsquo;associazione avviene legando un Puli Path ad un Binding Type&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;Binding Type&lt;/em&gt; sono quindi un&amp;rsquo;interfaccia per la condivisione di risorse.&lt;/p&gt;

&lt;h4 id=&#34;esempio:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Esempio&lt;/h4&gt;

&lt;p&gt;Esaminiamo, con un esempio, l&amp;rsquo;interazione tra due pacchetti: &lt;code&gt;acme/md2html&lt;/code&gt; e &lt;code&gt;acme/blog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;acme/md2html&lt;/code&gt; è un componente per tradurre contenuto Markdown verso pagine Html. Md2html è un sistema configurabile: la resa dell&amp;rsquo;output avviene attraverso template Twig modificabili.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;acme/blog&lt;/code&gt; fornisce tools per la gestione di articoli da blog. Siccome questi ultimi possono essere scritti in Markdown, &lt;code&gt;acme/blog&lt;/code&gt; fa uso di &lt;code&gt;acme/md2html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Il componente &lt;code&gt;acme/blog&lt;/code&gt; può personalizzare i template di Md2html in questo modo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$md2html = new Md2Html();
$md2html-&amp;gt;useHeaderTemplate(__DIR__ . &#39;/resources/templates/markdown-header.twig&#39;);

$htmlContent = $md2html-&amp;gt;translate(&#39;## markdown content&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Questo approccio ha due svantaggi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;acme/blog&lt;/code&gt; ha la diretta responsabilità di configurare correttamente Md2html utilizzando l&amp;rsquo;API fornita;&lt;/li&gt;
&lt;li&gt;Gli utenti di &lt;code&gt;acme/blog&lt;/code&gt; non possono modificare facilmente le personalizzazioni apportate a Md2html.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tali problemi possono essere risolti con Puli.&lt;/p&gt;

&lt;p&gt;Il mantainer di Md2html decide di rendere il suo pacchetto compatibile con Puli.&lt;/p&gt;

&lt;p&gt;Definisce quindi il Binding Type: &lt;code&gt;acme/md2html/header-template&lt;/code&gt; con il seguente comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli type --define acme/md2html/header-template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il maintainer di &lt;code&gt;acme/blog&lt;/code&gt; può quindi usare tale Binding Type nel seguente modo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli map /acme/blog resources
$ puli bind /acme/blog/templates/markdown-header.twig acme/md2html/header-template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Così &lt;code&gt;acme/md2html&lt;/code&gt; può leggere il nuovo template &lt;code&gt;markdown-header.twig&lt;/code&gt; in modo trasparente.&lt;/p&gt;

&lt;p&gt;Gli utilizzatori di acme/blog che desiderassero modificare tale template hanno due strategie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modificare l&amp;rsquo;associazione al Binding Type &lt;code&gt;acme/md2html/header-template&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sovrascrivere il Puli Path &lt;code&gt;/acme/blog/templates/markdown-header.twig&lt;/code&gt; con il meccanismo dell&amp;rsquo;overriding esaminato in precedenza.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;url-generation&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;public-resources-manager:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Public resources manager&lt;/h3&gt;

&lt;p&gt;Puli gestisce anche le risorse pubbliche, gli assets. In particolare, è in grado di generare path e URL da usare nei template o nei fogli di stile.&lt;/p&gt;

&lt;p&gt;Come primo passo, è necessario &lt;strong&gt;registrare i server web che servono tali risorse&lt;/strong&gt;.
È possibile aggiungere un nuovo server con il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli server --add localhost public_html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In questo esempio, &lt;code&gt;localhost&lt;/code&gt; è il nome del server, mentre &lt;code&gt;public_html&lt;/code&gt; è la sua &lt;em&gt;document root&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ora è possibile pubblicare delle risorse sul server &lt;code&gt;localhost&lt;/code&gt; con il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli publish /acme/blog/public localhost /blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ciò mappa il Puli Path &lt;code&gt;/acme/blog/public&lt;/code&gt; alla directory &lt;code&gt;blog&lt;/code&gt; della document root del server &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Puli ora ha tutte le informazioni per generare i persorsi delle risorse pubbliche:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$puliPath = &#39;/acme/blog/public/images/logo.png&#39;;
$url = $puliGenerator-&amp;gt;generateUrl($puliPath);
echo $url; // -&amp;gt; &amp;quot;/blog/images/logo.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;ultima operazione può essere eseguita in un template Twig con l&amp;rsquo;utilizzo dell&amp;rsquo;estensione &lt;code&gt;puli/twig-extension&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-twig&#34;&gt;&amp;lt;img src=&amp;quot;{{ resource_url(&#39;/acme/blog/public/images/logo.png&#39;) }}&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;assets-install&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;installazione-delle-risorse:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Installazione delle risorse&lt;/h4&gt;

&lt;p&gt;Puli può installare automaticamente le risorse pubbliche nella document root dei web server.&lt;/p&gt;

&lt;p&gt;Il comando è il seguente:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli publish --install
Installing /acme/blog/public into public_html via symlink...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gli autori di Puli hanno annunciato che &lt;strong&gt;tale funzionalità sarà rimossa da Puli CLI in favore di estensioni Gulp o altri tool simili&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusioni:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Conclusioni&lt;/h3&gt;

&lt;p&gt;Abbiamo visto come Puli offra numerose funzionalità aggiuntive rispetto al solo utilizzo di Composer.
Puli è un progetto giovane, nel corso del tempo saranno aggiunte ulteriori funzionalità che lo renderanno ancora più potente.
Per approfondire, la documentazione ufficiale è molto chiara e completa ed è disponibile all&amp;rsquo;indirizzo: &lt;a href=&#34;http://docs.puli.io/&#34;&gt;http://docs.puli.io/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit: test paralleli, Doctrine e le fixture</title>
      <link>http://engineering.facile.it/blog/ita/paraunit/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/paraunit/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Questo articolo è la sintesi di un talk presentato al &lt;a href=&#34;http://2015.symfonyday.it/&#34;&gt;SymfonyDay 2015&lt;/a&gt;; potete trovare le slide &lt;a href=&#34;http://jean85.github.io/slides/2015-10-paraunit-symfonyday/index.html&#34;&gt;qui&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;i-test-e-la-loro-durata:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;I test e la loro durata&lt;/h4&gt;

&lt;p&gt;Sviluppare applicazioni scrivendo &lt;strong&gt;test&lt;/strong&gt; e facendo &lt;a href=&#34;https://it.wikipedia.org/wiki/Test_driven_development&#34;&gt;Test Driven Development&lt;/a&gt; è un&amp;rsquo;ottima pratica, e dà parecchie soddisfazioni. Con l&amp;rsquo;andare del tempo, si fa &lt;strong&gt;crescere la suite di test&lt;/strong&gt; del proprio progetto, cercando di aumentarne la copertura e l&amp;rsquo;efficacia e si scrivono nuovi test corrispondenti alle nuove funzionalità che vengono man mano sviluppate.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;aumento della quantità di test però porta alla crescita (direttamente proporzionale) del &lt;strong&gt;tempo necessario&lt;/strong&gt; ad eseguire i test stessi.
Nel caso dei &lt;strong&gt;test unitari&lt;/strong&gt; questo aumento è spesso trascurabile, poiché &lt;strong&gt;si limitano a caricare una singola classe&lt;/strong&gt; e ad analizzarne il comportamento in completo isolamento, terminando la loro esecuzione nel giro di &lt;strong&gt;pochi millisecondi&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quando invece parliamo di &lt;strong&gt;test funzionali&lt;/strong&gt;, il tempo di esecuzione non è più così limitato: vengono caricate &lt;strong&gt;molte più classi&lt;/strong&gt;, spesso viene coinvolto anche il &lt;strong&gt;database&lt;/strong&gt;, deve essere messa alla prova l&amp;rsquo;interazione tra molti elementi; il tutto porta a test la cui durata è talvolta di &lt;strong&gt;quasi un secondo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Leggendo libri e blog sull&amp;rsquo;argomento, e con l&amp;rsquo;esperienza personale, ho imparato che c&amp;rsquo;è una &lt;strong&gt;soglia critica&lt;/strong&gt; che rappresenta il limite ideale oltre il quale una test suite diventa troppo lenta, e questa soglia è di &lt;strong&gt;circa dieci minuti&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ma perché proprio dieci minuti? Il motivo è molto semplice, e pratico: in dieci minuti, il programmatore può fare una pausa, prendersi un caffè o decidere di discutere brevemente una questione tecnica con un collega, e al suo ritorno troverà la suite completata e potrà procedere col lavoro. In caso contrario, possono succedere due cose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;il programmatore &lt;strong&gt;rimane a fissare lo schermo&lt;/strong&gt; mentre i test si eseguono, dando ragione ai detrattori dei test che affermano che fare TDD è una perdita di tempo;&lt;/li&gt;
&lt;li&gt;si &lt;strong&gt;smette di eseguire la test suite&lt;/strong&gt;, o per lo meno di farla eseguire per intero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La seconda opzione può sembrare fattibile: si fanno girare solo i &lt;strong&gt;test strettamente necessari&lt;/strong&gt; mentre si sviluppa, quelli che vengono scritti in quel momento o che coprono la parte di codice che si sta modificando, per poi eseguire il commit del proprio codice senza far girare l&amp;rsquo;intera suite.&lt;/p&gt;

&lt;p&gt;In realtà &lt;strong&gt;questo approccio fa perdere valore ai test&lt;/strong&gt; stessi, perché i test sono codice che non andrà mai in produzione, e che quindi può dare valore ai nostri progetti solo se viene eseguito ogni volta. Inoltre questo approccio nasconde &lt;strong&gt;una trappola&lt;/strong&gt;, dato che i test, per essere davvero efficaci, vanno eseguiti tutti ogni volta: la loro forza sta proprio nell&amp;rsquo;&lt;strong&gt;individuare gli effetti collaterali&lt;/strong&gt; imprevisti delle nostre modifiche, i bug che possono presentarsi in punti inaspettati e apparentemente lontani del nostro progetto.&lt;/p&gt;

&lt;h4 id=&#34;esecuzione-parallela-dei-test:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;Esecuzione parallela dei test&lt;/h4&gt;

&lt;p&gt;In Facile.it lavoro in un progetto basato su Symfony2 e Doctrine e mi sono trovato proprio davanti a questa problematica: avevamo una &lt;strong&gt;suite di test che stava crescendo&lt;/strong&gt; a ritmo sostenuto e che a volte impiegava ad eseguirsi, tra build di preparazione ed esecuzione vera e propria, anche 25 minuti.&lt;/p&gt;

&lt;p&gt;Dopo aver ottimizzato le prestazioni del nostro ambiente di sviluppo (passando da Vagrant a Docker, ma questa è un&amp;rsquo;altra storia), ci siamo resi conto di aver bisogno di una soluzione più drastica al nostro problema, e abbiamo pensato di &lt;strong&gt;eseguire in parallelo i nostri test&lt;/strong&gt; per sfruttare al meglio le risorse hardware e ridurre così i tempi di esecuzione.&lt;/p&gt;

&lt;p&gt;Dopo un po&amp;rsquo; di ricerche, abbiamo individuato alcuni tool esistenti che permettevano questo approccio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brianium/paratest&#34;&gt;brianium/paratest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/liuggio/fastest&#34;&gt;liuggio/fastest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entrambi i tool sono ben sviluppati e semplici da utilizzare e le prime prove sui &lt;strong&gt;test unitari&lt;/strong&gt; sono state molto promettenti: grazie alla ridotta dimensione, la loro parallelizzazione è estremamente semplice.&lt;/p&gt;

&lt;h4 id=&#34;i-problemi-di-concorrenza-nei-test-funzionali:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;I problemi di concorrenza nei test funzionali&lt;/h4&gt;

&lt;p&gt;Quando siamo passati a provare Paratest sui &lt;strong&gt;test funzionali&lt;/strong&gt; abbiamo invece incontrato grossi problemi, che si concretizzavano in &lt;strong&gt;fallimenti casuali durante l&amp;rsquo;esecuzione parallela&lt;/strong&gt;. Questi fallimenti erano dati da un problema molto semplice: stavamo accedendo più volte e in parallelo al nostro database di test.&lt;/p&gt;

&lt;p&gt;Ma perché il nostro codice, che è lo stesso che viene eseguito in produzione (dove elabora centinaia, migliaia di richieste al minuto) ha così tanti &lt;strong&gt;problemi di accesso concorrente&lt;/strong&gt; nell&amp;rsquo;ambiente di test? I motivi sono semplici:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;i dati di test sono pochi&lt;/strong&gt;, mentre in produzione abbiamo tabelle da milioni di righe;&lt;/li&gt;
&lt;li&gt;per questo motivo &lt;strong&gt;i test tentano di accedere sempre alle stesse righe&lt;/strong&gt; del database;&lt;/li&gt;
&lt;li&gt;la &lt;strong&gt;sequenza&lt;/strong&gt; di operazioni di ogni test in genere è &lt;strong&gt;lettura - elaborazione - scrittura&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;i test hanno una &lt;strong&gt;rapidità di esecuzione&lt;/strong&gt; superiore a quella di un utilizzatore umano.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tutti questi motivi contribuiscono a creare situazioni in cui &lt;strong&gt;si verificano dei &lt;a href=&#34;https://it.wikipedia.org/wiki/Deadlock&#34;&gt;deadlock&lt;/a&gt;&lt;/strong&gt; e che il nostro database può risolvere solo bloccando uno dei due tentativi di accesso ai dati, facendo così fallire il test corrispondente.&lt;/p&gt;

&lt;p&gt;Un altro problema che può verificarsi è l&amp;rsquo;&lt;strong&gt;alterazione dei dati&lt;/strong&gt;: quando due test vengono eseguiti in contemporanea, uno dei due può modificare il database e, così facendo, può far mancare i giusti dati di partenza ad un altro test che si sta avviando nello stesso istante.&lt;/p&gt;

&lt;p&gt;Purtroppo &lt;strong&gt;Paratest non offre una soluzione&lt;/strong&gt; a questo genere di problemi, mentre Fastest propone come approccio la creazione di un database di test differente per ogni core del proprio processore, per poi eseguire tanti test in parallelo quanti sono i database a disposizione.&lt;/p&gt;

&lt;p&gt;Sfortunatamente anche questo approccio non ci ha soddisfatto, in quanto la costruzione del nostro database di test era piuttosto lenta (avevamo molte migration da eseguire e altrettante fixture da caricare ogni volta) e rischiavamo di guadagnare tempo da una parte per perderlo dall&amp;rsquo;altra, inoltre, avevamo avuto &lt;strong&gt;un&amp;rsquo;idea nuova&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;facile-it-paraunit:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;facile-it/paraunit&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/paraunit/version.svg&#34; alt=&#34;Packagist&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://travis-ci.org/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://travis-ci.org/facile-it/paraunit.svg&#34; alt=&#34;Travis build&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://codeclimate.com/github/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/facile-it/paraunit/badges/gpa.svg&#34; alt=&#34;Codeclimate&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/facile-it/paraunit?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/facile-it/paraunit/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abbiamo così deciso di sviluppare la nostra soluzione: &lt;strong&gt;&lt;a href=&#34;https://github.com/facile-it/paraunit&#34;&gt;facile-it/paraunit&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;è sviluppato con i &lt;strong&gt;componenti Symfony&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sa leggere la configurazione XML di PHPUnit&lt;/strong&gt; per individuare le test suite;&lt;/li&gt;
&lt;li&gt;esegue il &lt;strong&gt;parsing e l&amp;rsquo;aggregazione dei risultati&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;grazie ai processi separati, &lt;strong&gt;sa gestire i fatal error&lt;/strong&gt; senza far bloccare completamente l&amp;rsquo;esecuzione;&lt;/li&gt;
&lt;li&gt;sempre grazie ai processi, riesce ad &lt;strong&gt;ottimizzare l&amp;rsquo;uso della memoria&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;risulta &lt;strong&gt;affidabile&lt;/strong&gt; grazie al fatto che basa il suo responso sugli exit code dei singoli processi PHPUnit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La maggior parte di questi vantaggi sono ovviamente comuni a tutti gli approcci di parallelizzazione dei test, inoltre, grazie al parsing dei risultati, &lt;strong&gt;Paraunit sa riconoscere i casi di fallimento dovuti a deadlock&lt;/strong&gt; e riesegue i test che falliscono per questo motivo.&lt;/p&gt;

&lt;p&gt;Questo però era solo un primo passo e ovviamente ci siamo concentrati sull&amp;rsquo;implementare una &lt;strong&gt;soluzione radicale ai problemi di concorrenza&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;facile-it-paraunit-testcase:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;facile-it/paraunit-testcase&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/facile-it/paraunit-testcase&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/paraunit-testcase/version.svg&#34; alt=&#34;Packagist&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La soluzione che abbiamo trovato è molto semplice: &lt;strong&gt;le transazioni&lt;/strong&gt;.
Per realizzarla nella sua totalità, abbiamo sviluppato un test-case per PHPUnit, rilasciato col pacchetto &lt;strong&gt;&lt;a href=&#34;https://github.com/facile-it/paraunit-testcase&#34;&gt;facile-it/paraunit-testcase&lt;/a&gt;&lt;/strong&gt;; ovviamente il test-case è stato sviluppato in partenza per il nostro caso d&amp;rsquo;uso, ovvero per il &lt;strong&gt;test di un&amp;rsquo;applicazione basata su Symfony2 e Doctrine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Grazie a questo test-case, ogni test può accedere al database solo dentro una transazione e questa transazione non riceve mai il &lt;em&gt;commit&lt;/em&gt;, ma sempre il &lt;strong&gt;rollback&lt;/strong&gt; al termine. Questo significa che &lt;strong&gt;nulla verrà mai realmente scritto&lt;/strong&gt; sul nostro database.&lt;/p&gt;

&lt;p&gt;I vantaggi di questo approccio sono molteplici:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nessun test può interferire&lt;/strong&gt; con gli altri, visto che non possono alterare i dati;&lt;/li&gt;
&lt;li&gt;ogni test può permettersi di &lt;strong&gt;creare al volo un dato o di alterarne uno esistente&lt;/strong&gt;, senza doversi preoccupare di ripulire il database al termine, con grande risparmio di tempo nella scrittura dei test;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;il database di test rimane sempre pulito&lt;/strong&gt; e non dobbiamo più preoccuparci di prepararlo ogni volta che la suite deve essere eseguita, o che eseguiamo un test che può sporcare i dati;&lt;/li&gt;
&lt;li&gt;anche se non viene mai realmente scritto nulla, &lt;strong&gt;il database esegue comunque le verifiche di integrità&lt;/strong&gt;, quali vincoli di unicità o di chiavi esterne;&lt;/li&gt;
&lt;li&gt;diventa &lt;strong&gt;impossibile avere test interdipendenti&lt;/strong&gt;, ovvero test che possono funzionare solo se prima ne vengono eseguiti altri, che modificano in modo ideale i dati di fixture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L&amp;rsquo;unico limite di questo approccio è che le transazioni sono disponibili solo con alcuni database e all&amp;rsquo;interno di Doctrine quindi solo con l&amp;rsquo;&lt;code&gt;EntityManager&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;la-rapidità-di-esecuzione:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;La rapidità di esecuzione&lt;/h4&gt;

&lt;p&gt;Per darvi un&amp;rsquo;idea di quanto possa essere veloce Paraunit rispetto alla normale esecuzione con PHPUnit, ho misurato il tempo di esecuzione della nostra test suite funzionale, che è sufficientemente ampia (261 classi, 1568 metodi):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://engineering.facile.it/images/paraunit/grafico.png&#34; alt=&#34;Grafico&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Come potete vedere, Paraunit esegue l&amp;rsquo;intera test suite in soli &lt;strong&gt;6 minuti e 6 secondi&lt;/strong&gt;, mentre PHPUnit ci metterebbe &lt;strong&gt;oltre 40 minuti!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ho usato il condizionale per un motivo specifico: il tempo di esecuzione di PHPUnit è in realtà una stima (in proiezione lineare) perché, circa al 12% dell&amp;rsquo;esecuzione, il processo si è chiuso per &lt;strong&gt;esaurimento della memoria&lt;/strong&gt; a disposizione, a riprova di un altro dei vantaggi nell&amp;rsquo;uso di Paraunit.&lt;/p&gt;

&lt;h4 id=&#34;test-coverage-in-parallelo:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;Test coverage in parallelo&lt;/h4&gt;

&lt;p&gt;Un&amp;rsquo;altra caratteristica di Paraunit, attualmente in sviluppo, è la possibilità di &lt;strong&gt;parallelizzare l&amp;rsquo;elaborazione della &lt;a href=&#34;https://phpunit.de/manual/current/en/code-coverage-analysis.html&#34;&gt;coverage&lt;/a&gt;&lt;/strong&gt; dei test.&lt;/p&gt;

&lt;p&gt;Questo è possibile grazie all&amp;rsquo;opzione &lt;code&gt;--coverage-php&lt;/code&gt; di PHPUnit che salva in un file .php il risultato parziale ottenuto; dopo aver lanciato i singoli test come processi separati, Paraunit esegue l&amp;rsquo;unione di tutti questi risultati.&lt;/p&gt;

&lt;h4 id=&#34;sviluppi-futuri:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;Sviluppi futuri&lt;/h4&gt;

&lt;p&gt;Ovviamente questo è solo l&amp;rsquo;inizio, il primo &lt;strong&gt;rilascio in open source&lt;/strong&gt; della nostra soluzione.
Tra gli sviluppi futuri spero di poter realizzare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la &lt;strong&gt;prioritizzazione dei test lenti&lt;/strong&gt;, ovvero poter eseguire per primi i test noti per la loro lentezza, così da non rallentare l&amp;rsquo;esecuzione complessiva della test suite;&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;aggiunta di &lt;strong&gt;altre opzioni&lt;/strong&gt; di selezione test, come p.e. l&amp;rsquo;opzione &lt;code&gt;--group&lt;/code&gt; di PHPUnit;&lt;/li&gt;
&lt;li&gt;il miglioramento delle &lt;strong&gt;prestazioni&lt;/strong&gt; all&amp;rsquo;avvio dei processi, cosa che pesa molto per i test unitari;&lt;/li&gt;
&lt;li&gt;il &lt;strong&gt;supporto per altri framework e ORM&lt;/strong&gt; oltre a Symfony e Doctrine, creando altri test-case appositi;&lt;/li&gt;
&lt;li&gt;il miglioramento della funzionalità di test coverage parallela;&lt;/li&gt;
&lt;li&gt;una soluzione per i database non transazionali, come MongoDB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vi invito quindi a partecipare allo sviluppo di Paraunit su &lt;a href=&#34;https://github.com/facile-it/paraunit&#34;&gt;GitHub&lt;/a&gt;, proponendo pull request, aprendo issue per proporre nuove feature o anche semplicemente utilizzandolo per le vostre test suite, così da verificarne l&amp;rsquo;efficacia e la compatibilità!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WAMP, Web Application Messaging Protocol.. e PHP!</title>
      <link>http://engineering.facile.it/blog/ita/wamp-web-application-messaging-protocol-e-php/</link>
      <pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/wamp-web-application-messaging-protocol-e-php/</guid>
      <description>

&lt;p&gt;Dalle notifiche di Facebook ad un tweet stream, da Google Docs ai giochi multiplayer in HTML5, la necessità di uno &lt;strong&gt;scambio dati&lt;/strong&gt; in &lt;strong&gt;due direzioni&lt;/strong&gt;, &lt;strong&gt;efficiente&lt;/strong&gt; e a &lt;strong&gt;bassa latenza&lt;/strong&gt;, ha determinato l’ascesa negli ultimi anni di &lt;strong&gt;soluzioni basate su &lt;a href=&#34;https://www.websocket.org/&#34; target=&#34;_blank&#34;&gt;WebSocket&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Internet delle cose e web 2.0 trovano oramai sempre &lt;strong&gt;meno spazio&lt;/strong&gt; all’interno del protocollo &lt;strong&gt;HTTP/1&lt;/strong&gt;. Le tecniche di &lt;strong&gt;polling e long polling&lt;/strong&gt;, in voga fino a pochi anni fa, non permettevano di trasmettere in &lt;a href=&#34;https://it.wikipedia.org/wiki/Duplex&#34; target=&#34;_blank&#34;&gt;full duplex&lt;/a&gt; (tra server e client) contemporaneamente, erano costrette ad un alto overhead HTTP e richiedevano &lt;strong&gt;diversi sforzi&lt;/strong&gt; per simulare notifiche push server side.&lt;/p&gt;

&lt;h2 id=&#34;il-protocollo-wamp:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;Il protocollo WAMP&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wamp.ws/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;WAMP&lt;/strong&gt;&lt;/a&gt; (Web Application Messaging Protocol e non Windows, Apache, etc.!) offre un moderno &lt;strong&gt;pattern di messaggistica&lt;/strong&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_procedure_call&#34; target=&#34;_blank&#34;&gt;RPC&lt;/a&gt; e &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34; target=&#34;_blank&#34;&gt;Pub/Sub&lt;/a&gt; in maniera unificata. Registrato presso lo &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_Assigned_Numbers_Authority&#34; target=&#34;_blank&#34;&gt;IANA&lt;/a&gt; come sottoprotocollo WebSocket, definisce uno &lt;strong&gt;standard aperto&lt;/strong&gt; per lo scambio di &lt;strong&gt;messaggi in tempo reale&lt;/strong&gt; tra applicazioni e componenti, e permette la creazione di architetture &lt;strong&gt;debolmente accoppiate&lt;/strong&gt; basate su &lt;strong&gt;microservizi&lt;/strong&gt;. Utilizza canali full-duplex ordinati ed è quindi adatto ad implementazioni basate su WebSocket, ma supporta allo stesso modo socket Unix, socket raw o long polling HTTP.&lt;/p&gt;

&lt;p&gt;Il protocollo risulta piuttosto &lt;strong&gt;completo ed adeguato&lt;/strong&gt; a diversi scenari di utilizzo se comparato ad altri sistemi di messaggistica ed RPC.&lt;/p&gt;

&lt;p&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Technology&lt;/th&gt;
&lt;th&gt;PubSub&lt;/th&gt;
&lt;th&gt;RPC&lt;/th&gt;
&lt;th&gt;Routed RPC&lt;/th&gt;
&lt;th&gt;Web native&lt;/th&gt;
&lt;th&gt;Cross Language&lt;/th&gt;
&lt;th&gt;Open Standard&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WAMP&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AJAX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AMQP&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REST&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SOAP&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Socket.io&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SockJS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XMPP&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZeroMQ&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;em&gt;fonte: Wikipedia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Può essere utilizzato con profitto per sviluppare una piattaforma di gioco &lt;strong&gt;online multiplayer&lt;/strong&gt;, strumenti di &lt;strong&gt;business intelligence&lt;/strong&gt; real time e &lt;strong&gt;piattaforme collaborative&lt;/strong&gt; per numerosi utenti.&lt;/p&gt;

&lt;p&gt;Una piattaforma web di help desk ad esempio, può beneficiare di notifiche, chat, strumenti di scrittura multi-utente ed analisi dell’andamento in tempo reale  &lt;strong&gt;sullo stesso protocollo WAMP&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Per funzionare WAMP necessità di uno o più server di &lt;strong&gt;routing centralizzati&lt;/strong&gt;, allo stesso modo di &lt;strong&gt;RabbitMQ per AMQP&lt;/strong&gt;.
Per quanto esistano diverse implementazioni di router, in diversi linguaggi, lo standard &lt;em&gt;de facto&lt;/em&gt; è rappresentato da &lt;a href=&#34;http://crossbar.io/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Crossbar&lt;/strong&gt;&lt;/a&gt;, sviluppato da &lt;a href=&#34;http://tavendo.com/&#34; target=&#34;_blank&#34;&gt;Tavendo&lt;/a&gt;, alla quale si deve anche la &lt;strong&gt;definizione del protocollo&lt;/strong&gt; stesso.&lt;/p&gt;

&lt;h2 id=&#34;crossbar:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;Crossbar&lt;/h2&gt;

&lt;p&gt;Crossbar, scritto in python (&lt;a href=&#34;https://github.com/crossbario/crossbar&#34; target=&#34;_blank&#34;&gt;open source&lt;/a&gt;, licenza AGPL v3), supporta completamente le funzionalità descritte dal protocollo oltre a vantare &lt;strong&gt;configurazioni avanzate&lt;/strong&gt; come ad esempio le subscriptions &lt;a href=&#34;http://crossbar.io/docs/Pattern-Based-Subscriptions/&#34; target=&#34;_blank&#34;&gt;basate su pattern&lt;/a&gt;, le &lt;a href=&#34;http://crossbar.io/docs/Progressive-Call-Results/&#34; target=&#34;_blank&#34;&gt;progressive result&lt;/a&gt; su RPC e profili di autenticazione ed &lt;a href=&#34;http://crossbar.io/docs/Authorization/&#34; target=&#34;_blank&#34;&gt;autorizzazione&lt;/a&gt; dinamici.&lt;/p&gt;

&lt;p&gt;Nessuna delle altre implementazioni è poi al momento in grado di vantare le stesse &lt;strong&gt;prestazioni&lt;/strong&gt; e la &lt;strong&gt;stabilità&lt;/strong&gt; di Crossbar: una istanza del router è in grado di servire 1000 messaggi/secondo su Pub/Sub, a 1000 client, con una &lt;strong&gt;latenza di 25ms&lt;/strong&gt; su una &lt;strong&gt;RaspberryPi&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt;Router&lt;/th&gt;
&lt;th&gt;Broker&lt;/th&gt;
&lt;th&gt;Dealer&lt;/th&gt;
&lt;th&gt;Advanced Profile&lt;/th&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Crossbar&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;Pyhton&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thruway&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;PHP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wamp.rt&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;NodeJS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jawampa&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WampSharp&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Erwa&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Erlang&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;em&gt;fonte: WAMP.ws&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;e-php:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;..e PHP?&lt;/h2&gt;

&lt;p&gt;Diverse applicazioni web di backend usate presso Facile.it permettono ad un gran numero di operatori di lavorare sulle stesse pratiche in maniera collaborativa in &lt;strong&gt;tempo reale&lt;/strong&gt;.
Il protocollo WAMP è una tecnologia sulla quale è possibile sviluppare in maniera efficiente &lt;strong&gt;dashboard collaborative&lt;/strong&gt; e realtime.. ma sarà anche in grado di funzionare adeguatamente assieme alle soluzioni PHP (spesso in Symfony 2) sviluppate in casa e &lt;strong&gt;non precedentemente disegnate per l&amp;rsquo;uso con WebSocket&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Esistono diverse librerie (come &lt;a href=&#34;https://github.com/voryx/Thruway&#34; target=&#34;_blank&#34;&gt;Thruway&lt;/a&gt;) che permettono di operare come &lt;strong&gt;client PHP&lt;/strong&gt; in ambiente WAMP, ma per &lt;strong&gt;semplificare&lt;/strong&gt; l&amp;rsquo;integrazione del protocollo con altri servizi, Crossbar supporta il &lt;a href=&#34;http://crossbar.io/docs/HTTP-Bridge-Services/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;bridge HTTP&lt;/strong&gt;&lt;/a&gt; delle funzionalità Pub/Sub e RPC.&lt;/p&gt;

&lt;p&gt;In pratica, parlando ad esempio di Pub/Sub, è possibile &lt;strong&gt;pubblicare via HTTP&lt;/strong&gt; (o HTTPS) su Crossbar messaggi che saranno inoltrati su topic ai &lt;strong&gt;client connessi via WebSocket&lt;/strong&gt; in maniera trasparente. Altresì è possibile &lt;strong&gt;iscriversi ai topic&lt;/strong&gt; fornendo un &lt;strong&gt;endpoint HTTP&lt;/strong&gt; da chiamare per ricevere i messaggi pubblicati da client WebSocket.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;esempio sottostante configura un router Crossbar in grado di accettare connessioni websocket, pubblicazioni via HTTP e che si occupa di forwardare alcuni messaggi ad un endpoint HTTPS:&lt;/p&gt;

&lt;p&gt;&lt;style type=&#34;text/css&#34;&gt;
  .gist-file
  .gist-data {max-height: 500px;}
&lt;/style&gt;
&lt;script src=&#34;https://gist.github.com/peelandsee/51417b3c7c1dc400e85f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Il gist precedente può essere lanciato al volo con &lt;a href=&#34;https://docs.docker.com/&#34; target=&#34;_blank&#34;&gt;docker&lt;/a&gt;:
&lt;code&gt;docker run -p 80:80 -p 8080:8080 -v $PWD/crossbar-config.json:/.crossbar/config.json vinelab/crossbar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ovviamente l&amp;rsquo;esempio non tiene conto di profili di configurazione più avanzati, come &lt;strong&gt;cifratura TLS&lt;/strong&gt;, autenticazione, ruoli separati di pubblicazione e/o iscrizione, disponibili nella documentazione di Crossbar.&lt;/p&gt;

&lt;p&gt;Features come la firma delle richieste HTTP, richiedono più di qualche minuto di sviluppo, ma sono indispensabili in un &lt;strong&gt;ambiente di produzione&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Per semplificare l&amp;rsquo;adozione del bridge HTTP in &lt;strong&gt;ambito PHP&lt;/strong&gt;, in Facile.it abbiamo sviluppato e rilasciato un &lt;strong&gt;bundle&lt;/strong&gt; che permette la configurazione automatica di &lt;strong&gt;servizi di Publisher WAMP nel service container&lt;/strong&gt; di Symfony 2.&lt;/p&gt;

&lt;p&gt;Il bundle, disponibile su &lt;a href=&#34;https://packagist.org/packages/facile-it/crossbar-http-publisher-bundle&#34; target=&#34;_blank&#34;&gt;Packagist (composer)&lt;/a&gt; può essere installato con
&lt;code&gt;$ composer require facile-it/crossbar-http-publisher-bundle dev-master&lt;/code&gt;
e richiede una &lt;strong&gt;configurazione rapida&lt;/strong&gt; ed intuitiva:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;facile_crossbar_http_publisher:
  connections:
    foo_publisher_1:
        protocol: http
        host: 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;uso è molto semplice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// recupero del servizio
$fooPublisher = $container
                -&amp;gt;get(&#39;facile.crossbar.publisher.foo_publisher_1&#39;);

$topic = &#39;com.myapp.hello&#39;;

// pubblicazione
$firstPublisher-&amp;gt;publish($topic, [&#39;foo&#39;,1]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con le poche righe sopra riportate, attraverso il metodo &lt;code&gt;publish()&lt;/code&gt; viene effettuata una &lt;strong&gt;chiamata HTTP POST&lt;/strong&gt; verso il router WAMP, ed il messaggio &lt;code&gt;[&#39;foo&#39;,1]&lt;/code&gt; raggiunge in tempo (quasi) reale tutti i client (ad esempio &lt;strong&gt;tutti i browser degli utenti&lt;/strong&gt;) iscritti al topic &lt;code&gt;com.myapp.hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Anche in questo caso, la &lt;a href=&#34;http://crossbar.io/docs/Processes/&#34; target=&#34;_blank&#34;&gt;configurazione&lt;/a&gt; può supportare diversi host, porte, uso TLS, signed request, e attraverso GitHub è possibile trovare &lt;a href=&#34;https://github.com/crossbario/crossbarexamples&#34; target=&#34;_blank&#34;&gt;diversi esempi&lt;/a&gt; di &lt;strong&gt;possibili configurazioni&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ma-i-miei-utenti-lo-supporteranno:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;..ma i miei utenti lo supporteranno?&lt;/h2&gt;

&lt;p&gt;Lato browser, passare a WAMP è davvero &lt;strong&gt;semplice&lt;/strong&gt;:
la libreria &lt;a href=&#34;http://autobahn.ws/js/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Autobahn|JS&lt;/strong&gt;&lt;/a&gt; garantisce piena &lt;strong&gt;compatibilità&lt;/strong&gt; anche per &lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34;&gt;node.js&lt;/a&gt;, supporta l&amp;rsquo;autenticazione, ed è in grado di gestire in maniera &lt;strong&gt;asincronia&lt;/strong&gt; sia RPC che Pub/Sub.&lt;/p&gt;

&lt;p&gt;Qualora il browser di un vostro utente non supportasse WebSocket (e &lt;a href=&#34;http://caniuse.com/#feat=websockets&#34; target=&#34;_blank&#34;&gt;dovrebbe&lt;/a&gt; oramai!), Autobahn|JS è in grado di fornire un &lt;strong&gt;fallback automatico&lt;/strong&gt; a long polling.&lt;/p&gt;

&lt;p&gt;Iscriversi ad un topic o pubblicare un messaggio richiede poche linee:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/peelandsee/c853bc3fd3971e78527c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Nell&amp;rsquo;esempio sopra riportato, il client JS &lt;strong&gt;si iscrive&lt;/strong&gt; al topic &lt;code&gt;com.myapp.hello&lt;/code&gt; e passa i messaggi ricevuti ad una semplice funzione &lt;code&gt;console.log()&lt;/code&gt;; inoltre &lt;strong&gt;pubblica un messaggio&lt;/strong&gt; sul topic &lt;code&gt;com.myapp.topic1&lt;/code&gt;. Quest&amp;rsquo;ultimo, sarà anche &lt;strong&gt;forwardato da Crossbar sul nostro endpoint HTTPS&lt;/strong&gt; &lt;code&gt;https://hostname/subscriptions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Grazie alle &lt;strong&gt;funzionalità HTTP bridge&lt;/strong&gt; di Crossabar l&amp;rsquo;utilizzo di WAMP in ambito PHP, senza connessioni persistenti o consumer sempre accesi, è &lt;strong&gt;semplice ed immediato&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Per un ulteriore &lt;strong&gt;approfondimento su WAMP&lt;/strong&gt;, saranno inoltre utili le slide che seguono:&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/MEmo82CFgt1xND&#34; width=&#34;700&#34; height=&#34;550&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;riferimenti:403f2d6c5e9e2691ac7a267aa4a7309e&#34;&gt;Riferimenti&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wamp.ws/&#34;&gt;WAMP Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crossbar.io/docs/TOC/&#34;&gt;Crossbar - Documentazione&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crossbar.io/docs/HTTP-Bridge-Services/&#34;&gt;Crossbar - HTTP Bridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://autobahn.ws/js/&#34;&gt;Autobahn|JS - Documentazione&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facile-it/crossbar-http-publisher-bundle&#34;&gt;Facile.it CrossbarHTTPPublisherBundle - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Php Summer Camp 2015</title>
      <link>http://engineering.facile.it/blog/ita/php-summer-camp-2015/</link>
      <pubDate>Tue, 08 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/php-summer-camp-2015/</guid>
      <description>

&lt;h1 id=&#34;introduzione:58029b8459d31227431cf79c0465e6bb&#34;&gt;Introduzione&lt;/h1&gt;

&lt;p&gt;Dal 26 al 29 agosto 2015 ho avuto l&amp;rsquo;occasione di partecipare al &lt;a href=&#34;http://2015.phpsummercamp.com/&#34;&gt;&lt;strong&gt;PhpSummerCamp&lt;/strong&gt;&lt;/a&gt; in Rovigno (Croazia).
Negli stessi giorni e nello stesso luogo si è svolto anche il &lt;a href=&#34;http://2015.ezsummercamp.com/&#34;&gt;&lt;strong&gt;SummerCamp EzPublish&lt;/strong&gt;&lt;/a&gt;.
Ciò ha consentito di accrescere ulteriormente la platea di partecipanti con cui è stato possibile condividere idee e soluzioni.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;evento è costituito da numerosi &lt;strong&gt;workshop&lt;/strong&gt; orientati allo sviluppo di applicazioni con il &lt;a href=&#34;http://symfony.com&#34;&gt;framework PHP Symfony&lt;/a&gt;.
Le mattine e le prime metà del pomeriggio erano interamente dedicati ai workshop.
Nel tempo rimanente venivano condotte varie attività dedicate alla community e al confronto tra i partecipanti.&lt;/p&gt;

&lt;p&gt;In questo articolo descriverò gli eventi a cui ho partecipato e gli argomenti trattati, con particolare riguardo a ciò che mi ha personalmente colpito di più.&lt;/p&gt;

&lt;h1 id=&#34;indice:58029b8459d31227431cf79c0465e6bb&#34;&gt;Indice&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#mercoledi&#34;&gt;Mercoledì 26 agosto&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ci&#34;&gt;Continuous integration with PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modernising&#34;&gt;Modernising the legacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#frontend&#34;&gt;Frontend as design to backend middleware or some JS concepts that any good PHP dev should know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#debate&#34;&gt;Celebrity debate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#giovedi&#34;&gt;Giovedì 27 agosto&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#coupling&#34;&gt;Loose coupling in practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#puli&#34;&gt;Next-gen package development with Puli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unconference&#34;&gt;Unconference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#venerdi&#34;&gt;Venerdì 28 agosto&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#profiling&#34;&gt;Profiling PHP Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#symfony3&#34;&gt;Migrating to Symfony 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#experts&#34;&gt;Meet the experts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusione&#34;&gt;Conclusione&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;mercoledi&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;mercoledì-26-agosto:58029b8459d31227431cf79c0465e6bb&#34;&gt;Mercoledì 26 agosto&lt;/h1&gt;

&lt;p&gt;Un brevissimo keynote di apertura ha illustrato la storia del SummerCamp. Esso inizialmente ospitava soltanto la sezione EzPublish; solo negli ultimi anni è stata aggiunta la parte più generica relativa a Symfony e PHP.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;ci&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;continuous-integration-with-php-michele-orselli:58029b8459d31227431cf79c0465e6bb&#34;&gt;Continuous integration with PHP (Michele Orselli)&lt;/h3&gt;

&lt;p&gt;Il primo workshop ha illustrato come configurare e utilizzare &lt;a href=&#34;https://jenkins-ci.org/&#34;&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;&lt;/a&gt;.
L&amp;rsquo;obiettivo della sessione è stato abilitare un &lt;strong&gt;sistema di continuous integration&lt;/strong&gt; su un piccolo progetto Symfony che già aveva alcune test suite.
È stato interessante notare la semplicità d&amp;rsquo;uso e di configurazione del sistema Jenkins.
Si è visto come installare e configurare il &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Clover+PHP+Plugin&#34;&gt;&lt;strong&gt;Clover PHP Plugin&lt;/strong&gt;&lt;/a&gt; per monitorare il cambiamento dello statement coverage dopo ciascuna build.
È stato dedicato anche dello spazio per parlare di &lt;a href=&#34;https://www.phing.info/&#34;&gt;&lt;strong&gt;Phing&lt;/strong&gt;&lt;/a&gt;, tool molto utile per realizzare build automatiche.
Sono state approfondite alcune configurazioni particolari di PhpUnit che consentono di dividere correttamente i test negli insiemi: test unitari, test d&amp;rsquo;integrazione e test funzionali.
È stato interessante veder utilizzare &lt;a href=&#34;https://phpunit.de/manual/current/en/database.html&#34;&gt;&lt;strong&gt;l&amp;rsquo;estenzione di PHPUnit Database&lt;/strong&gt;&lt;/a&gt; per gestire automaticamente la connessione al database, la creazione dello schema e il caricamento/reset delle fixtures per ogni test case.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;modernising&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;modernising-the-legacy-marek-matulka:58029b8459d31227431cf79c0465e6bb&#34;&gt;Modernising the legacy (Marek Matulka)&lt;/h3&gt;

&lt;p&gt;Il presentatore ha illustrato le feature implementate da un&amp;rsquo;applicazione PHP legacy. Il codice era molto disordinato e praticamente impossibile da testare.
Logica di business, data retrieval e viste erano mescolate in un&amp;rsquo;applicazione che non era dotata nemmeno di un singolo &lt;a href=&#34;https://it.wikipedia.org/wiki/Front_Controller_pattern&#34;&gt;front-controller&lt;/a&gt;.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Modernising legacy w/ &lt;a href=&#34;https://twitter.com/super_marek&#34;&gt;@super_marek&lt;/a&gt; is kicking off at &lt;a href=&#34;https://twitter.com/hashtag/phpsummer?src=hash&#34;&gt;#phpsummer&lt;/a&gt; &lt;a href=&#34;http://t.co/aOIt1CWhNb&#34;&gt;pic.twitter.com/aOIt1CWhNb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jakub Zalas (@jakub_zalas) &lt;a href=&#34;https://twitter.com/jakub_zalas/status/636506399288201216&#34;&gt;August 26, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
L&amp;rsquo;applicazione era un semplice sito di e-commerce per la vendita di articoli e comprendeva una sezione di checkout.
Nel dover aggiungere un nuova funzionalità - il calcolo real-time delle spese di spedizione - si è voluto introdurre alcune componenti di Symfony per migliorare la qualità del sistema.
È stato illustrato come introdurre e configurare le seguenti componenti: &lt;a href=&#34;http://symfony.com/it/doc/current/components/dependency_injection/introduction.html&#34;&gt;&lt;strong&gt;DependencyInjection&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;http://twig.sensiolabs.org/&#34;&gt;&lt;strong&gt;Twig&lt;/strong&gt;&lt;/a&gt; e &lt;a href=&#34;http://symfony.com/it/doc/current/components/http_foundation/index.html&#34;&gt;&lt;strong&gt;HttpFoundation&lt;/strong&gt;&lt;/a&gt;.
È stato interessante notare come i componenti di Symfony fossero altamente disaccoppiati e, per questo, introducibili sequenzialmente e senza grandi difficoltà.
Il miglioramento del design ha permesso di implementare alcuni test unitari per la nuova funzionalità. Si è visto quindi come configurare l&amp;rsquo;ambiente e i tool per il testing.
La struttura del workshop era particolare: ciascun macro-task era diviso in molti sotto-task. Il repository Git del progetto già conteneva, in branch diversi, tutte le soluzioni. Ciò ha consentito di evitare ritardi causati dai partecipanti che non riuscivano, per vari problemi, a seguire l&amp;rsquo;avanzamento della sessione.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;frontend&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;frontend-as-design-to-backend-middleware-or-some-js-concepts-that-any-good-php-dev-should-know-damir-brekalo:58029b8459d31227431cf79c0465e6bb&#34;&gt;Frontend as design to backend middleware or some JS concepts that any good PHP dev should know (Damir Brekalo)&lt;/h3&gt;

&lt;p&gt;Purtroppo, data la scarsa presenza di partecipanti con competenze avanzate di JavaScript, la presentazione ha trattato argomenti abbastanza basilari rispetto a quelli pianificati.
Si è visto come applicare il &lt;a href=&#34;https://it.wikipedia.org/wiki/Programmazione_orientata_agli_oggetti&#34;&gt;paradigma object oriented&lt;/a&gt; in JavaScript con numerosi confronti di funzionalità e sintassi tra JS e PHP che hanno consentito a tutti di comprendere l&amp;rsquo;argomento.
La seconda parte del workshop ha analizzato e proposto soluzioni al problema dell&amp;rsquo;import di librerie di terze parti in applicazioni complesse.
È stato analizzato un progetto che implementava una &lt;a href=&#34;https://en.wikipedia.org/wiki/Single-page_application&#34;&gt;single page application&lt;/a&gt; senza alcun uso di framework. Essa era soltanto una composizione di più componenti eterogenei tra di loro.
Ciò ha permesso di apprendere che &lt;strong&gt;la scelta affrettata di framework complessi non è sempre la migliore&lt;/strong&gt;. Talvolta può essere più produttivo ricorrere a componenti specifici per il problema da risolvere.
In generale il workshop è stato interessante ma, rispetto agli altri, conteneva molto meno lavoro pratico.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;debate&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;celebrity-debate:58029b8459d31227431cf79c0465e6bb&#34;&gt;Celebrity debate&lt;/h3&gt;

&lt;p&gt;È stata una gara scherzosa tra i due partecipanti Ryan Weaver e Bernhard Schussek nel sostenere le loro opinioni su molteplici domande, alcune delle quali anche stabilite dal pubblico.
Alcuni esempi di domande: Mac vs Linux, &lt;a href=&#34;http://engineering.facile.it/programmazione-funzionale-perche-preoccuparsi/&#34;&gt;Functional programming&lt;/a&gt; vs &lt;a href=&#34;https://it.wikipedia.org/wiki/Programmazione_orientata_agli_oggetti&#34;&gt;OOP&lt;/a&gt;, Tea vs Coffee, USA vs Europe
Il vincitore Ryan Weaver è stato selezionato dal pubblico in base ad un conteggio di consensi.
È stato un momento divertente con argomenti molto vari anche al di fuori dell&amp;rsquo;ambito informatico.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/symfony&#34;&gt;@symfony&lt;/a&gt; vs &lt;a href=&#34;https://twitter.com/laravelphp&#34;&gt;@laravelphp&lt;/a&gt; debate on &lt;a href=&#34;https://twitter.com/hashtag/ezsummer?src=hash&#34;&gt;#ezsummer&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/phpsummer?src=hash&#34;&gt;#phpsummer&lt;/a&gt; wanna bet on the winner? :-) &lt;a href=&#34;http://t.co/f7HXqkoLXU&#34;&gt;pic.twitter.com/f7HXqkoLXU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Igor Vrdoljak (@ivrdoljak) &lt;a href=&#34;https://twitter.com/ivrdoljak/status/636571466104967168&#34;&gt;August 26, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;giovedi&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;giovedì-27-agosto:58029b8459d31227431cf79c0465e6bb&#34;&gt;Giovedì 27 agosto&lt;/h1&gt;

&lt;p&gt;&lt;a name=&#34;coupling&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;loose-coupling-in-practice-jakub-zalas:58029b8459d31227431cf79c0465e6bb&#34;&gt;Loose coupling in practice (Jakub Zalas)&lt;/h3&gt;

&lt;p&gt;L&amp;rsquo;obiettivo della sessione era disaccoppiare l&amp;rsquo;applicazione &lt;a href=&#34;http://symfony.com/blog/introducing-the-symfony-demo-application&#34;&gt;Symfony Demo&lt;/a&gt; da &lt;a href=&#34;http://www.doctrine-project.org/&#34;&gt;Doctrine ORM/DBAL&lt;/a&gt; e di consentire lo switch ad altre strategie di storage.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Quite a crowd at &lt;a href=&#34;https://twitter.com/jakub_zalas&#34;&gt;@jakub_zalas&lt;/a&gt; workshop on loose coupling with &lt;a href=&#34;https://twitter.com/symfony&#34;&gt;@Symfony&lt;/a&gt;! &lt;a href=&#34;https://twitter.com/PHPSummerCamp&#34;&gt;@PHPSummerCamp&lt;/a&gt; &lt;a href=&#34;http://t.co/KnvqaafRfG&#34;&gt;pic.twitter.com/KnvqaafRfG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Marek ✈ (@super_marek) &lt;a href=&#34;https://twitter.com/super_marek/status/636805256987455488&#34;&gt;August 27, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
Nonostante il sistema fosse un semplice gestionale per articoli di blog, il lavoro si è subito rilevato molto più lungo e complesso del previsto.
È stato interessante notare come Symfony full-stack abbia numerosi legami &amp;ldquo;nascosti&amp;rdquo; con Doctrine. Esempi sono il componente &lt;a href=&#34;http://symfony.com/it/doc/current/book/security.html&#34;&gt;Security&lt;/a&gt; e il &lt;a href=&#34;http://symfony.com/it/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html&#34;&gt;ParamConverter&lt;/a&gt;.
Si è iniziato nel creare i &lt;strong&gt;repository as services&lt;/strong&gt; in modo da consentire la rimozione di qualsiasi riferimento a Doctrine nei controller.
Successivamente sono stati realizzate delle classi ad hoc per i componenti: Security (definizione esplicita dallo UserProvider) e ParamConverter.
In seguito è stato richiesto di implementare una nuova strategia di storage utilizzando &lt;a href=&#34;http://php.net/manual/en/book.pdo.php&#34;&gt;PDO&lt;/a&gt; e &lt;a href=&#34;https://it.wikipedia.org/wiki/Structured_Query_Language&#34;&gt;SQL&lt;/a&gt;.
Per questo task è stato interessante notare l&amp;rsquo;uso frequente del design pattern &lt;a href=&#34;https://it.wikipedia.org/wiki/Adapter_pattern&#34;&gt;Adapter&lt;/a&gt; nonché la definizione di &lt;strong&gt;alias di servizi&lt;/strong&gt; per consentire di spostarsi da una modalità di storage all&amp;rsquo;altra senza troppe modifiche.
L&amp;rsquo;applicazione comprendeva già numerosi test che consentivano di verificare il corretto funzionamento dell&amp;rsquo;applicazione anche su differenti driver di persistenza.
Successivamente è stato richiesto di utilizzare il &lt;a href=&#34;http://doctrine-orm.readthedocs.org/en/latest/reference/caching.html&#34;&gt;componente cache di Doctrine&lt;/a&gt; per introdurre un layer di ottimizzazione tra applicazione e persistenza PDO.
A causa del poco tempo rimasto non è stato possibile affrontare l&amp;rsquo;ultimo task: implementare una nuova astrazione di storage su &lt;a href=&#34;https://www.elastic.co/&#34;&gt;elastic-search&lt;/a&gt;.
Anche in questo workshop le soluzioni ai problemi erano già presenti nel repository Git. Ciò ha consentito di continuare e approfondire l&amp;rsquo;argomento anche dopo il termine della sessione.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;puli&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;next-gen-package-development-with-puli-bernhard-schussek:58029b8459d31227431cf79c0465e6bb&#34;&gt;Next-gen package development with Puli (Bernhard Schussek)&lt;/h3&gt;

&lt;p&gt;Questa sessione è stata divisa in due parti. La prima è una presentazione del &lt;strong&gt;progetto &lt;a href=&#34;http://docs.puli.io/en/latest/&#34;&gt;Puli&lt;/a&gt;&lt;/strong&gt;. Sono state illustrate le funzionalità dell&amp;rsquo;applicazione e i problemi che essa risolve.
Puli è un gestore della configurazione di pacchetti che mira a rendere &lt;strong&gt;le librerie PHP più omogenee e più semplici da configurare&lt;/strong&gt;. Esso, per funzionare, usa &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; che continua a gestire il package retrieval e l&amp;rsquo;autoloading.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Finally learning about &lt;a href=&#34;https://twitter.com/hashtag/Puli?src=hash&#34;&gt;#Puli&lt;/a&gt; from &lt;a href=&#34;https://twitter.com/webmozart&#34;&gt;@webmozart&lt;/a&gt;. Great stuff! &lt;a href=&#34;https://twitter.com/hashtag/phpsummer?src=hash&#34;&gt;#phpsummer&lt;/a&gt; &lt;a href=&#34;http://t.co/l72oOuwtjY&#34;&gt;pic.twitter.com/l72oOuwtjY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Paweł Jędrzejewski (@pjedrzejewski) &lt;a href=&#34;https://twitter.com/pjedrzejewski/status/636889138252357632&#34;&gt;August 27, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
Puli consente l&amp;rsquo;accesso alle risorse di un pacchetto in modo semplice e veloce. Le risorse qualitativamente possono essere molto varie: immagini, template, file per la localizzazione, fogli di stile, basi di dati, ecc.
Puli introduce il concetto di &lt;strong&gt;percorso virtuale&lt;/strong&gt;, un nuovo standard per l&amp;rsquo;accesso alle risorse condivise da uno o più pacchetti.
Ciascun componente Puli definisce dei mappings che consentono di tradurre un percorso virtuale in percorso reale.
Questo significa che è possibile richiedere a Puli una risorsa locata virtualmente in &lt;code&gt;/vendorName/projectName/config/file.xml&lt;/code&gt; senza conoscere esattamente dove tale risorsa sarà collocata nel file system.
Puli offre inoltre la possibilità di modificare alcune risorse tramite il meccanismo dell&amp;rsquo;&lt;strong&gt;overriding&lt;/strong&gt;.
Similmente al composer.json, la configurazione di Puli risiede nel file puli.json.
Puli è integrabile con altre applicazioni per l&amp;rsquo;installazione e l&amp;rsquo;aggiornamento degli assets.
La seconda parte della presentazione è stata dedicata alla pratica.
L&amp;rsquo;obbiettivo era usare alcuni pacchetti Puli compatibili su un&amp;rsquo;applicazione &lt;a href=&#34;http://silex.sensiolabs.org/&#34;&gt;Silex&lt;/a&gt; per concludere lo sviluppo varie funzionalità.
È stato possibile vedere come Puli sia integrabile con altri tool per la gestione degli assets (nell&amp;rsquo;esercitazione è stato usato &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;).
Il format del workshop è stato diverso dal solito: ogni partecipante aveva a disposizione l&amp;rsquo;elenco dei problemi da risolvere con i relativi tutorial.
Ciò a consentito ai partecipanti di proseguire in autonomia senza ritardi collettivi.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;unconference&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;unconference:58029b8459d31227431cf79c0465e6bb&#34;&gt;Unconference&lt;/h3&gt;

&lt;p&gt;A fine giornata si è svolta la sessione &amp;ldquo;unconference&amp;rdquo;.
Sono stati trattati diversi argomenti interessanti, tra cui:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://it.wikipedia.org/wiki/HTTP/2&#34;&gt;&lt;strong&gt;HTTP 2&lt;/strong&gt;&lt;/a&gt; e gestione migliorata della rete;&lt;/li&gt;
&lt;li&gt;analisi delle strategie per consumer di &lt;a href=&#34;https://en.wikipedia.org/wiki/Message_queue&#34;&gt;&lt;strong&gt;code di messaggi&lt;/strong&gt;&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/a&gt; per eseguire applicazioni desktop dotate di GUI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;venerdi&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;venerdì-28-agosto:58029b8459d31227431cf79c0465e6bb&#34;&gt;Venerdì 28 agosto&lt;/h1&gt;

&lt;p&gt;&lt;a name=&#34;profiling&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;profiling-php-apps-nicolas-grekas:58029b8459d31227431cf79c0465e6bb&#34;&gt;Profiling PHP Apps (Nicolas Grekas)&lt;/h3&gt;

&lt;p&gt;Una prima presentazione ha illustrato i concetti fondamentali della &lt;a href=&#34;https://en.wikipedia.org/wiki/Profiling_(computer_programming&#34;&gt;&lt;strong&gt;profilazione&lt;/strong&gt;&lt;/a&gt;).
Sono state esaminate le tecniche principali di collezione delle informazioni: &lt;a href=&#34;https://en.wikipedia.org/wiki/Hooking&#34;&gt;&lt;strong&gt;function hooks&lt;/strong&gt;&lt;/a&gt; e &lt;strong&gt;sampling&lt;/strong&gt;, così come diversi tool per la profilazione: &lt;a href=&#34;http://xdebug.org/&#34;&gt;XDebug&lt;/a&gt;, &lt;a href=&#34;http://xhprof.io/&#34;&gt;Xhprof&lt;/a&gt; e &lt;a href=&#34;http://newrelic.com/&#34;&gt;New Relic&lt;/a&gt;.
Prove pratiche con questi tool hanno consentito di evidenziare le loro peculiarità e differenze. È stato interessante notare, ad esempio, l&amp;rsquo;accuratezza e la semplicità delle informazioni fornite dalla libreria Xhprof rispetto ai concorrenti.
Le prove pratiche hanno inoltre evidenziato che l&amp;rsquo;attività di profilazione non è semplice, soprattutto a causa del setup richiesto.
Anche l&amp;rsquo;interpretazione dei dati restituiti dal profiler può essere problematico: una buona rappresentazione delle informazioni conduce a soluzioni migliori.
Successivamente è stato introdotto il **profiler &lt;a href=&#34;https://blackfire.io/&#34;&gt;Blackfire**&lt;/a&gt;: una collezione di tecnologie che consentono di semplificare l&amp;rsquo;attività di profilazione.
È stata analizzata la sua struttura interna. Esso è composto da 4 componenti: il server Blackfire, l&amp;rsquo;agente collettore, l&amp;rsquo;estensione Php e il companion lato browser per avviare la profilazione.
In seguito si è discusso su come individuare i punti critici dell&amp;rsquo;applicazione e le strategie per risolvere i problemi.
Ad esempio si è visto che un &lt;strong&gt;autoloader non correttamente ottimizzato&lt;/strong&gt; rallenta significamente l&amp;rsquo;applicazione (sia pensi alla generazione dell&amp;rsquo;autoload non ottimizzato di Composer).
Le attività di Input/Output superflue causano rallentamenti, esempi sono le scritture sui &lt;strong&gt;log troppo verbosi&lt;/strong&gt;.
È stato un workshop davvero completo facilmente comprensibile anche dai principianti della profilazione.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;symfony3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;migrating-to-symfony-3-nicolas-grekas:58029b8459d31227431cf79c0465e6bb&#34;&gt;Migrating to Symfony 3 (Nicolas Grekas)&lt;/h3&gt;

&lt;p&gt;Questo workshop ha consentito di apprendere la &lt;strong&gt;roadmap a lungo termine del framework Symfony&lt;/strong&gt;.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;on the way to symfony 3 at &lt;a href=&#34;https://twitter.com/hashtag/phpsummer?src=hash&#34;&gt;#phpsummer&lt;/a&gt; with &lt;a href=&#34;https://twitter.com/nicolasgrekas&#34;&gt;@nicolasgrekas&lt;/a&gt; &lt;a href=&#34;http://t.co/vijn5ttzPG&#34;&gt;pic.twitter.com/vijn5ttzPG&lt;/a&gt;&lt;/p&gt;&amp;mdash; dbu (@dbu) &lt;a href=&#34;https://twitter.com/dbu/status/637233201635835904&#34;&gt;August 28, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
È stato annunciato che l&amp;rsquo;ultima versione LTS di Symfony 2 sarà &lt;strong&gt;la versione 2.8 completamente compatibile, quanto a funzionalità, con la versione 3.0&lt;/strong&gt;.
È interessante notare che non ci saranno cambiamenti stravolgenti per Symfony vesione 3.0: essa infatti rimuove soltanto le funzionalità deprecate nelle versioni precedenti.
Sono stati alresì spiegati i concetti di &lt;a href=&#34;http://engineering.facile.it/git-flow-semantic-versioning/&#34;&gt;versionamento semantico&lt;/a&gt; adottati dal framework a partire dalla versione 2.3.
L&amp;rsquo;obiettivo della sessione pratica è stato migrare l&amp;rsquo;applicazione &lt;em&gt;Symfony Demo&lt;/em&gt; alla versione Symfony 3.
Sono state esaminate diverse strategie per rilevare le deprecation: debug toolbar, file di log, fallimenti di test.
È stato inoltre annunciato che sarà presto possibile &lt;strong&gt;definire un servizio come deprecato nel service container&lt;/strong&gt;.
Ciò consente all&amp;rsquo;utente di rilevare subito eventuali utilizzi non corretti già durante la compilazione del container.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;experts&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;meet-the-experts:58029b8459d31227431cf79c0465e6bb&#34;&gt;Meet the experts&lt;/h3&gt;

&lt;p&gt;Diversi gruppi di persone si sono riunite per parlare di molteplici argomenti.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Ecommerce on Symfony roundtable at &lt;a href=&#34;https://twitter.com/PHPSummerCamp&#34;&gt;@PHPSummerCamp&lt;/a&gt; &lt;a href=&#34;http://t.co/RD8ueJX7Nj&#34;&gt;pic.twitter.com/RD8ueJX7Nj&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ivo Lukač (@ilukac) &lt;a href=&#34;https://twitter.com/ilukac/status/637288188231450625&#34;&gt;August 28, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
Ciascun gruppo comprendeva, tra gli altri partecipanti, un paio di persone esperte dell&amp;rsquo;argomento per moderare la discussione.
Io ho partecipato alla discussione di: &lt;a href=&#34;https://it.wikipedia.org/wiki/Commercio_elettronico&#34;&gt;&lt;strong&gt;E-commerce&lt;/strong&gt;&lt;/a&gt; su Symfony (con particolare riguardo a &lt;a href=&#34;http://sylius.org/&#34;&gt;Sylius&lt;/a&gt;), &lt;a href=&#34;https://it.wikipedia.org/wiki/Collaudo_del_software&#34;&gt;&lt;strong&gt;software testing&lt;/strong&gt;&lt;/a&gt; e &lt;strong&gt;&lt;a href=&#34;https://it.wikipedia.org/wiki/Application_programming_interface&#34;&gt;API&lt;/a&gt; design&lt;/strong&gt;.
È stato interessante discutere su come progettare architetture orientate a microservizi cercando di definire API stabili e solide.
È emerso anche che le &lt;strong&gt;applicazioni monolitiche&lt;/strong&gt; evolvono, a lungo termine, verso &lt;strong&gt;design complessi&lt;/strong&gt; che hanno frequenti &lt;strong&gt;problemi di manutenibilità&lt;/strong&gt;.
A tal proposito si parlava di build CI lente, deploy lento e isolamento delle responsabilità alquanto complessa.
Un confronto tra esperti, il miglior modo per chiudere la giornata.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;conclusione&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusione:58029b8459d31227431cf79c0465e6bb&#34;&gt;Conclusione&lt;/h1&gt;

&lt;p&gt;Il PhpSummerCamp è un evento particolare: presentazioni, discussioni, workshop e attività extra lo hanno reso interessante e divertente allo stesso tempo.
Tesi rafforzata dalla continua affluenza di sviluppatori che ogni anno non vogliono perdersi tale evento.
Il SummerCamp è il luogo ideale per chi vuole sentirsi parte delle comunità Php e EzPublish.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP 7 Overview</title>
      <link>http://engineering.facile.it/blog/ita/php-7-overview/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/php-7-overview/</guid>
      <description>

&lt;p&gt;Il linguaggio che ha contribuito alla nascita e alla crescita di più del 80% dei siti web oggi online, tra i quali alcuni dei più famosi al mondo, è prossimo a una svolta.&lt;/p&gt;

&lt;p&gt;Secondo la &lt;a href=&#34;https://wiki.php.net/rfc/php7timeline&#34;&gt;timeline ufficiale&lt;/a&gt; PHP 7 sarà rilasciato intorno al &lt;strong&gt;15 Ottobre 2015&lt;/strong&gt;: chi volesse provarlo in anteprima, tuttavia, può trovare binari, rpm, deb, dockerfiles e quant&amp;rsquo;altro su &lt;a href=&#34;http://php7.zend.com/&#34;&gt;php7.zend.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La release 7 costituisce una delle più importanti per PHP, sia in termini di funzionalità che di performance.&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;ultimo anno il team degli internals ha affrontato innumerevoli sfide, tra cui:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implementazione dell&amp;rsquo;&lt;a href=&#34;http://c2.com/cgi/wiki?AbstractSyntaxTree&#34;&gt;Abstract Syntax Tree&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Riscrittura di grosse porzioni dello &lt;strong&gt;Zend Engine&lt;/strong&gt; che ora può beneficiare di nuove strutture dati e gestione delle risorse ottimizzata;&lt;/li&gt;
&lt;li&gt;Disposizione di solide basi per aprire il linguaggio a futuri miglioramenti come la &lt;a href=&#34;https://en.wikipedia.org/wiki/Just-in-time_compilation&#34;&gt;Just in Time Compilation&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Implementazione di un corposo set di nuove feature, come vedremo a breve.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;performance:815871a857d9019d8dba5e4073c801e4&#34;&gt;Performance&lt;/h2&gt;

&lt;p&gt;Sull&amp;rsquo;onda degli ottimi risultati ottenuti dal team di HHVM, anche il team degli internals ha iniziato a lavorare estensivamente al miglioramento delle performance dell&amp;rsquo;implementazione originale di PHP. Gli impressionanti risultati (si parla di un miglioramento di circa il 100%) sono stati dimostrati da vari benchmark fatti sui vari CMS/Framework esistenti. Eccone di seguito due tra i più significativi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://talks.php.net/oz15#/boxspecs&#34;&gt;Benchmark di Rasmus Lerdorf, 12 Marzo 2015, Sydney, Australia&lt;/a&gt; - Benchmark su vari CMS/Applicativi scritti in PHP in esecuzione sulle varie versioni di PHP e HHVM&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.zend.com/rs/zendtechnologies/images/PHP7-Performance%20Infographic.pdf&#34;&gt;Infografica Zend&lt;/a&gt; - Benchmark di vari CMS/Framework (Magento 1.9, Wordpress, Drupal, Zend Framework 2, Laravel) su PHP 5.6 PHP 7 e HHVM 3.7. Contiene inoltre una comparazione tra PHP e altri linguaggi di scripting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;features:815871a857d9019d8dba5e4073c801e4&#34;&gt;Features&lt;/h2&gt;

&lt;p&gt;Qui di seguito riportiamo alcune delle feature che ci hanno colpito maggiormente; l&amp;rsquo;elenco seguente non è da considerarsi esaustivo rispetto a tutte le feature di PHP 7: una lista completa di tutte le RFC può essere trovata &lt;a href=&#34;https://wiki.php.net/rfc#php_70&#34;&gt;qui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;null-coalesce-operator:815871a857d9019d8dba5e4073c801e4&#34;&gt;Null Coalesce operator&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/isset_ternary&#34;&gt;Null Coalesce Operator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Il Null Coalesce operator (&lt;code&gt;??&lt;/code&gt;) ritorna l&amp;rsquo;operando di sinistra se questo non è &lt;code&gt;null&lt;/code&gt;, altrimenti ritorna l&amp;rsquo;operando di destra. Esso di fatto rappresenta un&amp;rsquo;abbreviazione dell&amp;rsquo;utilizzo di &lt;code&gt;isset()&lt;/code&gt; in un operatore ternario.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$name = $_GET[’name’] ?? &amp;quot;Name&amp;quot;;
// equivalente a
$name = isset($_GET[’name’]) ? $_GET[’name’] : &amp;quot;Name&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/SnCQY&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;uniform-variable-syntax:815871a857d9019d8dba5e4073c801e4&#34;&gt;Uniform Variable Syntax&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/uniform_variable_syntax&#34;&gt;Uniform Variable Syntax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHP 7 Introduce una nuova e più consistente sintassi delle variabili, che apre le porte ad alcuni nuovi modi di costruire le espressioni, come mostrato nei due esempi di seguito. Una lista più completa di esempi può essere trovata al link del RFC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Annidare chiamate di funzione&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$sum = function($l) {
    return function($r) use ($l) {
        return $l + $r;
    };
};

echo $sum(4)(2); // 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/mZHt3&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Effettuare una chiamata a metodo su un array contenente una coppia di oggetto: nome metodo.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Person
{
    public function getName()
    {
        return &amp;quot;Lorenzo&amp;quot;;
    }
}

$p = new Person();
echo [$p, &#39;getName&#39;]();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/bEU7t&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;group-use-declarations:815871a857d9019d8dba5e4073c801e4&#34;&gt;Group use declarations&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/group_use_declarations&#34;&gt;Group Use Declarations&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
use Zend\ModuleManager\ModuleEvent;
use Zend\ModuleManager\ModuleManagerInterface;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Equivale a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
use Zend\ModuleManager\{
    ModuleEvent,
    ModuleManagerInterface
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;combined-comparison-operator:815871a857d9019d8dba5e4073c801e4&#34;&gt;Combined Comparison operator&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/combined-comparison-operator&#34;&gt;Combined Comparison (Spaceship) Operator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Il Combined Comparison operator (aka &lt;em&gt;Spaceship Operator&lt;/em&gt;) è il nuovo operatore che mette in relazione i due operandi restituendo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-1&lt;/code&gt; se l&amp;rsquo;operando di sinistra è minore dell&amp;rsquo;operando di destra&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; se l&amp;rsquo;operando di sinistra è maggiore dell&amp;rsquo;operando di destra&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; se gli operandi sono uguali&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
echo 100 &amp;lt;=&amp;gt; 200; // -1
echo 200 &amp;lt;=&amp;gt; 100; // 1
echo 200 &amp;lt;=&amp;gt; 200; // 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/PV5kq&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;context-sensitive-lexer:815871a857d9019d8dba5e4073c801e4&#34;&gt;Context sensitive lexer&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/context_sensitive_lexer&#34;&gt;Context Sensitive Lexer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Allo stato attuale PHP ha circa 64 keyword riservate globalmente.
In PHP 7 questo comportamento è stato cambiato rendendo alcune keyword &lt;strong&gt;riservate solo in maniera parziale.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;esempio vediamo come sia possibile dichiarare due metodi chiamati &lt;code&gt;list&lt;/code&gt; e &lt;code&gt;forEach&lt;/code&gt;. Questo non è possibile in PHP&amp;lt;7.0.0 per via del fatto che queste due keyword sono riservate globalmente e non parzialmente.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Collection {
    public function forEach(callable $callback) {}
    public function list() {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;anonymous-classes:815871a857d9019d8dba5e4073c801e4&#34;&gt;Anonymous classes&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/anonymous_classes&#34;&gt;Anonymous Classes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHP 7 introduce la possibilità di creare classi anonime che sono particolarmente utili, ad esempio nel caso in cui si abbia la necessità di implementare un&amp;rsquo;interfaccia per l&amp;rsquo;utilizzo immediato della classe stessa come dipendenza di un&amp;rsquo;altra classe.&lt;/p&gt;

&lt;p&gt;Vediamo due esempi contrapposti, uno con named class e uno con classe anonima, assumendo di avere una classe &lt;code&gt;PersonNamePrinter&lt;/code&gt;che accetta nel proprio costruttore instanze di&lt;code&gt;PersonInterface&lt;/code&gt;. &lt;code&gt;PersonInterface&lt;/code&gt; richiede di implementare il solo metodo &lt;code&gt;getName()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class SpecificPerson implements PersonInterface
{
   public function getName()
   {
        return &amp;quot;Lorenzo&amp;quot;;
   }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$person = new SpecificPerson()
echo new PersonPrinter($person);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;equivale a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
echo new PersonPrinter(new class implements PersonInterface {
    public function getName()
    {
        return &amp;quot;Lorenzo&amp;quot;;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scalar-type-hints:815871a857d9019d8dba5e4073c801e4&#34;&gt;Scalar type hints&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/scalar_type_hints&#34;&gt;Scalar Type Hints&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Questa feature introduce la possiblità di dichiarare il tipo di dato del parametro di una funzione utilizzando anche i nuovi tipi di dato scalari &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; e &lt;code&gt;bool&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;È possibile rendere i parametri rigorosi (strict) facendo &lt;strong&gt;iniziare lo script con lo statement preposto a mutare questo comportamento&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
declare(strict_types=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vediamo un esempio:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

function printIntValue(int $value)
{
    var_dump($value);
}

printIntValue(5.9); // int(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/bp1Xt&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;esempio precedente stiamo dichiarando una funzione &lt;code&gt;printIntValue&lt;/code&gt; la quale richiede che &lt;code&gt;$value&lt;/code&gt; sia di tipo &lt;code&gt;int&lt;/code&gt;; quindi andiamo a chiamare la funzione stessa passando invece &lt;code&gt;$value&lt;/code&gt; come &lt;code&gt;float(5.9)&lt;/code&gt;.
Siccome al primo statement non abbiamo dichiarato i tipi come rigorosi, PHP costringerà il casting del valore passato a &lt;code&gt;int&lt;/code&gt;, troncando la parte dopo la virgola e convertendolo in &lt;code&gt;int(5)&lt;/code&gt;. Se invece avessimo dichiarato i tipi come rigorosi avremmo ottenuto un &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;return-type-declarations:815871a857d9019d8dba5e4073c801e4&#34;&gt;Return Type Declarations&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/return_types&#34;&gt;Return Type Declarations&lt;/a&gt;
In PHP 7 è stata introdotta la possiblità di dichiarare il tipo di ritorno di una funzione.
Alcuni vantaggi di questa feature sono:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Previene valori di ritorno non intenzionali;&lt;/li&gt;
&lt;li&gt;Documenta i tipi di ritorno in maniera strict, diversamente da come è oggi con i commenti e phpdoc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vediamo un esempio:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class DateTimeGenerator
{
    public function getDateTime() : \DateTime
    {
        return new \DateTime();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/3QXVK&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;esempio precedente abbiamo dichiarato una classe &lt;code&gt;DateTimeGenerator&lt;/code&gt; che contiene un metodo &lt;code&gt;getDateTime()&lt;/code&gt; che deve ritornare necessariamente un&amp;rsquo;instanza di &lt;code&gt;\DateTime&lt;/code&gt;. Nel caso questo non avvenisse otterremmo ancora una volta un &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;bind-closure-on-call:815871a857d9019d8dba5e4073c801e4&#34;&gt;Bind Closure on Call&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/closure_apply&#34;&gt;Closure::call&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In PHP 5.4 era già possibile fare il binding dello scope di una classe all&amp;rsquo;interno di una closure utilizzando &lt;a href=&#34;http://php.net/manual/en/closure.bindto.php&#34;&gt;Closure-&amp;gt;bindTo()&lt;/a&gt; e &lt;a href=&#34;http://php.net/manual/en/closure.bind.php&#34;&gt;Closure::bind()&lt;/a&gt;. Questo metodo richiedeva però la creazione di una closure intermedia che facesse da &lt;em&gt;collante&lt;/em&gt; tra l&amp;rsquo;invocazione della closure e il binding dello scope dell&amp;rsquo;oggetto.
Questo non è più richiesto in PHP 7, dove è stato introdotto il metodo &lt;code&gt;Closure::call&lt;/code&gt; che permette di eseguire insieme i due step rendendo il tutto molto più compatto ed elegante.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class DummyClass {private $value = 1;}

// Before PHP 7
$getValueCallBack = function() {return $this-&amp;gt;value;};
$getValue = $getValueCallBack-&amp;gt;bindTo(new DummyClass, &#39;DummyClass&#39;);
echo $getValue();

// From PHP 7
$getvalue = function() {return $this-&amp;gt;value;};
echo $getValue-&amp;gt;call(new DummyClass);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://3v4l.org/YKtPC&#34;&gt;▶ Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;filtered-unserialize:815871a857d9019d8dba5e4073c801e4&#34;&gt;Filtered Unserialize&lt;/h3&gt;

&lt;p&gt;PHP RFC: &lt;a href=&#34;https://wiki.php.net/rfc/secure_unserialize&#34;&gt;Filtered Unserialize&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Questa feature permette di prevenire eventuali injection abilitando l&amp;rsquo;opzione di impostare una lista di classi per le quali è possibile fare l&amp;rsquo;unserialize.
Tutte le classi non presenti nella lista saranno convertite nell&amp;rsquo;oggetto incompleto &lt;code&gt;__PHP_Incomplete_Class&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;esempio seguente il contenuto di &lt;code&gt;$foo&lt;/code&gt; verrà deserializzato solo se &lt;code&gt;$foo&lt;/code&gt; sarà instanza di &lt;code&gt;OnePossibleClass&lt;/code&gt; o di &lt;code&gt;AnotherPossibileClass&lt;/code&gt;, altrimenti verrà convertito in &lt;code&gt;__PHP_Incomplete_Class&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$data = unserialize($foo, [&amp;quot;allowed_classes&amp;quot; =&amp;gt; [&amp;quot;OnePossibleClass&amp;quot;, &amp;quot;AnotherPossibileClass&amp;quot;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusioni:815871a857d9019d8dba5e4073c801e4&#34;&gt;Conclusioni&lt;/h2&gt;

&lt;p&gt;Ora andate! Testate le vostre applicazioni su PHP 7 e, se potete, aiutate a migrare le estensioni. Non sapete come fare? No problem, chiunque può iniziare a fare qualcosa con i giusti punti di partenza.&lt;/p&gt;

&lt;p&gt;Ecco alcune risorse utili:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gophp7.org/gophp7-ext/&#34;&gt;GoPHP7-ext&lt;/a&gt; Progetto che supporta la migrazione delle estensioni verso PHP 7, raccogliendo risorse e consigli utili ad ottenere questo scopo.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spaghetti.io/cont/article/getting-started-with-php-extensions-development/52/1.html&#34;&gt;Getting started with PHP Extensions development&lt;/a&gt; - Un mio breve articolo (in inglese) su come scrivere la propria prima estensione PHP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se il post vi è piaciuto non dimenticate di condividerlo e di commentarlo qui sotto o su twitter menzionando &lt;a href=&#34;https://twitter.com/FacileIt_Engr&#34;&gt;@FacileIt_Engr&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facile.it devs @ PHP Day 2015</title>
      <link>http://engineering.facile.it/blog/ita/php-day-2015/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/php-day-2015/</guid>
      <description>

&lt;p&gt;Anche quest&amp;rsquo;anno si è svolto il &lt;strong&gt;&lt;a href=&#34;http://2015.phpday.it/&#34;&gt;PHP Day&lt;/a&gt; a Verona, il 15 e 16 maggio&lt;/strong&gt;. Noi sviluppatori di Facile.it abbiamo partecipato con un folto gruppo e seguito i vari talks.&lt;/p&gt;

&lt;p&gt;In questo breve articolo vorremmo citare quelli che in qualche maniera &lt;strong&gt;ci hanno colpito&lt;/strong&gt;, per motivi tecnici e non, per dare l&amp;rsquo;opportunità a chi non ha potuto partecipare di sapere qualcosa di più, o per dare &lt;strong&gt;un assaggio della conferenza&lt;/strong&gt; a chi non ha mai partecipato a qualcosa del genere e, speriamo, invogliarlo a far parte della community!&lt;/p&gt;

&lt;p&gt;Ovviamente non pretendiamo di fare una recensione, né quanto meno una classifica&amp;hellip; I talk che abbiamo scelto di citare sono stati scelti per puro &lt;strong&gt;gusto personale&lt;/strong&gt;, o ci hanno semplicemente colpito perché si avvicinavano di più alla nostra esperienza di sviluppatori, o perché toccavano più da vicino lo &lt;strong&gt;stack tecnologico&lt;/strong&gt; da noi utilizzato.&lt;/p&gt;

&lt;p&gt;I talk sono in ordine cronologico. Buona lettura!&lt;/p&gt;

&lt;h4 id=&#34;indice:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Indice&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#prophecy&#34;&gt;PHP object mocking framework world: let&amp;rsquo;s compare Prophecy and PHPUnit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#containerize&#34;&gt;Containerize your PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#varnish&#34;&gt;Going crazy with Symfony2 and Varnish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#psr-7&#34;&gt;Hello, PSR-7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#php7-data-structures&#34;&gt;PHP Data Structures (and the impact of PHP 7 on them)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#doctrine&#34;&gt;Doctrine ORM Good Practices and Tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;keynotes:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Keynotes&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#coderabbi&#34;&gt;Talmudic Maxims to Maximize Your Growth as a Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#calevans&#34;&gt;Down the Rabbit Hole: Lessons Learned combining Career and Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#seldaek&#34;&gt;Behind the Scenes of Maintaining an Open Source Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;talk-tecnici:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Talk tecnici&lt;/h1&gt;

&lt;p&gt;&lt;a name=&#34;prophecy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;php-object-mocking-framework-world-let-s-compare-prophecy-and-phpunit:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;PHP object mocking framework world: let&amp;rsquo;s compare Prophecy and PHPUnit&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Sarah Khalil (&lt;a href=&#34;http://twitter.com/saro0h&#34;&gt;@saro0h&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 14:30 – 15:30 - track 1 (&lt;a href=&#34;https://speakerdeck.com/saro0h/php-day-verona-2015-php-object-mocking-framework-world&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134728681&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Una buona esposizione su &lt;a href=&#34;https://github.com/phpspec/prophecy-phpunit&#34;&gt;prophecy&lt;/a&gt; la nuova tecnologia per effetuare mocking e stubbing. In questo talk sono state illustrate le API di prophecy e si è parlato di come questo strumento sarà sempre più integrato con phpunit (è già presente nella nuova versione 4.6) sino ad arrivare ad un completo rimpiazzo dei metodi nativi del famoso testing framework.&lt;/p&gt;

&lt;p&gt;Ricordatevi di aggiungere qualche altra parola (oltre a prophecy) chiave nelle vostre ricerche su google per evitare riferimenti biblici.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;containerize&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;containerize-your-php:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Containerize your PHP&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Marek Jelen (&lt;a href=&#34;http://twitter.com/marek_jelen&#34;&gt;@marek_jelen&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 15:30 – 16:30 - track 2&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134728683&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Si è parlato tanto nelle Conferences dell&amp;rsquo;ultimo anno di &lt;strong&gt;Docker e i container&lt;/strong&gt; come strumento di sviluppo, ma questo talk si è rivelato interessante, spiegando come fosse possibile utilizzare i container &lt;strong&gt;come strumento di deploy&lt;/strong&gt; e di creazione di immagini, in modo tale da contenere anche il sorgente del proprio progetto; abbiamo scoperto il tool &lt;a href=&#34;http://github.com/openshift/source-to-image&#34;&gt;Source to Image&lt;/a&gt;, che permette di creare queste immagini in maniera personalizzata e automatizzata partendo dal proprio codice (e dal &lt;code&gt;composer.json&lt;/code&gt;), e il progetto &lt;a href=&#34;http://www.openshift.com/&#34;&gt;Openshift&lt;/a&gt;, portato avanti da RedHat.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;varnish&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;going-crazy-with-symfony2-and-varnish:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Going crazy with Symfony2 and Varnish&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;David De Boer&lt;/li&gt;
&lt;li&gt;Day 1 - 17:30 – 18:00 - track 1&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134814726&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Prima di ascoltare questo talk, pensavamo che la &lt;strong&gt;cache HTTP&lt;/strong&gt; (e Varnish) fossero praticamente inutilizzabili in un &lt;strong&gt;ambito di sito non-pubblico&lt;/strong&gt;, dove i contenuti vanno serviti (e variano in base) ad utenti sempre autenticati.&lt;/p&gt;

&lt;p&gt;Abbiamo scoperto il &lt;a href=&#34;http://github.com/FriendsOfSymfony/FOSHttpCacheBundle&#34;&gt;FOSHttpCacheBundle&lt;/a&gt;, e il trucco che permette di fare caching anche di questo tipo di contenuti: Varnish prende il cookie e controlla la cache non in base a quello, ma in base ad un hash che viene fornito dall&amp;rsquo;applicazione stessa tramite un altra chiamata; questo permette di &lt;strong&gt;mappare i contenuti cachati&lt;/strong&gt; non sui singoli utenti, ma &lt;strong&gt;con logiche più ottimizzate&lt;/strong&gt; (gruppi di utenti? set di permessi?) ed eventualmente più legate alla business logic dell&amp;rsquo;applicazione stessa.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;psr-7&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;hello-psr-7:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Hello, PSR-7&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Beau Simensen (&lt;a href=&#34;http://www.twitter.com/beausimensen&#34;&gt;@beausimensen&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 11:00 – 12:00 - track 2 (&lt;a href=&#34;https://beau.io/talks/2015/05/16/hello-psr-7-phpday-2015/&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134281520&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In questo talk abbiamo potuto conoscere da vicino la genesi dello &lt;strong&gt;standard PSR-7&lt;/strong&gt; (di cui abbiamo già scritto in un &lt;a href=&#34;http://engineering.facile.it/php-fig-standard-psr-7-http-message-interfaces/&#34;&gt;altro articolo&lt;/a&gt;), raccontata da una delle persone che hanno seguito da vicino e contribuito alla scrittura della proposta stessa.&lt;/p&gt;

&lt;p&gt;Lo standard sarà approvato a brevissimo (solo 3 giorni dopo il talk!) e molti aspettano di vedere cosa comporterà a livello di framework PHP.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;php7-data-structures&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;php-data-structures-and-the-impact-of-php-7-on-them:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;PHP Data Structures (and the impact of PHP 7 on them)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Patrick Allaert (&lt;a href=&#34;http://www.twitter.com/patrick_allaert&#34;&gt;@patrick_allaert&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 12:00 – 13:00 - track 1 (&lt;a href=&#34;http://www.slideshare.net/patrick.allaert/php-data-structures-and-the-impact-of-php-7-on-them-php-days-2015&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134070469&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Questo talk, dal sapore molto tecnico, ci ha fatto addentrare negli internals degli &lt;strong&gt;array PHP&lt;/strong&gt;, e in quanto siano talmente specializzati a far tutto, da essere &lt;strong&gt;inefficienti&lt;/strong&gt; in moltissimi casi; abbiamo visto numerose &lt;strong&gt;alternative più specialistiche&lt;/strong&gt; per i vari casi d&amp;rsquo;uso (&lt;a href=&#34;http://php.net/manual/en/class.splfixedarray.php&#34;&gt;SplFixedArray&lt;/a&gt;, &lt;a href=&#34;http://php.net/manual/en/class.splqueue.php&#34;&gt;SplQueue&lt;/a&gt;, &lt;a href=&#34;http://php.net/manual/en/class.splstack.php&#34;&gt;SplStack&lt;/a&gt;&amp;hellip;); sfruttare gli uni piuttosto che gli altri impatta fortemente sulle &lt;strong&gt;prestazioni&lt;/strong&gt; nei tempi e nell&amp;rsquo;uso della memoria, e abbiamo visto nel dettaglio alcuni benchmark che mostrano come questi costi diminuiscono (spesso di gran lunga) &lt;strong&gt;tra PHP 5.6 e PHP 7&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;doctrine&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;doctrine-orm-good-practices-and-tricks:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Doctrine ORM Good Practices and Tricks&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Marco Pivetta (&lt;a href=&#34;http://www.twitter.com/Ocramius&#34;&gt;@Ocramius&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 15:30 – 16:30 - track 1&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/134178140&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Usiamo &lt;strong&gt;Doctrine&lt;/strong&gt; tutti i giorni, ma questo talk, sebbene marcato come di livello &lt;strong&gt;beginner&lt;/strong&gt;, si è rivelato molto interessante e fonte di numerose discussioni e &lt;strong&gt;riflessioni&lt;/strong&gt; tra colleghi. Lo speaker è uno dei principali contributors al progetto &lt;a href=&#34;https://github.com/doctrine/doctrine2&#34;&gt;doctrine-orm&lt;/a&gt;, e ci ha elencato una serie di &lt;strong&gt;best practices&lt;/strong&gt;, partendo dal chiedersi se e quando è il caso di usare un ORM, passando poi a problemi quali l&amp;rsquo;uso e l&amp;rsquo;implementazione di entità, la loro consistenza, l&amp;rsquo;evitare di usare setter brutali o di esporre le ArrayCollection che rappresentano le nostre relazioni.&lt;/p&gt;

&lt;h1 id=&#34;keynotes-1:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Keynotes&lt;/h1&gt;

&lt;p&gt;Abbiamo voluto citare in questo articolo anche i &lt;strong&gt;3 keynote&lt;/strong&gt; della conferenza: sono stati tutti piuttosto interessanti, profondamente motivazionali e coinvolgenti.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;coderabbi&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;talmudic-maxims-to-maximize-your-growth-as-a-developer:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Talmudic Maxims to Maximize Your Growth as a Developer&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Yitzchok Willroth (&lt;a href=&#34;http://www.twitter.com/coderabbi&#34;&gt;@coderabbi&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - keynote di apertura&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yitz, studente rabbinico poi passato alla programmazione, molto famoso nella community PHP, ci ha spinto a considerare alcuni suoi consigli su come poterci &lt;strong&gt;migliorare come sviluppatori&lt;/strong&gt; e come membri della community stessa: cercare e coltivare un mentore, essere pazienti ed accettare i consigli, aiutare gli altri per ripagare tutto questo, partecipare nell&amp;rsquo;open source&amp;hellip;&lt;/p&gt;

&lt;p&gt;Personalmente, mi ha anche fatto scoprire tre siti piuttosto interessanti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://phpmentoring.org/&#34;&gt;PHP Mentoring&lt;/a&gt; e &lt;a href=&#34;http://hackpledge.org&#34;&gt;Hackpledge&lt;/a&gt;, per chi è in cerca di un &lt;strong&gt;mentore&lt;/strong&gt; o vuole diventarlo per aiutare altri a diventare programmatori migliori&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://up-for-grabs.net/&#34;&gt;Up for grabs&lt;/a&gt;, un sito raccoglitore di &lt;strong&gt;issue su GitHub *semplici&lt;/strong&gt;*, un ottimo punto di inizio per chi vorrebbe partecipare a progetti open source, ma non sa da dove cominciare&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;calevans&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;down-the-rabbit-hole-lessons-learned-combining-career-and-community:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Down the Rabbit Hole: Lessons Learned combining Career and Community&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Cal Evans (&lt;a href=&#34;http://www.twitter.com/calevans&#34;&gt;@CalEvans&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - keynote di apertura&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cal è il community manager (ma non chiamatelo così!) per Zend, e ci ha raccontato con estrema passione, qualche lacrima e in maniera molto divertente la sua storia, come è nata la sua carriera di programmatore e come il suo percorso si è intrecciato con la community PHP e il mondo dell&amp;rsquo;open source.&lt;/p&gt;

&lt;p&gt;Tutto questo per spiegarci come &lt;strong&gt;far parte della community è un valore&lt;/strong&gt; importante per tutti ma soprattutto per noi stessi, e come la nostra sia così grande, forte e basata su uno &lt;strong&gt;spirito positivo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;seldaek&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;behind-the-scenes-of-maintaining-an-open-source-project:2ae40b845e02f26c759cfa0e911c81d0&#34;&gt;Behind the Scenes of Maintaining an Open Source Project&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Jordi Boggiano (&lt;a href=&#34;http://twitter.com/seldaek&#34;&gt;@seldaek&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - keynote di chiusura&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jordi è il creatore e mantainer di &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;, uno dei principali tool per un programmatore PHP. Nel suo keynote ci ha raccontato con franchezza la sua esperienza in prima persona nel &lt;strong&gt;gestire un progetto open source&lt;/strong&gt; così vasto e popolare, come spesso sia difficile accontentare tutti, e alcuni retroscena e dettagli di qualche curiosa pull request.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Il principio OPEN/CLOSE le sue origini e i casi d&#39;uso</title>
      <link>http://engineering.facile.it/blog/ita/principio-open-close-le-sue-origini-e-i-casi-d-uso/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/principio-open-close-le-sue-origini-e-i-casi-d-uso/</guid>
      <description>

&lt;h2 id=&#34;definizione:4d43e339c52ffe85c41a2012c2e2301f&#34;&gt;Definizione:&lt;/h2&gt;

&lt;p&gt;Il principio &lt;em&gt;OPEN/CLOSE&lt;/em&gt; fa riferimento all&amp;rsquo;acronimo &lt;a href=&#34;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design&#34;&gt;SOLID&lt;/a&gt;).  introdotto da  Michael Feathers che riporta alcune &lt;em&gt;buone pratiche&lt;/em&gt; di programmazione ad oggetti ancora di forte attualità.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OPEN/CLOSE&lt;/em&gt; (la &lt;strong&gt;O&lt;/strong&gt; dell&amp;rsquo;acronimo), nella sua definizione più generale indica che:  un modulo (un oggetto, una classe o un gruppo di funzioni) debba essere &lt;strong&gt;aperto alle estensioni&lt;/strong&gt; ma &lt;strong&gt;chiuso alle modifiche&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Questo principio tuttavia non è altro che la formalizzazione e il raggruppamento di concetti e linee guida già presenti da tempo nella programmazione ad oggetti.&lt;/p&gt;

&lt;h3 id=&#34;chiuso-alle-modifiche:4d43e339c52ffe85c41a2012c2e2301f&#34;&gt;Chiuso alle modifiche&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Chiuso alle modifiche che potrebbero aver effetto sul client&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Possiamo esprimere questa linea guida anche come  un evoluzione di Single responsibility: Un modulo prodotto con un buon design avrà una responsabilità precisa, definita e, quindi, non vi sarà la necessita di modificare il suo comportamento, &lt;strong&gt;anche alla luce di nuove specifiche&lt;/strong&gt;.
Per chiarire ancora di più il concetto dobbiamo fare riferimento ad un altro famoso acronimo della programmazioni ad aggetti: GRASP e, in particolare, all&amp;rsquo;idea di &lt;a href=&#34;http://www.martinfowler.com/ieeeSoftware/protectedVariation.pdf&#34;&gt;Protected Variations&lt;/a&gt; (da ora in poi &lt;em&gt;PV&lt;/em&gt;) e di &lt;a href=&#34;http://en.wikipedia.org/wiki/Loose_coupling&#34;&gt;Low coupling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In un articolo di &lt;a href=&#34;http://en.wikipedia.org/wiki/Craig_Larman&#34;&gt;Craig Larman&lt;/a&gt; si parla di &lt;em&gt;PV&lt;/em&gt; come la necessità di:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nascondere l&amp;rsquo;implementazione (&lt;a href=&#34;http://en.wikipedia.org/wiki/Information_hiding&#34;&gt;information hiding&lt;/a&gt;) e le informazioni legate al design (hidden implementation) agli altri moduli in particolar modo al presentarsi di scelte difficili o cambiamenti molto frequenti.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Questo garantisce, in generale, un livello di flessibilità superiore, si pensi a questo semplice esempio:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** Questa classe è esposta al client **/
class ClasseEsterna 
{
  private var $oggettoInterno;

  public function incrementa()       {
    [...]           
    return $this-&amp;gt;oggettoInterno-&amp;gt;complessaFunzioneDiIncremento();
  }     
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si può notare come :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;L&amp;rsquo;implementazione della &lt;em&gt;complessa&lt;/em&gt; funzione interna è nascosta al client;&lt;/li&gt;
&lt;li&gt;All&amp;rsquo;evolvere della &lt;strong&gt;complessaFunzioneDiIncremento&lt;/strong&gt; il nostro client sarà ==protetto== dalle modifiche;&lt;/li&gt;
&lt;li&gt;Abbiamo realizzato un &lt;em&gt;low coupling&lt;/em&gt; fra la l&amp;rsquo;&lt;strong&gt;oggettoInterno&lt;/strong&gt; e il client che utilizza la &lt;strong&gt;ClasseEsterna&lt;/strong&gt;, promuovendo, di fatto, il ==riuso== di &lt;strong&gt;oggettoInterno&lt;/strong&gt; in altri contesti.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;aperto-alle-estensioni:4d43e339c52ffe85c41a2012c2e2301f&#34;&gt;Aperto alle estensioni:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Aperto ad essere esteso ed adattato&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Le modalità tramite le quali è possibile modificare il comportamento di un modulo per accogliere le nuove esigenze ed evoluzioni è tramite le estensioni.&lt;/p&gt;

&lt;p&gt;In questo caso il concetto di estensione può essere visto sia in senso stretto (Ereditarietà) sia in senso lato come aggiunta di nuove classi, attributi metodi etc..&lt;/p&gt;

&lt;p&gt;Sembrerebbe che questi due attributi siano in contrapposizione; Il modo classico per estendere il comportamento di un modulo è effettuare modifiche al modulo stesso.
Un modulo che non può cambiare è solitamente considerato qualcosa che ha un comportamento fisso e che non può evolvere.&lt;/p&gt;

&lt;p&gt;Un esempio è il pattern chain of responsibility che vediamo di seguito.&lt;/p&gt;

&lt;h3 id=&#34;chain-of-responsibility:4d43e339c52ffe85c41a2012c2e2301f&#34;&gt;Chain of responsibility:&lt;/h3&gt;

&lt;p&gt;Questo pattern risolve un’ampia classe di situazioni nelle quali vi sia la necessità di eseguire operazioni &lt;strong&gt;sequenziali&lt;/strong&gt; e &lt;strong&gt;condizionali&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La chain of responsibility è composta da 2 soggetti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1&lt;/strong&gt; gestore.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;n&lt;/strong&gt; anelli.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GESTORE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nella definizione teorica della catena questo soggetto non esiste!
Tuttavia, per avvicinarci ad  un implementazione di questo pattern, è necessario utilizzare un vigile della catena che è a conoscenza dello stato globale dell’esecuzione.
Il gestore ha la responsabilità di chiamare in causa i singoli anelli e di restituire il risultato dell’esecuzione globale.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;
class Gestore
{

    /**
     * Il metodo execute chiama in causa tutti gli anelli della catena.
     * @param Object $oggetto
     * @return Object
     **/
    public function execute(Object $oggetto)
    {

        // [...]

        foreach ($listaAnelli as $anello) {
            $anello-&amp;gt;handle($oggetto);
        }

        // [...]

        return $oggetto;

    }


}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ANELLI:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I singoli anelli implementano un interfaccia comune che solitamente espone un solo metodo pubblico esempio &lt;em&gt;handle&lt;/em&gt; .&lt;strong&gt;Non possono&lt;/strong&gt; tener conto del risultato di precedenti anelli, non sono a conoscenza dello stato globale dell’esecuzione e possono, quindi, prendere solo decisioni locali.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;interface AnelloInterface {

 /**
  * Il metodo handle effettua delle operazioni sull&#39;oggetto in esame.
  * @param Object $oggetto
  * @return void
  **/
 function handle(Object $oggetto);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Come rispettiamo PV ? Ovvero, come proteggiamo il client da future evoluzione del sistema?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Il client utilizzerà sempre &lt;strong&gt;la stessa API&lt;/strong&gt; esposta dal gestore della catena. Le modifiche non interesseranno, infatti, il contratto fra client e gestore.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Il sistema è aperto alle estensioni?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All&amp;rsquo;evoluzione della catena verranno inseriti nuovi anelli che copriranno ulteriori casi d&amp;rsquo;uso o funzionalità. Sebbene i nuovi anelli dovranno implementare la stessa interfaccia potranno avere una logica interna completamente personalizzabile.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Esiste una forte separazione fra i moduli del sistema?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Il low coupling in questa caso è garantito da 2 aspetti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Il client non conosce gli elementi della catena perché ha una relazione diretta solamente con il gestore.&lt;/li&gt;
&lt;li&gt;È presente coesione fra l&amp;rsquo;interfaccia dei singoli anelli e il gestore. Purché si rispetti questo contratto è possibile esprimere anche logiche complesse.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;conclusione:4d43e339c52ffe85c41a2012c2e2301f&#34;&gt;Conclusione:&lt;/h3&gt;

&lt;p&gt;È necessario &lt;strong&gt;scegliere le proprie battaglie&lt;/strong&gt; quando si parla di design, sia che si tratti di scelte macro-architetturali che piccole scelte sulla singola istanza.&lt;/p&gt;

&lt;p&gt;I principi che non stati esposti non sono applicabili in tutte le situazioni, un bravo sviluppatore cercherà di utilizzare PV e low coupling in &lt;strong&gt;aree strategiche del sistema&lt;/strong&gt;, &lt;strong&gt;spesso soggette a cambiamento&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se non si riesce ad identificare correttamente queste aree non si farà altro che introdurre una maggiore complessità generale che, in certe situazioni può essere deleteria.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;obbiettivo finale dovrebbe essere sempre minimizzare l&amp;rsquo;impatto sul sistema dei (naturali) cambiamenti; Open/Close PV e low coupling sono alcune delle strategie più efficaci.&lt;/p&gt;

&lt;h4 id=&#34;bibliografia:4d43e339c52ffe85c41a2012c2e2301f&#34;&gt;Bibliografia&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Craig Larman - &lt;a href=&#34;http://www.utdallas.edu/~chung/SP/applying-uml-and-patterns.pdf&#34;&gt;Applying UML and Patterns – An Introduction to Object-Oriented Analysis and Design and Iterative Development (3rd ed.)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parnas, D.L. - &lt;a href=&#34;https://www.cs.umd.edu/class/spring2003/cmsc838p/Design/criteria.pdf&#34;&gt;&amp;ldquo;On the Criteria To Be Used in Decomposing Systems into Modules&amp;rdquo;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Craig Larman - &lt;a href=&#34;http://www.martinfowler.com/ieeeSoftware/protectedVariation.pdf&#34;&gt;&amp;ldquo;Protected Variation: The Importance of Being Closed&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SIGS Publications - &lt;a href=&#34;http://www.objectmentor.com/resources/articles/ocp.pdf&#34;&gt;The Open-Closed Principle: C++ Report&lt;/a&gt;
&lt;a href=&#34;http://en.wikipedia.org/wiki/Information_hiding&#34;&gt;Information Hiding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gestione di ACL su insiemi di records</title>
      <link>http://engineering.facile.it/blog/ita/gestione-di-acl-su-insiemi-di-records/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/gestione-di-acl-su-insiemi-di-records/</guid>
      <description>&lt;p&gt;Le &lt;strong&gt;ACL&lt;/strong&gt; (&lt;em&gt;Access Control List&lt;/em&gt;) sono un strumento molto potente per poter definire l&amp;rsquo;accesso a risorse con una granularità molto fine. Nel quotidiano abbiamo già modo di utilizzarle per definire i permessi per accedere a file su Unix o quali pacchetti far passare attraverso un firewall o ancora l&amp;rsquo;accesso a database.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Symfony&lt;/strong&gt; le &lt;em&gt;ACL&lt;/em&gt; sono disponibili &lt;em&gt;out-of-the-box&lt;/em&gt; nel caso di installazione completa e permettono la definizione delle regole di accesso a risorse tramite &lt;strong&gt;ruoli&lt;/strong&gt; e &lt;strong&gt;maschere&lt;/strong&gt;. Mentre i &lt;strong&gt;ruoli&lt;/strong&gt; rappresentano dei sottoinsiemi degli utenti di una data applicazione (&lt;em&gt;amministratori&lt;/em&gt;, &lt;em&gt;backoffice&lt;/em&gt;, &lt;em&gt;business analyst&lt;/em&gt;) e possono essere visti come delle etichette da assegnare ad un utente, le &lt;strong&gt;maschere&lt;/strong&gt; sono la rappresentazione numerica delle azioni che possono essere effettuate dagli utenti aventi determinati ruoli. Per tornare all&amp;rsquo;esempio del filesystem Unix, i ruoli possono essere &lt;em&gt;Owner&lt;/em&gt;, &lt;em&gt;Group&lt;/em&gt; o &lt;em&gt;Others&lt;/em&gt; mentre le maschere sono ad esempio 7 (lettura, scrittura e esecuzione) indicato per ciascun ruolo.&lt;/p&gt;

&lt;p&gt;Avendo la possibilità di poter definire più di soli tre ruoli e più di sole tre azioni chiaramente le opportunità diventano molteplici dando quindi estrema flessibilità al sistema.&lt;/p&gt;

&lt;p&gt;Di base &lt;strong&gt;Symfony&lt;/strong&gt; persiste le informazioni definite tramite le &lt;em&gt;ACL&lt;/em&gt; (chiamate &lt;strong&gt;ACE&lt;/strong&gt; ovvero &lt;em&gt;Access Control Entry&lt;/em&gt;) in tabelle specifiche tramite cui verificare se un utente può o meno effettuare una operazione: la verifica è immediata tramite le API esposte da &lt;strong&gt;Symfony&lt;/strong&gt; fintanto che si tratta di operare su una singola risorsa ma la soluzione non scala certamente nel caso si debbano filtrare le risorse accessibili da un utente. Per una più approfondita trattazione su come utilizzare le API rese disponibili da &lt;strong&gt;Symfony&lt;/strong&gt;, rimandiamo alla &lt;a href=&#34;http://symfony.com/it/doc/current/cookbook/security/acl.html&#34;&gt;relativa pagina della documentazione&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Per ovviare a questo problema all&amp;rsquo;interno di un progetto di &lt;strong&gt;Facile.it&lt;/strong&gt; si è pensato di adottare una soluzione che faccia uso di &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;&lt;strong&gt;ElasticSearch&lt;/strong&gt;&lt;/a&gt; per poter restituire ad un utente il sottoinsieme dei record a cui può accedere quando scorre una lista di record. &lt;strong&gt;ElasticSearch&lt;/strong&gt; era già stato scelto per poter migliorare la ricerca all&amp;rsquo;interno dei record delle differenti entità archiviate sul database relazionale, quindi si è trattato di operare due scelte che permettessero una gestione ottimale:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dividere ciascuna entità persitita come documento su &lt;strong&gt;ElasticSearch&lt;/strong&gt; in due parti, &lt;em&gt;metadata&lt;/em&gt; e &lt;em&gt;data&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;realizzare delle &lt;strong&gt;annotation custom&lt;/strong&gt; per poter esprimere le &lt;strong&gt;ACE&lt;/strong&gt; per ciascuna entità e campo delle entità.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dividere il documento in due parti rappresenta il punto di partenza per ottenere il risultato cercato: ogni volta che &lt;strong&gt;FOSElasticaBundle&lt;/strong&gt; procede con la copia di una entità su &lt;strong&gt;ElasticSearch&lt;/strong&gt;, viene richiamata una callback (definibile con la configurazione del bundle) che si occupa di recuperare tutte le &lt;strong&gt;ACE&lt;/strong&gt; dell&amp;rsquo;entità in questione e includerle nel campo &lt;em&gt;metadata&lt;/em&gt; del documento.
Successivamente, quando si vorrà effettuare una query sull&amp;rsquo;insieme dei record persistiti su &lt;strong&gt;ElasticSearch&lt;/strong&gt;, si dovrà solamente replicare le logiche (generiche) per l&amp;rsquo;applicazione delle &lt;strong&gt;ACL&lt;/strong&gt; per così ottenere i soli risultati che l&amp;rsquo;utente può accedere. In questo modo vengono evitate complesse query su un database relazionale (che prevedono l&amp;rsquo;utilizzo di diverse join su più tabelle) come invece sarebbe richiesto da un approccio basato sul solo utilizzo di &lt;strong&gt;MySQL&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Tramite le &lt;strong&gt;annotation&lt;/strong&gt; è invece possibile definire le varie &lt;strong&gt;ACE&lt;/strong&gt; per ciascuna classe o attributo della classe così da poter configurare l&amp;rsquo;accesso alle entità direttamente dai file delle entità stesse, fornendo uno strumento familiare per chi normalmente non utilizza le &lt;strong&gt;ACL&lt;/strong&gt;. Per creare una annotation custom rimandiamo anche in questo caso all&amp;rsquo;articolo presente nella &lt;a href=&#34;http://doctrine-common.readthedocs.org/en/latest/reference/annotations.html&#34;&gt;documentazione di &lt;strong&gt;Doctrine&lt;/strong&gt;&lt;/a&gt; ricordando, però, che è importante gestire una propria &lt;strong&gt;cache delle annotation&lt;/strong&gt; perchè questa non è fornita di base da &lt;strong&gt;Doctrine&lt;/strong&gt;. Un comando apposito può facilitare la gestione dell&amp;rsquo;aggiornamento delle &lt;strong&gt;ACE&lt;/strong&gt; di una entità ogni qualvolta venga effettuato un &lt;em&gt;deploy&lt;/em&gt; dell&amp;rsquo;applicazione, integrando così le &lt;em&gt;annotation&lt;/em&gt; create con le &lt;em&gt;API&lt;/em&gt; di &lt;strong&gt;Symfony&lt;/strong&gt; per le &lt;strong&gt;ACL&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Il file che definisce una entità di &lt;strong&gt;Doctrine&lt;/strong&gt; potrà dunque presentarsi in questo modo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
namespace Facile\Ws\Bundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Facile\Ws\BunnyBundle\Annotation\EntityAce as ACE;

/**
 * @ORM\Table(name=&amp;quot;user&amp;quot;)
 * @ORM\Entity
 * @ACE(&amp;quot;ROLE&amp;quot;, name=&amp;quot;ROLE_ADMIN&amp;quot;, mask=&amp;quot;MASK_MASTER&amp;quot;)
 * @ACE(&amp;quot;ROLE&amp;quot;, name=&amp;quot;ROLE_USER&amp;quot;, mask=&amp;quot;MASK_VIEW&amp;quot;)
 */
class User
{
    /**
     * @ORM\Column(name=&amp;quot;id&amp;quot;, type=&amp;quot;smallint&amp;quot;, nullable=false, options={&amp;quot;unsigned&amp;quot;=true})
     * @ORM\Id
     * @ORM\GeneratedValue(strategy=&amp;quot;AUTO&amp;quot;)
     * @ACE(&amp;quot;ROLE&amp;quot;, name=&amp;quot;ROLE_USER&amp;quot;, mask=&amp;quot;MASK_VIEW&amp;quot;)
     */
    protected $id;

    /**
     * @ORM\Column(name=&amp;quot;timestamp&amp;quot;, type=&amp;quot;datetime&amp;quot;, nullable=false)
     * @ACE(&amp;quot;ROLE&amp;quot;, name=&amp;quot;ROLE_USER&amp;quot;, mask=&amp;quot;MASK_VIEW&amp;quot;)
     */
    protected $timestamp;

    /**
     * @ORM\Column(type=&amp;quot;string&amp;quot;, length=25, unique=true)
     * @ACE(&amp;quot;ROLE&amp;quot;, name=&amp;quot;ROLE_ADMIN&amp;quot;, mask=&amp;quot;MASK_MASTER&amp;quot;)
     * @ACE(&amp;quot;ROLE&amp;quot;, name=&amp;quot;ROLE_USER&amp;quot;, mask=&amp;quot;MASK_VIEW&amp;quot;)
     */
    protected $username;

    ...
 }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PHP coding standard: PSR-7  HTTP message interfaces</title>
      <link>http://engineering.facile.it/blog/ita/php-fig-standard-psr-7-http-message-interfaces/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/php-fig-standard-psr-7-http-message-interfaces/</guid>
      <description>

&lt;p&gt;Le specifiche PSR-7 descrivono una &lt;a href=&#34;https://github.com/php-fig/fig-standards/blob/master/proposed/http-message.md&#34;&gt;proposta di standardizzazione&lt;/a&gt; delle &lt;strong&gt;interfacce per i messaggi HTTP&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Come sappiamo, il protocollo HTTP, attraverso le specifiche redatte dal W3C, definisce una serie di regole di comunicazione che vengono implementate dalle applicazioni client e server che lo adottano.&lt;/p&gt;

&lt;p&gt;A prima vista niente di nuovo sotto il Sole dunque, ma cerchiamo insieme di comprendere l&amp;rsquo;insieme di problematiche che sono al centro di questo nuovo dibattito che riguarda gli standard di codifica del linguaggio PHP.&lt;/p&gt;

&lt;h4 id=&#34;una-questione-di-interoperabilità-tra-framework:b7534f9229b77879ebc400f1bfdf8842&#34;&gt;Una questione di interoperabilità tra framework&lt;/h4&gt;

&lt;p&gt;I principali framework PHP, pur fornendo dei layer di astrazione del protocollo HTTP maturi e funzionali, impongono la scrittura di codice da essi dipendente.&lt;/p&gt;

&lt;p&gt;Questo vuol dire che &lt;strong&gt;tutto il codice&lt;/strong&gt; che implementa le logiche applicative, anche se ben definito e isolato, &lt;strong&gt;dovrà essere adattato per ciascun framework&lt;/strong&gt;, a discapito di un&amp;rsquo;evidente similarità operativa, come per esempio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;il recupero delle informazioni dalle variabili del server per costruire la richiesta&lt;/li&gt;
&lt;li&gt;il parsing degli header e del body della richiesta&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;aggiunta di uno o più header alla risposta&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;impostazione dello status code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Immaginiamo di voler scrivere un applicativo che abbia questi requisiti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;aggiunge un header personalizzato alla risposta, &lt;code&gt;X-GREETINGS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;header deve contenere un messaggio personalizzato in base all&amp;rsquo;orario della richiesta&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;header deve essere aggiunto solo in base agli headers inviati ed il verbo HTTP (ad es. solo per le richieste GET)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Decidiamo di scrivere le linee di codice necessarie con &lt;strong&gt;Symfony2&lt;/strong&gt; e &lt;strong&gt;Zend Framework 2&lt;/strong&gt;, per poi muoverci verso &lt;strong&gt;una sola soluzione ipoteticamente riutilizzabile&lt;/strong&gt; in ciascuno dei due contesti.&lt;/p&gt;

&lt;p&gt;Diamo per scontato di avere a disposizione un servizio che dato un orario determini con che formula salutarci:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

namespace Acme\Utils;

class GreetingSentence
{
  public static function compose(\DateTime $time, $name)
  {  		  
            $msg = &amp;quot;Ciao $name&amp;quot;;  
			$hour = (int)$time-&amp;gt;format(&#39;h&#39;);				

			if ($hour &amp;gt;= 20 &amp;amp;&amp;amp; $hour &amp;lt; 6) {
				return $msg + &#39; buonanotte!&#39;;
			} else if ($hour &amp;gt;= 6 &amp;amp;&amp;amp; $hour &amp;lt; 13) {
				return $msg + &#39; buongiorno!&#39;;
			} else if ($hour &amp;gt;= 13 &amp;amp;&amp;amp; $hour &amp;lt; 18) {
				return $msg + &#39; buon pomeriggio!&#39;;	
			} else if ($hour &amp;gt;= 18 &amp;amp;&amp;amp; $hour &amp;lt; 20) {
				return $msg + &#39; buonasera!&#39;;
			} else {
            	return $msg + &#39; c\&#39;è vita su Marte!&#39;;
            }						
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;symfony-2:b7534f9229b77879ebc400f1bfdf8842&#34;&gt;Symfony 2&lt;/h6&gt;

&lt;p&gt;Ecco come implementeremmo la funzionalità richiesta in Symfony2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php 

namespace Acme\HelloYouBundle\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Acme\Utils\GreetingSentence;

class MainController 
{	
	/**
	 * @param string $name
	 * @param Request $request
     */
	public function greetAction(Request $request)
	{
        $response = new Response();

        if ($request-&amp;gt;isMethod(&#39;GET&#39;)) {
            $name = $request
                -&amp;gt;server
                -&amp;gt;get(&#39;HTTP_USER_AGENT&#39;&#39;);

            $requestTimeStamp = $request
                -&amp;gt;server
                -&amp;gt;get(&#39;REQUEST_TIME&#39;);

            $requestTime = new \DateTime();
            $requestTime-&amp;gt;setTimestamp($requestTimeStamp);

            $msg = GreetingSentence::compose($requestTime, $name);		
			$response-&amp;gt;headers-&amp;gt;set(&#39;X-GREETINGS&#39;, $msg);
        }

        return $response;
    }
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;zend-framework-2:b7534f9229b77879ebc400f1bfdf8842&#34;&gt;Zend Framework 2&lt;/h6&gt;

&lt;p&gt;Questa è invece l&amp;rsquo;implementazione in Zend Framework 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

namespace Acme\HelloYouModule\Controller;

use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;
use Acme\Utils\GreetingSentence;

class MainController extends AbstractActionController
{
	$response = $this-&amp;gt;getResponse();

	public function greetAction()
	{
    	if ($this-&amp;gt;getRequest()-&amp;gt;getMethod() == &#39;GET&#39;) {
          $name = $this
              -&amp;gt;getRequest()
              -&amp;gt;getServer(&#39;HTTP_USER_AGENT&#39;);

          $requestTimestamp = $this
              -&amp;gt;getRequest()
              -&amp;gt;getServer(&#39;REQUEST_TIME&#39;);

          $requestTime = new \DateTime();
          $requestTime-&amp;gt;setTimestamp($requestTimeStamp);

          $msg = GreetingSentence::compose($requestTime, $name);			
          $response-&amp;gt;setHeader(&#39;X-GREETINGS&#39;, $msg);
        }
	}
    
    $response-&amp;gt;send();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Risulta evidente come siamo stati a costretti ad implementare due pezzi di codice quasi identici. Vediamo ora &lt;strong&gt;come uno standard come quello proposto dal PSR-7 possa aiutarci&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;middleware-ovvero-componenti-web-riutilizzabili:b7534f9229b77879ebc400f1bfdf8842&#34;&gt;Middleware: ovvero componenti web riutilizzabili&lt;/h4&gt;

&lt;p&gt;Potremmo voler implemenare la nostra soluzione come un &lt;strong&gt;middleware&lt;/strong&gt;, ovvero un componente che &lt;strong&gt;esiste durante il ciclo di vita di una comunicazione HTTP&lt;/strong&gt;, cioè dall&amp;rsquo;accettazione della richiesta fino all&amp;rsquo;evasione della risposta.&lt;/p&gt;

&lt;p&gt;Negli esempi precedenti abbiamo aggiunto il codice di gestione all&amp;rsquo;interno dei controller, e questa implementazione carica l&amp;rsquo;Action della responsabilità di esaminare la richiesta e comporre la risposta; questa operazione dovrà essere &lt;strong&gt;ripetuta in ogni controller&lt;/strong&gt; della nostra applicazione.&lt;/p&gt;

&lt;p&gt;Per fortuna i maggiori framework espongono astrazioni molto complete del ciclo di vita di una richiesta HTTP, che permettono di implementare il nostro middleware.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;in Symfony2 l&amp;rsquo;interfaccia &lt;a href=&#34;https://github.com/symfony/HttpKernel/blob/master/HttpKernelInterface.php&#34;&gt;HttpKernelInterface&lt;/a&gt; definisce un componenente capace di calcolare per una data una richiesta (Request) una determinata risposta (Response).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;in Zend Framework l&amp;rsquo;interfaccia che definisce un componente capace di associare una richiesta ad una risposta si chiama &lt;a href=&#34;https://github.com/zendframework/zf2/blob/master/library/Zend/Stdlib/DispatchableInterface.php&#34;&gt;DispatchableInterface&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tuttavia se volessimo utilizzare lo stesso codice in Zend Framework 2 e Symfony2, dovremmo wrappare il codice necessario attorno a entrambe le interfacce oppure importare i componenti dell&amp;rsquo;uno nell&amp;rsquo;altro.&lt;/p&gt;

&lt;p&gt;A questo punto possiamo cominciare a capire realmente il significato di questo nuovo processo di standardizzazione proposto dal &lt;a href=&#34;http://www.php-fig.org/&#34;&gt;&lt;strong&gt;FIG&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;scrivere-middleware-usando-le-interfacce-proposte-nello-standard-psr-7:b7534f9229b77879ebc400f1bfdf8842&#34;&gt;Scrivere middleware usando le interfacce proposte nello standard PSR-7&lt;/h4&gt;

&lt;p&gt;La proposta dello standard PSR-7 si riassume nella descrizione di una serie di &lt;a href=&#34;https://github.com/php-fig/http-message/tree/master/src&#34;&gt;interfacce&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Attualmente Matthew Weier O&amp;rsquo;Phinney, membro attivo del FIG e main contributor di Zend Framework 2 sta realizzando un&amp;rsquo;&lt;a href=&#34;https://github.com/phly/http/tree/master/src&#34;&gt;implementazione&lt;/a&gt; completa di queste interfacce.&lt;/p&gt;

&lt;p&gt;A questo punto possiamo scrivere il codice di un middleware, aderendo alle specifiche PSR-7, come una semplice classe capace di interpretare una richiesta e costruire una risposta secondo le nostre necessità:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use phly\http\ServerRequestFactory;
use phly\http\ServerRequest;
use phly\http\Response;

class AcmeLifeCycle
{
    /**
    * @param ServerRequest|null $request
    * @param Response|null $response
    *
    * @return Response
    */
    public function doSomething(ServerRequest $request = null, Response $response = null)
    {
        if (is_null($request)) {
            /** @var ServerRequest $request */
            $request = ServerRequestFactory::fromGlobals();
        }

        /** @var Response $response */
        if (is_null($request)) {
            /** @var Response $response */
            $response = new Response();
        }

        if ($request-&amp;gt;getMethod() === &#39;GET&#39;) {
            $serverParams = $request-&amp;gt;getServerParams();
            $name = $serverParams[&#39;HTTP_USER_AGENT&#39;];

            $requestTimeStamp = $serverParams[&#39;REQUEST_TIME&#39;];

            $requestTime = new \DateTimeImmutable();
            $requestTime
                -&amp;gt;setTimestamp($requestTimeStamp);

            $msg = GreetingSentence::compose($requestTime, $name);

            //Questo metodo è un costruttore di copia
            $response = $response-&amp;gt;withHeader(&#39;X-GREETINGS&#39;, $msg);
        }

        return $response;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Da notare che sia la classe &lt;code&gt;Response&lt;/code&gt; che &lt;code&gt;ServerRequest&lt;/code&gt; implementano lo stesso trait &lt;code&gt;Message&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La classe &lt;code&gt;Message&lt;/code&gt; è stata volutamente concepita affinchè sia &lt;strong&gt;immutabile&lt;/strong&gt; ed i vari metodi &lt;code&gt;-&amp;gt;withX()&lt;/code&gt; restituiranno solo copie modificate dell&amp;rsquo;oggetto inizialmente istanziato.&lt;/p&gt;

&lt;p&gt;Ovviamente questo middleware adesso come adesso è tutt&amp;rsquo;altro che utilizzabile all&amp;rsquo;interno di un framework, poichè ciascun vendor usa un modello diverso per richieste e risposte, ma è molto probabile che &lt;strong&gt;in un futuro&lt;/strong&gt; non troppo lontano le varie implementazioni &lt;strong&gt;convergeranno&lt;/strong&gt; su qualcosa di simile a quella appena vista e proposta da O&amp;rsquo;Phinney.&lt;/p&gt;

&lt;h4 id=&#34;conclusioni:b7534f9229b77879ebc400f1bfdf8842&#34;&gt;Conclusioni&lt;/h4&gt;

&lt;p&gt;Se pensiamo agli strumenti forniti di base dal linguaggio PHP (e non ai framework) nel contesto di una comunicazione HTTP, ci rendiamo conto che di fatto dovremmo ridurci a lavorare con le sole variabili globali d&amp;rsquo;ambiente contenenti tutti i valori necessari (&lt;code&gt;$_SERVER&lt;/code&gt;, &lt;code&gt;$_GET&lt;/code&gt;, &lt;code&gt;$_POST&lt;/code&gt;, &lt;code&gt;$_FILES&lt;/code&gt;, &amp;hellip;).&lt;/p&gt;

&lt;p&gt;Invece, grazie a PSR-7, potremmo &lt;strong&gt;standardizzare la rappresentazione degli oggetti coinvolti nel ciclo richiesta\riposta&lt;/strong&gt; (cioè i messaggi HTTP), e poter finalmente sviluppare componenti &lt;strong&gt;middleware indipendenti&lt;/strong&gt; dal framework utilizzato, il cui unico presupposto esistenziale è quello di &lt;strong&gt;gestire messaggi HTTP tramite il linguaggio PHP&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Sicuramente tenere &lt;a href=&#34;https://github.com/php-fig/fig-standards&#34;&gt;a portata di github&lt;/a&gt; gli sviluppi di questa proposta vorrà dire tenersi aggiornati sui &lt;strong&gt;futuri sviluppi&lt;/strong&gt; dei più blasonati framework e componenti PHP, tenendo conto, &lt;strong&gt;come già accaduto per le precedenti proposte&lt;/strong&gt; &lt;a href=&#34;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md&#34;&gt;PSR-0&lt;/a&gt; e &lt;a href=&#34;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md&#34;&gt;PSR-4&lt;/a&gt; (autoloading) e &lt;a href=&#34;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md&#34;&gt;PSR-3&lt;/a&gt; (logging), che, quasi sicuramente, i principali vendor le implementeranno nelle loro prossime versioni.&lt;/p&gt;

&lt;h4 id=&#34;altre-risorse-consultabili:b7534f9229b77879ebc400f1bfdf8842&#34;&gt;Altre risorse consultabili&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Blog di Matthew Weier O&amp;rsquo;Phinney: &lt;a href=&#34;https://mwop.net/blog/2015-01-08-on-http-middleware-and-psr-7.html&#34;&gt;https://mwop.net/blog/2015-01-08-on-http-middleware-and-psr-7.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Specifiche PSR-7: &lt;a href=&#34;https://github.com/php-fig/fig-standards/blob/master/proposed/http-message.md&#34;&gt;https://github.com/php-fig/fig-standards/blob/master/proposed/http-message.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interfacce proposte dalla PSR-7: &lt;a href=&#34;https://github.com/php-fig/http-message&#34;&gt;https://github.com/php-fig/http-message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implementazione di Matthew Weier O&amp;rsquo;Phinney: &lt;a href=&#34;https://github.com/phly/http/tree/master/src&#34;&gt;https://github.com/phly/http/tree/master/src&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael Dowling spiega la streaming interface: &lt;a href=&#34;http://mtdowling.com/blog/2014/07/03/a-case-for-higher-level-php-streams/&#34;&gt;http://mtdowling.com/blog/2014/07/03/a-case-for-higher-level-php-streams/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MySQL has gone away? Come back!</title>
      <link>http://engineering.facile.it/blog/ita/mysql-has-gone-away-come-back/</link>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/mysql-has-gone-away-come-back/</guid>
      <description>

&lt;p&gt;A ben più di uno sviluppatore sarà capitato di incappare nel comune errore &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/gone-away.html&#34;&gt;&lt;em&gt;MySQL server has gone away!&lt;/em&gt;&lt;/a&gt;, magari seguito da un eccezione lanciata da una delle &lt;a href=&#34;http://php.net/manual/en/book.pdo.php&#34;&gt;&lt;strong&gt;classi PDO&lt;/strong&gt;&lt;/a&gt;, come ad esempio &lt;em&gt;PDOStatement::execute(): Error reading result set&amp;rsquo;s header&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nella maggior parte dei casi, quando questo avviene in ambiente PHP, siamo connessi in maniera &lt;strong&gt;persistente&lt;/strong&gt; (per fortuna!) ed a causa di una esecuzione &lt;strong&gt;troppo lunga&lt;/strong&gt;, la connessione col server MySQL va in &lt;strong&gt;timeout&lt;/strong&gt;. Lunghi tasks in batch, chiamate a ws non particolarmente rapidi, carichi elevati del server, sono alcuni degli scenari possibili.&lt;/p&gt;

&lt;p&gt;Qualora l&amp;rsquo;errore sia noto e prevedibile (ad esempio avvenga alla stessa linea di codice ad ogni esecuzione) è possibile chiudere la connessione in maniera esplicita ed evitarlo, ma questa logica oltre che risultare &lt;strong&gt;scomoda&lt;/strong&gt; e &lt;strong&gt;ripetitiva&lt;/strong&gt; non è sempre applicabile e richiede una esplicita precauzione dello sviluppatore.&lt;/p&gt;

&lt;h3 id=&#34;ma-quanto-è-grave-il-problema:0b2586f94b018b2b7cc561b28a014b73&#34;&gt;Ma quanto è grave il problema?&lt;/h3&gt;

&lt;p&gt;Come illustrato, un errore di tipo &lt;em&gt;MySQL server has gone away&lt;/em&gt; &lt;strong&gt;non&lt;/strong&gt; ha alterato le informazioni presenti nel database, &lt;strong&gt;non&lt;/strong&gt; implica un errore logico o di integrità e &lt;strong&gt;non&lt;/strong&gt; ci impedisce di tentare nuovamente la query da cui è scaturito. Perciò si potrebbe dire che, da un punto di vista applicativo l&amp;rsquo;errore, se correttamente &lt;strong&gt;intercettato e gestito&lt;/strong&gt;, non sia per nulla grave.&lt;/p&gt;

&lt;h3 id=&#34;allora-potrei-ignorarlo:0b2586f94b018b2b7cc561b28a014b73&#34;&gt;Allora potrei ignorarlo?&lt;/h3&gt;

&lt;p&gt;Ignorare deliberatamente degli errori non può essere considerata una strategia vincente, perciò per prima cosa bisogna assicurarsi di aver fatto tutto quanto suggerito nella &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/gone-away.html&#34;&gt;documentazione&lt;/a&gt; per &lt;strong&gt;rimuovere le cause del problema&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;e-se-non-dovesse-bastare:0b2586f94b018b2b7cc561b28a014b73&#34;&gt;E se non dovesse bastare?&lt;/h3&gt;

&lt;p&gt;Ritentare la query dovrebbe essere sempre possibile nonchè piuttosto semplice, a patto di saper riconoscere con precisione le eccezioni del &lt;strong&gt;tipo corretto&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A tal proposito è importante ricordare come la classe &lt;a href=&#34;http://php.net/manual/en/class.pdoexception.php&#34;&gt;&lt;em&gt;PDOException&lt;/em&gt;&lt;/a&gt; non fornisca attraverso il metodo pubblico &lt;em&gt;getCode()&lt;/em&gt; il &lt;strong&gt;codice di errore del DB vendor&lt;/strong&gt; (es. &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/error-messages-client.html#error_cr_server_gone_error&#34;&gt;2006&lt;/a&gt; per MySQL), ma lo inserisca piuttosto nel &lt;em&gt;message&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** @var $e PDOException */
echo $e-&amp;gt;getMessage(); // &#39;SQLSTATE[HY000]: General error: 2006 MySQL server has gone away&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;come-funziona:0b2586f94b018b2b7cc561b28a014b73&#34;&gt;Come funziona?&lt;/h3&gt;

&lt;p&gt;Chiariamoci le idee con del codice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sql = &#39;SELECT count(*) FROM `TABLE`&#39;;
$retry = true;

while ($retry) {

    try {

        $nb = $pdo-&amp;gt;query($sql)-&amp;gt;fetchColumn();

    } catch (PDOException $e) {
		
        $retry = false;
        
        if($this-&amp;gt;isMySQLHasGoneAwayException($e)) {
        
        	$this-&amp;gt;reconectDB();
            $retry = true;
        }
    }        
}
# CODICE DEMO, NON FUNZIONANTE!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nell&amp;rsquo;esempio  sopra riportato, una volta accertata la natura dell&amp;rsquo;eccezione si procede &lt;strong&gt;riconnettendosi&lt;/strong&gt; al database (una &lt;strong&gt;nuova&lt;/strong&gt; connessione!) e &lt;strong&gt;ripetendo&lt;/strong&gt; la query, magari con un limite di tentativi per evitare ricursioni infinite!&lt;/p&gt;

&lt;p&gt;Trattandosi di una &lt;strong&gt;nuova connessione&lt;/strong&gt;, non è possibile utilizzare questa procedura nel caso l&amp;rsquo;errore avvenga durante una &lt;a href=&#34;http://en.wikipedia.org/wiki/Database_transaction&#34;&gt;&lt;strong&gt;transazione&lt;/strong&gt;&lt;/a&gt; MySQL. Tutte le query inviate all&amp;rsquo;interno della connessione sarebbero ovviamente &lt;strong&gt;perdute&lt;/strong&gt; e non sarebbe possibile recuperarle!&lt;/p&gt;

&lt;h3 id=&#34;ma-devo-farlo-ogni-volta-a-mano:0b2586f94b018b2b7cc561b28a014b73&#34;&gt;Ma devo farlo ogni volta a mano?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NO!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://www.facile.it/&#34;&gt;&lt;strong&gt;Facile.it&lt;/strong&gt;&lt;/a&gt;, utilizzando largamente l&amp;rsquo;ORM &lt;em&gt;Doctrine&lt;/em&gt;, abbiamo pensato allo sviluppo di una piccola estensione, &lt;a href=&#34;https://github.com/facile-it/doctrine-mysql-come-back&#34;&gt;&lt;strong&gt;DoctrineMySQLComeBack&lt;/strong&gt;&lt;/a&gt; che riteniamo utile distribuire in maniera &lt;strong&gt;libera&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Compatibile dalla versione 2.3 fino alla stabile 2.5, si occupa di &lt;strong&gt;ritentare automaticamente&lt;/strong&gt; le SELECT in ambiente MySQL. Cosi non ci si dovrà più preoccupare del successo di ogni singola query per portare a termine le esecuzioni.&lt;/p&gt;

&lt;p&gt;Le &lt;strong&gt;istruzioni&lt;/strong&gt; per l&amp;rsquo;installazione e l&amp;rsquo;uso sono disponibili su &lt;a href=&#34;https://github.com/facile-it/doctrine-mysql-come-back&#34;&gt;&lt;strong&gt;&lt;em&gt;GitHub&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, e chiunque è libero di &lt;strong&gt;contribuire&lt;/strong&gt; per migliorarne le funzionalità :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/facile-it/doctrine-mysql-come-back&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/doctrine-mysql-come-back/v/stable.svg&#34; alt=&#34;Latest Stable Version&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/facile-it/doctrine-mysql-come-back&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/doctrine-mysql-come-back/downloads.svg&#34; alt=&#34;Total Downloads&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/facile-it/doctrine-mysql-come-back&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/doctrine-mysql-come-back/license.svg&#34; alt=&#34;License&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>L&#39;operatore ternario è associativo a sinistra!</title>
      <link>http://engineering.facile.it/blog/ita/operatore-ternario-e-associativo-a-sinistra/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/operatore-ternario-e-associativo-a-sinistra/</guid>
      <description>&lt;p&gt;Gli &lt;a href=&#34;http://it.wikipedia.org/wiki/Operatore_ternario&#34;&gt;&lt;em&gt;operatori ternari&lt;/em&gt;&lt;/a&gt; sono diffusi in molti linguaggi di programmazione e permettono di esprimire con una &lt;strong&gt;sintassi breve&lt;/strong&gt; logiche condizionali. Per utilizzarli propriamente in PHP è però necessario conoscerne il comportamento.&lt;/p&gt;

&lt;p&gt;Vediamo un esempio&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;var_dump(true ? &#39;a&#39; : &#39;b&#39; ? &#39;c&#39; : &#39;d&#39;); // OUTPUT: string(1) &amp;quot;c&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se state pensando che il risultato di questa espressione sia ovvio, vediamo cosa succede ad esempio in javascript&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log(true ? &#39;a&#39; : &#39;b&#39; ? &#39;c&#39; : &#39;d&#39;); // OUTPUT: a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bene, mentre in PHP il risultato è dato da:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;true è vero, ritorna a&lt;/li&gt;
&lt;li&gt;a castato a bool è vero, &lt;strong&gt;stampa c&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In javascript invece il ragionamento è diverso:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;true è vero, &lt;strong&gt;stampa a&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perchè questa differenza? Semplicemente perchè in PHP, &lt;strong&gt;diversamente dalla maggioranza dei linguaggi&lt;/strong&gt;, l&amp;rsquo;operatore ternario è associativo a sinistra anzichè a destra.&lt;/p&gt;

&lt;p&gt;Tenendone conto potremo evitare comportamenti inconsistenti nel nostro codice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZVALs refcount AKA come vengono memorizzate le nostre variabili</title>
      <link>http://engineering.facile.it/blog/ita/zvals-refcount/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/zvals-refcount/</guid>
      <description>&lt;p&gt;Assegnare valori alle variabili è sicuramente l&amp;rsquo;operazione più comune all&amp;rsquo;interno di uno script PHP. Ma come vengono conservate queste informazioni dall&amp;rsquo;interprete? Vediamolo assieme!&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;unità fondamentale di storage dei dati in PHP è la Zend Value (zval). Si tratta di una struct definita alla &lt;a href=&#34;https://github.com/php/php-src/blob/ae15e636e2b213bf748fa0b94ca95ac96d6eae3a/Zend/zend.h#L334-L340&#34;&gt;linea 334 di &lt;code&gt;zend.h&lt;/code&gt;&lt;/a&gt;, la riporto qui di seguito per commentarne le proprietà.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct _zval_struct {
	zvalue_value value;	 /* Il valore assegnato alla variabile */
	zend_uint refcount__gc; /* Il conto delle referenze legato alla variabile */
	zend_uchar type;	/* L&#39;identificativo del tipo di dato */
	zend_uchar is_ref__gc; /* Flag che indica se la variabile è o meno una referenza */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il tipo di dato &lt;code&gt;zvalue_value&lt;/code&gt; non è altro che una union contenente tutti i tipi di dato gestiti da php, per questo &lt;strong&gt;ogni variabile&lt;/strong&gt; che instanziamo in PHP, sia essa un intero o una stringa occuperà comunque lo &lt;strong&gt;stesso spazio in memoria&lt;/strong&gt; richiesto per il tipo di dato più grande.&lt;/p&gt;

&lt;p&gt;Per mostrare come php gestisce l&amp;rsquo;allocazione delle variabili vediamo un semplice esempio:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$a = 1; // value=1, refcount=1
$b = $a; // value=1, refcount=2
$a++;    // value=2, refcount = 1
$c = $b; // value=1, refcount=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cosa succede qui?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$a&lt;/code&gt; viene allocata con valore &lt;code&gt;1&lt;/code&gt;, e quindi per la variabile &lt;code&gt;$a&lt;/code&gt; il refcount viene
impostato a 1.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Il valore di &lt;code&gt;$a&lt;/code&gt; viene assegnato anche a &lt;code&gt;$b&lt;/code&gt;, quindi PHP per evitare di sprecare memoria assegna la stessa zval anche a &lt;code&gt;$b&lt;/code&gt;, aumentando di 1 il refcount.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$a&lt;/code&gt; viene incrementato di &lt;code&gt;1&lt;/code&gt;,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Essendo il valore della zval di &lt;code&gt;$a&lt;/code&gt; è cambiato, php crea una nuova zval per &lt;code&gt;$b&lt;/code&gt; e &lt;code&gt;$c&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ora la zval di &lt;code&gt;$a&lt;/code&gt; appartiene solo ad &lt;code&gt;$a&lt;/code&gt; con valore &lt;code&gt;2&lt;/code&gt; e refcount &lt;code&gt;1&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$b&lt;/code&gt; ha una nuova zval con valore &lt;code&gt;1&lt;/code&gt; e refcount &lt;code&gt;1&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Essendo la zval di &lt;code&gt;$c&lt;/code&gt; è la stessa di &lt;code&gt;$b&lt;/code&gt; la zval di &lt;code&gt;$c&lt;/code&gt; ha valore &lt;code&gt;1&lt;/code&gt; e refcount &lt;code&gt;2&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>var_dump() aggiunge proprietà pubbliche a DateTime</title>
      <link>http://engineering.facile.it/blog/ita/var_dump-aggiunge-proprieta-pubbliche-a-datetime/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/ita/var_dump-aggiunge-proprieta-pubbliche-a-datetime/</guid>
      <description>&lt;p&gt;PHP, fin dalla versione 5.2.0, introduce gli oggetti &lt;code&gt;\DateTime&lt;/code&gt; per operare con date ed intervalli, fornendo finalmente un alternativa alle vecchie funzioni procedurali.&lt;/p&gt;

&lt;p&gt;Recentemente mi sono reso conto di uno strano comportamento che si verifica quando vengono chiamate &lt;code&gt;var_dump&lt;/code&gt;, &lt;code&gt;print_r&lt;/code&gt;, &lt;code&gt;var_export&lt;/code&gt; o &lt;code&gt;debug_zval_dump&lt;/code&gt; su un istanza di &lt;code&gt;\DateTime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Considerando il seguente codice e il suo output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$date = new \DateTime();
var_dump(isset($date-&amp;gt;date)); // OUTPUT: bool(false)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ci rendiamo conto del fatto che non esiste alcuna proprietà &lt;code&gt;$date&lt;/code&gt; all&amp;rsquo;interno dell&amp;rsquo;istanza di &lt;code&gt;\DateTime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Se più avanti nel codice scrivessimo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var_dump($date);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;otterremmo come output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class DateTime#1 (3) {
  public $date =&amp;gt;
  string(26) &amp;quot;2015-03-01 23:18:42.000000&amp;quot;
  public $timezone_type =&amp;gt;
  int(3)
  public $timezone =&amp;gt;
  string(11) &amp;quot;Europe/Rome&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;il che ci mostra chiaramente una proprietà pubblica &lt;code&gt;$date&lt;/code&gt;, contenente il timestamp attuale.&lt;/p&gt;

&lt;p&gt;Controllando nuovamente l&amp;rsquo;esistenza della proprietà pubblica &lt;code&gt;$date&lt;/code&gt; scopriremmo infatti che ora è presente ed ha il valore settato:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var_dump(isset($date-&amp;gt;date)); // OUTPUT: bool(true)
echo $date-&amp;gt;date; // OUTPUT: 2015-03-01 23:21:05.000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Questo comportamento è dovuto alla funzione interna &lt;code&gt;static HashTable *date_object_get_properties(zval *object)&lt;/code&gt; che alla &lt;a href=&#34;https://github.com/php/php-src/blob/968a9f48071bcc099b4e978fc99fd09b6f69d172/ext/date/php_date.c#L2176-L2177&#34;&gt;linea 2176&lt;/a&gt; di &lt;code&gt;php_date.c&lt;/code&gt; imposta la proprietà &lt;code&gt;$date&lt;/code&gt;. Dal momento che &lt;code&gt;var_dump&lt;/code&gt; e le altre funzioni citate sopra chiamano proprio quella funzione durante l&amp;rsquo;esecuzione, ci imbattiamo in questo comportamento.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	/* first we add the date and time in ISO format */
	ZVAL_STR(&amp;amp;zv, date_format(&amp;quot;Y-m-d H:i:s.u&amp;quot;, sizeof(&amp;quot;Y-m-d H:i:s.u&amp;quot;)-1, dateobj-&amp;gt;time, 1));
	zend_hash_str_update(props, &amp;quot;date&amp;quot;, sizeof(&amp;quot;date&amp;quot;)-1, &amp;amp;zv);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;È importante perciò sapere e tenere a mente che alcune proprietà visibili con var_dump(), se non documentate, non dovrebbero essere utilizzate in quanto potrebbero risultare in comportamenti non attesi!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>