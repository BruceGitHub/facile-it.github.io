<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Continuous integration on Facile.it Engineering</title>
    <link>engineering.facile.it/categories/continuous-integration/</link>
    <description>Recent content in Continuous integration on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="engineering.facile.it/categories/continuous-integration/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GIT flow e versionamento semantico</title>
      <link>/engineering.facile.it/blog/ita/git-flow-semantic-versioning/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/engineering.facile.it/blog/ita/git-flow-semantic-versioning/</guid>
      <description>

&lt;p&gt;GIT flow è un &lt;strong&gt;flusso di sviluppo&lt;/strong&gt;, ideato da &lt;a href=&#34;http://nvie.com/about/&#34;&gt;Vincent Driessen&lt;/a&gt;, che descrive un modello di diramazione, (&lt;a href=&#34;http://git-scm.com/docs/git-branch&#34;&gt;branching&lt;/a&gt;), ben preciso costruito intorno al concetto di release software.&lt;/p&gt;

&lt;p&gt;Questo flusso è concepito per sfruttare al meglio le potenzialità del software di versionamento &lt;a href=&#34;https://git-scm.com/&#34;&gt;GIT&lt;/a&gt;, ma affinità concettuali possono essere utili anche per la gestione del lavoro con altri software dediti alla medesima funzionalità.&lt;/p&gt;

&lt;p&gt;Il flusso descritto in GIT flow è finalizzato a mantenere una storia implementativa pulita, dove un rilascio comunica a tutti gli utilizzatori la presenza di una &lt;strong&gt;nuova versione&lt;/strong&gt; del prodotto, definita da un determinato &lt;em&gt;changelog&lt;/em&gt; composto da nuove caratteristiche e correzioni.&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;vantaggi&lt;/strong&gt; derivanti da questo approccio al versionamento (&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_versioning&#34;&gt;software versioning&lt;/a&gt;), sono anzitutto quello di &lt;strong&gt;tenere una storia pulita&lt;/strong&gt; e leggibile, il che faciliterà la vita a chi decide di usare il nostro software, ma anche quello di poter &lt;strong&gt;concentrare e diversificare gli sforzi&lt;/strong&gt; del team di sviluppo sulle particolari fasi: implementazione, correzione, pulizia, rilascio, concedendo a ciascuna di esse determinati spazi all&amp;rsquo;interno del repository e determinate tempistiche all&amp;rsquo;interno del flusso.&lt;/p&gt;

&lt;p&gt;In questo articolo descriveremo git flow e uniremo l&amp;rsquo;adozione di questo flusso a quello di una strategia di versionamento semantico (semantic versioning) così come proposto e descritta da &lt;a href=&#34;http://tom.preston-werner.com/&#34;&gt;Tom Preston-Werner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Come vedremo in seguito il punto di incontro fra git e il versionamento semantico ha la sua chiave di volta nella creazione di tag appropriate sulle commit dei nostri rami o &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;tagging&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inoltre è bene tenere a mente che diversi software di gestione delle dipendenze basano il proprio flusso operativo sul presupposto una strategia di versionamento semantico simile a quella che andremo a descrivere, come ad esempio &lt;a href=&#34;https://getcomposer.org&#34;&gt;composer&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;branch-storici:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Branch storici&lt;/h3&gt;

&lt;p&gt;Anzitutto questo modello di workflow prevede la presenza di ben due master branch, &lt;strong&gt;&amp;ldquo;dev&amp;rdquo;&lt;/strong&gt; (o &amp;ldquo;develop&amp;rdquo;) utilizzato per lo sviluppo, ed il buon vecchio &lt;strong&gt;&amp;ldquo;master&amp;rdquo;&lt;/strong&gt; per i rilasci ufficiali.&lt;/p&gt;

&lt;p&gt;Questi due branch assolvono il compito di &amp;ldquo;historical branch&amp;rdquo;, cioè essi devono detenere la storia pulita del progetto, a prescindere dagli sviluppi di nuove feature e hotfix, che altrimenti confluirebbero senza filtri sul ramo principale, rendendo meno comprensibile la storia del progetto e quindi più difficoltose operazioni di reversione (&lt;a href=&#34;https://en.wikipedia.org/wiki/Reversion_%28software_development%29&#34;&gt;revert&lt;/a&gt;) a stati precedenti.&lt;/p&gt;

&lt;h3 id=&#34;branch-di-funzionalità:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Branch di funzionalità&lt;/h3&gt;

&lt;p&gt;Un branch di funzionalità, ovvero un &lt;strong&gt;&amp;ldquo;feature branch&amp;rdquo;&lt;/strong&gt;, aggiunge una nuova funzionalità (&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_feature&#34;&gt;feature&lt;/a&gt;) al software.
Nel modello proposto dal GIT flow, questi branch &lt;strong&gt;devono sempre essere derivati dal branch &amp;ldquo;develop&amp;rdquo;&lt;/strong&gt; e rappresentano una &lt;strong&gt;feature&lt;/strong&gt;, ovvero una nuova funzionalità che si intende aggiungere al software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;engineering.facile.it/images/git-flow-semantic-versioning/feature.png&#34; alt=&#34;Git Flow - Feature branch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Questo branch conterrà tutti i pezzi di storia, le commit, relative alla funzionalità implementata.&lt;/p&gt;

&lt;p&gt;Durante lo sviluppo di questi rami non è strettamente necessario mantenere una storia delle versioni pulite o usare particolari nomenclature per le varie commit (pratica che comunque potrebbe avere i suoi vantaggi come vedremo nell&amp;rsquo;ultimo paragrafo), in quanto prima di riportare il branch su develop, &amp;ldquo;appiattiremo&amp;rdquo; la storia del branch attraverso un&amp;rsquo;operazione di &lt;strong&gt;&lt;a href=&#34;http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html&#34;&gt;squash&lt;/a&gt; delle commit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In questo modo la storia del branch di sviluppo risulterà pulita, con &lt;strong&gt;una sola commit&lt;/strong&gt;, che conterrà solo l&amp;rsquo;informazione relativa all&amp;rsquo;aggiunta della nuova funzionalità.&lt;/p&gt;

&lt;p&gt;Dopo averlo riportato su develop, è possibile rimuovere il feature branch dal repository:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$&amp;gt; git branch -D feat-nomedelfeaturebranch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In base alle dimensioni del team è possibile mantenere &lt;strong&gt;più feature branch contemporaneamente&lt;/strong&gt;, a patto di riportarli correttamente e in tempi auspicabilmente brevi sul branch di sviluppo.
Di norma un singolo sviluppatore si concentra sul rilascio di una feature per volta.&lt;/p&gt;

&lt;h3 id=&#34;branch-di-rilascio:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Branch di rilascio&lt;/h3&gt;

&lt;p&gt;Quando il ramo di sviluppo (develop) contiene abbastanza feature per un &lt;strong&gt;rilascio&lt;/strong&gt; (o in base a qualsiasi altro tipo di scadenza prefissata), da questi viene derivato un nuovo branch detto di rilascio, o &lt;strong&gt;&lt;a href=&#34;http://producingoss.com/en/release-branches.html&#34;&gt;release branch&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;È buona norma distinguere questi rami con un nome significativo e consistente, ad esempio possono tutti iniziare con il prefisso &amp;ldquo;release-&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;A questo punto dello sviluppo non possono essere più aggiunte feature e le uniche aggiunte possibili possono essere quelle di bug fixing e documentazione.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;engineering.facile.it/images/git-flow-semantic-versioning/release-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Il team si concentrerà sull&amp;rsquo;obiettivo di riportare su master la prossima release
quindi non verranno creati altri branch di funzionalità in quanto in questa fase l&amp;rsquo;obiettivo principale è quello di rilasciare.&lt;/p&gt;

&lt;p&gt;Quando il ramo di rilascio sarà maturo e testato, a questo punto verrà eseguita  l’operazione di merge sul branch “master”, contrassegnandola con un’opportuna &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;tag&lt;/a&gt;, che ne indichi il versionamento.&lt;/p&gt;

&lt;p&gt;Come per il feature branch, la storia completa dalla nascita alla maturazione di questo ramo dovrebbe essere trasparente per i branch storici, quindi anche qui andremo ad operare un&amp;rsquo;operazione di squash.&lt;/p&gt;

&lt;p&gt;Anche durante il ciclo di vita di questi rami, è buona pratica usare nomenclature particolari per i tag delle commit, ma non indispensabile: vedremo questo concetto più avanti nell&amp;rsquo;ultimo paragrafo.&lt;/p&gt;

&lt;p&gt;Allo stesso modo il branch di rilascio verrà eseguita indietro anche sul branch “develop”, tralasciando l&amp;rsquo;aggiunta dei tag di versione.&lt;/p&gt;

&lt;p&gt;Una volta mergiato con i branch storici, il branch di release non ha più motivo di esistere e sarebbe opportuno cancellarlo.&lt;/p&gt;

&lt;h3 id=&#34;branch-di-manutenzione:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Branch di manutenzione&lt;/h3&gt;

&lt;p&gt;Una migliore organizzazione dei rilasci non scongiura sicuramente l’occorrenza di problemi da risolvere con estrema urgenza.
In questo caso, e solo in questo caso, è possibile derivare (avviare un fork) direttamente da master un branch di manutenzione, contenente la fix necessaria a risolvere il problema insorto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;engineering.facile.it/images/git-flow-semantic-versioning/hotfix-2.png&#34; alt=&#34;Mantainance branch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;È buona norma inoltre distinguere questi branch con un nome significativo e consistente, ad esempio possono tutti iniziare con il prefisso “hotfix-”.&lt;/p&gt;

&lt;p&gt;Tale branch sarà ovviamente riportato su “master” il più presto possibile, ed in seguito anche su “develop” per mantenere la situazione dei due branch storici allineata.&lt;/p&gt;

&lt;p&gt;Come nel caso dei branch di rilascio, qundo un branch di manutenzione viene riportato su master, il tag di master verrà contrassegnato appropriatamente.&lt;/p&gt;

&lt;h3 id=&#34;versionamento-semantico:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Versionamento semantico&lt;/h3&gt;

&lt;p&gt;Il versionamento semantico (semantic versioning) è un semplice schema di denominazione dei rilasci che ruota attorno a tre numeri: major, minor e patch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;engineering.facile.it/images/git-flow-semantic-versioning/alltogheter.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Il formato prevede la concatenazione di questi tre numeri attraverso la notazione punto.
Ad es: 1.1.2, indica major version: 1, minor version: 1 e patch: 2.&lt;/p&gt;

&lt;p&gt;Riportato sullo schema prima descritto nel GIT flow, i tre numeri di versionamento  saranno le tag dei branch.&lt;/p&gt;

&lt;p&gt;In pratica:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se abbiamo rilasciato una hotfix, che sostanzialmente non va ad intaccare le modalità di utilizzo del codice, dovremmo andare a incrementare il numero di &lt;strong&gt;patch&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Se abbiamo implementato una modifica minore, spesso l&amp;rsquo;aggiunta di una feature che non pregiudica la retrocompatibilità del codice, andremo a incrementare il numero di &lt;strong&gt;minor&lt;/strong&gt; versioning.&lt;/li&gt;
&lt;li&gt;Rilasci più consistenti che cambiano in maniera apprezzabile il funzionamento del codice andranno a incrementare il numero di &lt;strong&gt;major&lt;/strong&gt; versioning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Può essere inoltre indicato un &lt;strong&gt;suffisso di build&lt;/strong&gt;, ad esempio una sequenza alfabetica in linguaggio naturale, seguita da un numero incrementale.&lt;/p&gt;

&lt;p&gt;Ad es:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.1.2-snapshot20150602, indica una snapshot di un feature branch di 1.1.2, ovvero una &amp;ldquo;fotografia&amp;rdquo; specifica dello sviluppo di una feature&lt;/li&gt;
&lt;li&gt;1.1.2-rc1, indica una release candidate, ovvero una versione del software &amp;ldquo;papabile&amp;rdquo; per il rilascio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un suffisso di build come quello indicato nel primo esempio potrebbe essere relativo ad un feature branch, derivato dal tag 1.1.2 del branch di sviluppo e in parole povere indica che quella messa a disposizione è semplicemente un&amp;rsquo;anteprima del codice, in cui è ammissibile una certa instabilità.&lt;/p&gt;

&lt;p&gt;Questo tipo di tag dovrebbero essere provati e installati &lt;strong&gt;solo su ambienti di test&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quello nel secondo esempio invece potrebbe essere il suffisso di un tag su un branch di release che indica una versione del codice, matura al punto da poter essere inclusa in una prossima release, detta &lt;a href=&#34;https://it.wikipedia.org/wiki/Release_candidate&#34;&gt;release candidate&lt;/a&gt;, a patto di minime correzioni.
Tali modifiche modifiche e correzioni dovrebbero susseguirsi andando a incrementare il suffisso numerico dopo rc delle prossime tag sul ramo di rilascio.&lt;/p&gt;

&lt;p&gt;Questo tipo di tag indicano le versioni del software che generalmente verranno installate sugli ambienti di &lt;a href=&#34;https://en.wikipedia.org/wiki/Deployment_environment#Staging&#34;&gt;staging&lt;/a&gt;, per poterle testare prima di essere riportate su master e andare quindi in &lt;a href=&#34;https://en.wikipedia.org/wiki/Deployment_environment#Production&#34;&gt;produzione&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusioni:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Conclusioni&lt;/h3&gt;

&lt;p&gt;Alla fine di questa analisi non possiamo affermare che git flow e il versionamento semantico possano essere gli strumenti definitivi per ogni team o progetto, e sicuramente la loro adozione porta vantaggi e svantaggi.
Valutare un trade-off relativo all&amp;rsquo;impiego di git flow sta al buonsenso personale, ci limiteremo perciò ad elencare una serie di pro e contro che potrebbero aiutare nella decisione.&lt;/p&gt;

&lt;h4 id=&#34;a-cosa-non-serve-git-flow:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;A cosa non serve git flow?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Git flow non pone rimedio ad errori tecnici nella gestione del repository e nemmeno prescinde da una conoscenza approfondita di git.&lt;/li&gt;
&lt;li&gt;Git flow de facto &lt;strong&gt;non semplifica il flusso di lavoro&lt;/strong&gt; con git, imponendo una strategia di diramazione complessa.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;a-cosa-serve-git-flow:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;A cosa serve git flow?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Git flow aiuta i vari elementi del team ad avere a colpo d&amp;rsquo;occhio &lt;strong&gt;una visione precisa dello stato degli sviluppi applicativi&lt;/strong&gt; a fronte di una convenzione essenziale e immediata di tagging.&lt;/li&gt;
&lt;li&gt;Il versionamento semantico aiuta gli utilizzatori del software a capire esattamente lo stato di sviluppo del software e cosa aspettarsi, riportandosi a diverse versioni di rilascio.&lt;/li&gt;
&lt;li&gt;Git flow coaudiva la &lt;a href=&#34;https://en.wikipedia.org/wiki/Velocity_(software_development&#34;&gt;velocity&lt;/a&gt;) del team di sviluppo permettendo l&amp;rsquo;attuazione di un piano di &lt;a href=&#34;http://guide.agilealliance.org/guide/cd.html&#34;&gt;continuous deploy&lt;/a&gt; e quindi di poter rilasciare nuove feature e fix in sicurezza.&lt;/li&gt;
&lt;li&gt;Git flow è ottimo per la &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;continuous integration&lt;/a&gt;, permettendo de facto di poter differenziare i rami dedicati ai vari ambienti: sviluppo, staging e produzione&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;risorse-consultabili-online:1dd853596dfead5a0fffb4551b5f2efb&#34;&gt;Risorse consultabili online&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;http://nvie.com/posts/a-successful-git-branching-model/&lt;/a&gt; Vincent Driessen espone GIT Flow&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://semver.org/&#34;&gt;http://semver.org/&lt;/a&gt; Semantic Versioning 2.0.0 proposto da Tom Preston-Werner&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow&#34;&gt;https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow&lt;/a&gt; - Tutorial messo a disposizione da Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://datasift.github.io/gitflow/Versioning.html&#34;&gt;https://datasift.github.io/gitflow/Versioning.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Continuous Integration con Docker e Drone</title>
      <link>/engineering.facile.it/blog/ita/continuos-integration-docker-drone/</link>
      <pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/engineering.facile.it/blog/ita/continuos-integration-docker-drone/</guid>
      <description>

&lt;p&gt;La &lt;strong&gt;continuous integration&lt;/strong&gt; è una pratica che consiste nel &lt;strong&gt;frequente allineamento&lt;/strong&gt;, su di una base comune definita &lt;em&gt;mainline&lt;/em&gt;, delle copie di lavoro degli sviluppatori che collaborano al codice di un progetto.&lt;/p&gt;

&lt;p&gt;Introdotta inizialmente da Grady Booch nel 1991, nella pubblicazione &lt;a href=&#34;http://books.google.com/books?id=w5VQAAAAMAAJ&amp;amp;q=continuous+integration+inauthor:grady+inauthor:booch&amp;amp;dq=continuous+integration+inauthor:grady+inauthor:booch&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ei=0_TxU6TqIMOZyASJ3ICYCQ&amp;amp;ved=0CEQQ6AEwAg&#34;&gt;Object Oriented Design: With Applications&lt;/a&gt;, la pratica è stata estesa e sviluppata all&amp;rsquo;interno dell&amp;rsquo;&lt;strong&gt;extreme programming&lt;/strong&gt;, fino a sostenere la necessità di &lt;strong&gt;allineare&lt;/strong&gt; le copie di lavoro &lt;strong&gt;diverse volte al giorno&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Il vantaggio principale nell&amp;rsquo;adottare la pratica è quello di &lt;strong&gt;evitare l&amp;rsquo;integration hell&lt;/strong&gt; (o merge hell) &lt;strong&gt;minimizzando il rischio&lt;/strong&gt; legato a copie di lavoro divergenti di difficile integrazione.&lt;/p&gt;

&lt;p&gt;Il &lt;a href=&#34;http://engineering.facile.it/tag/software-testing/&#34;&gt;software testing&lt;/a&gt;, pur non essendo indispensabile ai fini della &lt;strong&gt;continuous integration&lt;/strong&gt;, ne è perfettamente complementare, dando allo sviluppatore garanzia di &lt;strong&gt;integrità del funzionamento del software&lt;/strong&gt; prima e dopo l&amp;rsquo;integrazione sulla &lt;em&gt;mainline&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Risale al 2000 un importante &lt;a href=&#34;http://martinfowler.com/articles/continuousIntegration.html&#34;&gt;articolo&lt;/a&gt; di &lt;a href=&#34;http://martinfowler.com/&#34;&gt;Martin Fowler&lt;/a&gt; che indica i &lt;strong&gt;principi fondamentali&lt;/strong&gt; della CI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mantieni un repository del codice sorgente&lt;/li&gt;
&lt;li&gt;Automatizza la build&lt;/li&gt;
&lt;li&gt;Rendi la build auto-testante&lt;/li&gt;
&lt;li&gt;Esegui commit alla baseline tutti i giorni&lt;/li&gt;
&lt;li&gt;Ogni commit fa partire una build automatica&lt;/li&gt;
&lt;li&gt;Ripara immediatamente le build fallite&lt;/li&gt;
&lt;li&gt;Fai in modo che la build sia veloce&lt;/li&gt;
&lt;li&gt;Esegui i test in un clone dell&amp;rsquo;ambiente di produzione&lt;/li&gt;
&lt;li&gt;Fai in modo che sia facile recuperare l&amp;rsquo;ultima build&lt;/li&gt;
&lt;li&gt;Tutti possono vedere lo stato delle build&lt;/li&gt;
&lt;li&gt;Automatizza il deploy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;soluzioni-per-la-ci-ed-il-testing-automatico:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Soluzioni per la CI ed il testing automatico&lt;/h2&gt;

&lt;p&gt;Negli ultimi anni si sono diffuse molte &lt;strong&gt;soluzioni software&lt;/strong&gt; che permettono di automatizzare il processo di &lt;strong&gt;build e testing&lt;/strong&gt; a partire da un semplice &lt;em&gt;push&lt;/em&gt; sulla mainline di sviluppo. Ognuno di queste ha le sue peculiari caratteristiche che la rendono diverso dagli altri.&lt;/p&gt;

&lt;p&gt;In Facile.it abbiamo stilato una lista di &lt;strong&gt;requisiti&lt;/strong&gt; per trovare il sistema di CI più adatto al nostro &lt;strong&gt;caso d&amp;rsquo;uso&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Possibilità di effettuare build in &lt;strong&gt;ambienti molto diversi&lt;/strong&gt; (per sistema operativo, versioni software..) &lt;strong&gt;identici a quelli di produzione&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Possibilità di effettuare &lt;strong&gt;contemporaneamente&lt;/strong&gt; build multiple, anche appartenenti allo &lt;strong&gt;stesso progetto&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Sistema di CI compatibile con diversi &lt;strong&gt;servizi Git&lt;/strong&gt; (GitHub, GitLab, BitBucket..)&lt;/li&gt;
&lt;li&gt;Integrazione con &lt;strong&gt;chat&lt;/strong&gt; e sistemi di &lt;strong&gt;notifica&lt;/strong&gt; (Slack, IRC..)&lt;/li&gt;
&lt;li&gt;Invio &lt;strong&gt;mail di alert&lt;/strong&gt; per build fallite&lt;/li&gt;
&lt;li&gt;Sistema di CI &lt;strong&gt;estendibile via API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dashboard&lt;/strong&gt; che mostri lo stato delle build, per tenere gli &lt;strong&gt;sviluppatori informati&lt;/strong&gt; riguardo lo stato delle proprie build e della mainline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Utilizzando in maniera intensiva &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; per lo sviluppo locale con ambienti &lt;strong&gt;simili alla produzione&lt;/strong&gt;, una caratteristica interessante da avere consiste proprio nella possibilità di effettuare &lt;strong&gt;build all&amp;rsquo;interno di container&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La nostra scelta è ricaduta su &lt;a href=&#34;https://github.com/drone/drone&#34;&gt;Drone&lt;/a&gt;, una piattaforma di continuous integration piuttosto giovane, ma sufficientemente stabile per un utilizzo in produzione.&lt;/p&gt;

&lt;h2 id=&#34;drone-build-attraverso-container-docker:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Drone: build attraverso container Docker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/drone/drone&#34;&gt;Drone&lt;/a&gt;, rilasciato con licenza Apache 2.0, è una piattaforma di CI che automatizza le build &lt;strong&gt;all&amp;rsquo;interno di container Docker&lt;/strong&gt;: la soluzione ideale in un ambiente dove &lt;strong&gt;numerosi gruppi di lavoro&lt;/strong&gt; utilizzano &lt;strong&gt;ambienti molto diversi&lt;/strong&gt; (per sistema operativo, versioni di interpreti di linguaggio, sistemi di database o caching) ma vogliono centralizzare i processi di Continuous Integration.&lt;/p&gt;

&lt;p&gt;Come altre piattaforme di CI, Drone supporta diversi sistemi Git (GitHub, GitLab, BitBucket, Gogs et al.), diversi sistemi di &lt;a href=&#34;https://github.com/drone/drone/blob/v0.2.1/README.md#deployments&#34;&gt;deploy&lt;/a&gt; (Aws S3, SSH, Heroku, Swift et al.) e diversi sistemi di &lt;a href=&#34;https://github.com/drone/drone/blob/v0.2.1/README.md#notifications&#34;&gt;notifica&lt;/a&gt; (Webhook, Hipchat, Email et al.).&lt;/p&gt;

&lt;p&gt;I container di build possono essere avviati in locale o &lt;strong&gt;remoto&lt;/strong&gt;, dal momento che la &lt;a href=&#34;https://github.com/drone/drone#setup&#34;&gt;configurazione&lt;/a&gt; permette di indicare i &lt;strong&gt;socket Docker&lt;/strong&gt; (UNIX, ma anche TCP) da utilizzare.&lt;/p&gt;

&lt;p&gt;Drone supporta un &lt;a href=&#34;https://github.com/drone/drone-plugin-go&#34;&gt;&lt;strong&gt;sistema di plugin&lt;/strong&gt;&lt;/a&gt; estremamente &lt;strong&gt;flessibile&lt;/strong&gt;: un plugin riceve via riga di comando o input dal terminale un JSON contenente le &lt;strong&gt;informazioni sulla build&lt;/strong&gt; corrente e pubblica il risultato in output.&lt;/p&gt;

&lt;p&gt;I plugin vengono distribuiti a loro volta come &lt;strong&gt;container Docker&lt;/strong&gt;, così possono condividere attraverso un volume-mount la &lt;strong&gt;stessa copia del repository&lt;/strong&gt; su cui avviene la build.
L&amp;rsquo;&lt;em&gt;ENTRYPOINT&lt;/em&gt; per il plugin nel Dockerfile &lt;strong&gt;consiste nell&amp;rsquo;eseguibile&lt;/strong&gt; vero e proprio:
in questo modo è possibile scrivere &lt;strong&gt;plugin in qualsiasi linguaggio&lt;/strong&gt; per fare qualsiasi tipo di operazione!&lt;/p&gt;

&lt;p&gt;Per ultimo, ma comunque non di poco conto, il &lt;strong&gt;monitor stato build&lt;/strong&gt; viene rilasciato in un progetto separato: &lt;a href=&#34;https://github.com/drone/drone-wall&#34;&gt;Drone Wall&lt;/a&gt; è semplicemente fantastico!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;engineering.facile.it/images/continuos-integration-docker-drone/drone-wall.jpg&#34; alt=&#34;Drone wall screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Quella che segue, è una guida per &lt;strong&gt;l&amp;rsquo;installazione di Drone&lt;/strong&gt; (a sua volta in un container!), molto simile a quella  utilizzata in Facile.it.&lt;/p&gt;

&lt;h2 id=&#34;prerequisiti:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Prerequisiti&lt;/h2&gt;

&lt;p&gt;Per testare questa guida abbiamo utilizzato Docker 1.6.2 e &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;docker-compose 1.2.0&lt;/a&gt;.
Per chi non conoscesse Compose, basti sapere che è un &lt;strong&gt;tool per definire convenientemente una configurazione complessa&lt;/strong&gt; (di solito multi-container) in un singolo file &lt;em&gt;yaml&lt;/em&gt;, potendo poi lanciare tutti i container in essa definiti con un singolo conveniente comando anzichè con molti tediosi &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Come prima cosa è necessario clonare il gist, embeddato qui sotto per riferimento, lanciando il seguente comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://gist.github.com/de5d5861fa4d86f9598c.git
&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://gist.github.com/fntlnz/de5d5861fa4d86f9598c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una volta entrati nella cartella del gist, troviamo due file, &lt;em&gt;docker-compose.yml&lt;/em&gt; e &lt;em&gt;nginx.conf&lt;/em&gt;,  descritti in dettaglio di seguito:&lt;/p&gt;

&lt;h2 id=&#34;docker-compose-yml:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;docker-compose.yml&lt;/h2&gt;

&lt;p&gt;Questo file contiene la configurazione dei container che ci permetterà di mettere insieme il nostro ambiente.&lt;/p&gt;

&lt;p&gt;Al suo interno abbiamo &lt;strong&gt;tre nodi&lt;/strong&gt; principali: &lt;em&gt;drone&lt;/em&gt;, &lt;em&gt;nginx&lt;/em&gt; e &lt;em&gt;wall&lt;/em&gt;; analizziamoli singolarmente:&lt;/p&gt;

&lt;h3 id=&#34;drone:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;DRONE&lt;/h3&gt;

&lt;p&gt;Come abbiamo detto in precedenza Drone supporta i vari servizi di hosting repository git, sia open source che PaaS. Per questa guida abbiamo scelto l&amp;rsquo;integrazione più semplice e immediata, quella con &lt;strong&gt;GitHub&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nel nodo di configurazione di drone ci sono diverse variabili d&amp;rsquo;ambiente: due di queste ci serviranno a configurare l&amp;rsquo;&lt;strong&gt;autenticazione tramite OAuth2&lt;/strong&gt; di GitHub (allo stato attuale, Drone non ha un sistema interno di gestione degli utenti).&lt;/p&gt;

&lt;p&gt;Le variabili d&amp;rsquo;ambiente per GitHub sono &lt;code&gt;DRONE_GITHUB_CLIENT&lt;/code&gt; e &lt;code&gt;DRONE_GITHUB_SECRET&lt;/code&gt;; le chiavi necessarie vengono rilasciate da GitHub a seguito della &lt;a href=&#34;https://github.com/settings/applications/new&#34;&gt;registrazione di una nuova applicazione&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La variabile d&amp;rsquo;ambiente &lt;code&gt;DRONE_REGISTRATION_OPEN&lt;/code&gt; va settata a &lt;code&gt;false&lt;/code&gt; quando si deciderà di non permettere la &lt;strong&gt;registrazione di nuovi utenti&lt;/strong&gt;, ma è attualmente settata a &lt;code&gt;true&lt;/code&gt; per permettere la registrazione del primo utente, che sarà anche il master dell&amp;rsquo;installazione.&lt;/p&gt;

&lt;p&gt;Un&amp;rsquo;altra variabile d&amp;rsquo;ambiente molto importante è &lt;code&gt;DRONE_WORKER_NODES&lt;/code&gt;: la sua importanza è data dal fatto che contiene il &lt;strong&gt;path del socket di Docker&lt;/strong&gt; che permette la comunicazione con i container. Ogni ripetizione separata da virgola di &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt; mette a disposizione delle build un nuovo worker per eseguire più build in parallelo.&lt;/p&gt;

&lt;p&gt;Infine, l&amp;rsquo;ultima ma non meno importante variabile d&amp;rsquo;ambiente da impostare è &lt;code&gt;DRONE_SESSION_SECRET&lt;/code&gt;, la chiave che servirà a codificare le sessioni. Una chiave generata &lt;a href=&#34;https://www.random.org/strings/?num=20&amp;amp;len=20&amp;amp;digits=on&amp;amp;upperalpha=on&amp;amp;loweralpha=on&amp;amp;unique=on&amp;amp;format=html&amp;amp;rnd=new&#34;&gt;su Random.org&lt;/a&gt; è perfetta per questo scopo.&lt;/p&gt;

&lt;p&gt;In questo nodo ci sono inoltre &lt;strong&gt;due volumi condivisi&lt;/strong&gt; che sono rispettivamente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/data/drone:/var/lib/drone&lt;/code&gt;: il path dove verrà scritto il database SQLite di Drone; eventualmente si può sostituire con un path più adeguato&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/code&gt;: il path del socket di docker per permettere a Drone di lanciare nuovi container, poiché si trova anche lui all&amp;rsquo;interno di un container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un&amp;rsquo;altra riga di questo nodo che è degna di nota è &lt;code&gt;privileged: true&lt;/code&gt;: è infatti &lt;strong&gt;necessario che il container contenente Drone giri in modalità privilegiata&lt;/strong&gt;, per disattivare quei controlli di sicurezza che altrimenti non permetterebbero al container di operare alla creazione, distruzione e modifica di altri container.&lt;/p&gt;

&lt;h3 id=&#34;wall:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;WALL&lt;/h3&gt;

&lt;p&gt;In questo nodo è necessario impostare la variabile d&amp;rsquo;ambiente &lt;code&gt;API_TOKEN&lt;/code&gt;, necessaria ad autorizzare la dashboard di visualizzazione delle build: il token si trova nel proprio profilo utente di Drone una volta avviato. Questa configurazione può essere quindi completata solo dopo aver avviato Drone per la prima volta.&lt;/p&gt;

&lt;h3 id=&#34;nginx:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;NGINX&lt;/h3&gt;

&lt;p&gt;Questo nodo fa il binding della porta 80 dell&amp;rsquo;host verso la porta 80 del container e condivide due volumi, rispettivamente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nignx.conf&lt;/code&gt;: condivide la configurazione del file &lt;code&gt;nginx.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/nginx:/var/log/nginx&lt;/code&gt;: condivide la cartella contenente i log di NGINX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;nginx.conf&lt;/code&gt; va configurato per usare NGINX come proxy di Drone e Drone Wall, utilizzando &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass&#34;&gt;proxy_pass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Al suo interno contiene già due &lt;em&gt;server blocks&lt;/em&gt;, i quali a loro volta contengono le direttive &lt;code&gt;server_name&lt;/code&gt;, rispettivamente &lt;code&gt;drone.local&lt;/code&gt; per Drone e &lt;code&gt;wall.drone.local&lt;/code&gt; per il Drone Wall.&lt;/p&gt;

&lt;h2 id=&#34;up-and-running:3d304be90cd6edeb527d6149ec7b0239&#34;&gt;Up And Running&lt;/h2&gt;

&lt;p&gt;Ora che abbiamo completato la configurazione, possiamo semplicemente avviare i nostri container con questo comando, che va eseguito nella cartella contentente il clone del gist di sopra:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ora possiamo finalmente utilizzare drone puntando il nostro browser all&amp;rsquo;indirizzo &lt;a href=&#34;http://drone.local&#34;&gt;http://drone.local&lt;/a&gt; (o all&amp;rsquo;indirizzo configurato nel file &lt;code&gt;nginx.conf&lt;/code&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>