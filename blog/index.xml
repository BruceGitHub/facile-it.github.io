<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Facile.it Engineering</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Droidcon It 2016</title>
      <link>/blog/eng/droidconit_recap/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/droidconit_recap/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/images/droidconit-recap/logo_droidcon_it.png&#34; alt=&#34;Droidcon It&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The third edition of &lt;a href=&#34;http://it.droidcon.com/2016/&#34;&gt;Droidcon IT&lt;/a&gt; was, as expected, a great conference, full of interesting talks and people coming from all over the world. We saw a lot of GDEs (&lt;a href=&#34;https://developers.google.com/experts/all/technology/android&#34;&gt;Google Developer Expert&lt;/a&gt;) and also some Developer Advocates from Google, although it was not organized directly by the company. Back in March the Android team surprisingly released the brand new &lt;strong&gt;N Developer Preview&lt;/strong&gt; earlier than expected, so this year we were already able to talk about the new features in Android N and analyze them. Furthermore, there was talk of &lt;strong&gt;Kotlin&lt;/strong&gt;, &lt;strong&gt;RxJava&lt;/strong&gt; and a lot of other useful and interesting topics.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;m going to recap the event and make some considerations about the most interesting (and funny) talks.&lt;/p&gt;

&lt;h1 id=&#34;day-1:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Day 1&lt;/h1&gt;

&lt;h2 id=&#34;keynote-wojtek-kalicinski-https-twitter-com-wkalic:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Keynote - &lt;em&gt;&lt;a href=&#34;https://twitter.com/wkalic&#34;&gt;Wojtek Kalicinski&lt;/a&gt;&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;The day 1 keynote was all about the N Developer Preview and was given by Wojtek Kalicinski, a developer advocate directly from Google.
Wojtek went through all the new improvements of the platform, both from user&amp;rsquo;s and developer&amp;rsquo;s point of view. Here’s a short summary of the most relevant ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multi-window support&lt;/strong&gt;: probably the most requested user feature. I’ve always thought that its implementation would have been relatively straightforward, given the already responsive UI of Android, and in fact the code changes that are needed to support this feature are minimal. Just make sure you don’t lock screen orientation using &lt;code&gt;android:screenOrientation&lt;/code&gt; in your manifest.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Better notifications&lt;/strong&gt;: in addition to a visual change of the notification panel, apps will now be able to let the user interact with bundled notifications individually or to reply from the notification itself directly. Moreover, if the app already supports Android Wear notifications, most of this will come for free, since the APIs are the same.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doze improvements&lt;/strong&gt;: the battery saving mode called Doze, now works — in a less aggressive mode — when the phone is in the user pocket or hands, and not only when the phone is stationary. Wojtek said that most of the apps should continue to work without any change — or eventually &lt;a href=&#34;http://developer.android.com/intl/ko/training/monitoring-device-state/doze-standby.html#assessing_your_app&#34;&gt;minimal&lt;/a&gt; —, but he strongly encouraged to test apps against this new feature.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JAVA 8 features!&lt;/strong&gt;: finally Google will allow developers to use a limited set of features from the latest version of the language (already two years old) including &lt;em&gt;lambdas&lt;/em&gt; (🎉) and &lt;em&gt;default and static interface methods&lt;/em&gt; (TODO: add DP2 apis). All of this is possibile thanks to the Jack&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cff18b79afe3f01c3e654e6856c73831:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cff18b79afe3f01c3e654e6856c73831:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; toolchain which is able to compile Java 8 syntax to Java 6 compatible bytecode: in this way, old phones’ support is guaranteed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other changes include improvements to &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html#background_optimizations&#34;&gt;Project Svelte&lt;/a&gt;, a new &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html#data_saver&#34;&gt;Data Saver&lt;/a&gt; feature, the addition of the &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html#tile_api&#34;&gt;Quick Settings Tile API&lt;/a&gt; and &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html&#34;&gt;many more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most interesting and encouraging aspect coming out from the keynote and the N Preview release itself, is the fact that Google is, finally, trying to fix the Android updates issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/droidconit-recap/n-preview-updates.png&#34; alt=&#34;N Preview Updates&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Not only the release of the new OS preview six months before its public release — instead of three — is really useful for third party developers to update apps to support new APIs, but hopefully it will also help phone manufactures to keep their custom Android implementations more aligned with the stock version release cycle. This will result in a better user experience and, more importantly to us, a better developer experience, making it closer to the iOS world where developers are not required to support five years old OS versions.&lt;/p&gt;

&lt;h2 id=&#34;perfmatters-for-android-hasan-hosgel-https-twitter-com-alosdev:cff18b79afe3f01c3e654e6856c73831&#34;&gt;#PERFMATTERS for Android - &lt;em&gt;&lt;a href=&#34;https://twitter.com/alosdev&#34;&gt;Hasan Hosgel&lt;/a&gt;&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/alosdev/perfmatters-for-android-droidcon-turin-2016&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The talk was all about performance in Android. The speaker analyzed why #&lt;strong&gt;PERFMATTERS&lt;/strong&gt; on Android: the typical mobile user is generally &lt;em&gt;impatient&lt;/em&gt; and &lt;em&gt;intolerant&lt;/em&gt; and even just a couple of extra seconds during the start-up could make the difference in the user&amp;rsquo;s choice to use or not your app. Hasan went through a lot of interesting tips and tricks to improve performance, such as avoiding multi-pass nested layout — a topic discussed in more detail by Huyen Tue Dao during her &lt;a href=&#34;#lean-layouts&#34;&gt;talk&lt;/a&gt; —, avoiding memory leaks or having a cache on disk for data.&lt;/p&gt;

&lt;p&gt;Performance is crucial to &lt;strong&gt;engage the user&lt;/strong&gt; and I think the speaker did a great job in summarizing useful tips to improve it. Moreover most of them doesn’t alter the readability or the maintainability of the code, as is often the case for performance driven code changes.&lt;/p&gt;

&lt;h2 id=&#34;let-it-flow-unidirectional-data-flow-architecture-in-android-benjamin-augustin-https-twitter-com-dorvaryn:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Let it flow! Unidirectional data flow architecture in Android - &lt;a href=&#34;https://twitter.com/dorvaryn&#34;&gt;&lt;em&gt;Benjamin Augustin&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/dorvaryn/let-it-flow&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The use of patterns to structure the presentation layer (UI) in Android is still infrequent. During the last couple of years we have seen a lot of discussions about &lt;strong&gt;MVC&lt;/strong&gt;/&lt;strong&gt;MVP&lt;/strong&gt;/&lt;strong&gt;MVVM&lt;/strong&gt; patterns within the Android developers community, and some implementations of them.
During the talk the speaker presented a new approach that takes some concepts from the web development world like &lt;a href=&#34;https://facebook.github.io/flux/&#34;&gt;&lt;em&gt;Flux&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;http://redux.js.org&#34;&gt;&lt;em&gt;Redux&lt;/em&gt;&lt;/a&gt;. The concept in a nutshell is that the UI, in addition to being as dumb as possible, should also be &lt;strong&gt;stateless&lt;/strong&gt;. In other words, the UI listens to state changes pushed by the business logic and updates itself accordingly.
Benjamin chose to focus more on the practical aspects and so he made the concept clear by directly building an &lt;a href=&#34;https://github.com/Dorvaryn/unidirectionalDataFlow&#34;&gt;app&lt;/a&gt; using Kotlin and RxJava.&lt;/p&gt;

&lt;p&gt;I personally likey approach that Benjamin showed us, since it has a lot of advantages. It makes the UI state completely &lt;strong&gt;predictable&lt;/strong&gt; and &lt;strong&gt;reproducible&lt;/strong&gt;: it allows us to represent an app state without the need to go through all the steps needed to reach it, thus it can be very useful in reproducing a bug or testing a particular situation. The problem is that, as you can see from the demo app, it adds a lot of boilerplate code and it&amp;rsquo;s also much more verbose and difficult to implement without tools like RxJava or Kotlin, that might be problematic to some.&lt;/p&gt;

&lt;h2 id=&#34;play-everywhere-providing-a-consistent-experience-across-very-different-devices-alessandro-bizzarri-http-it-droidcon-com-2016-speakers-alessandro-bizzarri-dima-kunin-http-it-droidcon-com-2016-speakers-dima-kunin:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Play everywhere: providing a consistent experience across very different devices - &lt;a href=&#34;http://it.droidcon.com/2016/speakers/alessandro-bizzarri/&#34;&gt;&lt;em&gt;Alessandro Bizzarri&lt;/em&gt;&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://it.droidcon.com/2016/speakers/dima-kunin/&#34;&gt;&lt;em&gt;Dima Kunin&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The two speakers showed a high-level tour of how at &lt;strong&gt;Spotify&lt;/strong&gt; they  are able to provide a consistent experience across different devices — defined as the combination of its physical form and its OS.
They created their own &lt;strong&gt;design language&lt;/strong&gt; to support the majority of platforms used to define almost everything, from color palette and buttons style to animations and sounds.
They explained also how they use a &lt;strong&gt;C++ library&lt;/strong&gt; common to all platforms to reuse code; in particular on Android they use it through the NDK, a toolset to include C or C++ code in your app and call it from Java code.&lt;/p&gt;

&lt;p&gt;It was a light talk but still it was interesting to see how a big company like Spotify finds solutions to scale and maintain a &lt;strong&gt;consistent and engaging UX&lt;/strong&gt; across all of its user-base.&lt;/p&gt;

&lt;h2 id=&#34;loving-lean-layouts-huyen-tue-dao-https-twitter-com-queencodemonkey-a-name-lean-layouts-a:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Loving lean layouts - &lt;a href=&#34;https://twitter.com/queencodemonkey&#34;&gt;&lt;em&gt;Huyen Tue Dao&lt;/em&gt;&lt;/a&gt; &lt;a name=&#34;lean-layouts&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/queencodemonkey/droidcon-italy-2016-loving-lean-layouts&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The speaker gave a really great talk about one of the best ways to keep an app smooth and responsive: &lt;strong&gt;optimize layouts&lt;/strong&gt; to be as flat as possible. The Android UI layer will call &lt;code&gt;measure()&lt;/code&gt; and    &lt;code&gt;layout()&lt;/code&gt; methods — two times in the case of &lt;code&gt;RelativeLayout&lt;/code&gt; — through all the hierarchy of views to be able to draw the layout; so, for example, having a useless root level  or useless views will result in more measure/layout passes, thus poor performance. Huyen explained how sometimes the solution to this problem may be to choose the right view or layout, but it could be useful to know that there is always the possibility to implement a custom &lt;code&gt;ViewGroup&lt;/code&gt; to mitigate the number of measure/layout passes or even a totally custom &lt;code&gt;View&lt;/code&gt; that overrides &lt;code&gt;onDraw()&lt;/code&gt; to draw everything by hand.&lt;/p&gt;

&lt;p&gt;The talk was very easy to follow and really useful: most of the advices covered are often ignored because singularly they have less impact, but, if taken all together and especially as good habits, they could really make the difference in maintain the &lt;strong&gt;UI smooth and lag-free&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;day-2:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Day 2&lt;/h1&gt;

&lt;h2 id=&#34;android-reactive-programming-with-rxjava-ivan-morgillo-https-twitter-com-hamen:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Android reactive programming with RxJava - &lt;a href=&#34;https://twitter.com/hamen&#34;&gt;&lt;em&gt;Ivan Morgillo&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;During last couple of years RxJava has been echoing all over the Android developers community and given its huge popularity I was surprised to see that Droidcon IT offered only one talk about it.&lt;/p&gt;

&lt;p&gt;Fortunately Ivan Morgillo is a topic expert — he also wrote a &lt;a href=&#34;https://www.packtpub.com/application-development/rxjava-essentials&#34;&gt;book&lt;/a&gt; about RxJava and Android — and during the talk he went through some of the &lt;strong&gt;basics of reactive programming&lt;/strong&gt; (&lt;code&gt;Observables&lt;/code&gt;, &lt;code&gt;Observer&lt;/code&gt;, &lt;code&gt;Subscription&lt;/code&gt;…) and a lot of useful &lt;strong&gt;operators&lt;/strong&gt;, which are one of the strengths of RxJava and Reactive extensions (Rx*) in general.&lt;/p&gt;

&lt;p&gt;To be honest I was hoping for a more theoretical talk with an analysis of the advantages and disadvantages of embracing the reactive pattern in our Android projects. It was instead a lot practical and it covered a great number of common use cases where reactive programming could really help to make code mode readable and maintainable.&lt;/p&gt;

&lt;h2 id=&#34;you-can-do-better-with-kotlin-svetlana-isakova-https-github-com-svtk:cff18b79afe3f01c3e654e6856c73831&#34;&gt;You can do better with Kotlin - &lt;a href=&#34;https://github.com/svtk&#34;&gt;&lt;em&gt;Svetlana Isakova&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/svtk/you-can-do-better-with-kotlin&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kotlin has recently reached &lt;a href=&#34;https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/&#34;&gt;&lt;strong&gt;1.0 version&lt;/strong&gt;&lt;/a&gt; and it is gaining a lot of attention within the Java community and especially the Android one. A lot of developers — me included — are in fact hoping that Google will make it the default programming language for its mobile OS.&lt;/p&gt;

&lt;p&gt;Kotlin is a &lt;strong&gt;modern&lt;/strong&gt;, &lt;strong&gt;pragmatic&lt;/strong&gt; and &lt;strong&gt;Android-friendly&lt;/strong&gt; programming language, with robust supporting tools since it is developed from the people behind IntelliJ (thus, Android Studio). It could be mixed with Java code — thus making the switch painless — since there is no Kotlin SDK but just JDK plus extensions, and it includes a lot of modern concept such as &lt;em&gt;data classes&lt;/em&gt;, &lt;em&gt;null-safety&lt;/em&gt;, &lt;em&gt;extension functions&lt;/em&gt; and &lt;em&gt;lambdas&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The speaker showed also ANKO, a DSL written in Kotlin, that uses &lt;em&gt;lambdas with receivers&lt;/em&gt;, to create layouts and views and allows to write code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;verticalLayout {
    val name = editText()
    button(&amp;quot;Say Hello&amp;quot;) {
        onClick { toast(&amp;quot;Hello, ${name.text}!&amp;quot;) }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This talk was one of the most interesting to me, as it persuaded me to try and deepen my knowledge of Kotlin. Svetlana was very good at showing the main features of the JetBrains language and at explaining how they convert in Java code, an aspect that I found very useful to mutate my mindset with new concepts and  syntaxes.&lt;/p&gt;

&lt;h2 id=&#34;fun-things-you-cando-in-kotlin-maciej-górski-https-github-com-mg6maciej:cff18b79afe3f01c3e654e6856c73831&#34;&gt;fun things (you: CanDo &lt;in Kotlin&gt; ) = … - &lt;a href=&#34;https://github.com/mg6maciej&#34;&gt;&lt;em&gt;Maciej Górski&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mg6maciej/fun-things-you-CanDo-in-Kotlin&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second Droidcon talk about Kotlin was a very fun one, with the speaker acting a funny scene where a nephew tries to explain to his granpa why he should use &lt;strong&gt;Kotlin instead of Java&lt;/strong&gt; with a live coding session.&lt;/p&gt;

&lt;p&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&#39;embed-container&#39;&gt;&lt;iframe src=&#39;https://www.youtube.com/embed/RVu_0TIiH8Q&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The second part of the talk was still in live programming (without slides) and showed some Kotlin feature in practice. It covered some advanced topics such as functional programming, operator overloading, infix functions, laziness and more.&lt;/p&gt;

&lt;p&gt;It was funny and informative to watch a &lt;strong&gt;live coding talk&lt;/strong&gt; and for sure it made me more curious and confident about Kotlin.&lt;/p&gt;

&lt;h1 id=&#34;conclusions:cff18b79afe3f01c3e654e6856c73831&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;The Droidcon IT is already, after three editions, the &lt;strong&gt;point of reference&lt;/strong&gt; for the Android community in Italy and this year too it lived up to the expectations. We saw a lot of well-known speakers and developers such as the Googlers Nick Butcher and  Wojtek Kaliciński. It was a conference rich of interesting talks in addition to those summarized in this post, ranging between al lot of various topics such as TDD, UX, tools and many more. The only thing that surprised me was the lack of talks about Android Wear: perhaps Google is slowing down to push this platform among developers?&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cff18b79afe3f01c3e654e6856c73831:1&#34;&gt;&lt;a href=&#34;https://source.android.com/source/jack.html&#34;&gt;Jack&lt;/a&gt; is the new Google compiler which has the goal to speed up the compilation process, compiling Java .class files directly to .dex files (Android bytecode)
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cff18b79afe3f01c3e654e6856c73831:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Json Web Token</title>
      <link>/blog/eng/json-web-tokens/</link>
      <pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/json-web-tokens/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/images/json-web-tokens/logo.svg&#34; alt=&#34;JWT&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I started my study about JWT, I was searching for a smart method to authenticate a request, without querying the database each time to check the applicant reliability.
I needed a token or something similar with the ability to validate itself and flexible enough to customize the validation strategy.
Imagine for example a web application where a user can login and obtain a &amp;ldquo;pass&amp;rdquo; with his name and an expiration time, and this pass will let him ask for resources until the pass expires, and only if the issuer is trusted.
Thanks to JWT&amp;rsquo;s self verification capabilities, I could discard every request where the token is invalid (a fake token not signed by my application) or expired.
Beyond this specific use case, JWT can be also useful to securely transmit data to other applications.&lt;/p&gt;

&lt;p&gt;Now let me introduce the standard: JSON Web Token (JWT) is an open standard &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;RFC 7519&lt;/a&gt; that defines a compact, self-contained and secure way for transmitting information between two parties.&lt;/p&gt;

&lt;p&gt;Using javascript object notation to represent the data means two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;saving lots of bytes when the token goes over the network, &lt;strong&gt;because of it&amp;rsquo;s size&lt;/strong&gt; it can be sent over an URL or inside an HTTP Header&lt;/li&gt;
&lt;li&gt;it can be &lt;strong&gt;easily parsed by a browser&lt;/strong&gt; and consumed by a client application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is more clear when comparing JSON to other standards like &lt;a href=&#34;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&#34;&gt;SAML&lt;/a&gt; that uses a very verbose XML structure.&lt;/p&gt;

&lt;p&gt;A JWT token can be trusted because it is digitally signed using a secret (usually with &lt;a href=&#34;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&#34;&gt;HMAC&lt;/a&gt; algorithm) or a keypair with &lt;a href=&#34;https://en.wikipedia.org/wiki/RSA&#34;&gt;RSA&lt;/a&gt;.
Its payload contains all the required data to verify itself and, for example, transport the user data to avoid querying the database more than once.&lt;/p&gt;

&lt;h2 id=&#34;how-the-token-presents-itself:be256830241f7dc27936f7751ed2a96e&#34;&gt;How the token presents itself&lt;/h2&gt;

&lt;p&gt;A token is represented as three base64 encoded strings joined by two points:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;headers:be256830241f7dc27936f7751ed2a96e&#34;&gt;Headers&lt;/h3&gt;

&lt;p&gt;The first part of the string contains the headers, &lt;code&gt;&amp;quot;alg&amp;quot;&lt;/code&gt; is the algorithm used to secure the token and &lt;code&gt;&amp;quot;typ&amp;quot;&lt;/code&gt; is the type; in this case as we can see that I used an HMAC SHA256 to sign the JWT token:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;alg&amp;quot;: &amp;quot;HS256&amp;quot;,
  &amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;payload:be256830241f7dc27936f7751ed2a96e&#34;&gt;Payload&lt;/h3&gt;

&lt;p&gt;The second part is the payload: it&amp;rsquo;s the data sent with the token. It contains metadata and information like expiration, audience or subject, and whatever you need.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;sub&amp;quot;: &amp;quot;1234567890&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;John Doe&amp;quot;,
  &amp;quot;admin&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All data is organized in &lt;strong&gt;claims&lt;/strong&gt;, statements about an entity (typically, the user). There are three types of claims: reserved, public, and private claims.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reserved claims&lt;/strong&gt;: a set of predefined claims, conceived to provide a set of useful information. Some of them are: &lt;code&gt;iss&lt;/code&gt; (issuer), &lt;code&gt;exp&lt;/code&gt; (expiration time), &lt;code&gt;sub&lt;/code&gt; (subject), &lt;code&gt;aud&lt;/code&gt; (audience), among others.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Public claims&lt;/strong&gt;: defined at will but, in order to avoid collisions, they should be defined in the &lt;a href=&#34;http://www.iana.org/assignments/jwt/jwt.xhtml&#34;&gt;IANA JSON Web Token Registry&lt;/a&gt; or be described as a URI that contains a collision resistant namespace.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Private claims&lt;/strong&gt;: custom claims created to share information between parties that agree with using them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sign:be256830241f7dc27936f7751ed2a96e&#34;&gt;Sign&lt;/h3&gt;

&lt;p&gt;The third part of the string is the sign, obtained from hashing headers and payload with a secret using the algorithm described in headers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;HMACSHA256(
  base64UrlEncode(header) + &amp;quot;.&amp;quot; +
  base64UrlEncode(payload),
  secret
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As said before the more interesting feature of JWT is in it&amp;rsquo;s flexibility. It can be created with the claims you need, carry your data and validated on other claims (standard or not).
As an example, if on authentication I want to be sure that the token is issued by my application and that it is not older than 1 hour I can generate a token with a payload like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;iss&amp;quot;: &amp;quot;1234567890&amp;quot;, // my application code
  &amp;quot;exp&amp;quot;: &amp;quot;1459868400&amp;quot;, // 2016-04-04 15:00:00 Expiration time
  &amp;quot;uid&amp;quot;: 159, // the user id
  &amp;quot;name&amp;quot;: &amp;quot;Alessandro Galli&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once my application receives a request with this token, an authenticator component will check the two claims (&lt;code&gt;iss&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;) to be sure of the assertions made before, and then validate the sign. Furthermore, with the additional claims it can login the user without querying the database and complete the request.&lt;/p&gt;

&lt;p&gt;This approach results in a stateless authentication removing all problems related to session storage, CORS+cookies requests and CSRF protection, among others.&lt;/p&gt;

&lt;p&gt;As a solid standard, JWT has been adopted by a large number of users and it has libraries for almost every programming language: PHP, Java, Go, Python, Javascript, Ruby, Elixir, Scala, .NET. You can find a full list of available and trusted libraries on &lt;a href=&#34;https://jwt.io/#libraries-io&#34;&gt;JWT.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next weeks, I will write a post and release my personal authentication example, using PHP with the Symfony framework.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Decoupling view controllers with Signals</title>
      <link>/blog/eng/decoupling-view-controllers-with.signals/</link>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/decoupling-view-controllers-with.signals/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://engineering.facile.it/code-reuse-a-primer/&#34;&gt;Last time&lt;/a&gt; we looked at the &lt;strong&gt;Signal&lt;/strong&gt; class, that is, a simple, reusable way of encapsulating the &lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;observer pattern&lt;/a&gt;. There are many use cases for a signal, and I&amp;rsquo;m going to show one possible application, spawned from a real-world problem. View controllers&amp;rsquo; composition and decoupling is &lt;strong&gt;hard&lt;/strong&gt;: we often need an input from a view controller, that has to send its input back to its creator, while handling the back navigation somehow. We often find ourselves in a situation in which several different responsibilities are all expressed in a single view controller, with the effect of creating a gigantic class, full of entangled imperative statements, hard-to-understand sequencing and general complexity. We&amp;rsquo;ll use the &lt;code&gt;Signal&lt;/code&gt; class to assign the various responsibilities to different classes, and write cleaner, more declarative code. The core of this architectural pattern lies in inverting the way in which objects communicate, view controller or other: instead of asking objects to do things, we&amp;rsquo;re going to &lt;strong&gt;observe&lt;/strong&gt; what objects are doing, and &lt;strong&gt;react&lt;/strong&gt; accordingly. &lt;em&gt;Observe&lt;/em&gt; and &lt;em&gt;React&lt;/em&gt; are the cornerstones of the programming paradigm known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming&#34;&gt;functional reactive programming(FRP)&lt;/a&gt;; the present article is not going to talk about FRP as a whole, nor to present shared FRP techniques; the point is to discuss an architectural pattern for decoupling view controllers from responsibilities not strictly related to user interaction, by leveraging some basic FRP tools.&lt;/p&gt;

&lt;p&gt;The example project for this article is available in &lt;a href=&#34;https://github.com/broomburgo/SignalViewControllers/&#34;&gt;GitHub&lt;/a&gt;: I&amp;rsquo;m going to paste some code examples, but it&amp;rsquo;s recommended to check and test the entire project while reading the article. What follows is the full implementation of &lt;code&gt;Signal&lt;/code&gt;, and its public interface for sending new values, called &lt;code&gt;Emitter&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;import Foundation

public enum Persistence {
  case Stop
  case Continue
}

public final class Signal&amp;lt;Subtype&amp;gt; {
  typealias Observation = Subtype -&amp;gt; Persistence

  private var observations: [Observation] = []

  public init() {}

  public func onReception (observeFunction: Subtype -&amp;gt; Persistence) -&amp;gt; Signal {
    observations.append(observeFunction)
    return self
  }

  public func map&amp;lt;OtherSubtype&amp;gt;(transform: Subtype -&amp;gt; OtherSubtype) -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt; {
    let mappedSignal = Signal&amp;lt;OtherSubtype&amp;gt;()
    onReception {
      mappedSignal.send(transform($0))
      return .Continue
    }
    return mappedSignal
  }

  public func flatMap&amp;lt;OtherSubtype&amp;gt;(transform: Subtype -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt;) -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt; {
    let mappedSignal = Signal&amp;lt;OtherSubtype&amp;gt;()
    onReception {
      transform($0).onReception {
        mappedSignal.send($0)
        return .Continue
      }
      return .Continue
    }
    return mappedSignal
  }

  public func filter(predicate: Subtype -&amp;gt; Bool) -&amp;gt; Signal {
    let filteredSignal = Signal&amp;lt;Subtype&amp;gt;()
    onReception {
      if predicate($0) {
        filteredSignal.send($0)
      }
      return .Continue
    }
    return filteredSignal
  }

  public func unionWith (otherSignal: Signal&amp;lt;Subtype&amp;gt;) -&amp;gt; Signal {
    let unifiedSignal = Signal&amp;lt;Subtype&amp;gt;()
    let observeFunction = { (value: Subtype) -&amp;gt; Persistence in
      unifiedSignal.send(value)
      return .Continue
    }
    onReception(observeFunction)
    otherSignal.onReception(observeFunction)
    return unifiedSignal
  }
}

public func + &amp;lt;Subtype&amp;gt; (left: Signal&amp;lt;Subtype&amp;gt;, right: Signal&amp;lt;Subtype&amp;gt;) -&amp;gt; Signal&amp;lt;Subtype&amp;gt; {
  return left.unionWith(right)
}

extension Signal {
  private func send (value: Subtype) {
    var newObservations: [Observation] = []
    while observations.count &amp;gt; 0 {
      let observe = observations.removeFirst()
      let persistence = observe(value)
      switch persistence {
      case .Continue:
        newObservations.append(observe)
      case .Stop: break
      }
    }
    observations = newObservations
  }
}

public final class Emitter&amp;lt;Subtype&amp;gt; {
  public let signal = Signal&amp;lt;Subtype&amp;gt;()

  public func emit(value: Subtype) {
    signal.send(value)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-megacontroller:98c10da2faa40144e7de0ba94dc701c4&#34;&gt;The megacontroller&lt;/h2&gt;

&lt;p&gt;Suppose we need to create a simple app to leave a feedback for a movie we just watched; the feedback will be divided in two categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;average&lt;/em&gt;: the movie was &lt;em&gt;good&lt;/em&gt;, &lt;em&gt;bad&lt;/em&gt; or &lt;em&gt;so and so&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;polarized&lt;/em&gt;: the movie was &lt;em&gt;very bad&lt;/em&gt; or &lt;em&gt;really good&lt;/em&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The app is going to present a page in which the user can select an &lt;em&gt;average&lt;/em&gt; or a &lt;em&gt;polarized&lt;/em&gt; feedback, and can tap a button that will present the user the available choices, i.e., respectively &lt;em&gt;good&lt;/em&gt;, &lt;em&gt;son and so&lt;/em&gt;, &lt;em&gt;bad&lt;/em&gt;, or &lt;em&gt;really&lt;/em&gt; and &lt;em&gt;very bad&lt;/em&gt;. The app is also going to thank the user if they&amp;rsquo;ve just left a positive feedback, but only if the previously left feedback was of lower value. The example is a little contrived but instructive, as we&amp;rsquo;re going to see. An &lt;strong&gt;easy, familiar approach&lt;/strong&gt; to the problem would be to start with the design of the two view controllers involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;MainPage&lt;/code&gt; will let the user select if the feedback is average or polarized, and will present a button to show the page where the actual feedback value will be selected; the &lt;code&gt;MainPage&lt;/code&gt; will also show the currently selected feedback (or none) in a label;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;SelectionPage&lt;/code&gt; is going to present several buttons with the various feedback values (different based on the feedback category), and at the tap of a button the page should actually pop from the navigation stack, going back to the now-updated &lt;code&gt;MainPage&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Armed with our &lt;strong&gt;imperative mind&lt;/strong&gt; we would probably start by adding a sequence of instructions to the &lt;code&gt;MainPage&lt;/code&gt;, that we&amp;rsquo;ll probably perceive as the &amp;ldquo;main&amp;rdquo; controller of our app. But soon, we would probably notice that a lot of &lt;strong&gt;clearly separated&lt;/strong&gt; responsibilities are being collected in the &lt;code&gt;MainPage&lt;/code&gt; class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;SelectionPage&lt;/code&gt; has to be constructed and initialized, and by doing this in &lt;code&gt;MainPage&lt;/code&gt; we are imposing a strict &lt;strong&gt;dependency&lt;/strong&gt; between the two classes;&lt;/li&gt;
&lt;li&gt;after its initialization, the &lt;code&gt;SelectionPage&lt;/code&gt; must be presented to the user: we would probably embed &lt;code&gt;MainPage&lt;/code&gt; in a &lt;code&gt;UINavigationController&lt;/code&gt;, then push the &lt;code&gt;SelectionPage&lt;/code&gt; from the &lt;code&gt;MainPage&lt;/code&gt;, resulting in a strict coupling of the two classes with a particular navigation and presentation strategy (i.e., using a &lt;code&gt;UINavigationController&lt;/code&gt;) that is going to cause headaches if the use cases change (for example, in developing the &lt;strong&gt;iPad version&lt;/strong&gt; of the app);&lt;/li&gt;
&lt;li&gt;there&amp;rsquo;s a feedback value &lt;strong&gt;stored somewhere&lt;/strong&gt;, because we need to know if the user selected &lt;code&gt;average&lt;/code&gt; or &lt;code&gt;polarized&lt;/code&gt;, and actually which was the selected feedback, because its value will be shown on the main page; the simplest solution seems to be just storing the selected feedback value in the &lt;code&gt;MainPage&lt;/code&gt; class;&lt;/li&gt;
&lt;li&gt;the act of &amp;ldquo;collecting the feedback&amp;rdquo; is a responsibility in itself, because the collected value is probably going to be used somewhere (for example, posting it to a web service);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We basically identified 4 different responsibilities, each of which is probably going to need its own class, but instead of thinking about the methods that need to be called on each one of them, we&amp;rsquo;re going to try and think with signals.&lt;/p&gt;

&lt;h2 id=&#34;the-model:98c10da2faa40144e7de0ba94dc701c4&#34;&gt;The model&lt;/h2&gt;

&lt;p&gt;For example, if the model changes we need to update the text shown on the &lt;code&gt;MainPage&lt;/code&gt;: a possible way to manage this could be to create a &lt;code&gt;ModelController&lt;/code&gt; class, which holds the model, and &lt;em&gt;emits a signal&lt;/em&gt; each time the model changes. Then, the &lt;code&gt;MainPage&lt;/code&gt; could &lt;em&gt;react&lt;/em&gt; to this signal, and change the UI accordingly. A nice to way to do this is injecting the &lt;code&gt;ModelController&lt;/code&gt; in the &lt;code&gt;MainPage&lt;/code&gt; constructor, so that &lt;code&gt;MainPage&lt;/code&gt; can establish the appropriate bindings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;/// MainPage initializer
init(feedbackModelController: ModelController&amp;lt;FeedbackModel&amp;gt;) {
  super.init(nibName: nil, bundle: nil)
  feedbackModelController.updateSignal.onReception § eachTime § updateViewsWithFeedbackModel
  viewReadyEmitter.signal.onReception § eachTime § feedbackModelController.notify
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;§&lt;/code&gt; operator and the &lt;code&gt;eachTime&lt;/code&gt; function are just helpers to make the &lt;strong&gt;functional composition&lt;/strong&gt; easier: as it often happens with functional programming, or declarative programming in general, we can infer the meaning of an expression just by reading it; in fact, &lt;code&gt;onReception § eachTime § updateViewsWithFeedbackModel&lt;/code&gt; means that when the signal is received, the &lt;code&gt;MainPage&lt;/code&gt; will update the view every time according to the new &lt;code&gt;FeedbackModel&lt;/code&gt;: &lt;code&gt;eachTime&lt;/code&gt; means that every time the signal triggers, so will the update; this is in contrast with the &lt;code&gt;once&lt;/code&gt; function, that makes the object listen only to the first signal trigger. This is  related to the &lt;code&gt;Persistence&lt;/code&gt; of a &lt;code&gt;Signal&lt;/code&gt; observation, that is, if the object should continue listen to a signal or not: &lt;code&gt;Persistence&lt;/code&gt; is a single &lt;code&gt;enum&lt;/code&gt; with two values, &lt;code&gt;Continue&lt;/code&gt; and &lt;code&gt;Stop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An important characteristic of the view controllers is the fact that the views are not yet initialized in the constructor, so we often need to memorize some data and use it in the &lt;code&gt;viewDidLoad&lt;/code&gt; method, that is called by the framework when all the views are loaded, and can consequently be manipulated; but we used a signal to express the update logic directly in the constructor, where the &lt;code&gt;ModelController&lt;/code&gt; is available: the line &lt;code&gt;viewReadyEmitter.signal.onReception § eachTime § feedbackModelController.notify&lt;/code&gt; means that when the &lt;code&gt;viewReadyEmitter&lt;/code&gt;, i.e., the emitter that will send a signal when the view is ready, is triggering, the model controller has to &lt;em&gt;notify&lt;/em&gt; its current value to all the observers; this way we don&amp;rsquo;t need to manually update the views in the &lt;code&gt;viewDidLoad&lt;/code&gt; method: everything is connected, and the signals will &lt;strong&gt;propagate&lt;/strong&gt; according to the declarative bindings.&lt;/p&gt;

&lt;h2 id=&#34;handling-page-creation-and-presentation:98c10da2faa40144e7de0ba94dc701c4&#34;&gt;Handling page creation and presentation&lt;/h2&gt;

&lt;p&gt;Transitioning between pages is one the key points in iOS programming: page presentation has to be &lt;strong&gt;predictable and smooth&lt;/strong&gt;, to avoid a confusing user experience. One of the main premises of the &lt;code&gt;UIViewController&lt;/code&gt; class was and still is the creation of a modular hierarchy of views, that&amp;rsquo;s independent from the way it&amp;rsquo;s presented to the user: that way we can easily reuse &lt;strong&gt;the same&lt;/strong&gt; view controller, for example, in full screen on the iPhone, or as a child view controller on a more complex hierarchy on iPad. The problem is that, if we write down the navigation and presentation logic &lt;em&gt;inside&lt;/em&gt; the view controller class, we are going to establish tight dependencies between the view controller and its presentation, thus going against the premise.&lt;/p&gt;

&lt;p&gt;A possible solution would be to use a &lt;code&gt;NavigationHandler&lt;/code&gt;, that will handle the transition between pages, along with the initial presentation during the application startup. The strategy here is to use a class that knows &lt;strong&gt;when and how&lt;/strong&gt; to present pages, oblivious of what pages actually do. For example, on receiving the appropriate signal from &lt;code&gt;MainPage&lt;/code&gt;, the &lt;code&gt;NavigationHandler&lt;/code&gt; will present the &lt;code&gt;SelectionPage&lt;/code&gt;. Where the &lt;code&gt;SelectionPage&lt;/code&gt; comes from? We should certainly avoid to burden the &lt;code&gt;NavigationHandler&lt;/code&gt; with pages&amp;rsquo; initialization responsibilities,  in fact we identified the class creation as a responsibility in itself. A frequent pattern used to handle the initialization of objects is the &lt;a href=&#34;http://www.oodesign.com/factory-pattern.html&#34;&gt;Factory Pattern&lt;/a&gt;: a &lt;code&gt;PageFactory&lt;/code&gt; will construct our pages with the options passed to the factory constructor. Thus, &lt;code&gt;NavigationHandler&lt;/code&gt; will ask the &lt;code&gt;PageFactory&lt;/code&gt; for pages, through the methods &lt;code&gt;makeMainPage&lt;/code&gt; and &lt;code&gt;makeSelectionPage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But we incur in a problem: &lt;code&gt;makeSelectionPage&lt;/code&gt; will just return a &lt;code&gt;SelectionPage&lt;/code&gt; object, but we don&amp;rsquo;t know if it&amp;rsquo;s &lt;em&gt;always&lt;/em&gt; the same instance, or a new instance each time. In fact, &lt;code&gt;PageFactory&lt;/code&gt; doesn&amp;rsquo;t &lt;em&gt;promise&lt;/em&gt; always the same page. This is important because the &lt;code&gt;NavigationHandler&lt;/code&gt; will only take care of page presentation, but the very same page instance has to be considered, for example, for collecting the feedback. A possible strategy would be to &lt;em&gt;cache&lt;/em&gt; the &lt;code&gt;SelectionPage&lt;/code&gt;, but one of the main points of functional programming is &lt;strong&gt;avoiding state&lt;/strong&gt;: we don&amp;rsquo;t want to burden ourselves with the responsibility of managing mutable state, which is one of the &lt;a href=&#34;http://shaffner.us/cs/papers/tarpit.pdf&#34;&gt;main causes of complexity&lt;/a&gt; in software development. Instead, we will once again leverage signals to handle the situation. &lt;code&gt;PageFactory&lt;/code&gt; exposes two signals that are triggered at page creation; &lt;code&gt;NavigationHandler&lt;/code&gt;  uses those signal to bind its actions to the initialized pages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;pageFactory.signalMakeMainPage
  .flatMap { $0.signalLeaveFeedback }
  .onReception § eachTime § inAnyCase § presentSelectionPage
  
pageFactory.signalMakeSelectionPage
  .flatMap { $0.signalSelection }
  .onReception § eachTime § inAnyCase § popTopPage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code just shown, the signals that are triggered when the pages are initialized are &lt;em&gt;flatMapped&lt;/em&gt; to the respective interaction signals, that is, the observed signal is a signal that will trigger when the second signal is triggered, but the &lt;em&gt;second&lt;/em&gt; signal will be available only when the &lt;em&gt;first&lt;/em&gt; signal is triggered: the &lt;code&gt;flatMap&lt;/code&gt; method will let us reference a signal that is not yet available. The &lt;code&gt;inAnyCase&lt;/code&gt; function is used because &lt;code&gt;NavigationHandler&lt;/code&gt; is not interested in the &lt;em&gt;content&lt;/em&gt; of the signals, but just the fact that they are triggered; the content is going to be handled by another class: &lt;code&gt;FeedbackCollector&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;composing-signals:98c10da2faa40144e7de0ba94dc701c4&#34;&gt;Composing signals&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FeedbackCollector&lt;/code&gt; has the responsibility of &lt;em&gt;collecting the whole feedback&lt;/em&gt;: this seems tricky, because the creation of a new feedback is not a synchronous procedure, and it&amp;rsquo;s the result of &lt;strong&gt;many different interactions&lt;/strong&gt; from the user in different contexts. As we saw, a signal is an abstraction over asynchronous programming: we declare the signal bindings for actions that will trigger at a certain point in time. Thanks to signals we can express the logic for collecting feedback in a single function call, executed during the app startup phase, even if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;at the app startup the pages are not yet initialized;&lt;/li&gt;
&lt;li&gt;to actually collect the feedback various interactions in multiple pages will be needed;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually these consideration would lead to &lt;strong&gt;stateful&lt;/strong&gt; computations, where state would be expressed in various points, and mutated. But the class &lt;code&gt;FeedbackCollector&lt;/code&gt; can generate a signal triggered each time a new feedback is collected with a single expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func collectFeedbackModelChange() -&amp;gt; Signal&amp;lt;FeedbackModelChange&amp;gt; {
  return pageFactory.signalMakeMainPage
    .flatMap { $0.signalPolarizedChanged }
    .map(FeedbackModel.transformWithPolarized)
    + pageFactory.signalMakeSelectionPage
      .flatMap { $0.signalSelection }
      .map(FeedbackModel.transformWithFeedback)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator will literally &lt;em&gt;add&lt;/em&gt; 2 signals together, producing a signal that is triggered each time either of the signals is triggered. The app uses the &lt;code&gt;Signal&amp;lt;FeedbackModelChange&amp;gt;&lt;/code&gt; produced by the &lt;code&gt;collectFeedbackModelChange()&lt;/code&gt; to update the model in the &lt;code&gt;ModelController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another example of asynchronous reaction to signals is shown in the &lt;code&gt;AppDelegate&lt;/code&gt;&amp;rsquo;s method &lt;code&gt;handleGoodFeedbacksWithAlert()&lt;/code&gt;; here&amp;rsquo;s the logic: if the user leaves a positive feedback, that is better than the previously left feedback, the app will show an alert, thanking the user. The entire logic for this is handled in the following expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;feedbackModelController.deltaSignal
  .filter { $0.feedback.rawValue &amp;lt; $1.feedback.rawValue}
  .filter { $1.feedback == .Good || $1.feedback == .ReallyGood }
  .onReception § eachTime § inAnyCase § showThankYouAlert
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ModelController&lt;/code&gt;&amp;rsquo;s &lt;code&gt;deltaSignal&lt;/code&gt; is triggered each time the model changes, and contains both the old and the new value: in the shown expression a signal is created by &lt;em&gt;filtering&lt;/em&gt; the &lt;code&gt;deltaSignal&lt;/code&gt;, because we need a signal that is triggered only when the new feedback is different from the previous and positive.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:98c10da2faa40144e7de0ba94dc701c4&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;A clean and decoupled architecture is hard to get right, and can be obtained in different ways. Using signals will help us achieve the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can work on &lt;strong&gt;a single piece at a time&lt;/strong&gt;, thinking about what &lt;em&gt;values&lt;/em&gt; are exchanged between classes, instead of interfaces and abstractions;&lt;/li&gt;
&lt;li&gt;we&amp;rsquo;ll be able to focus on what a view controller, or any class, really has to &lt;em&gt;produce&lt;/em&gt;, that is, what value is going to yield in the economy of the app;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Signals are not application-wide events: we don&amp;rsquo;t need a router or a dispatcher (like   &lt;code&gt;NSNotificationCenter&lt;/code&gt;) to properly handle them, because each object will declare its observation of specific signals. Also, because signals are easily transformed and composed, we can declaratively express our bindings without worrying about &lt;em&gt;when&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; things are going to happen, but just &lt;em&gt;what&lt;/em&gt; we need. Of course our architecture has to take into account the fact that getting a &lt;em&gt;precise sequence of events&lt;/em&gt; is basically impossible when working with signals: actually, &lt;em&gt;sequencing&lt;/em&gt; is not even considered in declarative programming, because, along with &lt;em&gt;state&lt;/em&gt;, is a great cause of complexity. In the end, a declarative architecture, like everything, has its tradeoffs, but I still think it&amp;rsquo;s worth trying.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GraphQL: an introduction</title>
      <link>/blog/eng/graphql-an-introduction/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/graphql-an-introduction/</guid>
      <description>

&lt;h2 id=&#34;the-lesson-we-learned-with-rest:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;The lesson we learned with REST&lt;/h2&gt;

&lt;p&gt;For many developers, nowadays, building an &lt;strong&gt;API&lt;/strong&gt; for their applications essentially means mapping the &lt;em&gt;resources&lt;/em&gt; of the domain to &lt;em&gt;URIs&lt;/em&gt;, with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34;&gt;REST&lt;/a&gt; principles in mind.
Usually creating a &lt;strong&gt;&lt;em&gt;RESTful&lt;/em&gt;&lt;/strong&gt; system is not difficult, and the simplicity of the idea makes the task easier.
Let&amp;rsquo;s see some of the consequences and benefits of choosing REST:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every HTTP verb has its own meaning, allowing the developer to understand immediately what kind of operation (typically among the CRUD ones) is going to be performed on the resource identified by the URI.&lt;/li&gt;
&lt;li&gt;Often the same URI can be used with multiple verbs to accomplish different tasks (e.g. &amp;ldquo;example.com/tag/123&amp;rdquo; refers to a particular tag that you can retrieve, update or delete).&lt;/li&gt;
&lt;li&gt;Controllers in many server-side frameworks can be created with a RESTful approach, each one of them representing one or more resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, unfortunately, it&amp;rsquo;s often easy to come across some problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complex URIs can be difficult to write or understand and sometimes they are subject to arbitrary interpretations.&lt;/li&gt;
&lt;li&gt;In order to filter collections you may need to use one or more ids embedded in the URL, but also &lt;em&gt;query parameters&lt;/em&gt;, e.g. when you want to sort the results of a GET by one particular field or retrieve resources by some field other than the id.&lt;/li&gt;
&lt;li&gt;There is no standard or easy way for the client to specify the list of fields that it needs, and the server will usually return all the data related to the requested resource.&lt;/li&gt;
&lt;li&gt;More importantly, there is no standard way for the client to decide which resources related to the one requested should be returned, resulting in a lot of noise in the response content (unless the server application offers multiple endpoints to access the same resource but with different subsets of data&amp;hellip; but this could lead to API design problems).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can&amp;rsquo;t really blame REST for these and other cons. Its power comes from simplicity and developers are thankful for this breath of fresh air. You have just one transport layer, i.e. HTTP, with its features and rules.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s see how we can take a step forward and add some salt to our APIs, to make them even more powerful and expressive.&lt;/p&gt;

&lt;h2 id=&#34;a-new-way-to-design-api-graphql:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;A new way to design API: GraphQL&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt; maintains all the advantages of REST (relies on HTTP, very small overhead on requests, stateless and cacheable) and adds some very useful enhancements.
One of the main reasons why &lt;strong&gt;Facebook&lt;/strong&gt; created it back in 2012 was the need to find a way to access data on their server that allowed any type of client and device (especially mobile site and app) to decide exactly what fields they need, reducing the payload and then minimizing the traffic.&lt;/p&gt;

&lt;p&gt;Instead of explaining all the features, which can be read in the &lt;a href=&#34;http://graphql.org/docs/getting-started/&#34;&gt;official guide&lt;/a&gt;, in this post we&amp;rsquo;ll focus on what makes GraphQL interesting.
In the next section we&amp;rsquo;ll use types and queries presented in our example project, that you can clone from &lt;a href=&#34;https://github.com/poetcyborg/graphql-node-starter-kit&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;types-and-fields-driven-queries:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;Types and fields driven queries&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Example #1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games {
        id
	    title
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previous snippet describes a query issued by the client when it just needs to retrieve &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;title&lt;/em&gt; of a &lt;strong&gt;&lt;em&gt;game&lt;/em&gt;&lt;/strong&gt;.
Since no argument has been passed to filter the data of the specified type (&lt;em&gt;game&lt;/em&gt;), all the games will be retrieved.
The output for this query is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;games&amp;quot;: [{
        &amp;quot;id&amp;quot;: 1,
        &amp;quot;title&amp;quot;: &amp;quot;Frogger&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 2,
        &amp;quot;title&amp;quot;: &amp;quot;Galaxian&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 3,
        &amp;quot;title&amp;quot;: &amp;quot;Tiger Road&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 4,
        &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With REST, the same task could be accomplished with the following url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game?fields=id,title
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unless the server applications is taking care of field filtering based on query params, all the information about every game will be returned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games(id:2) {
        id
        title
        year
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example #3&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games(title:&amp;quot;Frogger&amp;quot;) {
		id
        title
        year
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples #2 and #3 show a way to filter games by their &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;title&lt;/em&gt; respectively.
As you can see, the id has no semantic meaning like in REST, so you can describe the filter criterion in the same manner (&lt;em&gt;fieldname: &amp;ldquo;value&amp;rdquo;&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The REST equivalent (selected fields are omitted) for Example #2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game/2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and #3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game?title=Frogger
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;relations-between-entities-graph-representation:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;Relations between entities: graph representation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Example #4&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    games(id:2) {
        title
        developer {
            name
            nation
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;types&lt;/strong&gt; called &lt;em&gt;Game&lt;/em&gt; and &lt;em&gt;Company&lt;/em&gt; are related to each other; in our example, for the sake of simplicity, a game can only have one company as developer and one as publisher, while any company can have multiple developed or published games.
In Example #4, you can notice the complex field &lt;em&gt;developer&lt;/em&gt;; we want to know the name and the nation of the company that developed the game with id = 2.&lt;/p&gt;

&lt;p&gt;The same two types can be reused to express the opposite of the relation described in the previous example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #5:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    companies(name:&amp;quot;Game Freak&amp;quot;) {
        name
        gamesAsDeveloper {
            title
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see briefly how you can describe these relations in the &lt;strong&gt;Javascript&lt;/strong&gt; implementation.&lt;/p&gt;

&lt;p&gt;In the &amp;lsquo;&lt;em&gt;Game&lt;/em&gt;&amp;rsquo; type definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;developer: {
	type: Company,
    description: &#39;The developer of the game&#39;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in the &amp;lsquo;&lt;em&gt;Company&lt;/em&gt;&amp;rsquo; type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gamesAsDeveloper: {
    type: new GraphQLList(Game),
    description: &#39;The games created as a developer&#39;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The field &lt;em&gt;developer&lt;/em&gt; is defined as type &lt;em&gt;Company&lt;/em&gt;, while the field &lt;em&gt;gamesAsDeveloper&lt;/em&gt; is a list of &lt;em&gt;Game&lt;/em&gt;.
Please refer to the &lt;a href=&#34;https://github.com/poetcyborg/graphql-node-starter-kit&#34;&gt;demo project&lt;/a&gt; for the full implementation of this example.&lt;/p&gt;

&lt;h3 id=&#34;minimizing-the-number-of-requests-to-the-server:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;Minimizing the number of requests to the server&lt;/h3&gt;

&lt;p&gt;This time we need the list of the &lt;em&gt;Japanese companies&lt;/em&gt; and some information about the games they worked on, but only for the &lt;em&gt;NES&lt;/em&gt; (Nintendo Entertainment System) platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #6:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    companies(nation:&amp;quot;Japan&amp;quot;) {
	    name
        gamesAsDeveloper(platform:&amp;quot;NES&amp;quot;) {
		    title
	        year
        }
        gamesAsPublisher(platform:&amp;quot;NES&amp;quot;) {
            title
            year
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This query&amp;rsquo;s output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;companies&amp;quot;: [{
        &amp;quot;name&amp;quot;: &amp;quot;Konami&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Namco&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [],
        &amp;quot;gamesAsPublisher&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1989&amp;quot;
          }]
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Game Freak&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1989&amp;quot;
          }],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Capcom&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Tiger Road&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1987&amp;quot;
          }],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the REST world, the same response could be obtained in several ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by sending a request to an endpoint that was built exactly for the purpose of filtering companies and games by some fields, e.g.:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;GET /companyWithGames?companyNation=Japan&amp;amp;gamePlatform=NES&amp;amp;fields=...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;by sending several requests to more generic endpoints, e.g.:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;GET /company?nation=Japan&amp;amp;fields=...
GET /game?developerName=[developer 1 name]&amp;amp;gamePlatform=NES&amp;amp;fields=...
GET /game?developerName=[developer 2 name]&amp;amp;gamePlatform=NES&amp;amp;fields=...
GET ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a couple of notable things here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the expressivity of the query language becomes more evident when things start becoming more interesting; filtering subsets of data feels natural and easy as you can just specify the criteria for the filters directly on the subtree root (companies -&amp;gt; nation, gamesAsDeveloper -&amp;gt; platform, gamesAsPublisher -&amp;gt; platform);&lt;/li&gt;
&lt;li&gt;on server side, the developer can write the code to retrieve the data for every subset of data independently, considering that, when a request is sent, every subtree receives the data returned by the upper levels (in this case, filtering &lt;em&gt;games&lt;/em&gt; with the given &lt;em&gt;platform&lt;/em&gt; is performed only on companies with the selected &lt;em&gt;nation&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;api-documentation:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;API Documentation&lt;/h3&gt;

&lt;p&gt;When you design a REST WebService, for every endpoint you&amp;rsquo;re mostly going to take care of its URI and the structure of the request and the response body.
Unfortunately, there is no standard way to document this information and make it available to the client developers.&lt;/p&gt;

&lt;p&gt;With GraphQL, using &lt;strong&gt;&lt;em&gt;introspection&lt;/em&gt;&lt;/strong&gt; you can ask the server information about the available types and their fields.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #7&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    __schema {
        types {
            kind
            name
            description
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A query with the query root &lt;strong&gt;&lt;em&gt;__schema&lt;/em&gt;&lt;/strong&gt; returns the list of types with their descriptions and fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;__schema&amp;quot;: {
      &amp;quot;types&amp;quot;: [
		...
        {
          &amp;quot;kind&amp;quot;: &amp;quot;OBJECT&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;Company&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;A company object&amp;quot;,
          &amp;quot;fields&amp;quot;: [...]
        }, {
          &amp;quot;kind&amp;quot;: &amp;quot;OBJECT&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;Game&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;A game object&amp;quot;
          &amp;quot;fields&amp;quot;: [...]
        },
        ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to get the information about the types is using the query root &lt;strong&gt;&lt;em&gt;__type&lt;/em&gt;&lt;/strong&gt;, passing a specific type name:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #8&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    __type(name:&amp;quot;Game&amp;quot;) {
        fields {
            name
            description
            type {
                name
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;data&amp;quot;: {
        &amp;quot;__type&amp;quot;: {
            &amp;quot;fields&amp;quot;: [{
                &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;The id of a game&amp;quot;,
                &amp;quot;type&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;Int&amp;quot;
                }
            }, {
	            &amp;quot;name&amp;quot;: &amp;quot;title&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;The title of a game&amp;quot;,
                &amp;quot;type&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;String&amp;quot;
                }
            },
            ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mutations:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;Mutations&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve already talked about queries, but a few words need to be spent about the other important operation that you can perform on a GraphQL server: &lt;strong&gt;mutations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #9&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mutation {
	updateGameRating(id:2, rating:7) {
		id
		title
		rating
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax is no different from the previous ones, except for the &lt;strong&gt;&lt;em&gt;mutation&lt;/em&gt;&lt;/strong&gt; root.
It is the equivalent of a POST or a PATCH in REST, and lets us change the value of some fields in a resource.
In this example we are assigning a value (7) to the &lt;em&gt;rating&lt;/em&gt; field of the &lt;em&gt;Game&lt;/em&gt; types; this mutation could be defined in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	name: &#39;UpdateGameRating&#39;,
	type: Game,
	args: {
	    rating: { type: new GraphQLNonNull(GraphQLInt) },
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the specified type for the mutation is &lt;em&gt;Game&lt;/em&gt;; this means not only that the update should be performed on games, but also that the &lt;em&gt;Game&lt;/em&gt; field included in the request (id, title and rating) should be returned, just like a normal query.&lt;/p&gt;

&lt;h2 id=&#34;implementations:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;Implementations&lt;/h2&gt;

&lt;p&gt;In the present article we sometimes referred to the official &lt;strong&gt;Javascript&lt;/strong&gt; library for GraphQL, but as you can see in &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql&#34;&gt;this project&lt;/a&gt; there are many different implementations for the most popular languages.&lt;/p&gt;

&lt;h2 id=&#34;the-future-of-graphql:5fc659d52e5815e37925e5b00b41abfb&#34;&gt;The future of GraphQL&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s difficult to say what will become of GraphQL in the next year.
Sure there&amp;rsquo;s a lot of hype around it, and for some very solid reasons.
It&amp;rsquo;s not going to replace REST in developers&amp;rsquo; hearts anytime soon, but if they&amp;rsquo;re brave enough, they can add a &lt;strong&gt;GraphQL layer&lt;/strong&gt; over an existing REST API in their application.
In fact, in my opinion, another good point of interest regarding GraphQL is the ability to aggregate multiple endpoints that reference various resources. Its nature is very domain-centric and it&amp;rsquo;s more  focused on &lt;strong&gt;&lt;em&gt;what&lt;/em&gt;&lt;/strong&gt; data needs to be precisely retrieved, rather than on &lt;strong&gt;&lt;em&gt;how to&lt;/em&gt;&lt;/strong&gt; get it.&lt;/p&gt;

&lt;p&gt;Some questions arise when you think about GraphQL in a more vast spectrum:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to &lt;strong&gt;cache&lt;/strong&gt; resources on server-side, even if they were originally fetched using different queries? (Facebook is trying to give some answers with &lt;a href=&#34;https://facebook.github.io/relay/docs/thinking-in-relay.html&#34;&gt;Relay&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;how to &lt;strong&gt;limit the access&lt;/strong&gt; to the resources (or the introspection on them) only to some users? GraphQL is authorization-agnostic, but as you can read in &lt;a href=&#34;https://github.com/graphql/graphql-js/issues/113&#34;&gt;this Github issue&lt;/a&gt; its a common problem that needs to be at least faced.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The entire Facebook ecosystem of open source projects is worth of attention (don&amp;rsquo;t forget about React, Flux and the other Flux-like architectures) and, even if it&amp;rsquo;s very young, it has become very popular and used by many little and big companies around the world.&lt;/p&gt;

&lt;p&gt;My personal hope is that every lesson that can be learned while working with these projects, especially GraphQL, might lead to a better World Wide Web and a better developing experience, maybe with more standard and free implementations than the Facebook (or Google, or Microsoft, or Apple) ones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write a filesystem with FUSE</title>
      <link>/blog/eng/write-filesystem-fuse/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/write-filesystem-fuse/</guid>
      <description>

&lt;p&gt;During the past year I experimented a lot with file systems in Userspace using FUSE, I wrote this post to share my thoughts about what I did and to give you a starting point to do something by yourself.&lt;/p&gt;

&lt;h1 id=&#34;introduction:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;A filesystem is that piece of software that is in charge of storing, organizing and generally taking care of data represented as files and directories.
If you are using a device to read this post you are probably using at least one filesystem at the moment.&lt;/p&gt;

&lt;p&gt;Implementing a filesystem is not an easy task to accomplish and requires that a few parts of it have to be written at kernel level, fortunately that&amp;rsquo;s not our case since we are not writing a real on-disk filesystem, but rather we want to write something on top of it to solve a specific problem.&lt;/p&gt;

&lt;p&gt;The most common tool to do that in user space is precisely &lt;strong&gt;FUSE, Filesystem in USErspace&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are a lot of filesystem examples built on top of FUSE out there that cover the most different use cases like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gluster.org/&#34;&gt;GlusterFS&lt;/a&gt;: scalable network filesystem&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/libfuse/sshfs&#34;&gt;SSHFS&lt;/a&gt;: allows mounting a remote filesystem over SSH&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sr71.net/projects/gmailfs/&#34;&gt;GMailFS&lt;/a&gt;: allows to use GMail storage as a filesystem&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://loggedfs.sourceforge.net/&#34;&gt;LoggedFS&lt;/a&gt;: filesystem that logs operations that happens in it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main &lt;strong&gt;advantages&lt;/strong&gt; of FUSE over writing a low level kernel filesystem are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is usable by non-privileged users;&lt;/li&gt;
&lt;li&gt;Clean and easy interface to do FS operations;&lt;/li&gt;
&lt;li&gt;Has bindings in most available programming language;&lt;/li&gt;
&lt;li&gt;No need of advanced kernel development skills;&lt;/li&gt;
&lt;li&gt;Comes with user isolation, more secure;&lt;/li&gt;
&lt;li&gt;Since you are not hacking in kernel space there are a few chances that a crash in your program takes down the entire system;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However there are also a few &lt;strong&gt;disadvantages&lt;/strong&gt; of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The target system need libfuse installed;&lt;/li&gt;
&lt;li&gt;Slower than low level implementations;&lt;/li&gt;
&lt;li&gt;Not the best option if you need multiple users to access your filesystem;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s a flow-chart diagram showing how FUSE works, source: &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:FUSE_structure.svg&#34;&gt;Wikimedia Commons&lt;/a&gt;
&lt;img src=&#34;/images/write-filesystem-fuse/FUSE_structure.svg&#34; alt=&#34;A flow-chart diagram showing how FUSE works&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;getting-started-with-fuse:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Getting started with FUSE&lt;/h1&gt;

&lt;p&gt;This section of the post is designed to introduce you on how to practically get your hands dirt with FUSE. Anyway you can understand what&amp;rsquo;s going on whether you execute the code or not.&lt;/p&gt;

&lt;h2 id=&#34;build-dependencies:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Build dependencies&lt;/h2&gt;

&lt;p&gt;From now you&amp;rsquo;ll need a few build dependencies and a text editor or an IDE to build and edit the code and do your experiments.&lt;/p&gt;

&lt;h3 id=&#34;linux:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Linux&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;GCC or Clang&lt;/li&gt;
&lt;li&gt;CMake &amp;gt;= 3&lt;/li&gt;
&lt;li&gt;make&lt;/li&gt;
&lt;li&gt;FUSE 2.6 or later&lt;/li&gt;
&lt;li&gt;FUSE development files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To obtain those dependencies you can issue the following commands (depending on your Linux distribution).&lt;/p&gt;

&lt;p&gt;Fedora/CentOS&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install gcc fuse fuse-devel make cmake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Debian/Ubuntu&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install gcc fuse libfuse-dev make cmake
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mac-osx:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Mac OSX&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Command line tools for Xcode (contains Clang and make)&lt;/li&gt;
&lt;li&gt;CMake &amp;gt;= 3&lt;/li&gt;
&lt;li&gt;FUSE &amp;gt;= 2.6 or later&lt;/li&gt;
&lt;li&gt;FUSE development files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can obtain all the needed dependencies at the following sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/xcode/features/&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/download/&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://osxfuse.github.io/&#34;&gt;OSXFuse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fuse-api:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;FUSE API&lt;/h2&gt;

&lt;p&gt;The most important thing to be aware of when working with FUSE is its API.
The libfuse library exposes a set of callbacks that you have to implement in order to tell your filesystem how to behave.&lt;/p&gt;

&lt;p&gt;The most complete source of documentation on what are the callbacks and their behavior is the &lt;code&gt;fuse.h&lt;/code&gt; declaration file. You can find an online version &lt;a href=&#34;https://github.com/libfuse/libfuse/blob/579c3b03f57856e369fd6db2226b77aba63b59ff/include/fuse.h#L102-L577&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;example-project:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Example project&lt;/h2&gt;

&lt;p&gt;For the purpose of showing you how simple is the creation of a FUSE filesystem, I wrote this little implementation that, when mounted, only exposes a file named &lt;code&gt;file&lt;/code&gt; and its content.&lt;/p&gt;

&lt;p&gt;You can find the example project on &lt;a href=&#34;https://github.com/fntlnz/fuse-example&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think that the best way to start your own implementation is to take an example and start adding your features.&lt;/p&gt;

&lt;p&gt;So, as first thing clone the example project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/fntlnz/fuse-example.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the project structure is quite simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── CMake
│   └── FindFUSE.cmake
├── CMakeLists.txt
└── fuse-example.c
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cmakelists-txt-https-github-com-fntlnz-fuse-example-blob-master-cmakelists-txt:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;&lt;a href=&#34;https://github.com/fntlnz/fuse-example/blob/master/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;As you may know CMake is a tool used to manage project builds in a cross platform way. The scope of this file is to define what CMake is supposed to do for our project. The &lt;code&gt;CMake/FindFuse.cmake&lt;/code&gt; is needed in order to tell CMake where to find the FUSE related things while compiling/linking.&lt;/p&gt;

&lt;h3 id=&#34;fuse-example-c-https-github-com-fntlnz-fuse-example-blob-master-fuse-example-c:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;&lt;a href=&#34;https://github.com/fntlnz/fuse-example/blob/master/fuse-example.c&#34;&gt;fuse-example.c&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s where the magic actually happen!&lt;/p&gt;

&lt;p&gt;In this example I implemented four of the FUSE API callbacks namely: getattr, open, read, readdir.&lt;/p&gt;

&lt;h4 id=&#34;getattr:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;getattr&lt;/h4&gt;

&lt;p&gt;The getattr callback is in charge of reading the metadata of a given path, this  callback is always called before any operation made on the filesystem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int getattr_callback(const char *path, struct stat *stbuf) {
  memset(stbuf, 0, sizeof(struct stat));

  if (strcmp(path, &amp;quot;/&amp;quot;) == 0) {
    stbuf-&amp;gt;st_mode = S_IFDIR | 0755;
    stbuf-&amp;gt;st_nlink = 2;
    return 0;
  }

  if (strcmp(path, filepath) == 0) {
    stbuf-&amp;gt;st_mode = S_IFREG | 0777;
    stbuf-&amp;gt;st_nlink = 1;
    stbuf-&amp;gt;st_size = strlen(filecontent);
    return 0;
  }

  return -ENOENT;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we are doing here is simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the value of path equals to root &lt;code&gt;/&lt;/code&gt;, we declare it as a directory and return.&lt;/li&gt;
&lt;li&gt;if the value of path equals to filepath &lt;code&gt;/file&lt;/code&gt;, we declare it as a file and explicit its size and then return.&lt;/li&gt;
&lt;li&gt;Otherwise nothing exists at the given path, and we return &lt;code&gt;-ENOENT&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, we are telling FUSE that the current entry is a file or a directory using the &lt;code&gt;stat&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;In general, if the entry is a directory, &lt;code&gt;st_mode&lt;/code&gt; have to be set to &lt;code&gt;S_IFDIR&lt;/code&gt; and &lt;code&gt;st_nlink&lt;/code&gt; to 2, while if it&amp;rsquo;s a file, &lt;code&gt;st_mode&lt;/code&gt; have to be set to &lt;code&gt;S_IFREG&lt;/code&gt; (that stands for regular file) and &lt;code&gt;st_nlink&lt;/code&gt; to 1. Files also require that the &lt;code&gt;st_size&lt;/code&gt; (the full file size) is specified.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/007908799/xsh/sysstat.h.html&#34;&gt;Here&lt;/a&gt; you can find more information about &lt;code&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;open:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;open&lt;/h4&gt;

&lt;p&gt;The open callback is called when the system requests for a file to be opened. Since we don&amp;rsquo;t have real file but only in-memory representations, we are going to implement this callback just because is needed for FUSE to work and therefore return 0.&lt;/p&gt;

&lt;h4 id=&#34;read:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;read&lt;/h4&gt;

&lt;p&gt;This callback is called when FUSE is reading data from an opened file.
It should return exactly the number of bytes requested and fill the second argument &lt;code&gt;buf&lt;/code&gt; with the content of those bytes.
As done in the getattr callback, here I&amp;rsquo;m checking if the given path equals to a known one, I copy the &lt;code&gt;filecontent&lt;/code&gt; into the &lt;code&gt;buf&lt;/code&gt; and then return the requested number of bytes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int read_callback(const char *path, char *buf, size_t size, off_t offset,
    struct fuse_file_info *fi) {

  if (strcmp(path, filepath) == 0) {
    size_t len = strlen(filecontent);
    if (offset &amp;gt;= len) {
      return 0;
    }

    if (offset + size &amp;gt; len) {
      memcpy(buf, filecontent + offset, len - offset);
      return len - offset;
    }

    memcpy(buf, filecontent + offset, size);
    return size;
  }

  return -ENOENT;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;readdir:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;readdir&lt;/h4&gt;

&lt;p&gt;The readdir callback has the task of telling FUSE the exact structure of the accessed directory.
Since at the moment the only available directory is &lt;code&gt;/&lt;/code&gt;, this function always return its representation, we are doing it by filling &lt;code&gt;buf&lt;/code&gt; with the two links for the upper directory &lt;code&gt;..&lt;/code&gt; and current directory &lt;code&gt;.&lt;/code&gt; and with the only file we have: &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int readdir_callback(const char *path, void *buf, fuse_fill_dir_t filler,
    off_t offset, struct fuse_file_info *fi) {
  (void) offset;
  (void) fi;

  filler(buf, &amp;quot;.&amp;quot;, NULL, 0);
  filler(buf, &amp;quot;..&amp;quot;, NULL, 0);

  filler(buf, filename, NULL, 0);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;main:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;main&lt;/h4&gt;

&lt;p&gt;Last but not least, the &lt;code&gt;main&lt;/code&gt; function here is acting as a proxy to the &lt;code&gt;fuse_main&lt;/code&gt; passing arguments through it and configuring it with the implemented FUSE operation callbacks via the &lt;code&gt;fuse_example_operations&lt;/code&gt; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static struct fuse_operations fuse_example_operations = {
  .getattr = getattr_callback,
  .open = open_callback,
  .read = read_callback,
  .readdir = readdir_callback,
};

int main(int argc, char *argv[])
{
  return fuse_main(argc, argv, &amp;amp;fuse_example_operations, NULL);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;build-and-run:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Build and run&lt;/h3&gt;

&lt;p&gt;Do you remember that you installed CMake, make, gcc and libfuse? It&amp;rsquo;s time to use them!&lt;/p&gt;

&lt;p&gt;The first tool we are using is CMake to &lt;strong&gt;check dependencies, setup environment and generate Makefiles&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake -DCMAKE_BUILD_TYPE=Debug .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t want Debug flags and other development related enabled features, just change &lt;code&gt;Debug&lt;/code&gt; to &lt;code&gt;Release&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The second tool we are using is &lt;code&gt;make&lt;/code&gt;, that using the CMake generated &lt;strong&gt;Makefiles&lt;/strong&gt; is now able to build our project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make -j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-j&lt;/code&gt; parts tells make to parallelize the build to all your cores, remove it if you run out of CPU.&lt;/p&gt;

&lt;p&gt;Now that everything is ready, if no build error has occurred, we can enjoy our new filesystem!&lt;/p&gt;

&lt;h3 id=&#34;run:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Run!&lt;/h3&gt;

&lt;p&gt;Before doing anything we need a mountpoint, so let&amp;rsquo;s create the directory where the filesystem will be mounted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir /tmp/example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then, mount the filesystem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./bin/fuse-example -d -s -f /tmp/example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now check that it has been mounted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -la
total 0
drwxr-xr-x.  2 root root   0 Jan  1  1970 .
drwxrwxrwt. 14 root root 320 Jan 10 16:03 ..
-rwxrwxrwx.  1 root root  49 Jan  1  1970 file

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ mount | grep fuse-example
fuse-example on /tmp/example type fuse.fuse-example (rw,nosuid,nodev,relatime,user_id=1000,group_id=1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you may notice, we mounted the filesystem with three arguments which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;d&lt;/strong&gt;: enable debugging&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt;: run single threaded&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;f&lt;/strong&gt;: stay in foreground&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see the list of all mount options using &lt;code&gt;-h&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;thoughts-and-notes:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Thoughts and notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An important thing to notice is that write and read operations by default have a size of 4kb so if your file is, let&amp;rsquo;s say, 399kb you have to deal with the fact that to read it the read callback will be called 100 times with 100 different offset and 99 equals size but one that will have 3kb as size because the file is 399kb and not 400kb so the latest chunk has size 3kb and not 4kb.&lt;/li&gt;
&lt;li&gt;FUSE is more secure than low level kernel development, but security is not free so if you are going to write a network filesystem, for example you may want not to mount it as root.&lt;/li&gt;
&lt;li&gt;By default, accessing the mounted filesystem for other users is not allowed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other-resources:b00e3fe04fd8cc4ced6f5bb08e0d0012&#34;&gt;Other resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hanwen/go-fuse&#34;&gt;Fuse bindings in Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bcle/fuse4js&#34;&gt;Fuse bindings in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/terencehonles/fusepy&#34;&gt;Fuse bindings in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EtiennePerot/fuse-jna&#34;&gt;Fuse bindings in Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/libfuse/libfuse/tree/master/example&#34;&gt;Other examples in C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were my 2 cents, if you are interested in seeing something from me I started a little project on GitHub to create a filesystem that can use online services via FUSE to store data. You can find the project here: &lt;a href=&#34;https://github.com/fntlnz/webfs&#34;&gt;WebFS on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Puli: Universal Packages for PHP</title>
      <link>/blog/ita/puli-universal-packages-for-php/</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/puli-universal-packages-for-php/</guid>
      <description>

&lt;h2 id=&#34;composer-e-l-ecosistema-php:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Composer e l&amp;rsquo;ecosistema PHP&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;ecosistema PHP è notevolmente cambiato negli ultimi anni grazie all&amp;rsquo;introduzione di &lt;em&gt;Composer&lt;/em&gt;.
Esso ha definito degli standard per risolvere problemi comuni come l&amp;rsquo;autoloading e la gestione di pacchetti e dipendenze.
In questi ultimi anni si è assistito ad un proliferare di numerose componenti software riusabili che hanno significativamente modificato le strategie di sviluppo.&lt;/p&gt;

&lt;p&gt;Nonostante Composer si sia evoluto molto, in alcuni contesti le sue funzionalità risultano essere limitanti e incomplete.
I framework e i pacchetti più complessi hanno bisogno di una gestione personalizzata delle dipendenze. Generalmente sono necessarie operazioni di configurazione e registrazione. Ciò è specialmente vero per pacchetti core dei framework come i &lt;em&gt;template engines&lt;/em&gt;.
Composer, inoltre, possiede una cattiva gestione delle risorse non PHP. I file di configurazione devono essere gestiti manualmente oppure è necessario adottare standard strettamente legati a ciascun framework.&lt;/p&gt;

&lt;h2 id=&#34;la-soluzione-puli:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;La soluzione: Puli&lt;/h2&gt;

&lt;p&gt;A partire dal gennaio 2014 è stato sviluppato &lt;strong&gt;Puli, Universal Packages for PHP&lt;/strong&gt;, da Bernhard Schussek.
Puli mira a risolvere i problemi d&amp;rsquo;integrazione menzionati in precedenza creando un &lt;strong&gt;layer d&amp;rsquo;astrazione aggiuntivo tra Composer e l&amp;rsquo;applicazione&lt;/strong&gt;. Tale layer consente di gestire le risorse secondo convenzioni indipendenti dai framework. Ciò significa che Puli può essere usato anche dalle applicazioni che non ne fanno uso.
Attualmente Puli è in Beta, la versione stabile non è stata ancora annunciata ma è prevista per l&amp;rsquo;inizio del 2016.
&lt;strong&gt;Puli è stato ideato per affiancare Composer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Puli lavora ad un livello più alto per fornire le seguenti funzionalità:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#puli-path&#34;&gt;Gestione dei path virtuali per risorse non PHP&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#override-puli-path&#34;&gt;Overriding dei path virtuali&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#binding-type&#34;&gt;Interazione semplificata dei pacchetti con l&amp;rsquo;uso di Binding Type&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#url-generation&#34;&gt;Generazione automatica di URL per risorse pubbliche&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#assets-install&#34;&gt;Installazione automatica delle risorse pubbliche nelle document root&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;le-componenti-di-puli:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Le componenti di Puli&lt;/h2&gt;

&lt;p&gt;Puli offre svariate funzionalità organizzate nei seguenti componenti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resource repository&lt;/li&gt;
&lt;li&gt;Discovery service&lt;/li&gt;
&lt;li&gt;Public resources manager&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;configurazione:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Configurazione&lt;/h3&gt;

&lt;p&gt;Nell&amp;rsquo;offire questi servizi, Puli legge e scrive un proprio file di configurazione &lt;code&gt;puli.json&lt;/code&gt; presente nella root directory del pacchetto, allo stesso modo del &lt;code&gt;composer.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tale configurazione può essere modificata manualmente oppure utilizzando l&amp;rsquo;&lt;strong&gt;interfaccia CLI di Puli&lt;/strong&gt;;
Tale strumento può essere installato da Packagist tramite il pacchetto &lt;code&gt;puli/cli&lt;/code&gt;.
Al pari di Composer, sono disponibili archivi Phar per un uso immediato.&lt;/p&gt;

&lt;h3 id=&#34;installazione:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Installazione&lt;/h3&gt;

&lt;p&gt;Affiché le applicazioni possano usare i servizi offerti da Puli è necessario procedere all&amp;rsquo;installazione.
Per applicazioni che non fanno uso di framework è sufficiente abilitare il &lt;em&gt;Composer Plugin&lt;/em&gt; &lt;code&gt;puli/composer-plugin&lt;/code&gt;.
Quest&amp;rsquo;azione viene svolta da Composer con il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ composer require puli/composer-plugin:^1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tale plugin consente di generare atomaticamente la cosiddetta &lt;strong&gt;Puli Factory Class&lt;/strong&gt;: componente chiave da cui è possibile accedere a tutti i servizi offerti da Puli.&lt;/p&gt;

&lt;p&gt;A questo punto è possibile usare Puli nel modo seguente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require &#39;./vendor/autoload.php&#39;;

// La costante PULI_FACTORY_CLASS viene 
// definita al &amp;quot;composer install&amp;quot;
$factoryClass = PULI_FACTORY_CLASS;
$factory = new $factoryClass();

$puliRepository = $factory-&amp;gt;createRepository();
$puliDiscovery  = $factory-&amp;gt;createDiscovery($puliRepository);
$puliGenerator  = $factory-&amp;gt;createUrlGenerator($puliDiscovery);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;resource-repository:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Resource repository&lt;/h3&gt;

&lt;p&gt;Il resource repository fornisce un &lt;strong&gt;file system virtuale&lt;/strong&gt; per accedere alle risorse non PHP.
Ciò consente di localizzare facilmente i file senza conoscere la loro effettiva posizione.&lt;/p&gt;

&lt;h4 id=&#34;accesso-alle-risorse-con-composer:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Accesso alle risorse con Composer&lt;/h4&gt;

&lt;p&gt;Con Composer era frequente scrivere codice di questo tipo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$translationFileName = realpath(__DIR__ . &#39;/../vendor/acme/blog/resources/translation-it.xml&#39;);
$translationContent = file_get_contents($translationFileName);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tale operazione fa uso di dettagli implementativi: il layout delle directory fornito da Composer. La soluzione non è riusabile nè configurabile.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;puli-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;accesso-alle-risorse-con-puli:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Accesso alle risorse con Puli&lt;/h4&gt;

&lt;p&gt;Ciascun pacchetto compatibile con Puli può registrare diversi &lt;strong&gt;Path Mapping&lt;/strong&gt; utilizzati per tradurre i &lt;strong&gt;percorsi virtuali (Puli path)&lt;/strong&gt; in &lt;strong&gt;percorsi reali&lt;/strong&gt;.
Tali Path Mapping sono elencati nel &lt;code&gt;puli.json&lt;/code&gt; e normalmente sono modificati con il comando Puli CLI &lt;code&gt;map&lt;/code&gt;.
Ad esempio, il maintainer di acme/blog può eseguire questo comando per definire un nuovo mapping:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli map /acme/blog resources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tale operazione crea un&amp;rsquo;associazione tra il prefisso del path virtuale &lt;code&gt;/acme/blog&lt;/code&gt; e la directory &lt;code&gt;resources&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Un ipotetico utilizzatore del pacchetto acme/blog potrà quindi accedere alle risorse nel seguente modo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$puliPath = &#39;/acme/blog/translation-it.xml&#39;;
$translationContent = $puliRepository-&amp;gt;get($puliPath)-&amp;gt;getBody();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;È importante notare come i Path mapping siano definiti dal maintainer del pacchetto. Le altre componenti si limitano ad usarli per accedere alle risorse.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;override-puli-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;resource-overriding:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Resource overriding&lt;/h4&gt;

&lt;p&gt;È tuttavia presente un&amp;rsquo;eccezione a questa regola, tale concetto è alla base del &lt;strong&gt;Resource overriding&lt;/strong&gt;.
Immaginiamo di dover lavorare con due pacchetti: A e B.
Il pacchetto B è dipendente dal pacchetto A.
B, tuttavia, vuole personalizzare alcune risorse fornite da A.
Il maintainer di B può quindi rimpiazzare (&lt;em&gt;override&lt;/em&gt;) tali risorse aggiungengo nuovi Path Mapping.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;binding-type&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;discovery-service:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Discovery service&lt;/h3&gt;

&lt;p&gt;Il componente discovery semplifica l&amp;rsquo;interazione tra pacchetti: consente di condividere le risorse senza codice boilerplate attraverso l&amp;rsquo;uso di &lt;strong&gt;Binding Type&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Per il componente Discovery i pacchetti sono siddivisi in due categorie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Resource providers&lt;/strong&gt;: pacchetti che offrono risorse;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource consumers&lt;/strong&gt;: pacchetti che richiedono risorse.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I Binding Types sono definiti dai resource consumers. Ciascun Binding Type è idendificato da un nome (es. &lt;code&gt;acme/translator/messages&lt;/code&gt;).
I resource providers possono quindi associare una o più risorse a tali Binding Type.
&lt;strong&gt;L&amp;rsquo;associazione avviene legando un Puli Path ad un Binding Type&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;Binding Type&lt;/em&gt; sono quindi un&amp;rsquo;interfaccia per la condivisione di risorse.&lt;/p&gt;

&lt;h4 id=&#34;esempio:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Esempio&lt;/h4&gt;

&lt;p&gt;Esaminiamo, con un esempio, l&amp;rsquo;interazione tra due pacchetti: &lt;code&gt;acme/md2html&lt;/code&gt; e &lt;code&gt;acme/blog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;acme/md2html&lt;/code&gt; è un componente per tradurre contenuto Markdown verso pagine Html. Md2html è un sistema configurabile: la resa dell&amp;rsquo;output avviene attraverso template Twig modificabili.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;acme/blog&lt;/code&gt; fornisce tools per la gestione di articoli da blog. Siccome questi ultimi possono essere scritti in Markdown, &lt;code&gt;acme/blog&lt;/code&gt; fa uso di &lt;code&gt;acme/md2html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Il componente &lt;code&gt;acme/blog&lt;/code&gt; può personalizzare i template di Md2html in questo modo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$md2html = new Md2Html();
$md2html-&amp;gt;useHeaderTemplate(__DIR__ . &#39;/resources/templates/markdown-header.twig&#39;);

$htmlContent = $md2html-&amp;gt;translate(&#39;## markdown content&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Questo approccio ha due svantaggi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;acme/blog&lt;/code&gt; ha la diretta responsabilità di configurare correttamente Md2html utilizzando l&amp;rsquo;API fornita;&lt;/li&gt;
&lt;li&gt;Gli utenti di &lt;code&gt;acme/blog&lt;/code&gt; non possono modificare facilmente le personalizzazioni apportate a Md2html.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tali problemi possono essere risolti con Puli.&lt;/p&gt;

&lt;p&gt;Il mantainer di Md2html decide di rendere il suo pacchetto compatibile con Puli.&lt;/p&gt;

&lt;p&gt;Definisce quindi il Binding Type: &lt;code&gt;acme/md2html/header-template&lt;/code&gt; con il seguente comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli type --define acme/md2html/header-template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il maintainer di &lt;code&gt;acme/blog&lt;/code&gt; può quindi usare tale Binding Type nel seguente modo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli map /acme/blog resources
$ puli bind /acme/blog/templates/markdown-header.twig acme/md2html/header-template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Così &lt;code&gt;acme/md2html&lt;/code&gt; può leggere il nuovo template &lt;code&gt;markdown-header.twig&lt;/code&gt; in modo trasparente.&lt;/p&gt;

&lt;p&gt;Gli utilizzatori di acme/blog che desiderassero modificare tale template hanno due strategie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modificare l&amp;rsquo;associazione al Binding Type &lt;code&gt;acme/md2html/header-template&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sovrascrivere il Puli Path &lt;code&gt;/acme/blog/templates/markdown-header.twig&lt;/code&gt; con il meccanismo dell&amp;rsquo;overriding esaminato in precedenza.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;url-generation&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;public-resources-manager:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Public resources manager&lt;/h3&gt;

&lt;p&gt;Puli gestisce anche le risorse pubbliche, gli assets. In particolare, è in grado di generare path e URL da usare nei template o nei fogli di stile.&lt;/p&gt;

&lt;p&gt;Come primo passo, è necessario &lt;strong&gt;registrare i server web che servono tali risorse&lt;/strong&gt;.
È possibile aggiungere un nuovo server con il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli server --add localhost public_html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In questo esempio, &lt;code&gt;localhost&lt;/code&gt; è il nome del server, mentre &lt;code&gt;public_html&lt;/code&gt; è la sua &lt;em&gt;document root&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ora è possibile pubblicare delle risorse sul server &lt;code&gt;localhost&lt;/code&gt; con il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli publish /acme/blog/public localhost /blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ciò mappa il Puli Path &lt;code&gt;/acme/blog/public&lt;/code&gt; alla directory &lt;code&gt;blog&lt;/code&gt; della document root del server &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Puli ora ha tutte le informazioni per generare i persorsi delle risorse pubbliche:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$puliPath = &#39;/acme/blog/public/images/logo.png&#39;;
$url = $puliGenerator-&amp;gt;generateUrl($puliPath);
echo $url; // -&amp;gt; &amp;quot;/blog/images/logo.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;ultima operazione può essere eseguita in un template Twig con l&amp;rsquo;utilizzo dell&amp;rsquo;estensione &lt;code&gt;puli/twig-extension&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-twig&#34;&gt;&amp;lt;img src=&amp;quot;{{ resource_url(&#39;/acme/blog/public/images/logo.png&#39;) }}&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;assets-install&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;installazione-delle-risorse:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Installazione delle risorse&lt;/h4&gt;

&lt;p&gt;Puli può installare automaticamente le risorse pubbliche nella document root dei web server.&lt;/p&gt;

&lt;p&gt;Il comando è il seguente:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puli publish --install
Installing /acme/blog/public into public_html via symlink...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gli autori di Puli hanno annunciato che &lt;strong&gt;tale funzionalità sarà rimossa da Puli CLI in favore di estensioni Gulp o altri tool simili&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusioni:4e9f2019ea2ccadae6802f9a945a5d57&#34;&gt;Conclusioni&lt;/h3&gt;

&lt;p&gt;Abbiamo visto come Puli offra numerose funzionalità aggiuntive rispetto al solo utilizzo di Composer.
Puli è un progetto giovane, nel corso del tempo saranno aggiunte ulteriori funzionalità che lo renderanno ancora più potente.
Per approfondire, la documentazione ufficiale è molto chiara e completa ed è disponibile all&amp;rsquo;indirizzo: &lt;a href=&#34;http://docs.puli.io/&#34;&gt;http://docs.puli.io/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code reuse: a primer</title>
      <link>/blog/eng/code-reuse-a-primer/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/code-reuse-a-primer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://engineering.facile.it/optionals-in-objective-c/&#34;&gt;Last time&lt;/a&gt; we looked at a possible implementation for the &lt;a href=&#34;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID330&#34;&gt;Optional&lt;/a&gt; type in Objective-C; while the main point was to port to Objective-C a tool that&amp;rsquo;s frequently used in Swift, making use of the &lt;code&gt;Optional&lt;/code&gt; class can be considered an application of a much more general concept: &lt;strong&gt;code reuse&lt;/strong&gt;. In fact, &lt;code&gt;Optional&lt;/code&gt; is not tied to a particular domain, and can be reused over and over again in multiple projects: that&amp;rsquo;s what actually happens in Swift. But, to think about it, that&amp;rsquo;s what happens for a wide range of &lt;em&gt;classes&lt;/em&gt; in Objective-C, or &lt;em&gt;types&lt;/em&gt; in Swift: for example, &lt;code&gt;NSArray&lt;/code&gt; and &lt;code&gt;Array&lt;/code&gt; are both constructs that expose a certain interface, have a certain implementation, and are reused multiple times within methods and functions. And again, &lt;code&gt;NSArray&lt;/code&gt; and &lt;code&gt;Array&lt;/code&gt; are not tied to a particular domain, and have two important properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they are &lt;strong&gt;generic&lt;/strong&gt;, that is, they are not dependent on a particular subtype: an array of numbers and an array of strings will work in the exact same way when it comes to behavior that&amp;rsquo;s strictly associated to arrays, like counting elements, removing or adding an element, mapping, filtering, reducing et cetera;&lt;/li&gt;
&lt;li&gt;they are &lt;strong&gt;composable&lt;/strong&gt;, that is, they can be stacked on top of each other, and assembled with other more specific things, while keeping the same &lt;strong&gt;predictable behavior&lt;/strong&gt;: an array of &lt;em&gt;customers&lt;/em&gt;, each with their own array of &lt;em&gt;purchased products&lt;/em&gt;, can be mapped to an array of arrays of &lt;em&gt;products&lt;/em&gt;, that can be flattened into an array of &lt;em&gt;products&lt;/em&gt;, that can be reduced into a number representing the total cost;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Array&lt;/code&gt;, like &lt;code&gt;Optional&lt;/code&gt;, is a nice example of perfectly reusable code, but there are many more constructs that satisfy the aforementioned rules: &lt;em&gt;genericity&lt;/em&gt; and &lt;em&gt;composability&lt;/em&gt;. What doesn&amp;rsquo;t satisfy the rules is domain-specific objects, even when it seems like an object is sufficiently generic to be reused. A &lt;code&gt;Customer&lt;/code&gt; class, for example, could seem a good candidate, but trying to reuse the same class in two different projects will result in &lt;strong&gt;bad news&lt;/strong&gt; and headaches: either we&amp;rsquo;ll need to &lt;strong&gt;specialize&lt;/strong&gt; the class for each project, making the two diverge, or we&amp;rsquo;ll need to add levels of &lt;strong&gt;indirection&lt;/strong&gt;, because we&amp;rsquo;re forcing an object into a project it doesn&amp;rsquo;t belong to.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another thing to consider: if we really want to reuse code, we&amp;rsquo;ll also need to make &lt;strong&gt;design choices&lt;/strong&gt; that allow that code to be reused. I could actually forget about the &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Optional&lt;/code&gt; types, and create classes that never expose their underlying components; for example, I could create a class that represents a collection of optional objects, without ever exposing in the interface the fact that I&amp;rsquo;m using &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Optional&lt;/code&gt; for its implementation: it would result in some serious &lt;strong&gt;contortion&lt;/strong&gt; of methods&amp;rsquo; signature, but it&amp;rsquo;s possible. Also, is it a good idea? &lt;strong&gt;I don&amp;rsquo;t think so&lt;/strong&gt;. Creating a specific, incomposable class for every possible need will result in thousands of lines of what&amp;rsquo;s essentially &lt;strong&gt;boilerplate&lt;/strong&gt; code, complicated interfaces, and ridiculously long class names. If we aspire to code reuse, other than the two rules we just defined, we also need to pay attention to the way we architect our apps, and the main design principle to follow here is one of &lt;strong&gt;composition&lt;/strong&gt;, that can be summed up with the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Domain-specific constructs and behaviors should be realized by composing atomic and generic building blocks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This basically means that, instead of creating every time a specific implementation for our needs, we should try and satisfy that need by composing reusable, atomic objects. This looks complex, and at this point we should ask ourselves if code reuse is really something we want to pursue. My answer is a definitive &lt;strong&gt;yes&lt;/strong&gt;, for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with reusable components we can &lt;strong&gt;encapsulate&lt;/strong&gt; a particular behavior, and avoid rewriting essentially the same thing over and over again;&lt;/li&gt;
&lt;li&gt;we&amp;rsquo;ll have a &lt;strong&gt;guideline&lt;/strong&gt; for designing the architecture of our app, because we wont&amp;rsquo;t need to constantly define new interfaces for the same behaviors;&lt;/li&gt;
&lt;li&gt;a reusable component is very easy to &lt;strong&gt;test&lt;/strong&gt;, because it&amp;rsquo;s small and atomic, so by using it we will be more confident about the correctness of our code;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That, again, is what happens when we use types like &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Optional&lt;/code&gt;. As I said, there are many more of these building blocks, and actually the definition of their interfaces is a problem in itself, and has no obvious solution, but I think it&amp;rsquo;s a very interesting problem to tackle. By following the &lt;em&gt;generic&lt;/em&gt; and &lt;em&gt;composable&lt;/em&gt; rules we already have a guideline for designing them, but if we want to create our owns we should probably add one more rule:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a reusable object has to be &lt;strong&gt;simple&lt;/strong&gt;, that is, it should have a unique, linear, easily describable responsibility;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Optional&lt;/code&gt; follows this rule: it&amp;rsquo;s a generic container that represents an object that could be there, or not. &lt;code&gt;Array&lt;/code&gt; follows this rule: it represents and &lt;em&gt;ordered&lt;/em&gt; collection of objects, each one them accessible in constant time. Let&amp;rsquo;s try to apply the rule and create a new reusable object.&lt;/p&gt;

&lt;p&gt;Consider this real, kind of frequent use case: different objects must be notified when a certain object changes state or does something. A way to solve the problem is represented by the &lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;observer pattern&lt;/a&gt;, that is, make our objects implement an interface that exposes a &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish–subscribe_pattern&#34;&gt;publish-subscribe&lt;/a&gt; behavior. The point is, implementing an interface &lt;strong&gt;is not reusable&lt;/strong&gt;: each time we want to use this pattern we are going to &lt;strong&gt;rewrite&lt;/strong&gt; very similar code; instead, we want to encapsulate the behavior in a generic object, and reuse that object instead. What follows is a possible implementation, the one that I use in production, but there are many more: actually, &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming&#34;&gt;functional reactive programming&lt;/a&gt; has spawned from this very problem, that is, finding a generic, composable way of representing and manipulating observable streams, but in this case we&amp;rsquo;re going to create a much simpler &lt;strong&gt;Signal&lt;/strong&gt; object.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Signal&lt;/code&gt; class we want to implement is going to represent an &lt;em&gt;update&lt;/em&gt; for a certain object: that update can be everything, like a new value for a property, or an action that was taken. We&amp;rsquo;ll use the Swift language, which is also going to give us a lot of &lt;strong&gt;type-safety&lt;/strong&gt; for free. Here&amp;rsquo;s a summary of what we want for the &lt;code&gt;Signal&lt;/code&gt; class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it has to a have a &lt;strong&gt;parametric&lt;/strong&gt; subtype, that is, the type of the value that will be signaled in each update;&lt;/li&gt;
&lt;li&gt;it has to have an &lt;code&gt;observe&lt;/code&gt; method, that takes a closure representing an action that has to be taken every time an update is given;&lt;/li&gt;
&lt;li&gt;it has to have a &lt;code&gt;send&lt;/code&gt; method, which takes a new value of the underlying subtype;&lt;/li&gt;
&lt;li&gt;it has to have some simple methods for composition, that follow the usual naming conventions, like &lt;code&gt;map&lt;/code&gt;, for generating a new &lt;code&gt;Signal&lt;/code&gt; from an existing one by transforming the observed value, and &lt;code&gt;forwardTo&lt;/code&gt; to make another &lt;code&gt;Signal&lt;/code&gt; &lt;em&gt;trigger&lt;/em&gt; when a certain &lt;code&gt;Signal&lt;/code&gt; is producing a new value;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Semantically, we can describe a &lt;code&gt;Signal&lt;/code&gt; as a container for a value that&amp;rsquo;s going to be there at a certain point in time, and it&amp;rsquo;s going to update itself indefinitely.&lt;/p&gt;

&lt;p&gt;What follows is the entire implementation of the &lt;code&gt;Signal&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum SignalContinuation
{
  case Continue
  case Stop
}

public class Signal&amp;lt;Subtype&amp;gt;
{
  private var observers: [(Subtype -&amp;gt; SignalContinuation)] = []

  public init() {}

  public func observe (observeFunction: Subtype -&amp;gt; SignalContinuation)
  {
    observers.append(observeFunction)
  }

  public func send (value: Subtype)
  {
    var continuations: [(Subtype -&amp;gt; SignalContinuation)] = []
    while observers.count &amp;gt; 0
    {
      let observer = observers.removeFirst()
      let continuation = observer(value)
      switch continuation
      {
      case .Continue:
        continuations.append(observer)
      case .Stop: break
      }
    }
    observers = continuations
  }

  public func forwardTo (otherSignal: Signal&amp;lt;Subtype&amp;gt;) -&amp;gt; Signal
  {
    observe { action in
      otherSignal.send(action)
      return .Continue
    }
    return self
  }

  public func forwardTo &amp;lt;OtherSubtype&amp;gt; (
    otherSignal: Signal&amp;lt;OtherSubtype&amp;gt;,
    mappingFunction: Subtype -&amp;gt; OtherSubtype) -&amp;gt; Signal
  {
    observe { action in
      otherSignal.send(mappingFunction(action))
      return .Continue
    }
    return self
  }

  public func map &amp;lt;OtherSubtype&amp;gt; (transform: Subtype -&amp;gt; OtherSubtype) -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt;
  {
    let mappedSignal = Signal&amp;lt;OtherSubtype&amp;gt;()
    forwardTo(mappedSignal, mappingFunction: transform)
    return mappedSignal
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is really simple, but still, really powerful. A problem that&amp;rsquo;s frequently found when implementing the observer pattern is how to manage unsubscriptions; it&amp;rsquo;s a responsibility of the observer object to stop observing something, and in this &lt;code&gt;Signal&lt;/code&gt; implementation this is easily managed within the closure passed to the &lt;code&gt;observe&lt;/code&gt; method: the closure must return a &lt;code&gt;SignalContinuation&lt;/code&gt; value, that can be simply &lt;code&gt;.Continue&lt;/code&gt; (that is, keep observing updates) or &lt;code&gt;.Stop&lt;/code&gt;. Another problem is memory management: we need to make sure that when an observer&amp;rsquo;s memory is released, it will also stop observing, or a message will be sent to a dangling pointer, resulting in the app crashing. Swift&amp;rsquo;s &lt;code&gt;weak&lt;/code&gt; memory semantics actually makes this really easy to do: we&amp;rsquo;ll put a &lt;code&gt;guard&lt;/code&gt; clause at the beginning of the closure passed to the &lt;code&gt;observe&lt;/code&gt; method; if the object has become &lt;code&gt;nil&lt;/code&gt;, we&amp;rsquo;ll simply return &lt;code&gt;.Stop&lt;/code&gt;. The following example shows a simple use of the &lt;code&gt;Signal&lt;/code&gt; class, including the &lt;em&gt;stop-observing-on-nil&lt;/em&gt; mechanism:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Sender
{
  let signal = Signal&amp;lt;Int&amp;gt;()

  func sendNew(value: Int)
  {
    signal.send(value)
  }
}

class Receiver&amp;lt;Type: CustomStringConvertible&amp;gt;
{
  func startObserving(signal: Signal&amp;lt;Type&amp;gt;)
  {
    signal.observe { [weak self] value in
      guard let this = self else { return .Stop }
      this.printNewValue(value)
      return .Continue
    }
  }

  func printNewValue(value: Type)
  {
    print(value)
  }
}

let sender = Sender()
let receiver = Receiver&amp;lt;Int&amp;gt;()

receiver.startObserving(sender.signal)

sender.signal.send(3)
sender.signal.send(5)
sender.signal.send(10)
sender.signal.send(20)
/// this will print 3, 5, 10, 20 on console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example we can see an application of the concepts we talked about at the beginning of this article: instead of creating yet another interface for the same behavior, we are directly using and reusing the &lt;code&gt;Signal&lt;/code&gt; object. A more complex example would be the addition of something like a &lt;em&gt;resonator&lt;/em&gt;, that is, an object with a &lt;code&gt;Signal&lt;/code&gt; that resonates with another, like in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class DoublingResonator
{
  let signal = Signal&amp;lt;Int&amp;gt;()

  func resonateWith(otherSignal: Signal&amp;lt;Int&amp;gt;)
  {
    otherSignal.forwardTo(signal) { $0*2 }
  }
}

let resonator = DoublingResonator()
resonator.resonateWith(sender.signal)

let receiver = Receiver&amp;lt;Int&amp;gt;()

receiver.startObserving(resonator.signal)

sender.signal.send(3)
sender.signal.send(5)
sender.signal.send(10)
sender.signal.send(20)
/// this will print 6, 10, 20, 40 on console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many other options for composition of signals, but as long as we don&amp;rsquo;t need them, it&amp;rsquo;s better to keep the class &lt;strong&gt;simple&lt;/strong&gt;: then, gradually over time, we can start adding features to the class, and as long as they&amp;rsquo;re properly generic and tested, we will be able to use them in all of our projects.&lt;/p&gt;

&lt;p&gt;To conclude, finding the right abstractions for reusability is of course a problem, and the solution is not an easy one: plenty of academic papers address the problem in several ways (classic Charles W. Krueger&amp;rsquo;s paper &lt;a href=&#34;http://www.biglever.com/papers/Krueger_AcmReuseSurvey.pdf&#34;&gt;Software Reuse&lt;/a&gt; contains a good overview of the used techniques), and the reason why &lt;a href=&#34;https://en.wikipedia.org/wiki/Category_theory&#34;&gt;category theory&lt;/a&gt; has many applications in functional programming is because it offers an excellent set of abstractions for tackling several classes of problems. But still, I think the advantages of code reuse are many, and that achieving a compositional design through atomic, reusable components is &lt;strong&gt;a worthy goal&lt;/strong&gt; to pursue.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Codice riusabile: un primer</title>
      <link>/blog/ita/codice-riusabile-un-primer/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/codice-riusabile-un-primer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://engineering.facile.it/optionals-in-objective-c-ita/&#34;&gt;L&amp;rsquo;ultima volta&lt;/a&gt; abbiamo visto una possibile implementazione del tipo &lt;a href=&#34;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID330&#34;&gt;Optional&lt;/a&gt; in Objective-C; l&amp;rsquo;obiettivo primario dell&amp;rsquo;articolo era quello di importare in Objective-C uno strumento frequentemente utilizzato in Swift, ma usare una classe come &lt;code&gt;Optional&lt;/code&gt; può essere considerato un&amp;rsquo;applicazione di un concetto molto più generale: il &lt;strong&gt;riutilizzo del codice&lt;/strong&gt;. In effetti, &lt;code&gt;Optional&lt;/code&gt; non è legato a un particolare dominio, e può essere riutilizzato più e più volte in molti progetti: questo è esattamente ciò che accade in Swift. Ma a pensarci bene, questo è ciò che accade per una grande varietà di &lt;em&gt;classi&lt;/em&gt; in Objective-C (e di &lt;em&gt;tipi&lt;/em&gt; in Swift): ad esempio, &lt;code&gt;NSArray&lt;/code&gt; e &lt;code&gt;Array&lt;/code&gt; sono entrambi costrutti che espongono una specifica interfaccia, possiedono una certa implementazione, e vengono riutilizzati continuamente in metodi e funzioni. &lt;code&gt;NSArray&lt;/code&gt; e &lt;code&gt;Array&lt;/code&gt; non sono legati a un particolare dominio, e possiedono due importanti caratteristiche:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sono &lt;strong&gt;generici&lt;/strong&gt;, quindi non sono legati a un particolare sottotipo: un array di numeri e un array di stringhe funzioneranno esattamente allo stesso modo per quanto riguarda le funzioni strettamente associate agli array, come il conteggio degli elementi, rimuovere o aggiungere un elemento, mappare, filtrare, ridurre e così via;&lt;/li&gt;
&lt;li&gt;sono &lt;strong&gt;componibili&lt;/strong&gt;, quindi possono essere combinati tra loro e con altri oggetti più specifici, mantenendo comunque lo stesso &lt;strong&gt;comportamento predicibile&lt;/strong&gt;: un array di &lt;em&gt;clienti&lt;/em&gt;, ciascuno con il suo array &lt;em&gt;prodotti acquistati&lt;/em&gt;, può essere mappato in un array di array di &lt;em&gt;prodotti&lt;/em&gt;, che può essere appiattito in un array di &lt;em&gt;prodotti&lt;/em&gt;, che può essere ridotto a un numero che rappresenta il costo totale;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Array&lt;/code&gt;, come &lt;code&gt;Optional&lt;/code&gt;, è un ottimo esempio di codice perfettamente riutilizzabile, ma ci sono molti altri costrutti che soddisfano le regole di cui sopra, cioè &lt;em&gt;genericità&lt;/em&gt; e &lt;em&gt;componibilità&lt;/em&gt;. Gli oggetti specifici di dominio, invece, tipicamente non soddisfano queste regole, anche quando un oggetto sembra essere sufficientemente generico da poter essere riutilizzato. Una classe &lt;code&gt;Cliente&lt;/code&gt;, ad esempio, potrebbe sembrare un buon candidato, ma cercare di usare la stessa classe in due diversi progetti si rivelerebbe &lt;strong&gt;una pessima idea&lt;/strong&gt;: probabilmente saremo costretti a &lt;strong&gt;specializzare&lt;/strong&gt; la classe per ciascun progetto, portando a divergenza tra le implementazioni, o usare diversi livelli di &lt;strong&gt;indirezione&lt;/strong&gt;, perché stiamo inserendo a forza un oggetto in un dominio che non gli appartiene.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;è un&amp;rsquo;altra cosa da considerare: se davvero vogliamo riutilizzare del codice, dovremo anche stare attenti alle nostre &lt;strong&gt;scelte di design&lt;/strong&gt;, perché non tutti i design permettono l&amp;rsquo;utilizzo di codice generico. Potrei dimenticarmi dell&amp;rsquo;esistenza dei tipi &lt;code&gt;Optional&lt;/code&gt; e &lt;code&gt;Array&lt;/code&gt;, e creare classi che non espongono mai i loro componenti di base; ad esempio, potrei creare una classe che rappresenta una collezione di oggetti opzionali, senza mai esporre nell&amp;rsquo;interfaccia il fatto che sto utilizzando &lt;code&gt;Array&lt;/code&gt; e &lt;code&gt;Optional&lt;/code&gt; nell&amp;rsquo;implementazione: ne risulterebbe una certa &lt;strong&gt;complicazione&lt;/strong&gt; della firma dei metodi, ma è possibile. Ma, a pensarci bene, è una buona idea? &lt;strong&gt;Ne dubito&lt;/strong&gt;. Creare una nuova e specifica classe, non componibile, per ogni possibile necessità produrrà migliaia di linee di codice &lt;strong&gt;boilerplate&lt;/strong&gt;, interfacce complicate, e nomi di classi assurdamente lunghi. Se vogliamo scrivere codice riutilizzabile, oltre a seguire le due regole già viste, dobbiamo anche prestare attenzione al modo in cui architettiamo le nostre app, e il principio di design da seguire in questo caso è il principio di &lt;strong&gt;composizione&lt;/strong&gt;, che può essere sintetizzato con la seguente frase:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Costrutti e comportamenti specifici del dominio dovrebbero essere realizzati componendo blocchi costruttivi atomici e generici.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ciò significa sostanzialmente che, invece di creare di volta in volta una specifica implementazione per ovviare alle nostre necessità, dovremmo costruire le nuove funzionalità aggregando oggetti atomici già definiti. Sembra un&amp;rsquo;idea complessa, e forse dovremmo fermarci un attimo e chiederci se scrivere codice riutilizzabile sia davvero una buona idea. La mia risposta è un definitivo &lt;strong&gt;si&lt;/strong&gt;, per i seguenti motivi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;scrivendo componenti riutilizzabili possiamo &lt;strong&gt;incapsulare&lt;/strong&gt; uno specifico comportamento, evitando di dover riscrivere di continuo sostanzialmente lo stesso codice;&lt;/li&gt;
&lt;li&gt;potremmo disporre di &lt;strong&gt;linee guida&lt;/strong&gt; per progettare l&amp;rsquo;architettura delle nostre app, perché non avremmo bisogno di definire sempre nuove interfacce per rappresentare gli stessi comportamenti;&lt;/li&gt;
&lt;li&gt;un componente riutilizzabile è molto facile da &lt;strong&gt;testare&lt;/strong&gt;, perché piccolo e atomico, quindi usandolo potremmo confidare maggiormente sulla correttezza del nostro codice;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Questi stessi vantaggi si ottengono, infatti, proprio usando oggetti come &lt;code&gt;Array&lt;/code&gt; e &lt;code&gt;Optional&lt;/code&gt;. Ma, come ho detto, esistono molti altri componenti di questo tipo, e in effetti definire le loro interfacce è un problema a sé, di non facile soluzione: lo trovo tuttavia un problema molto interessante. Seguendo le regole &lt;em&gt;generico&lt;/em&gt; e &lt;em&gt;componibile&lt;/em&gt; abbiamo già una linea guida per definire nuovi componenti riusabili, ma per chiudere il cerchio abbiamo bisogno di una terza regola, non meno importante:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un oggetto riusabile deve essere &lt;strong&gt;semplice&lt;/strong&gt;, cioè deve avere una unica responsabilità, lineare e facile da descrivere;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Optional&lt;/code&gt; segue questa regola: è un contenitore generico per un oggetto che potrebbe esserci, oppure no. &lt;code&gt;Array&lt;/code&gt; segue questa regola: rappresenta una collezione ordinata di oggetti, ai quali posso accedere in un tempo costante. Proviamo a creare un nuovo componente riutilizzabile applicando le regole.&lt;/p&gt;

&lt;p&gt;Consideriamo questo caso d&amp;rsquo;uso reale (piuttosto frequente): diversi oggetti devono essere notificati quando un certo oggetto cambia il suo stato, o compie qualche azione. Un modo per risolvere il problema è rappresentato dall&amp;rsquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;observer pattern&lt;/a&gt;, che consiste nel far implementare ai nostri oggetti un&amp;rsquo;interfaccia che indica un comportamento di tipo &lt;a href=&#34;https://it.wikipedia.org/wiki/Publish/subscribe&#34;&gt;publish-subscribe&lt;/a&gt;. Tuttavia, far implementare agli oggetti un&amp;rsquo;interfaccia &lt;strong&gt;non è riusabile&lt;/strong&gt;: ogni volta in cui useremo questo pattern finiremo per &lt;strong&gt;riscrivere&lt;/strong&gt; codice molto simile. Vogliamo invece incapsulare il comportamento alla base di questo pattern in un oggetto generico, e riutilizzare quell&amp;rsquo;oggetto. Quanto segue è una possibile implementazione di tale oggetto, quella che personalmente uso in produzione, ma ce ne sono molte altre: in effetti, l&amp;rsquo;idea di trovare un modo generico e componibile di rappresentare e manipolare &lt;em&gt;flussi&lt;/em&gt; di segnali osservabili ha fatto nascere un intero paradigma di programmazione, chiamato &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming&#34;&gt;functional reactive programming&lt;/a&gt;. Ma nel nostro caso siamo interessati a creare un ben più semplice oggetto &lt;strong&gt;Signal&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La classe &lt;code&gt;Signal&lt;/code&gt; che vogliamo implementare deve rappresentare un &lt;em&gt;aggiornamento&lt;/em&gt; per un certo oggetto: l&amp;rsquo;aggiornamento può riguardare qualsiasi cosa, per esempio un nuovo valore per un attributo, o il fatto che una certa azione è stata compiuta. Useremo il linguaggio Swift, grazie al quale potremo godere anche di ottima sicurezza sulla manipolazione dei &lt;strong&gt;tipi&lt;/strong&gt; coinvolti. Ecco in sintesi cosa chiediamo alla classe &lt;code&gt;Signal&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deve avere un sottotipo &lt;strong&gt;parametrico&lt;/strong&gt;, che sarà appunto il tipo del valore segnalato ad ogni aggiornamento;&lt;/li&gt;
&lt;li&gt;deve dichiarare un metodo &lt;code&gt;observe&lt;/code&gt;, che prende in ingresso una &lt;em&gt;closure&lt;/em&gt; che rappresenta l&amp;rsquo;azione da compiere a ogni aggiornamento;&lt;/li&gt;
&lt;li&gt;deve dichiarare un metodo &lt;code&gt;send&lt;/code&gt;, che prende in ingresso un nuovo valore del tipo sottostante;&lt;/li&gt;
&lt;li&gt;deve dichiarare semplici metodi di composizione, che seguano le convenzioni classiche per i nomi, come &lt;code&gt;map&lt;/code&gt; per generare un nuovo &lt;code&gt;Signal&lt;/code&gt; da uno esistente trasformando il valore osservato, e &lt;code&gt;forwardTo&lt;/code&gt; per fare in modo che un altro &lt;code&gt;Signal&lt;/code&gt;, quando produce un nuovo valore, &lt;em&gt;attivi&lt;/em&gt; il segnale di partenza;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dal punto di vista semantico, possiamo descrivere un &lt;code&gt;Signal&lt;/code&gt; come un contenitore di un valore che esisterà a un certo punto nel futuro, e continuerà ad aggiornarsi indefinitamente.&lt;/p&gt;

&lt;p&gt;Segue l&amp;rsquo;intera implementazione della classe &lt;code&gt;Signal&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum SignalContinuation
{
  case Continue
  case Stop
}

public class Signal&amp;lt;Subtype&amp;gt;
{
  private var observers: [(Subtype -&amp;gt; SignalContinuation)] = []

  public init() {}

  public func observe (observeFunction: Subtype -&amp;gt; SignalContinuation)
  {
    observers.append(observeFunction)
  }

  public func send (value: Subtype)
  {
    var continuations: [(Subtype -&amp;gt; SignalContinuation)] = []
    while observers.count &amp;gt; 0
    {
      let observer = observers.removeFirst()
      let continuation = observer(value)
      switch continuation
      {
      case .Continue:
        continuations.append(observer)
      case .Stop: break
      }
    }
    observers = continuations
  }

  public func forwardTo (otherSignal: Signal&amp;lt;Subtype&amp;gt;) -&amp;gt; Signal
  {
    observe { action in
      otherSignal.send(action)
      return .Continue
    }
    return self
  }

  public func forwardTo &amp;lt;OtherSubtype&amp;gt; (
    otherSignal: Signal&amp;lt;OtherSubtype&amp;gt;,
    mappingFunction: Subtype -&amp;gt; OtherSubtype) -&amp;gt; Signal
  {
    observe { action in
      otherSignal.send(mappingFunction(action))
      return .Continue
    }
    return self
  }

  public func map &amp;lt;OtherSubtype&amp;gt; (transform: Subtype -&amp;gt; OtherSubtype) -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt;
  {
    let mappedSignal = Signal&amp;lt;OtherSubtype&amp;gt;()
    forwardTo(mappedSignal, mappingFunction: transform)
    return mappedSignal
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&amp;rsquo;implementazione è semplice, ma potente. Un problema affrontato di frequente quando si implementa l&amp;rsquo;&lt;em&gt;observer pattern&lt;/em&gt; è la gestione delle disiscrizioni; è responsabilità di chi osserva smettere di farlo, e in questa implementazione di &lt;code&gt;Signal&lt;/code&gt; la cosa è gestita direttamente nella &lt;em&gt;closure&lt;/em&gt; passata al metodo &lt;code&gt;observe&lt;/code&gt;: la &lt;em&gt;closure&lt;/em&gt; deve ritornare un valore di tipo &lt;code&gt;SignalContinuation&lt;/code&gt; che può essere appunto &lt;code&gt;.Continue&lt;/code&gt; o &lt;code&gt;.Stop&lt;/code&gt;. Un altro problema è la gestione della memoria: dobbiamo assicurarci che quando la memoria di un osservatore è rilasciata, questo debba anche smettere di osservare i segnali, o il messaggio verrà inviato a un puntatore non valido, con conseguente crash dell&amp;rsquo;app. Swift definisce alcuni descrittori di &lt;em&gt;memory ownership&lt;/em&gt;, e &lt;code&gt;weak&lt;/code&gt; fa al caso nostro: sarà sufficiente inserire una &lt;em&gt;guard clause&lt;/em&gt; all&amp;rsquo;inizio della &lt;em&gt;closure&lt;/em&gt; passata al metodo &lt;code&gt;observe&lt;/code&gt;; se l&amp;rsquo;oggetto è diventato &lt;code&gt;nil&lt;/code&gt;, la &lt;em&gt;closure&lt;/em&gt; ritornerà &lt;code&gt;.Stop&lt;/code&gt;. L&amp;rsquo;esempio seguente mostra un possibile utilizzo della classe &lt;code&gt;Signal&lt;/code&gt;, incluso il meccanismo appena descritto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Sender
{
  let signal = Signal&amp;lt;Int&amp;gt;()

  func sendNew(value: Int)
  {
    signal.send(value)
  }
}

class Receiver&amp;lt;Type: CustomStringConvertible&amp;gt;
{
  func startObserving(signal: Signal&amp;lt;Type&amp;gt;)
  {
    signal.observe { [weak self] value in
      guard let this = self else { return .Stop }
      this.printNewValue(value)
      return .Continue
    }
  }

  func printNewValue(value: Type)
  {
    print(value)
  }
}

let sender = Sender()
let receiver = Receiver&amp;lt;Int&amp;gt;()

receiver.startObserving(sender.signal)

sender.signal.send(3)
sender.signal.send(5)
sender.signal.send(10)
sender.signal.send(20)
/// this will print 3, 5, 10, 20 on console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nell&amp;rsquo;esempio possiamo osservare l&amp;rsquo;applicazione dei concetti introdotti all&amp;rsquo;inizio dell&amp;rsquo;articolo: invece di creare una nuova interfaccia per lo stesso comportamento, stiamo direttamente usando e riusando l&amp;rsquo;oggetto &lt;code&gt;Signal&lt;/code&gt;. Un esempio più complesso potrebbe essere rappresentato dall&amp;rsquo;aggiunta di un &lt;em&gt;resonator&lt;/em&gt;, cioè di un oggetto che possiede un segnale che risuona con un altro, quindi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class DoublingResonator
{
  let signal = Signal&amp;lt;Int&amp;gt;()

  func resonateWith(otherSignal: Signal&amp;lt;Int&amp;gt;)
  {
    otherSignal.forwardTo(signal) { $0*2 }
  }
}

let resonator = DoublingResonator()
resonator.resonateWith(sender.signal)

let receiver = Receiver&amp;lt;Int&amp;gt;()

receiver.startObserving(resonator.signal)

sender.signal.send(3)
sender.signal.send(5)
sender.signal.send(10)
sender.signal.send(20)
/// this will print 6, 10, 20, 40 on console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ci sono molte altre opzioni per comporre segnali, ma finché non ne avremo bisogno sarà meglio mantenere la classe &lt;strong&gt;semplice&lt;/strong&gt;: gradualmente nel tempo potremo aggiungere nuove funzionalità, e fintanto che queste saranno sufficientemente generiche e propriamente testate, saremo in grado di usarle in tutti i nostri progetti.&lt;/p&gt;

&lt;p&gt;Per concludere, definire le giuste astrazioni per conseguire riusabilità del codice non è un problema di semplice soluzione: molte pubblicazioni accademiche affrontano il problema (il classico articolo &lt;a href=&#34;http://www.biglever.com/papers/Krueger_AcmReuseSurvey.pdf&#34;&gt;Software Reuse&lt;/a&gt; di Charles W. Krueger fornisce una buona panoramica delle tecniche considerate), e il motivo per il quale la &lt;a href=&#34;https://it.wikipedia.org/wiki/Teoria_delle_categorie&#34;&gt;teoria delle categorie&lt;/a&gt; ha trovato molte applicazioni in programmazione funzionale è perché essa offre un eccellente insieme di astrazioni per affrontare diverse classi di problemi. Tuttavia sono convinto che i vantaggi legati allo scrivere codice riutilizzabile siano molti, e che poter basare un design sulla composizione di oggetti atomici sia &lt;strong&gt;un degno obiettivo&lt;/strong&gt; da perseguire.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facile.it devs @ Codemotion Milan 2015</title>
      <link>/blog/ita/facile-it-devs-codemotion-milan-2015/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/facile-it-devs-codemotion-milan-2015/</guid>
      <description>

&lt;p&gt;L&amp;rsquo;appuntamento con il &lt;a href=&#34;http://milan2015.codemotionworld.com&#34;&gt;Codemotion&lt;/a&gt; di quest&amp;rsquo;anno a Milano è stato particolarmente &lt;strong&gt;ricco&lt;/strong&gt;: tante tracce, moltissimi contenuti suddivisi tra talk tecnici, workshop e keynote, e alcuni ospiti illustri, tra cui il celebre &lt;a href=&#34;https://twitter.com/rasmus&#34;&gt;Rasmus Lerdorf&lt;/a&gt;, creatore del linguaggio &lt;strong&gt;PHP&lt;/strong&gt;. Come già fatto per il &lt;a href=&#34;http://engineering.facile.it/php-day-2015/&#34;&gt;PHP Day 2015&lt;/a&gt;, proponiamo le nostre impressioni sulla conferenza, citando i talk che ci hanno colpito maggiormente: la scelta dei talk è basata sul gusto personale dei vari membri della redazione di Facile.it Engineering, e le considerazioni esposte non vanno lette come recensioni, ma come riflessioni di vario genere sulle tematiche trattate, volte a stimolare nei lettori l&amp;rsquo;interesse a &lt;strong&gt;partecipare&lt;/strong&gt; a conferenze come il Codemotion.&lt;/p&gt;

&lt;p&gt;I talk sono in ordine cronologico.&lt;/p&gt;

&lt;h2 id=&#34;indice:fd439f196c3125ae563b4be0e3399006&#34;&gt;Indice&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#a-programmer-is&#34;&gt;A programmer is&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tdd-per-android&#34;&gt;TDD per Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#platformer-2d&#34;&gt;Platformer 2D: jumping from XNA to Unity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#grocery-site-in-react&#34;&gt;Building the world&amp;rsquo;s largest grocery site in React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#alert-overload&#34;&gt;Alert overload: How to adopt a microservices architecture without being overwhelmed with noise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#f-sharp-not-a-game&#34;&gt;F#, not a game!!!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#polymer-firebase&#34;&gt;Applicazioni Real-Time con Polymer e Firebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#offline-web-applications&#34;&gt;The new Mobile Challenge: Offline-Enablement for Web Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#feature-gluttony&#34;&gt;How to defeat feature gluttony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#webassembly&#34;&gt;Is WebAssembly the killer of JavaScript?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fatal-error&#34;&gt;The evolution in the design of FATAL ERROR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ancora-cpp&#34;&gt;Perché nel 2015 parliamo ancora di C++?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mobile-senza-unity&#34;&gt;Mobile senza Unity: il caso SBK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#php-7&#34;&gt;Speeding up the Web with PHP 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;a-programmer-is&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-programmer-is:fd439f196c3125ae563b4be0e3399006&#34;&gt;A Programmer is&amp;hellip;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Birgitta Boeckeler (&lt;a href=&#34;https://twitter.com/birgitta410&#34;&gt;@birgitta410&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 10:15 - 11:00 - Keynote Motivational (&lt;a href=&#34;http://www.slideshare.net/Codemotion/keynote-birgitta-boeckeler-track-motivational-a-programmer-is&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In uno dei due &lt;em&gt;keynote&lt;/em&gt; di apertura della prima giornata Birgitta Boeckeler ha affrontato la spinosa questione di &lt;a href=&#34;http://milan2015.codemotionworld.com/talk-detail/?detail=1980&amp;amp;sub=1&#34;&gt;&amp;ldquo;cosa è un programmatore&amp;rdquo;&lt;/a&gt;, mostrando che assunzioni e incomprensioni &lt;strong&gt;vecchie di 50 anni&lt;/strong&gt; ancora oggi influenzano la professione di programmatore e il modo in cui essa è considerata nel mondo, da addetti ai lavori e non.&lt;/p&gt;

&lt;p&gt;La &lt;a href=&#34;http://engineering.facile.it/programmazione-funzionale-perche-preoccuparsi/&#34;&gt;software crisis&lt;/a&gt; degli anni &amp;lsquo;60 aveva spinto aziende e università a elaborare metodi per distinguere i &amp;ldquo;buoni programmatori&amp;rdquo; sulla base di &lt;strong&gt;test attitudinali&lt;/strong&gt; come l&amp;rsquo;&lt;em&gt;IBM PAT&lt;/em&gt;, e influenti pubblicazioni accademiche come &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=1142628&#34;&gt;A vocational interest scale for computer programmers&lt;/a&gt;(1966) hanno contribuito alla definizione del programmatore tipo come una persona che &amp;ldquo;ama i puzzle&amp;rdquo;, &amp;ldquo;ama sperimentare e rischiare&amp;rdquo; e &amp;ldquo;odia la gente&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Purtroppo questo archetipo sopravvive ancora oggi, e forse la sua conseguenza più grave è stato lo sviluppo dell&amp;rsquo;idea che una delle professioni più belle e appaganti che esistano sia una &amp;ldquo;cosa da uomini&amp;rdquo;. Ma Birgitta nel suo &lt;em&gt;keynote&lt;/em&gt; cita anche &lt;a href=&#34;https://en.wikipedia.org/wiki/Jean_Bartik&#34;&gt;Jean Bartik&lt;/a&gt;, programmatrice di uno dei primi computer mai costruiti, l&amp;rsquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/ENIAC&#34;&gt;ENIAC&lt;/a&gt;, annunciato nel 1946: quando quella del &amp;ldquo;programmatore&amp;rdquo; non era ancora considerata una &lt;strong&gt;vera professione&lt;/strong&gt;, ma era vista come poco più di un lavoro di segreteria, gran parte dei programmatori negli USA era composta da donne. Ma in una recente &lt;a href=&#34;http://computerhistory.org/revolution/birth-of-the-computer/4/78/2258&#34;&gt;intervista&lt;/a&gt; la Bartik ha fatto notare che molte delle tecniche che usiamo e delle problematiche che ci troviamo ad affrontare in quanto programmatori erano &lt;strong&gt;già vere&lt;/strong&gt; negli anni &amp;lsquo;40: ad esempio, erano già evidenti i vantaggi del &lt;a href=&#34;https://en.wikipedia.org/wiki/Pair_programming&#34;&gt;pair programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nell&amp;rsquo;ultima parte del talk, Birgitta mostra come questa erronea visione della professione di programmatore porti ancora oggi molte donne, interessate a una carriera nello sviluppo software, a &lt;strong&gt;sentirsi escluse&lt;/strong&gt; dal club perché pensano che &lt;em&gt;veri&lt;/em&gt; programmatori si nasca, e che se la propria passione non sia in realtà una vera e propria &lt;em&gt;ossessione&lt;/em&gt; non si riuscirà mai ad eccellere: in realtà questo &lt;em&gt;status quo&lt;/em&gt; è, come si è visto, il prodotto di decenni di incompresioni e &lt;a href=&#34;http://www.npr.org/sections/money/2014/10/21/357629765/when-women-stopped-coding&#34;&gt;incredibili scivoloni&lt;/a&gt; nello sviluppo della professione di programmatore, e che è possibile aspirare ai massimi livelli di tale professione anche con un approccio più &lt;em&gt;bilanciato&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nel seguente tweet Birgitta cita libri, articoli e talk che hanno ispirato il suo &lt;em&gt;keynote&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;it&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Here is the material I used to put together my talk, &lt;a href=&#34;https://twitter.com/hashtag/Codemotion?src=hash&#34;&gt;#Codemotion&lt;/a&gt;. Read! Especially &amp;quot;Unlocking the Clubhouse&amp;quot; &lt;a href=&#34;https://t.co/ZKmdC1zvkf&#34;&gt;pic.twitter.com/ZKmdC1zvkf&lt;/a&gt;&lt;/p&gt;&amp;mdash; Birgitta B. (@birgitta410) &lt;a href=&#34;https://twitter.com/birgitta410/status/667646910161883136&#34;&gt;20 Novembre 2015&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;tdd-per-android&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;tdd-per-android:fd439f196c3125ae563b4be0e3399006&#34;&gt;TDD per Android&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Matteo Vaccari (&lt;a href=&#34;https://twitter.com/xpmatteo&#34;&gt;@xpmatteo&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 11:20 - 12:00 - Mobile track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/matteo-vaccari-tdd-per-android-codemotion-milan-2015&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Matteo Vaccari porta al codemotion un talk, dal titolo alla prima apparenza banale, ma indicato come livello &lt;em&gt;intermediate&lt;/em&gt;. Con TDD per Android infatti, &lt;em&gt;non vuole introdurre né al testing di applicazioni Android, né al TDD&lt;/em&gt;.
Piuttosto durante il talk vengono mostrati alcuni trucchi da lui scovati durante la sua esperienza per fare vero &lt;em&gt;Test Driven Development&lt;/em&gt;. Come primo passo consiglia e spiega come affiancare al TestCase ufficiale dell&amp;rsquo; SDK Android, un altro strumento &lt;strong&gt;semplificato ed ottimizzato&lt;/strong&gt; per una esecuzione veloce dei test unitari: esso, basandosi esclusivamente su JUnit, permette l’esecuzione veloce del “ciclo” Red, Green, Refactor, senza dover attendere i tempi del device virtuale (o meno). Matteo  quindi  passa a sviscerare alcuni &lt;em&gt;trick&lt;/em&gt; più ricercati e specifici, dimostrandoli con due app d&amp;rsquo;esempio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xpmatteo/unit-doctor&#34;&gt;esempio 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xpmatteo/fairy-fingers&#34;&gt;esempio 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;platformer-2d&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;platformer-2d-jumping-from-xna-to-unity:fd439f196c3125ae563b4be0e3399006&#34;&gt;Platformer 2D: jumping from XNA to Unity&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Paolo Cattaneo (&lt;a href=&#34;https://twitter.com/RavenTravelStd&#34;&gt;Raven Travel Studios&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 12:10 - 13:10 - Game Dev track&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il vecchio ambiente di sviluppo &lt;strong&gt;XNA&lt;/strong&gt; è ormai stato abbandonato da Microsoft da anni. Molti sviluppatori si sono quindi visti costretti a migrare su altri &lt;em&gt;tool&lt;/em&gt;, come per esempio Unity, che con XNA condivide l’adozione del linguaggio C# per gli script. Il passaggio da una programmazione vecchio stampo ad un ambiente visuale può creare qualche problema, soprattutto per via di alcuni ostacoli apparentemente invalicabili. È realmente necessario creare manualmente per ogni &lt;em&gt;asset&lt;/em&gt; di un progetto un GameObject in Unity? Diffidate delle guide ufficiali e sfruttate la generazione a &lt;em&gt;runtime&lt;/em&gt; di nuovi GameObject, associando uno script di creazione ad un solo GameObject padre!&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;grocery-site-in-react&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;building-the-world-s-largest-grocery-site-in-react:fd439f196c3125ae563b4be0e3399006&#34;&gt;Building the world&amp;rsquo;s largest grocery site in React&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Robbie McCorkell (&lt;a href=&#34;https://twitter.com/robbiemccorkell&#34;&gt;@robbiemccorkell&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 14:10 - 14:50 - Architecture track&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo speaker Robbie McCorkell, tech lead presso &lt;a href=&#34;http://red-badger.com&#34;&gt;Red Badger&lt;/a&gt;, società londinese che si occupa di web design per grossi partner internazionali, ci ha raccontato del viaggio che ha portato la sua azienda a creare il sito web di &lt;strong&gt;Tesco&lt;/strong&gt;, negozio online e distributore di prodotti di vario genere che opera principalmente in Europa, Nord America ed Estremo Oriente.
La tecnologia chiave impiegata per la realizzazione è stata &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;, libreria open source realizzata da Facebook che consente di creare la view di applicazioni web mediante &lt;strong&gt;componenti&lt;/strong&gt;.
Una delle esigenze alla base dello sviluppo di un sito per un marchio così famoso era la possibilità di fruire di esso sul &lt;strong&gt;maggior numero possibile di dispositivi e browser&lt;/strong&gt;, cercando di minimizzare il traffico. La soluzione adottata da Red Badger a questo problema è stata la realizzazione di un applicazione &lt;strong&gt;isomorfica&lt;/strong&gt;, cioè un sistema che condivide lo stesso codice sia lato server sia lato client ed è in grado di fornire al browser delle pagine &lt;strong&gt;già renderizzate&lt;/strong&gt; che soltanto opzionalmente possono sfruttare javascript per l&amp;rsquo;interazione con gli elementi grafici.
Anche le ottimizzazioni per il SEO traggono benefici da un sito costruito in questo modo in quanto tutte le pagine sono &lt;strong&gt;indicizzabili&lt;/strong&gt; dai motori di ricerca.
L&amp;rsquo;impiego di React è stata quasi una scelta obbligata, visto che esso mette a disposizione degli strumenti semplici ma potenti per raggiungere l&amp;rsquo;obiettivo che si sono posti.
Particolare attenzione durante il talk è stata posta sulla necessità di essere sempre al passo con le varie versioni di React e delle librerie ad esso collegate (soprattutto quelle ufficiali che Facebook stessa sviluppa ed utilizza per i suoi prodotti, tipo &lt;a href=&#34;https://facebook.github.io/relay/&#34;&gt;Relay&lt;/a&gt; e &lt;a href=&#34;https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html&#34;&gt;GraphQL&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;alert-overload&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;alert-overload-how-to-adopt-a-microservices-architecture-without-being-overwhelmed-with-noise:fd439f196c3125ae563b4be0e3399006&#34;&gt;Alert overload: How to adopt a microservices architecture without being overwhelmed with noise&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Sarah Wells (&lt;a href=&#34;https://twitter.com/sarahjwells&#34;&gt;@sarahjwells&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 14:10 - 14:50 - DevOps track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/sarah-wells-alert-overload-how-to-adopt-a-microservices-architecture-without-being-overwhelmed-with-noise&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il talk di Sarah, come promesso dal titolo, dava una serie di consigli su come mantenere in produzione un&amp;rsquo;architettura a microservizi senza venir &lt;strong&gt;sommersi dalle notifiche&lt;/strong&gt; di errore e dagli alert che ne derivano in caso di malfunzionamento:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pensare al monitoring dall&amp;rsquo;inizio, non è un attività che può essere posticipata;&lt;/li&gt;
&lt;li&gt;Gli alert devono presentarsi &lt;strong&gt;solo quando richiedono un&amp;rsquo;interazione&lt;/strong&gt; da parte di chi amministra il sistema;&lt;/li&gt;
&lt;li&gt;Costruire il proprio sistema &lt;strong&gt;pensando al supporto&lt;/strong&gt; (documentazione, test, etc..);&lt;/li&gt;
&lt;li&gt;Utilizzare il &lt;strong&gt;tool giusto per il lavoro che bisogna compiere&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Configurare un&amp;rsquo;alert fa parte del fix del problema! &lt;em&gt;(Code -&amp;gt; Test -&amp;gt; Alert)&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Spegnere tutte le mail di notifica dai sistemi di monitoring (ci sono tool migliori: IRC, Slack, etc..;&lt;/li&gt;
&lt;li&gt;Assicurarsi di sapere se uno degli alert ha smesso di funzionare;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oltre a questo Sarah ha anche parlato di alcuni &lt;strong&gt;tool&lt;/strong&gt; che utilizza più o meno frequentemente quali:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nagios.org&#34;&gt;Nagios&lt;/a&gt;: Monitoring e alerting&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.splunk.com&#34;&gt;Splunk&lt;/a&gt;: Log aggregation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://grafana.org&#34;&gt;Grafana&lt;/a&gt;: Per creare grafici e dashboard&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getsentry.com/welcome&#34;&gt;Sentry&lt;/a&gt;: Per aggregare gli errori&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dashing.io&#34;&gt;Dashing&lt;/a&gt;: Framework per creare dashboard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;f-sharp-not-a-game&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;f-not-a-game:fd439f196c3125ae563b4be0e3399006&#34;&gt;F#, not a game!!!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Andrea Magnorsky (&lt;a href=&#34;https://twitter.com/silverspoon&#34;&gt;@silverspoon&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 14:10 - 14:50 - Game Dev track (&lt;a href=&#34;http://www.roundcrisis.com/presentations/2015-codemotion-milan/#/&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Andrea Magnorsky di &lt;a href=&#34;http://www.digitalfurnacegames.com&#34;&gt;Digital Furnace Games&lt;/a&gt; ha parlato dell&amp;rsquo;uso dei pattern di &lt;strong&gt;programmazione funzionale&lt;/strong&gt; nello sviluppo del loro prossimo gioco &lt;em&gt;Onikira: Demon Killer&lt;/em&gt;, per il quale hanno adottato il linguaggio funzionale &lt;a href=&#34;https://en.wikipedia.org/wiki/F_Sharp_(programming_language&#34;&gt;F#&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Nel giustificare un approccio più funzionale allo sviluppo software in generale, Andrea parla del bellissimo articolo &lt;a href=&#34;http://shaffner.us/cs/papers/tarpit.pdf&#34;&gt;Out of the Tar Pit&lt;/a&gt;, di Ben Moseley e Peter Marks, già citato più volte su questo blog. L&amp;rsquo;eccessiva &lt;strong&gt;complessità&lt;/strong&gt; può rendere ingestibili i progetti software, compresi i giochi, e un linguaggio come F#, basato - come ogni linguaggio funzionale - sull&amp;rsquo;uso di strutture dati immbutabili, funzioni pure e &lt;em&gt;pattern matching&lt;/em&gt;, permette di gestire lo stato del sistema in maniera più semplice: F# risulta essere particolarmente potente per questo scopo, grazie agli &lt;a href=&#34;http://fsharpforfunandprofit.com/posts/convenience-active-patterns/&#34;&gt;&lt;em&gt;active patterns&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nel corso del talk Andrea ha parlato anche dell&amp;rsquo;ottima interoperabilità di F# con C#, e dell&amp;rsquo;uso di librerie di &lt;a href=&#34;https://en.wikipedia.org/wiki/Property_testing&#34;&gt;&lt;em&gt;property testing&lt;/em&gt;&lt;/a&gt; come &lt;a href=&#34;https://github.com/fscheck/FsCheck&#34;&gt;FsCheck&lt;/a&gt;, e &lt;em&gt;building tools&lt;/em&gt; come &lt;a href=&#34;http://fsharp.github.io/FAKE/&#34;&gt;FAKE&lt;/a&gt;, mostrando quindi un ecosistema ricco di strumenti di sviluppo, perfettamente adeguato alla realizzazione di software ad alto livello, e cosa c&amp;rsquo;è di più &lt;em&gt;elevato&lt;/em&gt; di un videogioco?&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;polymer-firebase&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;applicazioni-real-time-con-polymer-e-firebase:fd439f196c3125ae563b4be0e3399006&#34;&gt;Applicazioni Real-Time con Polymer e Firebase&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Michel Murabito (&lt;a href=&#34;https://twitter.com/michelmurabito&#34;&gt;@michelmurabito&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 15:00 - 16:00 - Server-Side track&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il talk, portato al Codemotion 2015 dal GDG (Google Developer Group) Community Manager Italia  Michel Murabito, tratta due tecnologie emergenti nel panorama realtime, javascript (e non solo). Michael, attraverso un live tutorial atto a creare una todolist ci ha introdotto a &lt;a href=&#34;https://www.polymer-project.org&#34;&gt;Polymer&lt;/a&gt;, accompagnandoci per mano alla scoperta dei &lt;a href=&#34;https://elements.polymer-project.org/&#34;&gt;suoi components&lt;/a&gt;, spiegando come utilizzarli per ottenere senza sforzo un’interfaccia veloce e pulita, come personalizzarli e come crearne di nuovi. Successivamente ha integrato nell’applicazione ottenuta la persistenza dei dati utilizzando &lt;a href=&#34;https://www.firebase.com/&#34;&gt;Firebase&lt;/a&gt;, un servizio API, basato su DB NO SQL, veloce e tecnologicamente avanzato, tra le cui peculiarità troviamo, ad esempio, la capacità di mantenere aggiornati in realtime i client connessi.
&lt;a href=&#34;https://t.co/kukysY8sgZ&#34;&gt;App dimostrativa&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;offline-web-applications&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-new-mobile-challenge-offline-enablement-for-web-applications:fd439f196c3125ae563b4be0e3399006&#34;&gt;The new Mobile Challenge: Offline-Enablement for Web Applications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Christiane Kurz (&lt;a href=&#34;https://twitter.com/learnui5&#34;&gt;@learnui5&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 15:00 - 16:00 - Mobile track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/christiane-kurz-the-new-mobile-challenge-offlineenablement-for-web-applications&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ottimo talk che introduce tecnologie ancora poco conosciute nello sviluppo web, e offre un’ottima soluzione per iniziare a pensare a come rendere disponibili i nostri siti web anche in modalità offline. Questo apre orizzonti a nuove soluzioni e a nuove sfide, come salvare i dati lato client (nel talk si parla di &lt;a href=&#34;https://developer.mozilla.org/it/docs/Web/API/IndexedDB_API&#34;&gt;indexedDB&lt;/a&gt;), e gestire conflitti tra i dati durante la sincronizzazione col server, cercando possibili strumenti di compatibilità con vecchi browser: in effetti l&amp;rsquo;unica piccola pecca della soluzione proposta è la ridotta compatibilità con i browser, soprattutto mobile, consultabile anche a questo &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API#Browser_compatibility&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Che altro dire… questo è un ottimo spunto per iniziare a pensare a qualche possibile implementazione in vista di un maggior supporto.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;feature-gluttony&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-defeat-feature-gluttony:fd439f196c3125ae563b4be0e3399006&#34;&gt;How to defeat feature gluttony&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Kasia Mrowca (&lt;a href=&#34;https://twitter.com/MrowcaKasia&#34;&gt;@MrowcaKasia&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 15:00 - 16:00 - Startup track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/kasia-mrowca-how-to-defeat-feature-gluttony-codemotion-milan-2015-55472938&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kasia Mrowca, ex programmatrice ed ora product owner, ci spiega le sue strategie per ovviare ai &lt;strong&gt;problemi di backlog&lt;/strong&gt;: desiderare buone e nuove feature è una cosa buona, ma esagerare è male.&lt;/p&gt;

&lt;p&gt;Per spiegarci tutto questo ci porta la sua esperienza, ad esempio come ha visto un backlog crescere così tanto da necessitare fino a 15 (!) persone per essere gestito; ovviamente questo è uno scenario catastrofico, i cui &lt;strong&gt;costi di organizzazione&lt;/strong&gt; e comunicazione necessari tra tutte queste persone porta ad un rallentamento irrisolvibile. Nel suo talk ci illustra alcune tecniche utili di visualizzazione e organizzazione delle feature richieste, per selezionarle e prioritizzarle con criterio.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;webassembly&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;is-webassembly-the-killer-of-javascript:fd439f196c3125ae563b4be0e3399006&#34;&gt;Is WebAssembly the killer of JavaScript?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Boyan Mihaylov (&lt;a href=&#34;https://twitter.com/bmihaylov&#34;&gt;@bmihaylov&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 1 - 17:10 - 17:50 - Languages track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/boyan-mihaylov-is-web-assembly-the-killer-of-javascript&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La presentazione è condotta da Boyan Mihaylov ed è un&amp;rsquo;introduzione al nuovo mondo di &lt;a href=&#34;https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6#.ee7hgs4df&#34;&gt;WebAssembly&lt;/a&gt;: una tecnologia in fase di sviluppo molto promettente nell&amp;rsquo;ambito internet.
JavaScript è il linguaggio del web. È nato nel 1995 per risolvere specifici problemi di computazione lato browser. Per molto tempo è stato un linguaggio &lt;strong&gt;senza specifiche&lt;/strong&gt;, con conseguenti difficoltà nello scrivere script compatibili cross-broswer. Con il passare del tempo, sono stati definiti degli standard (ECMA) che hanno parzialmente risolto il problema.
Nell&amp;rsquo;ultimo periodo JavaScript si è diffuso molto. Oggi lo si usa praticamente ovunque per sviluppare applicazioni client-side, server-side, mobile e desktop.&lt;/p&gt;

&lt;p&gt;Tuttavia molti problemi rimangono irrisolti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Il browser esegue solo codice scritto in JavaScript;&lt;/li&gt;
&lt;li&gt;JavaScript è spesso considerato verboso e carente di funzionalità rispetto ad altri linguaggi;&lt;/li&gt;
&lt;li&gt;Ad ogni esecuzione, la sintassi dei programmi JavaScript deve essere elaborata con un significativo impatto sulle performance;&lt;/li&gt;
&lt;li&gt;JavaScript è text-based, i file con codice sorgente possono raggiungere dimensioni notevoli per il trasferimento via rete;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Diverse strategie sono state attuate per aggirare questi problemi.
È frequente l&amp;rsquo;uso di tool di &lt;strong&gt;minificazione&lt;/strong&gt; del sorgente per ridurre le dimensioni.
Sono stati sviluppati differenti flavour di JavaScript per aumentare l&amp;rsquo;espressività del linguaggio (CoffeeScript, TypeScript, ecc.);
Sono stati creati dei compilatori per tradurre in JavaScript programmi scritti in altri linguaggi.&lt;/p&gt;

&lt;p&gt;Ciò tuttavia è molto inefficiente: perché non compilare il codice sorgente in una specie di bytecode? Sarebbe più performante in fase d&amp;rsquo;esecuzione e download.&lt;/p&gt;

&lt;p&gt;La risposta è WebAssembly o WASM.
WASM è un linguaggio binario destinato ad essere eseguito da una virtual machine integrata nei browser.
Teoricamente qualsiasi linguaggio dotato di compilatore WebAssembly può essere utilizzato per sviluppare applicazioni browser-based.&lt;/p&gt;

&lt;p&gt;WebAssembly beneficia di tutti i vantaggi di JS, compresa l&amp;rsquo;esecuzione in Sandbox.
WASM non sostituirà JavaScript in quanto quest&amp;rsquo;ultimo, tramite compilazione, genererà istruzioni WebAssembly.&lt;/p&gt;

&lt;p&gt;WebAssembly è ancora in fase di prototipazione, è una tecnologia molto interessante e si pensa che essa detterà le basi per sviluppare virtual machine d&amp;rsquo;ultima generazione.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;fatal-error&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-evolution-in-the-design-of-fatal-error:fd439f196c3125ae563b4be0e3399006&#34;&gt;The evolution in the design of FATAL ERROR&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ciro Continisio (&lt;a href=&#34;https://twitter.com/ccontinisio&#34;&gt;@ccontinisio&lt;/a&gt;), Ennio Pirolo (&lt;a href=&#34;https://twitter.com/santennio&#34;&gt;@SantEnnio&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 2 - 11:20 - 12:00 - Game Dev track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/ciro-continisio-ennio-pirolo-the-evolution-in-the-design-of-fatal-error&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A volte lo sviluppo di un videogioco può protrarsi per mesi, anche anni. È quello che è accaduto con FATAL ERROR, titolo nato dalle menti di Ciro Continisio ed Ennio Pirolo ben 2 anni fa in occasione della GamesWeek di Milano. Nel corso degli anni il processo di sviluppo iterativo tipico dei videogiochi ha portato a vari miglioramenti tecnici, rimanendo però fedeli alle prime linee guida di game design. L’IA nel gioco ha adottato un interessante meccanismo di comportamenti che, una volta associati ad un bot governato dalla CPU, permettono a seconda dell’azione su schermo di attivare un determinato comportamento. Un approccio applicabile anche al di fuori dello sviluppo di videogiochi.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;ancora-cpp&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;perché-nel-2015-parliamo-ancora-di-c:fd439f196c3125ae563b4be0e3399006&#34;&gt;Perché nel 2015 parliamo ancora di C++?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Marco Arena (&lt;a href=&#34;https://twitter.com/italiancpp&#34;&gt;@italiancpp&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 2 - 12:10 - 13:10 - Languages track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/marco-arena-perch-nel-2015-parliamo-ancora-di-c-codemotion-milan-2015&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La domanda è lecita, a 30 anni dalla presentazione del linguaggio, ma Marco Arena ha tutte le risposte nonostante quel giorno non fosse ancora nato. Il C++ è &lt;em&gt;molto popolare&lt;/em&gt;: diversi software di uso quotidiano, tra cui probabilmente il browser che state usando, sono scritti in questo linguaggio. È inoltre &lt;em&gt;compatibile con il C&lt;/em&gt; e, più in generale, si &lt;em&gt;preoccupa del passato&lt;/em&gt;: segue uno standard ISO, la retrocompatibiltà è sempre garantita e i miglioramenti sono ottenuti aggiungendo nuovi costrutti. Non è &lt;em&gt;garbage collected&lt;/em&gt;: il lifetime di oggetti e risorse è &lt;em&gt;scoped&lt;/em&gt;, garantendo in questo modo un comportamento deterministico ed evitando complicazioni in sistemi &lt;em&gt;latency-critical&lt;/em&gt;. È &lt;em&gt;indipendente dal paradigma&lt;/em&gt;, perché ne comprende diversi, ed è adatto al &lt;em&gt;system programming&lt;/em&gt; grazie al suo accesso a basso livello alla memoria. Sta inoltre &lt;em&gt;crescendo in fretta&lt;/em&gt;: dopo oltre 20 anni in cui è rimasto sostanzialmente immutato, ha recentemente presentato diverse innovazioni e molte altre sono state annunciate per i prossimi anni. Da ultimo, è immerso in un &lt;em&gt;ecosistema straordinario&lt;/em&gt;, composto da industrie, mondo accademico e user groups.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;mobile-senza-unity&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mobile-senza-unity-il-caso-sbk:fd439f196c3125ae563b4be0e3399006&#34;&gt;Mobile senza Unity: il caso SBK&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Giuseppe Navarria (&lt;a href=&#34;https://twitter.com/waveringradiant&#34;&gt;@WaveringRadiant&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 2 - 12:10 - 13:10 - Game Dev track (&lt;a href=&#34;http://www.slideshare.net/Codemotion/giuseppe-navarria-mobile-senza-unity-il-caso-sbk&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con tool in circolazione come Unity ed Unreal Engine quasi ci si scorda di come vengono costruiti i motori grafici dei videogiochi. Giuseppe Navarria ha spiegato alcune caratteristiche del motore realizzato in C++ per le versioni mobile del gioco SBK, evidenziando alcuni pregi acquisiti grazie proprio al “fai da te”. L’utilizzo di lightmap generate da immagini HDR, gli effetti di rifrazione della luce con pixel shader e spheremaps, nonché ombre precalcolate con effetto blob shadow, hanno permesso di raggiungere livelli qualitativi di un certo spessore anche su dispositivi un po’ datati. Interessante la divisione in moduli del motore che seleziona il miglior set di componenti per il dispositivo sul quale opera.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;php-7&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;speeding-up-the-web-with-php-7:fd439f196c3125ae563b4be0e3399006&#34;&gt;Speeding up the Web with PHP 7&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rasmus Lerdorf (&lt;a href=&#34;https://twitter.com/rasmus&#34;&gt;@rasmus&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;day 2 - 14:10 - 14:50 - Languages track&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Da questo talk di &lt;strong&gt;Rasmus Lerdorf&lt;/strong&gt; (creatore del linguaggio PHP) ci si sarebbe potuto aspettare una semplice lista delle nuove feature di PHP 7 (di cui abbiamo già parlato in &lt;a href=&#34;/php-7-overview&#34;&gt;questo post&lt;/a&gt;, in realtà però il relatore si è spinto molto più in là mostrando alcuni &lt;strong&gt;benchmark di comparazione delle performance&lt;/strong&gt; tra PHP 7, PHP 5 e HHVM 3.10, nei quali PHP 7 stracciava PHP 5 e teneva egregiamente il passo con HHVM 3.10, per poi dare una semplice ma approfondita overview rispetto ad alcune parti del lavoro fatto per ottenere quello che oggi è PHP 7 in termini di &lt;strong&gt;performance e feature&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Rasmus ha parlato del lungo lavoro di micro ottimizzazioni e di &lt;strong&gt;refactoring&lt;/strong&gt; sulla codebase, soprattutto per quanto riguarda l&amp;rsquo;utilizzo della memoria da parte di HashTable e Zval che ora, nella maggior parte dei casi, è stato più che dimezzato.&lt;/p&gt;

&lt;p&gt;Preziose sono state anche le informazioni riguardanti l&amp;rsquo;&lt;a href=&#34;https://wiki.php.net/rfc/abstract_syntax_tree&#34;&gt;AST&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34;&gt;Abstract Syntax Tree&lt;/a&gt;) che è stata introdotta in questa nuova versione e che permette non solo di ragionare in termini più strutturati quando si effettuano modifiche agli internals del linguaggio ma che sarà causa della nascita, secondo Rasmus, di una serie infinita di tool come: analizzatori statici, compilatori, parser in userland etc..&lt;/p&gt;

&lt;p&gt;Ultime ma non meno importanti sono le informazioni date riguardo la &lt;strong&gt;FDO&lt;/strong&gt; di gcc (&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Optimize-Options.html&#34;&gt;Feedback Directed Optimization&lt;/a&gt;) con la quale, per chi compila PHP da sé, si possono ottenere degli ulteriori &lt;strong&gt;incrementi di performance facendo training&lt;/strong&gt; sulla propria codebase in fase di compilazione della SAPI.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#FacileHack 2015</title>
      <link>/blog/ita/facilehack-2015/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/facilehack-2015/</guid>
      <description>&lt;p&gt;Sono stati due giorni ricchi di emozioni quelli trascorsi con i partecipanti di #FacileHack, il primo hackathon organizzato da Facile.it.
Abbiamo visto impegno nella competizione, talenti diversi e complementari tra loro, passione per la tecnologia, serietà e molto caffè&amp;hellip; momenti che vogliamo rivivere insieme a voi con questo video.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/7B8NtkvNXlQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oWWJX5WUZ8A&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Grazie a tutti!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Optionals in Objective-C</title>
      <link>/blog/eng/optionals-in-objective-c/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/optionals-in-objective-c/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Objective-C is not going anywhere&lt;/strong&gt;. While Swift is most certainly the new hotness for iOS and OS X programming, there are some concrete reasons to stick with Objective-C for a while:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Objective-C based projects still need maintenance and new features to be added, and mixing Swift and Objective-C, while possible, &lt;strong&gt;can be tricky&lt;/strong&gt; and possibly unconvenient, due to the dynamic nature of the latter;&lt;/li&gt;
&lt;li&gt;Swift is changing rapidly, has still some bugs and &lt;strong&gt;performance problems&lt;/strong&gt;, and still lacks some features that professionals need, while Objective-C is mature and has a strong community;&lt;/li&gt;
&lt;li&gt;some may &lt;strong&gt;prefer a more dynamic language&lt;/strong&gt;, and Objective-C support from Apple &lt;a href=&#34;https://netguru.co/blog/objective-c-generics&#34;&gt;is still strong&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, while I naturally lean towards a more static, &lt;a href=&#34;http://engineering.facile.it/type-first-development-in-swift/&#34;&gt;type-first&lt;/a&gt; approach to programming, from time to time I like to work in a more dynamic environment, so both for preference and for business needs, I still didn&amp;rsquo;t put Objective-C completely away. But just after a few weeks of Swift I found myself missing one of the most powerful features of the language: &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID330&#34;&gt;Optionals&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Table of contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-optional-type&#34;&gt;The &lt;code&gt;Optional&lt;/code&gt; type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optionals-in-swift&#34;&gt;Optionals in Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#back-to-objective-c&#34;&gt;Back to Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-a-json-parser&#34;&gt;Example: a JSON parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;the-optional-type&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-optional-type:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;The &lt;code&gt;Optional&lt;/code&gt; type&lt;/h2&gt;

&lt;p&gt;A Optional is a &lt;em&gt;generic&lt;/em&gt; type, that is, a type that&amp;rsquo;s dependent  (actually, &lt;em&gt;parametric&lt;/em&gt;) on another &lt;strong&gt;subtype&lt;/strong&gt;, so whe can have, for example, a &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt; or a &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt;: thanks to some syntactic sugar, those types are written in Swift as &lt;code&gt;String?&lt;/code&gt; and &lt;code&gt;Int?&lt;/code&gt;. So, what is an &lt;code&gt;Optional&lt;/code&gt;? It&amp;rsquo;s a representation   of a value that could be there, and be of a particular subtype, or could not, therefore being &lt;strong&gt;nil&lt;/strong&gt;: by &lt;em&gt;wrapping&lt;/em&gt; the subtype into an &lt;code&gt;Optional&lt;/code&gt;, the Swift compiler knows that the value could be nil, and complain in the cases where we are using an &lt;code&gt;Optional&lt;/code&gt; where a value that&amp;rsquo;s &lt;strong&gt;never&lt;/strong&gt; nil is expected. By itself, this simple feature grants us a lot of type-safety for free: for example, in Swift we can&amp;rsquo;t initialize a non-optional value with nil, and considering that, for the Swift&amp;rsquo;s compiler, a value cannot be used before being initialized, by saying that a value&amp;rsquo;s type is &lt;code&gt;String&lt;/code&gt; the compiler will assure us that the value will &lt;strong&gt;always&lt;/strong&gt; be a string, no matter what.&lt;/p&gt;

&lt;p&gt;In contrast, Objective-C objects can always be nil, and if we expect something not to be nil, we are forced to check for the actual existence of everything at any time. But actually, that&amp;rsquo;s not necessarily a big deal: it&amp;rsquo;s a classic &lt;strong&gt;tradeoff&lt;/strong&gt; of dynamic languages, and it can be even considered a &lt;em&gt;feature&lt;/em&gt; by some people: in using a dynamically typed language, we are always expected to design our APIs with &lt;a href=&#34;https://en.wikipedia.org/wiki/Late_binding&#34;&gt;late binding&lt;/a&gt; in mind. Also, the new &lt;a href=&#34;https://developer.apple.com/swift/blog/?id=25&#34;&gt;Objective-C nullability specifiers&lt;/a&gt; will help the compiler trigger warnings when nil is passed to a property or method parameter when &lt;code&gt;nonnull&lt;/code&gt; is expected. But the problem is still there: we need a lot of boilerplate to always check for &lt;em&gt;nullness&lt;/em&gt;, and that can produce error-prone, less readable code. The need for this boilerplate is missing in Swift, and that&amp;rsquo;s thanks to the nature of the &lt;code&gt;Optional&lt;/code&gt; type: in fact, it works in the same way as the &lt;code&gt;Maybe&lt;/code&gt; type in Haskell, or the &lt;code&gt;Option&lt;/code&gt; type in Scala, that is, &lt;code&gt;Optional&lt;/code&gt; is actually a &lt;strong&gt;monad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The concept of &lt;em&gt;monad&lt;/em&gt; is inherited by functional programming from &lt;a href=&#34;https://en.wikipedia.org/wiki/Category_theory&#34;&gt;category theory&lt;/a&gt; and there are plenty of &lt;a href=&#34;https://wiki.haskell.org/Monad&#34;&gt;introductions&lt;/a&gt; &lt;a href=&#34;https://www.haskell.org/tutorial/monads.html&#34;&gt;about it&lt;/a&gt; &lt;a href=&#34;http://learnyouahaskell.com/a-fistful-of-monads&#34;&gt;on the web&lt;/a&gt;, so I&amp;rsquo;m not going into the specifics here: let me just say that a monad is a &lt;em&gt;computational context&lt;/em&gt;, that is, a specification for the way some &lt;em&gt;computations&lt;/em&gt; need to be resolved. Applying a certain transformation to a monad will result in another instance of the same monad, different from the first, based on the specific kind of monad. For example, applying some transformation to an &lt;code&gt;Optional&lt;/code&gt; monad will result in applying the same transformation to the contained value if it&amp;rsquo;s there, or absolutely nothing if the &lt;code&gt;Optional&lt;/code&gt; contains nil: in both cases, the transformation&amp;rsquo;s output will be another &lt;code&gt;Optional&lt;/code&gt;, possibly of different subtype.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;optionals-in-swift&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;optionals-in-swift:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Optionals in Swift&lt;/h2&gt;

&lt;p&gt;Consider the following Swift code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalIntFrom(value: Int, ifTrue: Bool) -&amp;gt; Int?
{
  return ifTrue ? value : nil
}

let optionalInt = makeOptionalIntFrom(3, ifTrue: true)
print(optionalInt.dynamicType) /// prints &#39;Optional&amp;lt;Int&amp;gt;&#39;

let toString: Int -&amp;gt; String = { &amp;quot;\($0)&amp;quot; }

let optionalString = optionalInt.map(toString)
print(optionalString.dynamicType) /// prints &#39;Optional&amp;lt;String&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example, &lt;code&gt;optionalInt&lt;/code&gt; is a &lt;code&gt;Int&lt;/code&gt; wrapped into an &lt;code&gt;Optional&lt;/code&gt;, thus having type &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; (Swift&amp;rsquo;s syntactic sugar allows us to write &lt;code&gt;Int?&lt;/code&gt;), and by applying the &lt;code&gt;toString&lt;/code&gt; function to that &lt;code&gt;Optional&lt;/code&gt; we get an instance of &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt;. We can see that, to actually apply the &lt;code&gt;toString&lt;/code&gt; function to the &lt;code&gt;Optional&lt;/code&gt;, we passed the function to the &lt;code&gt;map&lt;/code&gt; method: this operation is usually called &lt;a href=&#34;https://wiki.haskell.org/Lifting&#34;&gt;&lt;em&gt;lifting&lt;/em&gt; a function&lt;/a&gt;, because the function &lt;code&gt;toString&lt;/code&gt;, of type &lt;code&gt;Int -&amp;gt; String&lt;/code&gt;, is &lt;em&gt;lifted&lt;/em&gt; into the type &lt;code&gt;Optional&amp;lt;Int&amp;gt; -&amp;gt; Optional&amp;lt;String&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As we can see, no conditional statements were used in manipulating the optional integer: by &lt;em&gt;lifting&lt;/em&gt; our transformations with the &lt;code&gt;map&lt;/code&gt; method, we can apply them directly to the &lt;code&gt;Optional&lt;/code&gt; instances, and we can also chain them pretty easily, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalIntFrom(value: Int, ifTrue: Bool) -&amp;gt; Int?
{
  return ifTrue ? value : nil
}

let optionalInt = makeOptionalIntFrom(3, ifTrue: true)
print(optionalInt.dynamicType) /// prints &#39;Optional&amp;lt;Int&amp;gt;&#39;

let doubled: Int -&amp;gt; Int = { $0*2 }

let toString: Int -&amp;gt; String = { &amp;quot;\($0)&amp;quot; }

let optionalDoubledString = optionalInt.map(doubled).map(toString)
print(optionalDoubledString.dynamicType) /// prints &#39;Optional&amp;lt;String&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to express the opposite operation, we run into a problem: transforming a &lt;code&gt;String&lt;/code&gt; into a &lt;code&gt;Int&lt;/code&gt; is not always considered possible by Swift (for example, no numbers in the string), therefore the operation is optional. In fact:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalStringFrom(value: String, ifTrue: Bool) -&amp;gt; String?
{
  return ifTrue ? value : nil
}

let toInt: String -&amp;gt; Int? = { Int($0) }

let anotherOptionalString = makeOptionalStringFrom(&amp;quot;3&amp;quot;, ifTrue: true)

let anotherOptionalInt = anotherOptionalString.map(toInt).map(doubled)
/// this won&#39;t compile!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem here is that &lt;code&gt;toInt&lt;/code&gt; is a function of type &lt;code&gt;String -&amp;gt; Optional&amp;lt;Int&amp;gt;&lt;/code&gt;, and lifting the function to the &lt;code&gt;Optional&lt;/code&gt; &amp;ldquo;world&amp;rdquo; will turn its type into something like &lt;code&gt;Optional&amp;lt;String&amp;gt; -&amp;gt; Optional&amp;lt;Optional&amp;lt;Int&amp;gt;&amp;gt;&lt;/code&gt;, that is, an optional integer wrapped into another optional: in &lt;em&gt;monadic&lt;/em&gt; terminology, to lift functions that transforms the wrapped type into another instance of the same monad, we need a &lt;code&gt;flatMap&lt;/code&gt; operation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let anotherOptionalInt = anotherOptionalString.flatMap(toInt).map(doubled)
/// this is fine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, for the &lt;code&gt;Optional&lt;/code&gt; type, &lt;code&gt;flatMap&lt;/code&gt; works like &lt;code&gt;map&lt;/code&gt; but for functions that transform the wrapped type into another &lt;code&gt;Optional&lt;/code&gt;. In reading the code, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; can be basically treated as the same: they both indicate a transformation, and the fact that computations passed to &lt;code&gt;flatMap&lt;/code&gt; are of slightly different type can be considered an implementation detail.&lt;/p&gt;

&lt;p&gt;Actually, Swift treats these types &lt;strong&gt;a little differently&lt;/strong&gt; than in other languages: for example, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; are usually &lt;em&gt;free functions&lt;/em&gt; in most &lt;em&gt;functional&lt;/em&gt; languages, while in Swift they are &lt;strong&gt;methods&lt;/strong&gt;. In general, Swift encourages the use of methods and &lt;strong&gt;method chaining&lt;/strong&gt; instead of free functions composed with special operators: it&amp;rsquo;s mostly a matter of philosophy, but in bringing these features back to Objective-C, the method-based approach is going to be really useful because there&amp;rsquo;s no easy syntax for free functions in the language, while methods have the signature clean and readable syntax that we&amp;rsquo;re used to.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;back-to-objective-c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;back-to-objective-c:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Back to Objective-C&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s implement the &lt;code&gt;Optional&lt;/code&gt; class in Objective-C:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

#import &amp;lt;Foundation/Foundation.h&amp;gt;

NS_ASSUME_NONNULL_BEGIN

@interface Optional : NSObject

+ (Optional*)with:(id _Nullable)value;

- (Optional*)map:(id(^)(id))mapBlock;
- (Optional*)flatMap:(Optional*(^)(id))flatMapBlock;

@end

NS_ASSUME_NONNULL_END
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

#import &amp;quot;Optional.h&amp;quot;

@interface Optional ()

@property (strong, nonatomic, nullable) id value;

@end

@implementation Optional

+ (Optional*)with:(id _Nullable)value
{
  Optional* optional = [Optional new];
  optional.value = value;
  return optional;
}

- (Optional *)map:(id  _Nonnull (^)(id _Nonnull))mapBlock
{
  if (self.value != nil)
  {
    return [Optional with:mapBlock(self.value)];
  }
  return self;
}

- (Optional *)flatMap:(Optional* _Nonnull (^)(id _Nonnull))flatMapBlock
{
  if (self.value != nil)
  {
    return flatMapBlock(self.value);
  }
  return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see, the &lt;code&gt;with:&lt;/code&gt; class method will create an &lt;code&gt;Optional&lt;/code&gt; object by wrapping some other object, of unspecified class: because there&amp;rsquo;s no true &lt;em&gt;generics&lt;/em&gt; in Objective-C, we won&amp;rsquo;t be able to make our Optional type as type-safe as in Swift, but as we&amp;rsquo;ll see, it won&amp;rsquo;t be a big deal and we&amp;rsquo;ll still be able to get some really &lt;strong&gt;powerful features&lt;/strong&gt;. The &lt;code&gt;map:&lt;/code&gt; method will check if the wrapped object is not nil, and apply the transformation expressed by the &lt;code&gt;mapBlock&lt;/code&gt; block only if the object is actually there: in this case, Objective-C nullability specifiers really help us in designing our APIs, because we clearly specified that &lt;code&gt;mapBlock&lt;/code&gt; will accept and will return non-nil objects only. The &lt;code&gt;flatMapBlock&lt;/code&gt; block will return instead another &lt;code&gt;Optional&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can test this by essentially recreating the same Swift example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Test.h

#import &amp;lt;Foundation/Foundation.h&amp;gt;

@interface Test : NSObject

+ (void)testOptional;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Test.m

#import &amp;quot;Test.h&amp;quot;
#import &amp;quot;Optional.h&amp;quot;

@implementation Test

+ (void)testOptional
{
  Optional* optionalInt = [self makeOptionalIntFrom:@3 ifTrue:YES];
  Optional* optionalDoubledString = [[optionalInt
                                      map:[self doubled]]
                                     map:[self toString]];
  NSLog(@&amp;quot;%@&amp;quot;, optionalDoubledString);
}

+ (Optional*)makeOptionalIntFrom:(NSNumber*)fromInt ifTrue:(BOOL)ifTrue
{
  return [Optional with:ifTrue ? fromInt : nil];
}


+ (NSNumber*(^)(NSNumber*))doubled
{
  return ^NSNumber*(NSNumber* value)  {
    return @(value.integerValue*2);
  };
}

+ (NSString*(^)(NSNumber*))toString
{
  return ^NSString*(NSNumber* value)  {
    return [NSString stringWithFormat:@&amp;quot;%@&amp;quot;, value];
  };
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we applied our transformations, we need a way to &lt;em&gt;unwrap&lt;/em&gt; the object inside our &lt;code&gt;Optional&lt;/code&gt;: in Swift this is done at language level, with some syntactic sugar, while in Objective-C we can follow the standard conventions of the functional programming community, that is, we can &lt;em&gt;get&lt;/em&gt; the wrapped object via a &lt;code&gt;get&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (id _Nullable)get;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (id)get
{
  return self.value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course the &lt;code&gt;get&lt;/code&gt; method will return an &lt;code&gt;id _Nullable&lt;/code&gt;, which means that the returned object can (obviously) be nil. A frequent pattern when dealing with &lt;code&gt;nil&lt;/code&gt; objects is replacing them with &amp;ldquo;default&amp;rdquo; versions: that can be useful when we don&amp;rsquo;t really care about the data contained in an object, but we don&amp;rsquo;t want to be exposed to the risk of possibly null references. Once again, with the &lt;code&gt;Optional&lt;/code&gt; class we can avoid conditional statements and express the &amp;ldquo;defaulting&amp;rdquo; mechanism in a more declarative way: we just need to add a &lt;code&gt;getOrElse:&lt;/code&gt; method, that will return the wrapped object if it&amp;rsquo;s there, or will return a default object, that we&amp;rsquo;ll pass to the method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (id)getOrElse:(id(^)())elseBlock;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (id)getOrElse:(id  _Nonnull (^)())elseBlock
{
  if (self.value != nil)
  {
    return self.value;
  }
  return elseBlock();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see, &lt;code&gt;getOrElse:&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; return a &lt;code&gt;_Nullable&lt;/code&gt; object, and that&amp;rsquo;s thanks to &lt;code&gt;elseBlock&lt;/code&gt;: we&amp;rsquo;re not passing the actual default object here, but a block that will produce one; this way, we can get the default object &lt;strong&gt;lazily&lt;/strong&gt;, because if the wrapped object is not nil, the default object doesn&amp;rsquo;t need to be allocated.&lt;/p&gt;

&lt;p&gt;For the rest of the article we&amp;rsquo;ll work on a more real-world example, and in doing so we&amp;rsquo;ll add more features to the &lt;code&gt;Optional&lt;/code&gt; class, making it more and more powerful.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;example-a-json-parser&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-a-json-parser:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Example: a JSON parser&lt;/h2&gt;

&lt;p&gt;Suppose we want to create an app that shows movie informations: we are retrieving those informations in JSON format from a website like &lt;a href=&#34;http://api.myapifilms.com&#34;&gt;myapifilms&lt;/a&gt;. Each movie has a JSON representation like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{
    &amp;quot;countries&amp;quot;: [
        &amp;quot;USA&amp;quot;
    ],
    &amp;quot;directors&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Frank Darabont&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0001104&amp;quot;
        }
    ],
    &amp;quot;filmingLocations&amp;quot;: [
        &amp;quot;St. Croix&amp;quot;,
        &amp;quot;U.S. Virgin Islands&amp;quot;
    ],
    &amp;quot;genres&amp;quot;: [
        &amp;quot;Crime&amp;quot;,
        &amp;quot;Drama&amp;quot;
    ],
    &amp;quot;idIMDB&amp;quot;: &amp;quot;tt0111161&amp;quot;,
    &amp;quot;languages&amp;quot;: [
        &amp;quot;English&amp;quot;
    ],
    &amp;quot;metascore&amp;quot;: &amp;quot;80/100&amp;quot;,
    &amp;quot;originalTitle&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;plot&amp;quot;: &amp;quot;Andy Dufresne is a young and successful banker whose life changes drastically when he is convicted and sentenced to life imprisonment for the murder of his wife and her lover. Set in the 1940s, the film shows how Andy, with the help of his friend Red, the prison entrepreneur, turns out to be a most unconventional prisoner.&amp;quot;,
    &amp;quot;ranking&amp;quot;: 1,
    &amp;quot;rated&amp;quot;: &amp;quot;R&amp;quot;,
    &amp;quot;rating&amp;quot;: &amp;quot;9.3&amp;quot;,
    &amp;quot;releaseDate&amp;quot;: &amp;quot;19941014&amp;quot;,
    &amp;quot;runtime&amp;quot;: [
        &amp;quot;142 min&amp;quot;
    ],
    &amp;quot;simplePlot&amp;quot;: &amp;quot;Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.&amp;quot;,
    &amp;quot;title&amp;quot;: &amp;quot;The Shawshank Redemption&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;Movie&amp;quot;,
    &amp;quot;urlIMDB&amp;quot;: &amp;quot;http://www.imdb.com/title/tt0111161&amp;quot;,
    &amp;quot;urlPoster&amp;quot;: &amp;quot;http://ia.media-imdb.com/images/M/MV5BODU4MjU4NjIwNl5BMl5BanBnXkFtZTgwMDU2MjEyMDE@._V1_SX214_AL_.jpg&amp;quot;,
    &amp;quot;votes&amp;quot;: &amp;quot;1,533,914&amp;quot;,
    &amp;quot;writers&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Stephen King&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0000175&amp;quot;
        },
        {
            &amp;quot;name&amp;quot;: &amp;quot;Frank Darabont&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0001104&amp;quot;
        }
    ],
    &amp;quot;year&amp;quot;: &amp;quot;1994&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course we want to define our own internal representation with a value object, change some structure and ignore the parts that we consider not relevant. Here&amp;rsquo;s a possible interface for the &lt;code&gt;Movie&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NS_ASSUME_NONNULL_BEGIN

@interface Movie : NSObject

@property (copy, nonatomic, readonly) NSString* title;
@property (copy, nonatomic, readonly) NSNumber* rating;
@property (copy, nonatomic, readonly) NSNumber* year;
@property (copy, nonatomic, readonly) NSNumber* lengthInMinutes;

+ (Movie*)withJSONDict:(NSDictionary*)dict;

@end

NS_ASSUME_NONNULL_END
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The class method &lt;code&gt;withJSONDict:&lt;/code&gt; will create an instance of &lt;code&gt;Movie&lt;/code&gt; from a JSON dictionary like the one showed before: as we can see from the interface declaration, we decided to not allow nil values for any of the properties; but when dealing with JSON, we must consider &lt;strong&gt;every possibility&lt;/strong&gt;, including missing keys, null values or wrong types. We&amp;rsquo;re going to use the &lt;code&gt;Optional&lt;/code&gt; type to parse the JSON dict in a clean, declarative and error-proof way.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with the title. From the JSON, the title should be given by the &amp;ldquo;title&amp;rdquo; key, and should be a string (&lt;code&gt;NSString&lt;/code&gt; in Objective-C), so we can get the title via the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt; NSString* title = [[[[Optional
                        with:[dict objectForKey:@&amp;quot;title&amp;quot;]]
                       
                       flatMap:^Optional*(id title) {
                         return [Optional with:[title isKindOfClass:[NSString class]] ? title : nil];
                       }]
                      
                      flatMap:^Optional*(NSString* title) {
                        return [Optional with:title.length &amp;gt; 0 ? title : nil];
                      }]
                     
                     getOrElse:^NSString*{
                       return @&amp;quot;NO TITLE&amp;quot;;
                     }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first &lt;code&gt;flatMap:&lt;/code&gt; step means that we want the title to be of &lt;code&gt;NSString&lt;/code&gt; class. It&amp;rsquo;s convenient to abstract this operation directly into the &lt;code&gt;Optional&lt;/code&gt; constructor, because we&amp;rsquo;re going to do it all the time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;+ (Optional *)with:(id)value as:(Class)valueClass
{
  if ([value isKindOfClass:valueClass])
  {
    return [Optional with:value];
  }
  return [Optional with:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second &lt;code&gt;flatMap:&lt;/code&gt; step means that if the found string is of length 0 (that is, empty), we are going to treat it as unknown. Actually, this step will act as a &lt;strong&gt;filter&lt;/strong&gt;, because it will only &lt;em&gt;let pass&lt;/em&gt; the strings that are not empty; with that in mind, let&amp;rsquo;s add a &lt;code&gt;filter:&lt;/code&gt; method to the &lt;code&gt;Optional&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (Optional*)filter:(BOOL(^)(id))filterBlock;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (Optional*)filter:(BOOL (^)(id _Nonnull))filterBlock
{
  return [self flatMap:^Optional*(id value) {
    if (filterBlock(value))
    {
      return self;
    }
    else
    {
      return [Optional with:nil];
    }
  }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;filter:&lt;/code&gt; method takes as parameter a block that returns a &lt;code&gt;BOOL&lt;/code&gt; based on the wrapped value: internally, &lt;code&gt;filter:&lt;/code&gt; will actually call &lt;code&gt;flatMap:&lt;/code&gt;, with a conditional expression to check if the &lt;code&gt;filterBlock&lt;/code&gt; succeeds or fails.&lt;/p&gt;

&lt;p&gt;Finally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSString* title = [[[Optional
                       with:[dict objectForKey:@&amp;quot;title&amp;quot;]
                       as:[NSString class]]
                      
                      filter:^BOOL(NSString* string) {
                        return string.length &amp;gt; 0;
                      }]
                     
                     getOrElse:^NSString*{ return @&amp;quot;NO TITLE&amp;quot;; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, no conditional statements, and very few lines of code, completely declarative.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;rating&lt;/code&gt; and &lt;code&gt;year&lt;/code&gt; parameters we need to add a &lt;code&gt;map&lt;/code&gt; to convert the &lt;code&gt;NSString&lt;/code&gt; into an &lt;code&gt;NSNumber&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSNumber* rating = [[[[Optional
                         with:[dict objectForKey:@&amp;quot;rating&amp;quot;]
                         as:[NSString class]]
                        
                        filter:^BOOL(NSString* string) {
                          return string.length &amp;gt; 0;
                        }]
                       
                       map:^NSNumber*(NSString* stringValue) {
                         return [NSDecimalNumber decimalNumberWithString:stringValue];
                       }]
                      
                      getOrElse:^NSNumber*{ return @0; }];
  movie.rating = rating;
  
  NSNumber* year = [[[[Optional
                       with:[dict objectForKey:@&amp;quot;year&amp;quot;]
                       as:[NSString class]]
                      
                      filter:^BOOL(NSString* string) {
                        return string.length &amp;gt; 0;
                      }]
                     
                     map:^NSNumber*(NSString* stringValue) {
                       return [NSDecimalNumber decimalNumberWithString:stringValue];
                     }]
                    
                    getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;lenghtInMinutes&lt;/code&gt; parameter is a little tricky; from the JSON we can see that the value is represented like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;&amp;quot;runtime&amp;quot;: [ 
	&amp;quot;142 min&amp;quot; 
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we expect an array, of which we&amp;rsquo;re only interested in the first element (thus, the array must not be empty), that has to be a string; of this string we only need the first part, removing the &lt;code&gt;min&lt;/code&gt; portion. Luckily, we already have all the tools for the job:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;  NSNumber* lengthInMinutes =
  [[[[[[Optional
        with:[dict objectForKey:@&amp;quot;runtime&amp;quot;]
        as:[NSArray class]]
       
       flatMap:^Optional*(NSArray* array) {
         return [Optional with:[array firstObject]];
       }]
      
      map:^NSString*(NSString* string) {
        return [string
                stringByReplacingOccurrencesOfString:@&amp;quot; min&amp;quot;
                withString:@&amp;quot;&amp;quot;];
      }]
     
     filter:^BOOL(NSString* string) {
       return string.length &amp;gt; 0;
     }]
    
    map:^NSNumber*(NSString* stringValue) {
      return @([stringValue integerValue]);
    }]
   
   getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actually, something is missing: the method &lt;code&gt;[array firstObject]&lt;/code&gt; returns the first object of the array if the array has at least one element, or nil if the array is empty: there&amp;rsquo;s no indication that the first object is actually a &lt;code&gt;NSString&lt;/code&gt;, so we need to add a &lt;code&gt;filter&lt;/code&gt; step to insure that the object is an instance of the correct class. Let&amp;rsquo;s do it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt; NSNumber* lengthInMinutes =
  [[[[[[[Optional
         with:[dict objectForKey:@&amp;quot;runtime&amp;quot;]
         as:[NSArray class]]
        
        flatMap:^id(NSArray* array) {
          return [Optional with:[array firstObject]];
        }]
       
       filter:^BOOL(id value) {
         return [value isKindOfClass:[NSString class]];
       }]
      
      map:^NSString*(NSString* string) {
        return [string
                stringByReplacingOccurrencesOfString:@&amp;quot; min&amp;quot;
                withString:@&amp;quot;&amp;quot;];
      }]
     
     filter:^BOOL(NSString* string) {
       return string.length &amp;gt; 0;
     }]
    
    map:^NSNumber*(NSString* stringValue) {
      return @([stringValue integerValue]);
    }]
   
   getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see, when we work with the &lt;code&gt;Optional&lt;/code&gt; class, adding a condition simply means &lt;strong&gt;adding a step&lt;/strong&gt; in the linear &lt;strong&gt;flow of expressions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;conclusion&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Bringing back the &lt;code&gt;Optional&lt;/code&gt; type from Swift to Objective-C allowed us to build a JSON parsing routine, often something hard to maintain and error-prone, in a simple, linear and readable way. Of course there&amp;rsquo;s &lt;strong&gt;plenty of cases&lt;/strong&gt; where working with optionals can give us the same advantages: by composing &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; operations we can express our intent in a clean and readable way. But this is not just about the &lt;code&gt;Optional&lt;/code&gt; type: some readers may have probably noticed that many languages (including Swift) allow operations with the same names on lists and arrays, and the meanings are also the same: &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt;, in particular, are &lt;strong&gt;generic concepts&lt;/strong&gt; related to monads (in fact, the array type is also a monad) and allow declarative compositions of transformations. This concept is at the core of &lt;strong&gt;functional programming&lt;/strong&gt;, and I think there&amp;rsquo;s plenty of reasons to apply similar concepts to a more object-oriented environment: they will help the programmer in reasoning about the code and express the intent in a more declarative way.&lt;/p&gt;

&lt;p&gt;The code for the &lt;code&gt;Optional&lt;/code&gt; class used throughout the article can be found on &lt;a href=&#34;https://gist.github.com/broomburgo/e318228a5f7d6a605e82&#34;&gt;GitHub Gist&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Optionals in Objective-C</title>
      <link>/blog/ita/optionals-in-objective-c/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/optionals-in-objective-c/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Objective-C vivrà ancora per molto&lt;/strong&gt;. Nonostante Swift sia il nuovo punto di riferimento per lo sviluppo iOS e OS X, ci sono ragioni concrete per scegliere di continuare a sviluppare in Objective-C, almeno per un po&amp;rsquo;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;progetti esistenti basati su Objective-C richiedono ancora mantenimento e probabile aggiunta di nuove funzionalità, e anche se è tecnicamente possibile mescolare i linguaggi, la cosa può risultare &lt;strong&gt;poco conveniente&lt;/strong&gt; per via della natura molto dinamica di Objective-C;&lt;/li&gt;
&lt;li&gt;Swift sta cambiando rapidamente, presenta ancora alcuni bug e &lt;strong&gt;problemi di performance&lt;/strong&gt;, e il suo workflow manca ancora di alcune feature fondamentali per i professionisti, mentre Objective-C è un linguaggio maturo, con una community molto vivace;&lt;/li&gt;
&lt;li&gt;alcuni possono &lt;strong&gt;preferire un linguaggio più dinamico&lt;/strong&gt;, e il supporto di Apple su Objective-C è &lt;a href=&#34;https://netguru.co/blog/objective-c-generics&#34;&gt;ancora forte&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personalmente ho la tendenza a preferire linguaggi più statici, e un approccio &lt;a href=&#34;http://engineering.facile.it/type-first-development-in-swift/&#34;&gt;type-first&lt;/a&gt; alla programmazione, ma di tanto in tanto mi piace lavorare in un ambiente più &lt;em&gt;dinamico&lt;/em&gt;, quindi, sia per preferenza personale che per esigenze di business, non ho ancora messo Objective-C da parte. Ma dopo poche settimane di Swift, mi è mancata subito una delle sue funzionalità più potenti: gli &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID330&#34;&gt;Optionals&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;indice:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Indice&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#il-tipo-optional&#34;&gt;Il tipo &lt;code&gt;Optional&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optionals-in-swift&#34;&gt;Optionals in Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#torniamo-a-objective-c&#34;&gt;Torniamo a Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#esempio-un-parser-json&#34;&gt;Esempio: un parser JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusione&#34;&gt;Conclusione&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;il-tipo-optional&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;il-tipo-optional:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Il tipo &lt;code&gt;Optional&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Il tipo &lt;code&gt;Optional&lt;/code&gt; è un tipo &lt;em&gt;generico&lt;/em&gt; (o, più propriamente, &lt;em&gt;parametrico&lt;/em&gt;), dipendente da un &lt;strong&gt;tipo secondario&lt;/strong&gt;: è possibile ad esempio definire un &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt; oppure un &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt;: la sintassi di Swift permette di scrivere i tipi appena indicati con &lt;code&gt;String?&lt;/code&gt; e &lt;code&gt;Int?&lt;/code&gt;. Ma cos&amp;rsquo;è esattamente un &lt;code&gt;Optional&lt;/code&gt;?. È un tipo particolare che serve a rappresentare un dato che &lt;em&gt;potrebbe&lt;/em&gt; esistere, ed essere quindi di un certo tipo secondario, o potrebbe non esistere, ed essere quindi &lt;strong&gt;nil&lt;/strong&gt;: &lt;em&gt;inscatolando&lt;/em&gt; il valore opzionale in un &lt;code&gt;Optional&lt;/code&gt;, il compilatore di Swift saprà che quel valore potrà essere nil, e emettere un errore nei casi in cui stiamo usando un &lt;code&gt;Optional&lt;/code&gt; dove ci si aspetta un valore &lt;strong&gt;sempre&lt;/strong&gt; presente. Questa semplice funzionalità ci garantisce notevole rigore nella definizione dei nostri tipi di dato e funzione: ad esempio, in Swift non possiamo inizializzare un valore non opzionale con nil, e considerando che, per il compilatore, un valore non può essere usato prima di essere istanziato, se assegniamo il tipo &lt;code&gt;String&lt;/code&gt; a un valore, siamo sicuri al 100% che quel valore sarà &lt;strong&gt;sempre a comunque&lt;/strong&gt; una stringa.&lt;/p&gt;

&lt;p&gt;Al contrario, in Objective-C un oggetto può essere sempre nil, e spesso siamo costretti a controllare l&amp;rsquo;effettiva presenza di un oggetto ogni volta in cui abbiamo bisogno di un&amp;rsquo;istanza che non sia nil. In realtà non si tratta di un grosso problema: è un classico &lt;strong&gt;compromesso&lt;/strong&gt; dei linguaggi dinamici, e il fatto che posso sempre inviare un messaggio a un riferimento nil può essere anche considerato una &lt;em&gt;feature&lt;/em&gt;: usando un linguaggio dinamico, ci si aspetta che progettiamo le nostre API tenendo sempre in considerazione il concetto di &lt;a href=&#34;https://en.wikipedia.org/wiki/Late_binding&#34;&gt;late-binding&lt;/a&gt;. Inoltre, i nuovi &lt;a href=&#34;https://developer.apple.com/swift/blog/?id=25&#34;&gt;&lt;em&gt;nullability specifiers&lt;/em&gt;&lt;/a&gt; di Objective-C aiutano il compilatore a emettere avvisi quando stiamo passando nil a un metodo o una &lt;em&gt;property&lt;/em&gt; che richiedono invece che il parametro sia &lt;code&gt;nonnull&lt;/code&gt;. Ma il problema rimane: abbiamo bisogno di molto &lt;em&gt;boilerplate&lt;/em&gt; per verificare se qualcosa è nil, e ciò può portare a codice poco leggibile e comprensibile, soggetto ad errori. Swift non ha tipicamente bisogno di questo &lt;em&gt;boilerplate&lt;/em&gt; grazie alla natura stessa del tipo &lt;code&gt;Optional&lt;/code&gt;: esso ha le stesse caratteristiche del tipo &lt;code&gt;Maybe&lt;/code&gt; in Haskell, o del tipo &lt;code&gt;Option&lt;/code&gt; in Scala, cioè &lt;code&gt;Optional&lt;/code&gt; è in realtà un &lt;strong&gt;monad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Il concetto di &lt;em&gt;monad&lt;/em&gt; è ereditato, in programmazione funzionale, dalla &lt;a href=&#34;https://it.wikipedia.org/wiki/Teoria_delle_categorie&#34;&gt;teoria delle categorie&lt;/a&gt;, ed è facile trovare &lt;a href=&#34;https://wiki.haskell.org/Monad&#34;&gt;molti&lt;/a&gt; &lt;a href=&#34;https://www.haskell.org/tutorial/monads.html&#34;&gt;testi&lt;/a&gt; &lt;a href=&#34;http://learnyouahaskell.com/a-fistful-of-monads&#34;&gt;introduttivi&lt;/a&gt; sul tema, quindi non approfondirò ulteriormente: dirò solo che un &lt;em&gt;monad&lt;/em&gt; è un &lt;em&gt;contesto computazionale&lt;/em&gt;, quindi una &lt;em&gt;specifica&lt;/em&gt; per il modo in cui una espressione deve essere valutata. Applicare una certa trasformazione a un &lt;em&gt;monad&lt;/em&gt; avrà come risultato un&amp;rsquo;altra istanza dello stesso &lt;em&gt;monad&lt;/em&gt; differente dalla prima, a seconda dello specifico tipo di &lt;em&gt;monad&lt;/em&gt;. Ad esempio, applicare una trasformazione a un &lt;code&gt;Optional&lt;/code&gt; risulterà nell&amp;rsquo;applicazione della stessa trasformazione al valore &lt;em&gt;contenuto&lt;/em&gt;, se presente, o assolutamente niente se l&amp;rsquo;&lt;code&gt;Optional&lt;/code&gt; contiene nil: in entrambi i casi, il risultato della trasformazione sarà un nuovo &lt;code&gt;Optional&lt;/code&gt;, possibilmente con un tipo secondario diverso.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;optionals-in-swift&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;optionals-in-swift:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Optionals in Swift&lt;/h2&gt;

&lt;p&gt;Consideriamo il seguente codice Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalIntFrom(value: Int, ifTrue: Bool) -&amp;gt; Int?  
{
  return ifTrue ? value : nil
}

let optionalInt = makeOptionalIntFrom(3, ifTrue: true)  
print(optionalInt.dynamicType) /// prints &#39;Optional&amp;lt;Int&amp;gt;&#39;

let toString: Int -&amp;gt; String = { &amp;quot;\($0)&amp;quot; }

let optionalString = optionalInt.map(toString)  
print(optionalString.dynamicType) /// prints &#39;Optional&amp;lt;String&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nell&amp;rsquo;esempio, &lt;code&gt;optionalInt&lt;/code&gt; è un &lt;code&gt;Int&lt;/code&gt; &lt;em&gt;contenuto&lt;/em&gt; in un &lt;code&gt;Optional&lt;/code&gt;, che quindi ha tipo &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; (in Swift è possibile abbreviarlo in &lt;code&gt;Int?&lt;/code&gt;), e applicando ad esso la funzione &lt;code&gt;toString&lt;/code&gt; otteniamo un&amp;rsquo;istanza di &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt;. Possiamo vedere che, per applicare effettivamente la funzione &lt;code&gt;toString&lt;/code&gt;, abbiamo passato la funzione come argomento al metodo &lt;code&gt;map&lt;/code&gt; del &lt;code&gt;Optional&lt;/code&gt;: questa operazione è solitamente chiamata &lt;em&gt;lifting&lt;/em&gt; di una funzione, perché la funzione &lt;code&gt;toString&lt;/code&gt;, di tipo &lt;code&gt;Int -&amp;gt; String&lt;/code&gt;, è &lt;em&gt;sollevata&lt;/em&gt; (&lt;em&gt;lifted&lt;/em&gt;) fino a diventare di tipo &lt;code&gt;Optional&amp;lt;Int&amp;gt; -&amp;gt; Optional&amp;lt;String&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Come possiamo vedere, non sono state usate istruzioni condizionali nel manipolare il valore intero &lt;em&gt;opzionale&lt;/em&gt;: &lt;em&gt;sollevando&lt;/em&gt; le trasformazioni con il metodo &lt;code&gt;map&lt;/code&gt;, possiamo applicarle direttamente alle istanze di &lt;code&gt;Optional&lt;/code&gt;, e possiamo anche concatenarle molto facilmente, ad esempio:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalIntFrom(value: Int, ifTrue: Bool) -&amp;gt; Int?  
{
  return ifTrue ? value : nil
}

let optionalInt = makeOptionalIntFrom(3, ifTrue: true)  
print(optionalInt.dynamicType) /// prints &#39;Optional&amp;lt;Int&amp;gt;&#39;

let doubled: Int -&amp;gt; Int = { $0*2 }

let toString: Int -&amp;gt; String = { &amp;quot;\($0)&amp;quot; }

let optionalDoubledString = optionalInt.map(doubled).map(toString)  
print(optionalDoubledString.dynamicType) /// prints &#39;Optional&amp;lt;String&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Volendo esprimere l&amp;rsquo;operazione opposta, avremmo un problema: trasformare una stringa in un intero non è sempre possibile in Swift (ad esempio se non c&amp;rsquo;è alcun numero nella stringa), quindi l&amp;rsquo;operazione stessa risulterebbe in un &lt;code&gt;Optional&lt;/code&gt;. Infatti:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func makeOptionalStringFrom(value: String, ifTrue: Bool) -&amp;gt; String?  
{
  return ifTrue ? value : nil
}

let toInt: String -&amp;gt; Int? = { Int($0) }

let anotherOptionalString = makeOptionalStringFrom(&amp;quot;3&amp;quot;, ifTrue: true)

let anotherOptionalInt = anotherOptionalString.map(toInt).map(doubled)
/// errore di compilazione!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il problema qui è che la funzione &lt;code&gt;toInt&lt;/code&gt; è di tipo &lt;code&gt;String -&amp;gt; Optional&amp;lt;Int&amp;gt;&lt;/code&gt;, e il &lt;em&gt;lifting&lt;/em&gt; della funzione verso il &lt;em&gt;mondo opzionale&lt;/em&gt; la trasformerebbe in una funzione del tipo &lt;code&gt;Optional&amp;lt;String&amp;gt; -&amp;gt; Optional&amp;lt;Optional&amp;lt;Int&amp;gt;&amp;gt;&lt;/code&gt;, quindi un intero opzionale contenuto in un altro &lt;code&gt;Optional&lt;/code&gt;; in base alla terminologia accettata, abbiamo bisogno di un&amp;rsquo;operazione di &lt;code&gt;flatMap&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let anotherOptionalInt = anotherOptionalString.flatMap(toInt).map(doubled)  
/// funziona
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quindi, per quanto riguarda il tipo &lt;code&gt;Optional&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt; è simile a &lt;code&gt;map&lt;/code&gt;, ma deve essere usato per il &lt;em&gt;lifting&lt;/em&gt; di funzioni che generano altri valori opzionali. Nel leggere il codice, &lt;code&gt;map&lt;/code&gt; e &lt;code&gt;flatMap&lt;/code&gt; possono sostanzialmente essere letti nello stesso modo: indicano entrambi una trasformazione, e il fatto che le funzioni passate a &lt;code&gt;flatMap&lt;/code&gt; abbiano un tipo diverso può essere considerato un dettaglio di implementazione.&lt;/p&gt;

&lt;p&gt;In realtà Swift tratta questi tipi di dato &lt;strong&gt;in maniera differente&lt;/strong&gt; rispetto ad altri linguaggi: ad esempio, nei linguaggi &lt;em&gt;funzionali&lt;/em&gt; &lt;code&gt;map&lt;/code&gt; e &lt;code&gt;flatMap&lt;/code&gt; sono di norma &lt;em&gt;funzioni libere&lt;/em&gt;, mentre in Swift sono &lt;strong&gt;metodi&lt;/strong&gt;. In generale, Swift incoraggia l&amp;rsquo;uso dei metodi, e del loro &lt;strong&gt;concatenamento&lt;/strong&gt;, invece di funzioni libere, composte con operatori speciali: si tratta, più che altro, di una questione filosofica, ma nel trasportare queste feature in Objective-C l&amp;rsquo;approccio basato sui metodi tornerà utile poiché non c&amp;rsquo;è un modo semplice di rappresentare funzioni libere nel linguaggio, mentre i metodi hanno la classica sintassi alla quale siamo abituati.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;torniamo-a-objective-c&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;torniamo-a-objective-c:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Torniamo a Objective-C&lt;/h2&gt;

&lt;p&gt;Implementiamo la classe &lt;code&gt;Optional&lt;/code&gt; in Objective-C:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

#import &amp;lt;Foundation/Foundation.h&amp;gt;

NS_ASSUME_NONNULL_BEGIN

@interface Optional : NSObject

+ (Optional*)with:(id _Nullable)value;

- (Optional*)map:(id(^)(id))mapBlock;
- (Optional*)flatMap:(Optional*(^)(id))flatMapBlock;

@end

NS_ASSUME_NONNULL_END 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

#import &amp;quot;Optional.h&amp;quot;

@interface Optional ()

@property (strong, nonatomic, nullable) id value;

@end

@implementation Optional

+ (Optional*)with:(id _Nullable)value
{
  Optional* optional = [Optional new];
  optional.value = value;
  return optional;
}

- (Optional *)map:(id  _Nonnull (^)(id _Nonnull))mapBlock
{
  if (self.value != nil)
  {
    return [Optional with:mapBlock(self.value)];
  }
  return self;
}

- (Optional *)flatMap:(Optional* _Nonnull (^)(id _Nonnull))flatMapBlock
{
  if (self.value != nil)
  {
    return flatMapBlock(self.value);
  }
  return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Come possiamo vedere, il metodo di classe &lt;code&gt;with:&lt;/code&gt; crea un oggetto &lt;code&gt;Optional&lt;/code&gt; inscatolando un altro oggetto, di tipo non specificato: poiché non esiste un vero concetto di &lt;em&gt;generic&lt;/em&gt; in Objective-C, non sarà possibile realizzare un tipo &lt;code&gt;Optional&lt;/code&gt; sicuro, dal punto di vista dei tipi, come in Swift, ma non sarà un grosso problema, e saremo comunque in grado di ereditare da Swift &lt;strong&gt;potenti features&lt;/strong&gt;. Il metodo &lt;code&gt;map:&lt;/code&gt; verifica se l&amp;rsquo;oggetto contenuto non sia nil, e in tal caso applica la trasformazione espressa con &lt;code&gt;mapBlock&lt;/code&gt;: in questo caso i &lt;em&gt;nullability specifiers&lt;/em&gt; di Objective-C ci hanno aiutato nello scrivere la firma dei metodi, infatti abbiamo chiaramente specificato che &lt;code&gt;mapBlock&lt;/code&gt; accetta e ritorna oggetti che non siano nil; &lt;code&gt;flatMapBlock&lt;/code&gt; ritorna invece un altro &lt;code&gt;Optional&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Possiamo testare la cosa riscrivendo lo stesso esempio visto per Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Test.h

#import &amp;lt;Foundation/Foundation.h&amp;gt;

@interface Test : NSObject

+ (void)testOptional;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Test.m

#import &amp;quot;Test.h&amp;quot;
#import &amp;quot;Optional.h&amp;quot;

@implementation Test

+ (void)testOptional
{
  Optional* optionalInt = [self makeOptionalIntFrom:@3 ifTrue:YES];
  Optional* optionalDoubledString = [[optionalInt
                                      map:[self doubled]]
                                     map:[self toString]];
  NSLog(@&amp;quot;%@&amp;quot;, optionalDoubledString);
}

+ (Optional*)makeOptionalIntFrom:(NSNumber*)fromInt ifTrue:(BOOL)ifTrue
{
  return [Optional with:ifTrue ? fromInt : nil];
}


+ (NSNumber*(^)(NSNumber*))doubled
{
  return ^NSNumber*(NSNumber* value)  {
    return @(value.integerValue*2);
  };
}

+ (NSString*(^)(NSNumber*))toString
{
  return ^NSString*(NSNumber* value)  {
    return [NSString stringWithFormat:@&amp;quot;%@&amp;quot;, value];
  };
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un volta applicate le trasformazioni, abbiamo bisogno di un metodo per &amp;ldquo;estrarre&amp;rdquo; l&amp;rsquo;oggetto all&amp;rsquo;interno del &lt;code&gt;Optional&lt;/code&gt;: Swift permette questa operazione a livello di sintassi, mentre in Objective-C possiamo seguire le convenzioni standard in programmazione funzionale, e cioè definire un metodo &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (id _Nullable)get;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (id)get
{
  return self.value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il metodo &lt;code&gt;get&lt;/code&gt; ritorna un &lt;code&gt;id _Nullable&lt;/code&gt;: ciò vuol dire che l&amp;rsquo;oggetto ritornato può (ovviamente) essere nil. Un pattern frequente quando si ha a che fare con oggetti nil consiste nel sostituirli con versioni di &amp;ldquo;default&amp;rdquo;: può essere utile quando non ci interessano tanto i dati contenuti in un oggetto, ma non vogliamo correre i rischi associati al lavorare riferimenti &lt;em&gt;null&lt;/em&gt;. Ancora una volta, con la classe &lt;code&gt;Optional&lt;/code&gt; possiamo evitare istruzioni condizionali ed esprimere il meccanismo di &amp;ldquo;defaulting&amp;rdquo; in un modo più dichiarativo: dobbiamo semplicemente aggiungere un metodo &lt;code&gt;getOrElse:&lt;/code&gt;, che ritorni l&amp;rsquo;oggetto contenuto se presente, o un oggetto di default passato al metodo stesso:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (id)getOrElse:(id(^)())elseBlock;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (id)getOrElse:(id  _Nonnull (^)())elseBlock
{
  if (self.value != nil)
  {
    return self.value;
  }
  return elseBlock();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Come si può vedere, il metodo &lt;code&gt;getOrElse:&lt;/code&gt; &lt;strong&gt;non&lt;/strong&gt; ritorna un oggetto &lt;code&gt;_Nullable&lt;/code&gt;: in effetti non stiamo passando l&amp;rsquo;oggetto, ma un block che &amp;ldquo;produrrà&amp;rdquo; l&amp;rsquo;oggetto una volta invocato; in questo modo riusciamo a ottenere l&amp;rsquo;oggetto di default in maniera &lt;strong&gt;lazy&lt;/strong&gt;, perché se l&amp;rsquo;oggetto contenuto è presente, non è necessario generare l&amp;rsquo;oggetto di default.&lt;/p&gt;

&lt;p&gt;Per il resto dell&amp;rsquo;articolo lavoreremo su un esempio più concreto, e implementeremo diverse funzionalità per la classe &lt;code&gt;Optional&lt;/code&gt;, rendendola via via più utile e potente.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;esempio-un-parser-json&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;esempio-un-parser-json:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Esempio: un parser JSON&lt;/h2&gt;

&lt;p&gt;Supponiamo di voler realizzare un&amp;rsquo;app che mostra informazioni sui film: possiamo ottenerle in formato JSON da un sito come &lt;a href=&#34;http://api.myapifilms.com/index.do&#34;&gt;myapifilms&lt;/a&gt;. La rappresentazione JSON di ogni film è del tipo seguente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{
    &amp;quot;countries&amp;quot;: [
        &amp;quot;USA&amp;quot;
    ],
    &amp;quot;directors&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Frank Darabont&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0001104&amp;quot;
        }
    ],
    &amp;quot;filmingLocations&amp;quot;: [
        &amp;quot;St. Croix&amp;quot;,
        &amp;quot;U.S. Virgin Islands&amp;quot;
    ],
    &amp;quot;genres&amp;quot;: [
        &amp;quot;Crime&amp;quot;,
        &amp;quot;Drama&amp;quot;
    ],
    &amp;quot;idIMDB&amp;quot;: &amp;quot;tt0111161&amp;quot;,
    &amp;quot;languages&amp;quot;: [
        &amp;quot;English&amp;quot;
    ],
    &amp;quot;metascore&amp;quot;: &amp;quot;80/100&amp;quot;,
    &amp;quot;originalTitle&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;plot&amp;quot;: &amp;quot;Andy Dufresne is a young and successful banker whose life changes drastically when he is convicted and sentenced to life imprisonment for the murder of his wife and her lover. Set in the 1940s, the film shows how Andy, with the help of his friend Red, the prison entrepreneur, turns out to be a most unconventional prisoner.&amp;quot;,
    &amp;quot;ranking&amp;quot;: 1,
    &amp;quot;rated&amp;quot;: &amp;quot;R&amp;quot;,
    &amp;quot;rating&amp;quot;: &amp;quot;9.3&amp;quot;,
    &amp;quot;releaseDate&amp;quot;: &amp;quot;19941014&amp;quot;,
    &amp;quot;runtime&amp;quot;: [
        &amp;quot;142 min&amp;quot;
    ],
    &amp;quot;simplePlot&amp;quot;: &amp;quot;Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.&amp;quot;,
    &amp;quot;title&amp;quot;: &amp;quot;The Shawshank Redemption&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;Movie&amp;quot;,
    &amp;quot;urlIMDB&amp;quot;: &amp;quot;http://www.imdb.com/title/tt0111161&amp;quot;,
    &amp;quot;urlPoster&amp;quot;: &amp;quot;http://ia.media-imdb.com/images/M/MV5BODU4MjU4NjIwNl5BMl5BanBnXkFtZTgwMDU2MjEyMDE@._V1_SX214_AL_.jpg&amp;quot;,
    &amp;quot;votes&amp;quot;: &amp;quot;1,533,914&amp;quot;,
    &amp;quot;writers&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Stephen King&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0000175&amp;quot;
        },
        {
            &amp;quot;name&amp;quot;: &amp;quot;Frank Darabont&amp;quot;,
            &amp;quot;nameId&amp;quot;: &amp;quot;nm0001104&amp;quot;
        }
    ],
    &amp;quot;year&amp;quot;: &amp;quot;1994&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vogliamo definire la nostra rappresentazione interna del film con un &lt;em&gt;value object&lt;/em&gt;, modificare in parte la struttura e magari ignorare alcuni elementi che non consideriamo rilevanti. Ecco un&amp;rsquo;interfaccia possibile per la classe &lt;code&gt;Movie&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NS_ASSUME_NONNULL_BEGIN

@interface Movie : NSObject

@property (copy, nonatomic, readonly) NSString* title;
@property (copy, nonatomic, readonly) NSNumber* rating;
@property (copy, nonatomic, readonly) NSNumber* year;
@property (copy, nonatomic, readonly) NSNumber* lengthInMinutes;

+ (Movie*)withJSONDict:(NSDictionary*)dict;

@end

NS_ASSUME_NONNULL_END
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il metodo di classe &lt;code&gt;withJSONDict:&lt;/code&gt; crea un&amp;rsquo;istanza di &lt;code&gt;Movie&lt;/code&gt; da un dizionario JSON come quello appena mostrato: come si può vedere dall&amp;rsquo;interfaccia dichiarata, abbiamo deciso di non permettere valori nil per le varie &lt;em&gt;property&lt;/em&gt;; ma quando abbiamo a che fare con JSON &lt;strong&gt;tutto può succedere&lt;/strong&gt;, come chiavi mancanti, valori null o di tipo diverso. Useremo il tipo &lt;code&gt;Optional&lt;/code&gt; per parsare il dizionario JSON in modo chiaro, dichiarativo e a prova di errore.&lt;/p&gt;

&lt;p&gt;Iniziamo con i titolo. Dal JSON vediamo che il titolo si trova in corrispondenza della chiave &amp;ldquo;title&amp;rdquo;, e dovrebbe essere una stringa (&lt;code&gt;NSString&lt;/code&gt; in Objective-C), quindi possiamo ottenere il titolo così:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSString* title = [[[[Optional
                        with:[dict objectForKey:@&amp;quot;title&amp;quot;]]

                       flatMap:^Optional*(id title) {
                         return [Optional with:[title isKindOfClass:[NSString class]] ? title : nil];
                       }]

                      flatMap:^Optional*(NSString* title) {
                        return [Optional with:title.length &amp;gt; 0 ? title : nil];
                      }]

                     getOrElse:^NSString*{
                       return @&amp;quot;NO TITLE&amp;quot;;
                     }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il primo &lt;code&gt;flatMap&lt;/code&gt; indica che l&amp;rsquo;oggetto &amp;ldquo;titolo&amp;rdquo; deve appartenere alla classe &lt;code&gt;NSString&lt;/code&gt;. Conviene astrarre questa operazione inserendola direttamente nel costruttore, perché l&amp;rsquo;applicheremo ogni volta per tutti i dati:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;+ (Optional *)with:(id)value as:(Class)valueClass
{
  if ([value isKindOfClass:valueClass])
  {
    return [Optional with:value];
  }
  return [Optional with:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il secondo &lt;code&gt;flatMap:&lt;/code&gt; indica che se la stringa trovata ha lunghezza 0, considereremo il titolo come &amp;ldquo;sconosciuto&amp;rdquo;. In effetti questo step avrà l&amp;rsquo;effetto di &amp;ldquo;filtro&amp;rdquo;, perché lascerà &amp;ldquo;passare&amp;rdquo; solo le stringhe non vuote; considerando ciò, aggiungiamo un metodo &lt;code&gt;filter:&lt;/code&gt; alla classe &lt;code&gt;Optional&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.h

- (Optional*)filter:(BOOL(^)(id))filterBlock;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;///Optional.m

- (Optional*)filter:(BOOL (^)(id _Nonnull))filterBlock
{
  return [self flatMap:^Optional*(id value) {
    if (filterBlock(value))
    {
      return self;
    }
    else
    {
      return [Optional with:nil];
    }
  }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il metodo &lt;code&gt;filter:&lt;/code&gt; accetta come parametro un block che ritorna un &lt;code&gt;BOOL&lt;/code&gt; basato sul valore contenuto: internamente, &lt;code&gt;filter:&lt;/code&gt; chiamerà comunque &lt;code&gt;flatMap:&lt;/code&gt;, con un&amp;rsquo;espressione condizionale che verifichi se &lt;code&gt;filterBlock&lt;/code&gt; riesce o fallisce.&lt;/p&gt;

&lt;p&gt;Infine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSString* title = [[[Optional  
                       with:[dict objectForKey:@&amp;quot;title&amp;quot;]
                       as:[NSString class]]

                      filter:^BOOL(NSString* string) {
                        return string.length &amp;gt; 0;
                      }]

                     getOrElse:^NSString*{ return @&amp;quot;NO TITLE&amp;quot;; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quindi, nessuna espressione condizionale, e poche linee di codice, completamente dichiarative.&lt;/p&gt;

&lt;p&gt;Per quanto riguarda i parametri &lt;code&gt;rating&lt;/code&gt; e &lt;code&gt;year&lt;/code&gt; abbiamo bisogno di un &lt;code&gt;map&lt;/code&gt; che converta &lt;code&gt;NSString&lt;/code&gt; in &lt;code&gt;NSNumber&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSNumber* rating = [[[[Optional  
                         with:[dict objectForKey:@&amp;quot;rating&amp;quot;]
                         as:[NSString class]]

                        filter:^BOOL(NSString* string) {
                          return string.length &amp;gt; 0;
                        }]

                       map:^NSNumber*(NSString* stringValue) {
                         return [NSDecimalNumber decimalNumberWithString:stringValue];
                       }]

                      getOrElse:^NSNumber*{ return @0; }];
  movie.rating = rating;

  NSNumber* year = [[[[Optional
                       with:[dict objectForKey:@&amp;quot;year&amp;quot;]
                       as:[NSString class]]

                      filter:^BOOL(NSString* string) {
                        return string.length &amp;gt; 0;
                      }]

                     map:^NSNumber*(NSString* stringValue) {
                       return [NSDecimalNumber decimalNumberWithString:stringValue];
                     }]

                    getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il parametro &lt;code&gt;lengthInMinutes&lt;/code&gt; è un po&amp;rsquo; complicato; dal JSON possiamo vedere che la sua rappresentazione è la seguente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;&amp;quot;runtime&amp;quot;: [ 
    &amp;quot;142 min&amp;quot; 
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quindi ci aspettiamo un array, del quale siamo interessati solo al primo elemento (quindi l&amp;rsquo;array non deve essere vuoto), che deve essere una stringa; di questa stringa abbiamo bisogno solo della prima parte, rimuovendo &lt;code&gt;min&lt;/code&gt;. Fortunatamente abbiamo già tutti gli strumenti necessari per procedere:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSNumber* lengthInMinutes =
  [[[[[[Optional
        with:[dict objectForKey:@&amp;quot;runtime&amp;quot;]
        as:[NSArray class]]

       flatMap:^Optional*(NSArray* array) {
         return [Optional with:[array firstObject]];
       }]

      map:^NSString*(NSString* string) {
        return [string
                stringByReplacingOccurrencesOfString:@&amp;quot; min&amp;quot;
                withString:@&amp;quot;&amp;quot;];
      }]

     filter:^BOOL(NSString* string) {
       return string.length &amp;gt; 0;
     }]

    map:^NSNumber*(NSString* stringValue) {
      return @([stringValue integerValue]);
    }]

   getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In realtà manca qualcosa: il metodo &lt;code&gt;[array firstObject]&lt;/code&gt; ritorna il primo oggetto dell&amp;rsquo;array se questo ha almeno un elemento, oppure ritorna nil se l&amp;rsquo;array è vuoto: non c&amp;rsquo;è alcuna indicazione sul fatto che vogliamo che il primo elemento sia di tipo &lt;code&gt;NSString&lt;/code&gt;, quindi dobbiamo aggiungere uno step &lt;code&gt;filter&lt;/code&gt; per assicurarci che la classe dell&amp;rsquo;istanza trovata sia corretta. Quindi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ObjectiveC&#34;&gt;NSNumber* lengthInMinutes =
  [[[[[[[Optional
         with:[dict objectForKey:@&amp;quot;runtime&amp;quot;]
         as:[NSArray class]]

        flatMap:^id(NSArray* array) {
          return [Optional with:[array firstObject]];
        }]

       filter:^BOOL(id value) {
         return [value isKindOfClass:[NSString class]];
       }]

      map:^NSString*(NSString* string) {
        return [string
                stringByReplacingOccurrencesOfString:@&amp;quot; min&amp;quot;
                withString:@&amp;quot;&amp;quot;];
      }]

     filter:^BOOL(NSString* string) {
       return string.length &amp;gt; 0;
     }]

    map:^NSNumber*(NSString* stringValue) {
      return @([stringValue integerValue]);
    }]

   getOrElse:^NSNumber*{ return @0; }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Come possiamo vedere, lavorando con la classe &lt;code&gt;Optional&lt;/code&gt;, aggiungere una condizione significa semplicemente &lt;strong&gt;aggiungere uno step&lt;/strong&gt; nella sequenza lineare di espressioni.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;conclusione&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusione:356e4f51f7182f15c3c3e75bc317d5ff&#34;&gt;Conclusione&lt;/h2&gt;

&lt;p&gt;Implementare la classe &lt;code&gt;Optional&lt;/code&gt; in Objective-C ci ha permesso di parsare un JSON, cosa spesso difficile da mantenere e soggetta a errori, in un modo semplice e lineare. In realtà ci sono &lt;strong&gt;molti casi&lt;/strong&gt; in cui lavorare con gli &lt;em&gt;optionals&lt;/em&gt; ci può dare gli stessi vantaggi: componendo operazioni di tipo &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt; e &lt;code&gt;filter&lt;/code&gt; possiamo esprimere il nostro intento in maniera chiara e leggibile. Ma tutto questo non riguarda solo il tipo &lt;code&gt;Optional&lt;/code&gt;: alcuni lettori avranno probabilmente notato che molti linguaggi (incluso Swift) permettono operazioni dell stesso tipo su liste e array, e il loro significato è identico: &lt;code&gt;map&lt;/code&gt; e &lt;code&gt;flatMap&lt;/code&gt;, in particolare, sono &lt;strong&gt;concetti generici&lt;/strong&gt; legati ai &lt;em&gt;monad&lt;/em&gt; (in effetti, anche il tipo &lt;code&gt;Array&lt;/code&gt; è un &lt;em&gt;monad&lt;/em&gt;), e riguarda la composizione dichiarativa di trasformazioni. Questo concetto è alla base della &lt;strong&gt;programmazione funzionale&lt;/strong&gt;, e penso ci siano molti motivi per applicare concetti simili ad ambienti più &lt;em&gt;object-oriented&lt;/em&gt;, perché aiuterebbero il programmatore a ragionare sul codice ed esprimere l&amp;rsquo;intento in maniera più dichiarativa.&lt;/p&gt;

&lt;p&gt;Il codice per la classe &lt;code&gt;Optional&lt;/code&gt; mostrata nell&amp;rsquo;articolo è reperibile su &lt;a href=&#34;https://gist.github.com/broomburgo/e318228a5f7d6a605e82&#34;&gt;GitHub Gist&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Da sviluppo a produzione con Docker e AWS Elastic Beanstalk</title>
      <link>/blog/ita/da-sviluppo-a-produzione-con-docker-e-aws-elastic-beanstalk/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/da-sviluppo-a-produzione-con-docker-e-aws-elastic-beanstalk/</guid>
      <description>

&lt;h2 id=&#34;in-locale-funzionava:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;In locale funzionava&lt;/h2&gt;

&lt;p&gt;Questo articolo si rivolge a chi ha già una &lt;a href=&#34;https://docs.docker.com/articles/basics&#34;&gt;conoscenza base di docker&lt;/a&gt; e del suo funzionamento e sta cercando come avanzare al passo successivo, usandolo quotidianamente in sviluppo e in produzione.&lt;/p&gt;

&lt;p&gt;Avere un ambiente di sviluppo/test &lt;strong&gt;il più simile possibile&lt;/strong&gt; a quello di produzione aiuta molto nel garantire un &lt;strong&gt;corretto funzionamento dopo il deploy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In uno scenario tipico, lo sviluppatore ha installati sulla propria macchina locale tutti i servizi da cui dipende la sua applicazione, il che comporta quanto segue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nessun tipo di isolamento tra progetti che usano gli stessi servizi (versione, configurazione, dati);&lt;/li&gt;
&lt;li&gt;è difficile avere e mantenere in locale la stessa versione e la stessa configurazione dei servizi in produzione;&lt;/li&gt;
&lt;li&gt;condividere l&amp;rsquo;ambiente di sviluppo con colleghi e collaboratori è difficile se non impossibile;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tutto questo conduce ad una delle peggiori frasi che io abbia mai sentito in tutta la mia esperienza lavorativa:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It works on my machine &lt;em&gt;(in locale funzionava)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/wmm.jpg&#34; alt=&#34;It works on my machine meme&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Potreste pensare che avrei potuto ottenere gli stessi risultati usando Vagrant o una classica macchina virtuale, ma questa soluzione non mi avrebbe dato i benefici di avere un layer di astrazione aggiuntivo senza dovermi preoccupare dell&amp;rsquo;overhead. Infatti posso avere molti più container che girano su una singola macchina di quelli che avrei avuto con la semplice virtualizzazione.&lt;/p&gt;

&lt;h2 id=&#34;bookshelf-uno-scaffale-virtuale:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;Bookshelf: uno scaffale virtuale&lt;/h2&gt;

&lt;p&gt;Per snellire questo articolo ho preparato un&amp;rsquo;&lt;a href=&#34;https://github.com/pennyphp/bookshelf&#34;&gt;applicazione demo&lt;/a&gt; basata su &lt;a href=&#34;http://github.com/pennyphp/penny&#34;&gt;Penny PHP Framework&lt;/a&gt;: è una semplice applicazione per l&amp;rsquo;archiviazione di libri, che consente all&amp;rsquo;utente di creare e visualizzare una lista di libri.&lt;/p&gt;

&lt;h4 id=&#34;download-e-dipendenze:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;Download e dipendenze&lt;/h4&gt;

&lt;p&gt;Per prima cosa, scarichiamo l&amp;rsquo;applicazione dal suo repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/pennyphp/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le dipendenze in PHP sono gestite attraverso &lt;a href=&#34;https://getcomposer.org/&#34;&gt;composer&lt;/a&gt;, e per soddisfarle basta digitare il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gli assets del frontend sono gestiti attraverso &lt;a href=&#34;http://bower.io&#34;&gt;Bower&lt;/a&gt; + &lt;a href=&#34;http://gruntjs.com/&#34;&gt;Grunt&lt;/a&gt;; i due seguenti comandi scaricheranno e compileranno le dipendenze e produrranno gli assets direttamente nella cartella pubblica:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
grunt dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;avviare-l-ambiente-di-sviluppo:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;Avviare l&amp;rsquo;ambiente di sviluppo&lt;/h4&gt;

&lt;p&gt;Come potete vedere l&amp;rsquo;applicazione demo è distribuita con un ambiente di sviluppo docker che potete trovare nella cartella &lt;a href=&#34;https://github.com/pennyphp/bookshelf/tree/master/docker/development&#34;&gt;docker/development&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Osservando il contenuto di &lt;code&gt;docker/development&lt;/code&gt; possiamo trovare altre due cartelle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nginx/&lt;/code&gt;: questa directory contiene un Dockerfile che eredita l&amp;rsquo;immagine da &lt;a href=&#34;https://github.com/fntlnz/dockerfiles/tree/master/nginx&#34;&gt;fntlnz/nginx&lt;/a&gt; per crearne una nuova con la configurazione nginx necessaria;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fpm/&lt;/code&gt;: questa directory contiene un Dockerfile che eredita l&amp;rsquo;immagine da &lt;a href=&#34;https://github.com/fntlnz/dockerfiles/tree/master/php&#34;&gt;fntlnz/php&lt;/a&gt; per crearne una nuova con la configurazione e le estensioni di php-fpm necessarie;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dal momento che non abbiamo Elastic Beanstalk sulla nostra macchina locale (ne parleremo in seguito) e abbiamo bisogno di un modo per orchestrare i nostri container, lo faremo utilizzando &lt;strong&gt;docker-compose&lt;/strong&gt;. Ho deciso di usare Docker Compose al posto del comando &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-local.html&#34;&gt;&lt;strong&gt;eb local&lt;/strong&gt;&lt;/a&gt; (che consente di far girare l&amp;rsquo;ambiente di elastic beanstalk in locale) perché allo stato dell&amp;rsquo;arte compose è più facile da usare e mantenere in locale.&lt;/p&gt;

&lt;h6 id=&#34;il-file-docker-compose-yml:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;Il file &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/h6&gt;

&lt;p&gt;Per farlo dobbiamo creare un file &lt;code&gt;docker-compose.yml&lt;/code&gt; nella nostra root di progetto.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp docker/docker-compose.yml.development docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A questo punto, nel nostro &lt;code&gt;docker-compose.yml&lt;/code&gt; dovremmo avere quattro container da avviare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;il container &lt;strong&gt;Nginx&lt;/strong&gt;, che contiene un paragrafo server in ascolto sulla porta 80.&lt;/li&gt;
&lt;li&gt;il container &lt;strong&gt;fpm&lt;/strong&gt;, che condivide un volume con la macchina host in modo da poter modificare il codice senza bisogno di ricostruire il container; inoltre, il container è collegato al container mysql per consentire agli script php di connettervisi;&lt;/li&gt;
&lt;li&gt;il container &lt;strong&gt;mysql&lt;/strong&gt;, che conterrà i nostri dati di sviluppo;&lt;/li&gt;
&lt;li&gt;il container &lt;strong&gt;redis&lt;/strong&gt;, usato come cache, principalmente da Doctrine;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si noti come, dal momento che &lt;a href=&#34;https://docs.docker.com/userguide/dockerlinks/&#34;&gt;i container sono collegati&lt;/a&gt; è possibile accedere ad un servizio esposto usando il nome assegnato al container collegato; ad esempio, nel nostro caso il container fpm è &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/docker/docker-compose.yml.development#L19-L20&#34;&gt;collegato al container mysql&lt;/a&gt;: è per questo che l&amp;rsquo;host configurato nella &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/config/doctrine.local.php.dist#L13&#34;&gt;configurazione di doctrine locale&lt;/a&gt; è &lt;code&gt;mysql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Se non l&amp;rsquo;avete ancora fatto, dovrete buildare l&amp;rsquo;immagine &lt;code&gt;fpm&lt;/code&gt; e scaricare le immagini &lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt; e &lt;code&gt;redis&lt;/code&gt;; per farlo, digitate il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ora che avete tutto ciò che vi serve potete avviare i container con:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A questo punto i quattro container dovrebbero essere in esecuzione: potete verificare che tutto sia a posto con il comando &lt;code&gt;docker ps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Per proseguire, abbiamo bisogno di conoscere l&amp;rsquo;indirizzo ip del container nginx. Il port forwarding del container nginx è configurato come &lt;code&gt;80:80&lt;/code&gt;, perciò è disponibile su &lt;strong&gt;linux&lt;/strong&gt; agli indirizzi &lt;code&gt;127.0.0.1:80&lt;/code&gt; e &lt;code&gt;localhost:80&lt;/code&gt;, mentre su &lt;strong&gt;OS X&lt;/strong&gt; all&amp;rsquo;indirizzo associato alla docker-machine; per identificarlo, usare il comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine env &amp;lt;yourmachinename&amp;gt; | grep DOCKER_HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;È ora di collegarci all&amp;rsquo;ip del nostro container nginx!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/books.png&#34; alt=&#34;Bookshelf screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yay! Il nostro ambiente di sviluppo è in esecuzione!&lt;/p&gt;

&lt;h4 id=&#34;configurare-e-attivare-l-ambiente-di-produzione:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;Configurare e attivare l&amp;rsquo;ambiente di produzione&lt;/h4&gt;

&lt;p&gt;A questo punto ci serve un modo per rilasciare la nostra applicazione in produzione che possa: eseguire container Docker, scalare senza intoppi e possibilmente aver già installato altri interessanti componenti come, ad esempio, per il monitoring.&lt;/p&gt;

&lt;p&gt;La scelta è caduta su &lt;a href=&#34;https://aws.amazon.com/elasticbeanstalk&#34;&gt;AWS Elastic Beanstalk&lt;/a&gt; ha tutto ciò che abbiamo elencato ed ha inoltre una tariffazione più competitiva con un &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;Free Tier&lt;/a&gt; iniziale, sufficiente per far girare questa demo.&lt;/p&gt;

&lt;p&gt;Prima di iniziare abbiamo bisogno di un account &lt;strong&gt;Amazon Web Services&lt;/strong&gt;; se non ne avete ancora uno, potete crearlo &lt;a href=&#34;https://aws.amazon.com/account&#34;&gt;qui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Per configurare, rilasciare e gestire la nostra infrastruttura avremo bisogno del &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html&#34;&gt;comando eb&lt;/a&gt;; per installarlo, digitare:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install awsebcli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Per avere accesso alla piattaforma dalla vostra riga di comando usando il comando &lt;strong&gt;eb&lt;/strong&gt; dovrete configurare uno &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.roles.aeb.html&#34;&gt;&lt;strong&gt;IAM ROLE&lt;/strong&gt;&lt;/a&gt; ed associarlo ad uno &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html&#34;&gt;&lt;strong&gt;IAM User&lt;/strong&gt;&lt;/a&gt;. La creazione assistita di uno IAM User vi &lt;strong&gt;darà due chiavi&lt;/strong&gt;, chiamate &lt;em&gt;AWS Access Key ID&lt;/em&gt; e &lt;em&gt;AWS Secret Access Key&lt;/em&gt;. Ci serviranno durante il prossimo passaggio.&lt;/p&gt;

&lt;p&gt;A questo punto possiamo &lt;strong&gt;initialize&lt;/strong&gt; il nostro progetto Bookshelf. Questo comando ci chiederà le due Access keys, oltre che alcune domande durante l&amp;rsquo;installazione.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ora che il progetto è inizializzato dobbiamo &lt;strong&gt;creare un nuovo ambiente&lt;/strong&gt;. Questo comando creerà effettivamente un&amp;rsquo;istanza &lt;strong&gt;t2.micro EC2&lt;/strong&gt;, i gruppi di sicurezza, il load balancer, le notifiche cloudwatch ecc..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb create bookshelf-production
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prima di rilasciare l&amp;rsquo;applicazione in produzione dobbiamo generare un &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;Token Github per composer&lt;/a&gt;.
Questo è necessario per scaricare tutte le dipendenze senza intoppi.
Per aggiungere il token all&amp;rsquo;ambiente:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb setenv COMPOSER_TOKEN=&amp;lt;your-token-here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ora potete verificare che il sistema sia pronto digitando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quando lo stato dell&amp;rsquo;applicazione diventa &lt;strong&gt;Ready&lt;/strong&gt; potete a tutti gli effetti pubblicare l&amp;rsquo;applicazione con:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il deployment creerà i container descritti in &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/Dockerrun.aws.json&#34;&gt;Dockerrun.aws.json&lt;/a&gt; e i files descritti in &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/.ebextensions/dependencies.config&#34;&gt;dependencies.config&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se vi state chiedendo cosa sia realmente il file &lt;strong&gt;Dockerrun.aws.json&lt;/strong&gt;, basta dire che sta ad Elastic Beanstalk come &lt;code&gt;docker-compose.yml&lt;/code&gt; sta all&amp;rsquo;ambiente locale.&lt;/p&gt;

&lt;p&gt;I file contenuti in &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/.ebextensions/&#34;&gt;.ebextensions&lt;/a&gt; consentono di personalizzare e configurare il software da cui la vostra applicazione dipende. Il file &lt;strong&gt;dependencies.config&lt;/strong&gt; è uno di questi. È proprio lui a risolvere le dipendenze di composer, a compilare gli asset del frontend con grunt e bower e a creare l&amp;rsquo;immagine PHP FPM usata nel &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/docker/production/fpm/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; di produzione. È importante notare che l&amp;rsquo;immagine viene nuovamente costruita solo se il Dockerfile viene modificato.&lt;/p&gt;

&lt;p&gt;Come avrete notato, [Dockerrun.aws.json](&lt;a href=&#34;https://github.com&#34;&gt;https://github.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La configurazione di default dell&amp;rsquo;applicazione Bookshelf riceve i parametri di connessione a Mysql e Redis &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/config/doctrine.global.php&#34;&gt;dalle variabili d&amp;rsquo;ambiente&lt;/a&gt; che sono:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MYSQL_HOST
MYSQL_PORT
MYSQL_USERNAME
MYSQL_PASSWORD
MYSQL_DATABASE
REDIS_HOST
REDIS_PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ognuna di queste variabili d&amp;rsquo;ambiente può essere impostata usando il comando che abbiamo precedentemente usato per &lt;code&gt;COMPOSER_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Potete ottenere i parametri di connessione per Mysql e Redis dopo aver creato &lt;a href=&#34;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CreateInstance.html&#34;&gt;un&amp;rsquo;istanza RDS Mysql DB&lt;/a&gt; e un &lt;a href=&#34;http://docs.aws.amazon.com/opsworks/latest/userguide/other-services-redis-cluster.html&#34;&gt;Cluster ElastiCache Redis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A questo punto, con i container nginx e fpm in esecuzione e i database configurati, potete digitare &lt;code&gt;eb open&lt;/code&gt; per aprire l&amp;rsquo;applicazione in produzione e verificare se tutto è ok!&lt;/p&gt;

&lt;p&gt;La vostra infrastruttura, così com&amp;rsquo;è, è anche già pronta per scalare automaticamente; per muovere i primi passi in questa direzione potete dare un&amp;rsquo;occhiata al comando &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-scale.html&#34;&gt;&lt;code&gt;eb scale&lt;/code&gt;&lt;/a&gt; e alla &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.managing.as.html&#34;&gt;documentazione di AWS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;: Se qualcosa dovesse andare storto potete accedere via ssh nella macchina Elastic Beanstalk EC2 con &lt;code&gt;eb ssh&lt;/code&gt; e analizzare lo stato dei container usando strumenti che già conoscete come &lt;code&gt;docker logs&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;è-fatta:242a8db2bfd7fdd1c283c509db3a4bdb&#34;&gt;È fatta!&lt;/h4&gt;

&lt;p&gt;Ora potete risparmiare un sacco di tempo automatizzando il vostro workflow con docker ed ottenere un ambiente di sviluppo funzionante, auto-contenuto e condivisibile, pur mantenendolo molto simile alla vostra stabile ed efficiente infrastruttura in esecuzione nell&amp;rsquo;ambiente di produzione, sulle cui risorse avete pieno controllo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/good-job.jpg&#34; alt=&#34;congratulations&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From development to production with Docker and AWS Elastic Beanstalk</title>
      <link>/blog/eng/from-development-to-production-with-docker-and-amazon-ecs/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/eng/from-development-to-production-with-docker-and-amazon-ecs/</guid>
      <description>

&lt;h1 id=&#34;it-works-on-my-machine:824629f989995bd0ef3a2fb42ac10127&#34;&gt;It works on my machine&lt;/h1&gt;

&lt;p&gt;This post is addressed to people who already have &lt;a href=&#34;https://docs.docker.com/articles/basics&#34;&gt;basic knowledge about docker&lt;/a&gt;, about how it works and are looking for a way to move to the next step with the goal of using it in development and production day by day.&lt;/p&gt;

&lt;p&gt;Having a development/testing environment &lt;strong&gt;as close as possible&lt;/strong&gt; to the production one helps a lot in assuring that &lt;strong&gt;things will behave correctly when delivered&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In a typical scenario, the developer has all the services on which the application depends installed on his local machine, which means the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there&amp;rsquo;s no isolation between projects using the same services (versions, configurations, data);&lt;/li&gt;
&lt;li&gt;it&amp;rsquo;s hard to have and maintain production-like services&amp;rsquo; versions and configurations in development;&lt;/li&gt;
&lt;li&gt;sharing the development environment with co-workers is difficult if not impossible;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of that leads to one of the worst sentences I&amp;rsquo;ve ever heard saying in my experience:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It works on my machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/wmm.jpg&#34; alt=&#34;It works on my machine meme&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You might think that I could obtain the same results using Vagrant or plain virtual machines but that solution wouldn&amp;rsquo;t give me the benefit of having an extra layer of abstraction without having to worry about the overhead. In fact I can have more and more containers running on a single machine than I can have with virtualization.&lt;/p&gt;

&lt;h1 id=&#34;bookshelf-application:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Bookshelf application&lt;/h1&gt;

&lt;p&gt;To streamline this article I prepared a &lt;a href=&#34;https://github.com/pennyphp/bookshelf&#34;&gt;demo application&lt;/a&gt; using the &lt;a href=&#34;http://github.com/pennyphp/penny&#34;&gt;Penny PHP Framework&lt;/a&gt;: it&amp;rsquo;s a simple book archiving application, that allows the user to create and view a list of books.&lt;/p&gt;

&lt;h2 id=&#34;download-and-dependencies:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Download and dependencies&lt;/h2&gt;

&lt;p&gt;First, download the demo application from its repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/pennyphp/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP Dependencies are managed through &lt;a href=&#34;https://getcomposer.org/&#34;&gt;composer&lt;/a&gt;, and to get them just issue the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Frontend assets are managed through &lt;a href=&#34;http://bower.io&#34;&gt;Bower&lt;/a&gt; + &lt;a href=&#34;http://gruntjs.com/&#34;&gt;Grunt&lt;/a&gt;; the following two commands will respectively download build dependencies and then build the assets, by copying them in the public directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
grunt dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;up-and-running-development-environment:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Up and running development environment&lt;/h2&gt;

&lt;p&gt;As you can see the demo app comes with a docker development environment that can be found under the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/tree/master/docker/development&#34;&gt;docker/development&lt;/a&gt; folder.&lt;/p&gt;

&lt;p&gt;By inspecting the content of the &lt;code&gt;docker/development&lt;/code&gt; folder we can find two directories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nginx/&lt;/code&gt;: this directory contains a Dockerfile that inherits from the &lt;a href=&#34;https://github.com/fntlnz/dockerfiles/tree/master/nginx&#34;&gt;fntlnz/nginx&lt;/a&gt; image to create a new one with the needed nginx configurations;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fpm/&lt;/code&gt;: this directory contains a Dockerfile that inherits from the &lt;a href=&#34;https://github.com/fntlnz/dockerfiles/tree/master/php&#34;&gt;fntlnz/php&lt;/a&gt; image to create a new one with the needed php-fpm configurations and extensions;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because we don&amp;rsquo;t have Elastic Beanstalk on our local machine (we&amp;rsquo;ll talk about it later) and we need a way to orchestrate our containers, we&amp;rsquo;ll do it by using &lt;strong&gt;docker-compose&lt;/strong&gt;. I decided to use Docker Compose instead of using the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-local.html&#34;&gt;&lt;strong&gt;eb local&lt;/strong&gt;&lt;/a&gt; command (which allows to run elastic beanstalk environment in local) because at the state of art compose is easier to use and to manage in local.&lt;/p&gt;

&lt;h4 id=&#34;the-docker-compose-yml:824629f989995bd0ef3a2fb42ac10127&#34;&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;In order to do so we have to create a &lt;code&gt;docker-compose.yml&lt;/code&gt; in our project root.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp docker/docker-compose.yml.development docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, in our &lt;code&gt;docker-compose.yml&lt;/code&gt; we should have four containers to start:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;Nginx&lt;/strong&gt; container, which contains a server block  for the bookshelf application listening on port 80.&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;fpm&lt;/strong&gt; container, which does have a shared volume with the host machine so you can change the code without the need to rebuild the container image; also, the container is linked with the mysql container to allow mysql access from php scripts;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;mysql&lt;/strong&gt; container, which will contain our development data;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;redis&lt;/strong&gt; container, used for caching purposes, mainly by Doctrine;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that since &lt;a href=&#34;https://docs.docker.com/userguide/dockerlinks/&#34;&gt;containers are linked&lt;/a&gt; you can access to an exposed service by using the name given to the linked container; for example, in our case the fpm container is &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/docker/docker-compose.yml.development#L19-L20&#34;&gt;linked to the mysql container&lt;/a&gt;: that&amp;rsquo;s why the configured host is &lt;code&gt;mysql&lt;/code&gt; in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/config/doctrine.local.php.dist#L13&#34;&gt;doctrine local connection configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t done it yet, you need to build the &lt;code&gt;fpm&lt;/code&gt; docker image and download the &lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt; and &lt;code&gt;redis&lt;/code&gt; images; to do so, issue the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you have all what you need you can start the containers with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point the four containers should be up and running: you can check if everything&amp;rsquo;s okay by issuing the &lt;code&gt;docker ps&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;To proceed, we need to know the ip address of our nginx container. Since the nginx container&amp;rsquo;s port forwarding configuration is &lt;code&gt;80:80&lt;/code&gt;, on &lt;strong&gt;linux&lt;/strong&gt; it should be available at &lt;code&gt;127.0.0.1:80&lt;/code&gt; or &lt;code&gt;localhost:80&lt;/code&gt;, while on &lt;strong&gt;OS X&lt;/strong&gt; it should be available at the ip address associated to the docker-machine host; to retrieve it, issue the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine env &amp;lt;yourmachinename&amp;gt; | grep DOCKER_HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s time to point your browser to the nginx container ip address!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/books.png&#34; alt=&#34;Bookshelf screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yay! Our development environment is up and running!&lt;/p&gt;

&lt;h2 id=&#34;up-and-running-production-environment:824629f989995bd0ef3a2fb42ac10127&#34;&gt;Up and running production environment&lt;/h2&gt;

&lt;p&gt;At this point we need a solution to deploy our application in production that can: run Docker containers, scale without hassle and possibly have other nice things already setup like, let&amp;rsquo;s say, monitoring.&lt;/p&gt;

&lt;p&gt;The choice fell on &lt;a href=&#34;https://aws.amazon.com/elasticbeanstalk&#34;&gt;AWS Elastic Beanstalk&lt;/a&gt; because it has all those things and in addition it has a more competitive pricing model with an initial &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;Free Tier&lt;/a&gt; which it is enough to run this demo.&lt;/p&gt;

&lt;p&gt;Before we start we need an &lt;strong&gt;Amazon Web Services&lt;/strong&gt; account, if you don&amp;rsquo;t have one yet, you can create it &lt;a href=&#34;https://aws.amazon.com/account&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To configure, deploy and manage our infrastructure we are going to need the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html&#34;&gt;eb command&lt;/a&gt;, to get it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install awsebcli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to obtain access to the platform from your command line using the &lt;strong&gt;eb&lt;/strong&gt; command you have to setup an &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.roles.aeb.html&#34;&gt;&lt;strong&gt;IAM ROLE&lt;/strong&gt;&lt;/a&gt; and associate it to an &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html&#34;&gt;&lt;strong&gt;IAM User&lt;/strong&gt;&lt;/a&gt;. The IAM User creation wizard will &lt;strong&gt;give you two keys&lt;/strong&gt;, namely the &lt;em&gt;AWS Access Key ID&lt;/em&gt; and the &lt;em&gt;AWS Secret Access Key&lt;/em&gt;. We are going to need them during the next step.&lt;/p&gt;

&lt;p&gt;At this point we can &lt;strong&gt;initialize&lt;/strong&gt; our bookshelf project. This command will prompt us for the two Access keys plus a few question about our setup.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the project is initialized we have to &lt;strong&gt;create a new environment&lt;/strong&gt;. This will actually start a &lt;strong&gt;t2.micro EC2&lt;/strong&gt; instance, create the security groups, the load balancer, cloudwatch alarms etc..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb create bookshelf-production
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before deploying the application to production we have to generate a &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;Github Token for composer&lt;/a&gt;.
This is needed to allow composer to download dependencies without hassle.
To add the token to your environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb setenv COMPOSER_TOKEN=&amp;lt;your-token-here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can check if the system is ready issuing a:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the status becomes &lt;strong&gt;Ready&lt;/strong&gt; you can actually deploy the application with a:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eb deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The deployment will create the containers described in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/Dockerrun.aws.json&#34;&gt;Dockerrun.aws.json&lt;/a&gt; and create the files described in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/.ebextensions/dependencies.config&#34;&gt;dependencies.config&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;If you are asking yourslef what the &lt;strong&gt;Dockerrun.aws.json&lt;/strong&gt; actually is, suffice it to say that is to Elastic beanstalk as the &lt;code&gt;docker-compose.yml&lt;/code&gt; is to the local environment.&lt;/p&gt;

&lt;p&gt;The files contained in the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/.ebextensions/&#34;&gt;.ebextensions&lt;/a&gt; allows you to customize and configure the software that your application depends on. The &lt;strong&gt;dependencies.config&lt;/strong&gt; is one of them. It actually resolves composer dependencies, build frontend assets using grunt and bower and create the PHP FPM image using the production &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/docker/production/fpm/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;. It&amp;rsquo;s important to note that the image is rebuilt only if changes are made to the Dockerfile.&lt;/p&gt;

&lt;p&gt;As you may have noticed, the &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/Dockerrun.aws.json&#34;&gt;Dockerrun.aws.json&lt;/a&gt; contains definitions just for the Nginx and fpm containers. This is because for &lt;strong&gt;Redis&lt;/strong&gt; and &lt;strong&gt;Mysql&lt;/strong&gt; we are going to use respectively &lt;a href=&#34;https://aws.amazon.com/elasticache/&#34;&gt;&lt;strong&gt;Elasticache&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/rds/&#34;&gt;&lt;strong&gt;RDS&lt;/strong&gt;&lt;/a&gt;. RDS and Elasticache are two production ready, scalable and reliable solutions that makes easier to setup a cost-efficient relational database and key value store taking charge of common database administration tasks.&lt;/p&gt;

&lt;p&gt;The Bookshelf application by default is configured to take Mysql and Redis connection parameters &lt;a href=&#34;https://github.com/pennyphp/bookshelf/blob/2e55738da9ff9e45fa44add9d97280635e95399d/config/doctrine.global.php&#34;&gt;from environment variables&lt;/a&gt; which are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MYSQL_HOST
MYSQL_PORT
MYSQL_USERNAME
MYSQL_PASSWORD
MYSQL_DATABASE
REDIS_HOST
REDIS_PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each one of these environment variables can be set using the command we previously used for the &lt;code&gt;COMPOSER_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can obtain Mysql and Redis connection parameters after creating an &lt;a href=&#34;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CreateInstance.html&#34;&gt;RDS Mysql DB instance&lt;/a&gt; and an &lt;a href=&#34;http://docs.aws.amazon.com/opsworks/latest/userguide/other-services-redis-cluster.html&#34;&gt;ElastiCache Redis Cluster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point with the running Nginx and fpm containers and configured databases you can issue an &lt;code&gt;eb open&lt;/code&gt; to open the live production application and see if all&amp;rsquo;s okay!&lt;/p&gt;

&lt;p&gt;As well as ready your infrastructure is also ready to scale and auto scale, to move a first step trough this direction you can take a look at the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-scale.html&#34;&gt;&lt;code&gt;eb scale&lt;/code&gt;&lt;/a&gt; command and at the &lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.managing.as.html&#34;&gt;AWS documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;: If something went wrong you can ssh into the elastic beanstalk EC2 machine with a &lt;code&gt;eb ssh&lt;/code&gt; and inspect containers status using tools you already know like &lt;code&gt;docker logs&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;you-are-done:824629f989995bd0ef3a2fb42ac10127&#34;&gt;You are done!&lt;/h1&gt;

&lt;p&gt;You can now save a lot of time automating your workflow using docker while having a fully working, self-contained and shareable development environment very close to your running, stable and efficient production infrastructure over which you have full control of the resources.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/from-development-to-production-with-docker-and-amazon-ecs/good-job.jpg&#34; alt=&#34;congratulations&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paraunit: test paralleli, Doctrine e le fixture</title>
      <link>/blog/ita/paraunit/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/ita/paraunit/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Questo articolo è la sintesi di un talk presentato al &lt;a href=&#34;http://2015.symfonyday.it/&#34;&gt;SymfonyDay 2015&lt;/a&gt;; potete trovare le slide &lt;a href=&#34;http://jean85.github.io/slides/2015-10-paraunit-symfonyday/index.html&#34;&gt;qui&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;i-test-e-la-loro-durata:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;I test e la loro durata&lt;/h4&gt;

&lt;p&gt;Sviluppare applicazioni scrivendo &lt;strong&gt;test&lt;/strong&gt; e facendo &lt;a href=&#34;https://it.wikipedia.org/wiki/Test_driven_development&#34;&gt;Test Driven Development&lt;/a&gt; è un&amp;rsquo;ottima pratica, e dà parecchie soddisfazioni. Con l&amp;rsquo;andare del tempo, si fa &lt;strong&gt;crescere la suite di test&lt;/strong&gt; del proprio progetto, cercando di aumentarne la copertura e l&amp;rsquo;efficacia e si scrivono nuovi test corrispondenti alle nuove funzionalità che vengono man mano sviluppate.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;aumento della quantità di test però porta alla crescita (direttamente proporzionale) del &lt;strong&gt;tempo necessario&lt;/strong&gt; ad eseguire i test stessi.
Nel caso dei &lt;strong&gt;test unitari&lt;/strong&gt; questo aumento è spesso trascurabile, poiché &lt;strong&gt;si limitano a caricare una singola classe&lt;/strong&gt; e ad analizzarne il comportamento in completo isolamento, terminando la loro esecuzione nel giro di &lt;strong&gt;pochi millisecondi&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quando invece parliamo di &lt;strong&gt;test funzionali&lt;/strong&gt;, il tempo di esecuzione non è più così limitato: vengono caricate &lt;strong&gt;molte più classi&lt;/strong&gt;, spesso viene coinvolto anche il &lt;strong&gt;database&lt;/strong&gt;, deve essere messa alla prova l&amp;rsquo;interazione tra molti elementi; il tutto porta a test la cui durata è talvolta di &lt;strong&gt;quasi un secondo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Leggendo libri e blog sull&amp;rsquo;argomento, e con l&amp;rsquo;esperienza personale, ho imparato che c&amp;rsquo;è una &lt;strong&gt;soglia critica&lt;/strong&gt; che rappresenta il limite ideale oltre il quale una test suite diventa troppo lenta, e questa soglia è di &lt;strong&gt;circa dieci minuti&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ma perché proprio dieci minuti? Il motivo è molto semplice, e pratico: in dieci minuti, il programmatore può fare una pausa, prendersi un caffè o decidere di discutere brevemente una questione tecnica con un collega, e al suo ritorno troverà la suite completata e potrà procedere col lavoro. In caso contrario, possono succedere due cose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;il programmatore &lt;strong&gt;rimane a fissare lo schermo&lt;/strong&gt; mentre i test si eseguono, dando ragione ai detrattori dei test che affermano che fare TDD è una perdita di tempo;&lt;/li&gt;
&lt;li&gt;si &lt;strong&gt;smette di eseguire la test suite&lt;/strong&gt;, o per lo meno di farla eseguire per intero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La seconda opzione può sembrare fattibile: si fanno girare solo i &lt;strong&gt;test strettamente necessari&lt;/strong&gt; mentre si sviluppa, quelli che vengono scritti in quel momento o che coprono la parte di codice che si sta modificando, per poi eseguire il commit del proprio codice senza far girare l&amp;rsquo;intera suite.&lt;/p&gt;

&lt;p&gt;In realtà &lt;strong&gt;questo approccio fa perdere valore ai test&lt;/strong&gt; stessi, perché i test sono codice che non andrà mai in produzione, e che quindi può dare valore ai nostri progetti solo se viene eseguito ogni volta. Inoltre questo approccio nasconde &lt;strong&gt;una trappola&lt;/strong&gt;, dato che i test, per essere davvero efficaci, vanno eseguiti tutti ogni volta: la loro forza sta proprio nell&amp;rsquo;&lt;strong&gt;individuare gli effetti collaterali&lt;/strong&gt; imprevisti delle nostre modifiche, i bug che possono presentarsi in punti inaspettati e apparentemente lontani del nostro progetto.&lt;/p&gt;

&lt;h4 id=&#34;esecuzione-parallela-dei-test:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;Esecuzione parallela dei test&lt;/h4&gt;

&lt;p&gt;In Facile.it lavoro in un progetto basato su Symfony2 e Doctrine e mi sono trovato proprio davanti a questa problematica: avevamo una &lt;strong&gt;suite di test che stava crescendo&lt;/strong&gt; a ritmo sostenuto e che a volte impiegava ad eseguirsi, tra build di preparazione ed esecuzione vera e propria, anche 25 minuti.&lt;/p&gt;

&lt;p&gt;Dopo aver ottimizzato le prestazioni del nostro ambiente di sviluppo (passando da Vagrant a Docker, ma questa è un&amp;rsquo;altra storia), ci siamo resi conto di aver bisogno di una soluzione più drastica al nostro problema, e abbiamo pensato di &lt;strong&gt;eseguire in parallelo i nostri test&lt;/strong&gt; per sfruttare al meglio le risorse hardware e ridurre così i tempi di esecuzione.&lt;/p&gt;

&lt;p&gt;Dopo un po&amp;rsquo; di ricerche, abbiamo individuato alcuni tool esistenti che permettevano questo approccio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brianium/paratest&#34;&gt;brianium/paratest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/liuggio/fastest&#34;&gt;liuggio/fastest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entrambi i tool sono ben sviluppati e semplici da utilizzare e le prime prove sui &lt;strong&gt;test unitari&lt;/strong&gt; sono state molto promettenti: grazie alla ridotta dimensione, la loro parallelizzazione è estremamente semplice.&lt;/p&gt;

&lt;h4 id=&#34;i-problemi-di-concorrenza-nei-test-funzionali:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;I problemi di concorrenza nei test funzionali&lt;/h4&gt;

&lt;p&gt;Quando siamo passati a provare Paratest sui &lt;strong&gt;test funzionali&lt;/strong&gt; abbiamo invece incontrato grossi problemi, che si concretizzavano in &lt;strong&gt;fallimenti casuali durante l&amp;rsquo;esecuzione parallela&lt;/strong&gt;. Questi fallimenti erano dati da un problema molto semplice: stavamo accedendo più volte e in parallelo al nostro database di test.&lt;/p&gt;

&lt;p&gt;Ma perché il nostro codice, che è lo stesso che viene eseguito in produzione (dove elabora centinaia, migliaia di richieste al minuto) ha così tanti &lt;strong&gt;problemi di accesso concorrente&lt;/strong&gt; nell&amp;rsquo;ambiente di test? I motivi sono semplici:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;i dati di test sono pochi&lt;/strong&gt;, mentre in produzione abbiamo tabelle da milioni di righe;&lt;/li&gt;
&lt;li&gt;per questo motivo &lt;strong&gt;i test tentano di accedere sempre alle stesse righe&lt;/strong&gt; del database;&lt;/li&gt;
&lt;li&gt;la &lt;strong&gt;sequenza&lt;/strong&gt; di operazioni di ogni test in genere è &lt;strong&gt;lettura - elaborazione - scrittura&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;i test hanno una &lt;strong&gt;rapidità di esecuzione&lt;/strong&gt; superiore a quella di un utilizzatore umano.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tutti questi motivi contribuiscono a creare situazioni in cui &lt;strong&gt;si verificano dei &lt;a href=&#34;https://it.wikipedia.org/wiki/Deadlock&#34;&gt;deadlock&lt;/a&gt;&lt;/strong&gt; e che il nostro database può risolvere solo bloccando uno dei due tentativi di accesso ai dati, facendo così fallire il test corrispondente.&lt;/p&gt;

&lt;p&gt;Un altro problema che può verificarsi è l&amp;rsquo;&lt;strong&gt;alterazione dei dati&lt;/strong&gt;: quando due test vengono eseguiti in contemporanea, uno dei due può modificare il database e, così facendo, può far mancare i giusti dati di partenza ad un altro test che si sta avviando nello stesso istante.&lt;/p&gt;

&lt;p&gt;Purtroppo &lt;strong&gt;Paratest non offre una soluzione&lt;/strong&gt; a questo genere di problemi, mentre Fastest propone come approccio la creazione di un database di test differente per ogni core del proprio processore, per poi eseguire tanti test in parallelo quanti sono i database a disposizione.&lt;/p&gt;

&lt;p&gt;Sfortunatamente anche questo approccio non ci ha soddisfatto, in quanto la costruzione del nostro database di test era piuttosto lenta (avevamo molte migration da eseguire e altrettante fixture da caricare ogni volta) e rischiavamo di guadagnare tempo da una parte per perderlo dall&amp;rsquo;altra, inoltre, avevamo avuto &lt;strong&gt;un&amp;rsquo;idea nuova&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;facile-it-paraunit:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;facile-it/paraunit&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/paraunit/version.svg&#34; alt=&#34;Packagist&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://travis-ci.org/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://travis-ci.org/facile-it/paraunit.svg&#34; alt=&#34;Travis build&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://codeclimate.com/github/facile-it/paraunit&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/facile-it/paraunit/badges/gpa.svg&#34; alt=&#34;Codeclimate&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/facile-it/paraunit?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/facile-it/paraunit/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abbiamo così deciso di sviluppare la nostra soluzione: &lt;strong&gt;&lt;a href=&#34;https://github.com/facile-it/paraunit&#34;&gt;facile-it/paraunit&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;è sviluppato con i &lt;strong&gt;componenti Symfony&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sa leggere la configurazione XML di PHPUnit&lt;/strong&gt; per individuare le test suite;&lt;/li&gt;
&lt;li&gt;esegue il &lt;strong&gt;parsing e l&amp;rsquo;aggregazione dei risultati&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;grazie ai processi separati, &lt;strong&gt;sa gestire i fatal error&lt;/strong&gt; senza far bloccare completamente l&amp;rsquo;esecuzione;&lt;/li&gt;
&lt;li&gt;sempre grazie ai processi, riesce ad &lt;strong&gt;ottimizzare l&amp;rsquo;uso della memoria&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;risulta &lt;strong&gt;affidabile&lt;/strong&gt; grazie al fatto che basa il suo responso sugli exit code dei singoli processi PHPUnit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La maggior parte di questi vantaggi sono ovviamente comuni a tutti gli approcci di parallelizzazione dei test, inoltre, grazie al parsing dei risultati, &lt;strong&gt;Paraunit sa riconoscere i casi di fallimento dovuti a deadlock&lt;/strong&gt; e riesegue i test che falliscono per questo motivo.&lt;/p&gt;

&lt;p&gt;Questo però era solo un primo passo e ovviamente ci siamo concentrati sull&amp;rsquo;implementare una &lt;strong&gt;soluzione radicale ai problemi di concorrenza&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;facile-it-paraunit-testcase:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;facile-it/paraunit-testcase&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/facile-it/paraunit-testcase&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/facile-it/paraunit-testcase/version.svg&#34; alt=&#34;Packagist&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La soluzione che abbiamo trovato è molto semplice: &lt;strong&gt;le transazioni&lt;/strong&gt;.
Per realizzarla nella sua totalità, abbiamo sviluppato un test-case per PHPUnit, rilasciato col pacchetto &lt;strong&gt;&lt;a href=&#34;https://github.com/facile-it/paraunit-testcase&#34;&gt;facile-it/paraunit-testcase&lt;/a&gt;&lt;/strong&gt;; ovviamente il test-case è stato sviluppato in partenza per il nostro caso d&amp;rsquo;uso, ovvero per il &lt;strong&gt;test di un&amp;rsquo;applicazione basata su Symfony2 e Doctrine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Grazie a questo test-case, ogni test può accedere al database solo dentro una transazione e questa transazione non riceve mai il &lt;em&gt;commit&lt;/em&gt;, ma sempre il &lt;strong&gt;rollback&lt;/strong&gt; al termine. Questo significa che &lt;strong&gt;nulla verrà mai realmente scritto&lt;/strong&gt; sul nostro database.&lt;/p&gt;

&lt;p&gt;I vantaggi di questo approccio sono molteplici:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nessun test può interferire&lt;/strong&gt; con gli altri, visto che non possono alterare i dati;&lt;/li&gt;
&lt;li&gt;ogni test può permettersi di &lt;strong&gt;creare al volo un dato o di alterarne uno esistente&lt;/strong&gt;, senza doversi preoccupare di ripulire il database al termine, con grande risparmio di tempo nella scrittura dei test;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;il database di test rimane sempre pulito&lt;/strong&gt; e non dobbiamo più preoccuparci di prepararlo ogni volta che la suite deve essere eseguita, o che eseguiamo un test che può sporcare i dati;&lt;/li&gt;
&lt;li&gt;anche se non viene mai realmente scritto nulla, &lt;strong&gt;il database esegue comunque le verifiche di integrità&lt;/strong&gt;, quali vincoli di unicità o di chiavi esterne;&lt;/li&gt;
&lt;li&gt;diventa &lt;strong&gt;impossibile avere test interdipendenti&lt;/strong&gt;, ovvero test che possono funzionare solo se prima ne vengono eseguiti altri, che modificano in modo ideale i dati di fixture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L&amp;rsquo;unico limite di questo approccio è che le transazioni sono disponibili solo con alcuni database e all&amp;rsquo;interno di Doctrine quindi solo con l&amp;rsquo;&lt;code&gt;EntityManager&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;la-rapidità-di-esecuzione:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;La rapidità di esecuzione&lt;/h4&gt;

&lt;p&gt;Per darvi un&amp;rsquo;idea di quanto possa essere veloce Paraunit rispetto alla normale esecuzione con PHPUnit, ho misurato il tempo di esecuzione della nostra test suite funzionale, che è sufficientemente ampia (261 classi, 1568 metodi):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/paraunit/grafico.png&#34; alt=&#34;Grafico&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Come potete vedere, Paraunit esegue l&amp;rsquo;intera test suite in soli &lt;strong&gt;6 minuti e 6 secondi&lt;/strong&gt;, mentre PHPUnit ci metterebbe &lt;strong&gt;oltre 40 minuti!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ho usato il condizionale per un motivo specifico: il tempo di esecuzione di PHPUnit è in realtà una stima (in proiezione lineare) perché, circa al 12% dell&amp;rsquo;esecuzione, il processo si è chiuso per &lt;strong&gt;esaurimento della memoria&lt;/strong&gt; a disposizione, a riprova di un altro dei vantaggi nell&amp;rsquo;uso di Paraunit.&lt;/p&gt;

&lt;h4 id=&#34;test-coverage-in-parallelo:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;Test coverage in parallelo&lt;/h4&gt;

&lt;p&gt;Un&amp;rsquo;altra caratteristica di Paraunit, attualmente in sviluppo, è la possibilità di &lt;strong&gt;parallelizzare l&amp;rsquo;elaborazione della &lt;a href=&#34;https://phpunit.de/manual/current/en/code-coverage-analysis.html&#34;&gt;coverage&lt;/a&gt;&lt;/strong&gt; dei test.&lt;/p&gt;

&lt;p&gt;Questo è possibile grazie all&amp;rsquo;opzione &lt;code&gt;--coverage-php&lt;/code&gt; di PHPUnit che salva in un file .php il risultato parziale ottenuto; dopo aver lanciato i singoli test come processi separati, Paraunit esegue l&amp;rsquo;unione di tutti questi risultati.&lt;/p&gt;

&lt;h4 id=&#34;sviluppi-futuri:f5798a251e9e47af9f9c30a07b87b80c&#34;&gt;Sviluppi futuri&lt;/h4&gt;

&lt;p&gt;Ovviamente questo è solo l&amp;rsquo;inizio, il primo &lt;strong&gt;rilascio in open source&lt;/strong&gt; della nostra soluzione.
Tra gli sviluppi futuri spero di poter realizzare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la &lt;strong&gt;prioritizzazione dei test lenti&lt;/strong&gt;, ovvero poter eseguire per primi i test noti per la loro lentezza, così da non rallentare l&amp;rsquo;esecuzione complessiva della test suite;&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;aggiunta di &lt;strong&gt;altre opzioni&lt;/strong&gt; di selezione test, come p.e. l&amp;rsquo;opzione &lt;code&gt;--group&lt;/code&gt; di PHPUnit;&lt;/li&gt;
&lt;li&gt;il miglioramento delle &lt;strong&gt;prestazioni&lt;/strong&gt; all&amp;rsquo;avvio dei processi, cosa che pesa molto per i test unitari;&lt;/li&gt;
&lt;li&gt;il &lt;strong&gt;supporto per altri framework e ORM&lt;/strong&gt; oltre a Symfony e Doctrine, creando altri test-case appositi;&lt;/li&gt;
&lt;li&gt;il miglioramento della funzionalità di test coverage parallela;&lt;/li&gt;
&lt;li&gt;una soluzione per i database non transazionali, come MongoDB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vi invito quindi a partecipare allo sviluppo di Paraunit su &lt;a href=&#34;https://github.com/facile-it/paraunit&#34;&gt;GitHub&lt;/a&gt;, proponendo pull request, aprendo issue per proporre nuove feature o anche semplicemente utilizzandolo per le vostre test suite, così da verificarne l&amp;rsquo;efficacia e la compatibilità!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>