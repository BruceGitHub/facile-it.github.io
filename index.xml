<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Facile.it Engineering</title>
    <link>http://engineering.facile.it/</link>
    <description>Recent content on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://engineering.facile.it/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MessagePack: an alternative to JSON?</title>
      <link>http://engineering.facile.it/blog/eng/message-pack-an-alternative-to-json/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/eng/message-pack-an-alternative-to-json/</guid>
      <description>

&lt;p&gt;When we talk about data interchange in web applications, &lt;strong&gt;&lt;a href=&#34;http://www.json.org/&#34;&gt;JSON&lt;/a&gt;&lt;/strong&gt; is the de-facto standard, especially in developing RESTful web services. JSON won against its antagonist &lt;a href=&#34;https://www.w3.org/XML/&#34;&gt;XML&lt;/a&gt; (SOAP) without a battle, but it didn&amp;rsquo;t prevent the development of alternatives like &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Google’s &lt;strong&gt;Protocol Buffers&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://avro.apache.org/&#34;&gt;Apache &lt;strong&gt;Avro&lt;/strong&gt;&lt;/a&gt; or &lt;strong&gt;&lt;a href=&#34;http://msgpack.org/&#34;&gt;MessagePack&lt;/a&gt;&lt;/strong&gt;. In being thorough, we should also mention &lt;a href=&#34;http://www.gzip.org/&#34;&gt;gzip&lt;/a&gt; JSON compression (sometimes called &amp;ldquo;&lt;em&gt;JSONC&lt;/em&gt;&amp;rdquo;), and &lt;a href=&#34;http://bsonspec.org/&#34;&gt;BSON&lt;/a&gt;, a bin­ary-en­coded seri­al­iz­a­tion of JSON-like doc­u­ments, both derived directly from JSON. In this article we&amp;rsquo;ll discuss MessagePack in depth.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://engineering.facile.it/images/message-pack-an-alternative-to-json/msgpack.png&#34; alt=&#34;MessagePack&#34; /&gt;
&lt;em&gt;JSON Vs MessagePack (source: &lt;a href=&#34;http://msgpack.org/&#34;&gt;msgpack.org&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-is-messagepack&#34;&gt;What is MessagePack?&lt;/h1&gt;

&lt;p&gt;« &lt;em&gt;MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it&amp;rsquo;s faster and smaller&lt;/em&gt; ». To start using MessagePack we need to convert our application objects into MessagePack format: this process is called &lt;em&gt;serialization&lt;/em&gt;, while the reverse process is called &lt;em&gt;deserialization&lt;/em&gt;. The following example can help us better understand what we&amp;rsquo;re talking about. Consider this simple JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;id&amp;quot;: 4,                    // integer
	&amp;quot;isActive&amp;quot;: true,           // boolean
	&amp;quot;fullname&amp;quot;: &amp;quot;Homer Simpson&amp;quot; // string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON requires 56 bytes to represent a very simple user object, while MessagePack only needs 38 bytes (compression ratio 1.47, yielding a 32% saving in size). See below the output of the serialization process for the above JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;83 a2 69 64 04 a8 69 73 41 63 74 69 76 65 c3 a8 66 75 6c 6c 6e 61 6d 65 ad 48 6f 6d 65 72 20 53 69 6d 70 73 6f 6e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see how MessagePack serialization works by reading the &lt;a href=&#34;https://github.com/msgpack/msgpack/blob/master/spec.md&#34;&gt;official specification&lt;/a&gt;. Also, we can split the previous hexadecimal representation to emphasize and explain data types as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;83                                          // 3-element map
a2 69 64                                    // 2-byte string &amp;quot;id&amp;quot;
04                                          // integer 4
a8 69 73 41 63 74 69 76 65                  // 8-byte string &amp;quot;isActive&amp;quot; 
c3                                          // boolean true
a8 66 75 6c 6c 6e 61 6d 65                  // 8-byte string &amp;quot;fullname&amp;quot;
ad 48 6f 6d 65 72 20 53 69 6d 70 73 6f 6e   // 13-byte string &amp;quot;Homer Simpson&amp;quot;
                                            // total 38 bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&amp;rsquo;s very simple to figure out the meaning of the sentence « &lt;em&gt;Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves&lt;/em&gt; » reported in the headline of MessagePack website.&lt;/p&gt;

&lt;p&gt;The main features of MessagePack are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it&amp;rsquo;s designed for network communication and to be transparently converted from and to JSON;&lt;/li&gt;
&lt;li&gt;it supports in-place updating, so it&amp;rsquo;s possible to modify part of a stored object without reserializing it as a whole;&lt;/li&gt;
&lt;li&gt;it has a flexible &lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_procedure_call&#34;&gt;Remote Procedure Call (RPC)&lt;/a&gt; and streaming API implementation;&lt;/li&gt;
&lt;li&gt;it supports &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_system#Static_type_checking&#34;&gt;static-type-checking&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;supported-data-types&#34;&gt;Supported data types&lt;/h1&gt;

&lt;p&gt;Data types listed by the specification are very similar to those in JSON, that is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Integer&lt;/strong&gt; represents an &lt;code&gt;integer&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boolean&lt;/strong&gt; represents &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nil&lt;/strong&gt; represents &lt;code&gt;nil&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Float&lt;/strong&gt; represents a &lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_floating_point&#34;&gt;IEEE 754&lt;/a&gt; double precision floating point numbers including &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String&lt;/strong&gt; is a &lt;code&gt;raw type&lt;/code&gt; and it represents a UTF-8 string;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binary&lt;/strong&gt; is a &lt;code&gt;raw type&lt;/code&gt; and it represents a binary data using byte array;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array&lt;/strong&gt; represents a sequence of objects;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Map&lt;/strong&gt; represents a dictionary (key-value pairs of objects);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extension&lt;/strong&gt; represents a tuple of data whose meaning is defined by applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;a-naive-benchmark&#34;&gt;A naive benchmark&lt;/h1&gt;

&lt;p&gt;Up to this point our reasoning was focused on &lt;strong&gt;space efficiency&lt;/strong&gt;, but a good theoretical computing scientist would have criticized us since we didn&amp;rsquo;t mention &lt;strong&gt;time complexity&lt;/strong&gt;. In fact, the process of data &lt;em&gt;compression&lt;/em&gt; and &lt;em&gt;decompression&lt;/em&gt; is not negligible. We can analyze and compare, for example, the time required to parse a JSON document and to unpack a MessagePack document: that&amp;rsquo;s not completely scientific, but it&amp;rsquo;s a start.&lt;/p&gt;

&lt;p&gt;We wrote two &lt;strong&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;&lt;/strong&gt; scripts to execute 1 million JSON parsing and 1 million MessagePack unpacking operations of a &lt;a href=&#34;https://github.com/salvatorecordiano/facile-it-message-pack-benchmark/blob/master/document.json&#34;&gt;sample document&lt;/a&gt; containing the same data in the two formats.&lt;/p&gt;

&lt;p&gt;A simplified version of the code could be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// inside script &amp;quot;test_parse_json.js&amp;quot;
for (var i = 0;i&amp;lt;1000000;i++) {
    JSON.parse(jsonDocument); // JSON document parsing
}

// inside script &amp;quot;test_unpack_msgpack.js&amp;quot;
for (var i = 0;i&amp;lt;1000000;i++) {
    msgpack.unpack(msgPackDocument); // MessagePack document unpacking
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To easily profile our scripts we can run them as below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;aiace:msgpack parallel$ time node test_parse_json.js

real	0m47.296s
user	0m47.202s
sys	0m0.059s

aiace:msgpack parallel$ time node test_unpack_msgpack.js

real	1m47.244s
user	1m47.050s
sys	0m0.120s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Numbers are self-explanatory: the MessagePack binary is &lt;em&gt;smaller&lt;/em&gt; than the minified JSON, but MessagePack deserialization is clearly &lt;em&gt;slower&lt;/em&gt; than JSON parsing process.&lt;/p&gt;

&lt;p&gt;Before going on, we also need to say that all tests are executed in the following described environment and the full code of this benchmark is free available &lt;a href=&#34;https://github.com/salvatorecordiano/facile-it-message-pack-benchmark/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;// Machine
OS : Darwin 15.6 (x64)
RAM: 16.384 MB
CPU: 2.200 MHz Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz

// Runtime versions
aiace:msgpack parallel$ node -v
v6.8.1
aiace:msgpack parallel$ npm -v
3.10.9

// Module versions
aiace:msgpack parallel$ npm list msgpack
benchmark-msgpack@1.0.0 /Users/parallel/Facile/msgpack
└── msgpack@1.0.2

aiace:msgpack parallel$ npm list fs
benchmark-msgpack@1.0.0 /Users/parallel/Facile/msgpack
└── fs@0.0.1-security

aiace:msgpack parallel$ npm list assert
benchmark-msgpack@1.0.0 /Users/parallel/Facile/msgpack
└── assert@1.4.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;MessagePack allows to save more than 40% of network bandwidth consumption with little more than one line of code. A smaller payload means that less data are transmitted, and that&amp;rsquo;s very useful in &lt;strong&gt;mobile&lt;/strong&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_of_things&#34;&gt;&lt;strong&gt;Internet of Things (IoT)&lt;/strong&gt;&lt;/a&gt; applications, where there&amp;rsquo;s special care in power efficiency; but we should also pay attention to the overall size of each request, to avoid the absurd situation in which the &lt;em&gt;header&lt;/em&gt; is larger than the &lt;em&gt;payload&lt;/em&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Overhead_(computing)&#34;&gt;overhead&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to underline that, while MessagePack is supported by over &lt;a href=&#34;http://msgpack.org/#languages&#34;&gt;50 programming languages&lt;/a&gt;, it doesn&amp;rsquo;t seem to be particularly efficient from a computational perspective, and can be hard to debug due to being non human-readable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A new hope for the JVM: Kotlin</title>
      <link>http://engineering.facile.it/blog/eng/kotlin-intro/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/eng/kotlin-intro/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://engineering.facile.it/images/kotlin-intro/logo_Kotlin.svg&#34; alt=&#34;Kotlin&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;premise&#34;&gt;Premise&lt;/h2&gt;

&lt;p&gt;Java is an &lt;strong&gt;old&lt;/strong&gt; programming language. Version 1.0 was released in 1996 by Sun Microsystems and  even though it has evolved and grown a lot over the past twenty years it is still carrying on some bad design choices such as &lt;em&gt;null&lt;/em&gt; (ask &lt;a href=&#34;https://en.wikipedia.org/wiki/Tony_Hoare?section=3#Apologies_and_retractions&#34;&gt;Tony Hoare&lt;/a&gt;), primitive types or lack of a proper function type. With the last version of the language (Java 8) Java tried to address some of these problems introducing concepts such as &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&#34;&gt;&lt;code&gt;Optional&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&#34;&gt;lambda expression&lt;/a&gt;. Although these additions clearly represent a step forward for the language I still have the feeling that they are just &lt;em&gt;patches&lt;/em&gt; applied to &lt;strong&gt;mitigate problems&lt;/strong&gt; and not to solve them at their very source. For example &lt;code&gt;Optional&lt;/code&gt; could be used to reduce NPE (Null Pointer Exception) but it is clearly not designed for &lt;a href=&#34;https://twitter.com/mariofusco/status/780770300178956289&#34;&gt;this purpose&lt;/a&gt; and lambda expressions, implemented in Java 8 with SAM types, still force you to write an interface only to define a &lt;em&gt;function&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-android-world&#34;&gt;The Android world&lt;/h2&gt;

&lt;p&gt;All the above concerns about Java are even more problematic within the Android world where, due to the notorious &lt;a href=&#34;https://developer.android.com/about/dashboards/index.html&#34;&gt;fragmentation&lt;/a&gt; (a huge amount of devices are stuck with an &lt;strong&gt;outdated VM&lt;/strong&gt;), you are forced to target lower Java versions (6 and 7).
Google is addressing the problem with its new compiler &lt;a href=&#34;https://source.android.com/source/jack.html&#34;&gt;Jack&lt;/a&gt; that enables &lt;em&gt;some&lt;/em&gt; of the features of Java 8 maintaining backward compatibility with older OS versions. But still it lets us deal with the verbosity of the language and it doesn’t truly solve the problem.&lt;/p&gt;

&lt;h2 id=&#34;a-new-hope&#34;&gt;A new hope&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://engineering.facile.it/images/kotlin-intro/kotlin_helloworld.png&#34; alt=&#34;Kotlin Hello World!&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Back in 2011 the JetBrains team (the guys behind IntelliJ and so Android Studio) unveiled &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt;, a new programming language that targets the JVM (and can also be compiled to JavaScript).
Kotlin is a statically-typed language that combines Object Oriented and functional features enforcing no particular philosophy of programming, and it introduces a whole new set of concepts and tools that helps making the code &lt;strong&gt;safer, cleaner and much more readable&lt;/strong&gt;.
Thanks to its nature it works everywhere Java do and it is also &lt;strong&gt;interoperable&lt;/strong&gt; with it, meaning it will not force you to rewrite the entire codebase to taste it: you can add it to your project a little at a time (&lt;a href=&#34;https://medium.com/@sergii/using-kotlin-for-tests-in-android-6d4a0c818776#.lyvd3h43x&#34;&gt;maybe starting with tests&lt;/a&gt; 😉). It also features a REPL &lt;code&gt;kotlinc-jvm&lt;/code&gt; that allows you to test language features with no effort (see the &lt;a href=&#34;https://kotlinlang.org/docs/tutorials/command-line.html#running-the-repl&#34;&gt;doc&lt;/a&gt; form more info).
I am going to rapidly cover some features of Kotlin that address the previously mentioned Java limitations.&lt;/p&gt;

&lt;h3 id=&#34;null-safety&#34;&gt;Null-safety&lt;/h3&gt;

&lt;p&gt;In Kotlin &lt;strong&gt;a variable cannot be null&lt;/strong&gt;. If you want or need a variable to be &lt;em&gt;nullable&lt;/em&gt; you have to add &lt;code&gt;?&lt;/code&gt; to the variable type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val x: Int = null // compile error
val y: Int? = null // ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to this information the compiler sees &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Int?&lt;/code&gt; as two completely different types and can therefore enforce the &lt;a href=&#34;http://kotlinlang.org/docs/reference/null-safety.html&#34;&gt;null-safety&lt;/a&gt; of your variables.
The &lt;code&gt;?.&lt;/code&gt; allows you to safe call methods on nullable variables without throwing NPE but simply returning null at the end of the  call chain:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val x: Int? = null
x?.toString()?.substring(2) // no NPE, returns null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;?:&lt;/code&gt; operator (Elvis operator) allows you to provide a “default” value when the variable is &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// The two expressions are semantically equivalent:
text?.length ?: -1
(text.length != null) ? text.length  : -1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;higher-order-functions-and-lambdas&#34;&gt;Higher-Order Functions and Lambdas&lt;/h3&gt;

&lt;p&gt;In Kotlin is possible to declare a method (or more generally a function) that returns or takes another &lt;strong&gt;function as parameter&lt;/strong&gt;. The syntax to define the &lt;a href=&#34;https://kotlinlang.org/docs/reference/lambdas.html&#34;&gt;function type&lt;/a&gt; is similar to other languages such as Scala or Swift and is very &lt;strong&gt;intuitive&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val function: (T1, T2) -&amp;gt; R = {t1, t2 -&amp;gt; r}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;data-classes&#34;&gt;Data classes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;data class City(val name: String, val state: String)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;Data classes&lt;/a&gt; address the verbosity of Java when dealing with classes that have the only purpose to hold data. With a single line you get &lt;code&gt;equals()/hashCode()&lt;/code&gt;, &lt;code&gt;toString()&lt;/code&gt; and getters/setters for free (and if you are a Java developer you already knows the benefits!)&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;Java has to maintain backward compatibility with previous versions and still has to support the huge amount of developers and codebases present all around the world; therefore it is natural that every new feature and design change is to be considered, weighted and reasoned really carefully, inevitably &lt;strong&gt;slowing down its evolution&lt;/strong&gt;. But this does not have to mean that us, as Android developers, “tied” to the JVM, should not try more modern and advanced languages such as Kotlin. At bottom, a part of our job (one of the best!) is to try and &lt;strong&gt;experiment&lt;/strong&gt; new technologies and to &lt;strong&gt;learn&lt;/strong&gt; new concepts and techniques that improve our ability to address problems in the best possible way (and of course, to have some fun 😄).&lt;/p&gt;

&lt;p&gt;I think that it is fundamental for a software engineer to be &lt;strong&gt;exposed to more than a single programming language&lt;/strong&gt;: learning new patterns, exploring other programming paradigms or simply using and understanding a never-seen syntax has an immeasurable value for our growth and most of the times it turns out to be unexpectedly useful even when coding with ”our” language.
So why not do it with a language that allows us to continue working on projects targeting our beloved JVM?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Disclaimer</title>
      <link>http://engineering.facile.it/ita/disclaimer/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/ita/disclaimer/</guid>
      <description>&lt;p&gt;Questo blog non rappresenta una testata giornalistica e viene aggiornato senza alcuna periodicità. Non può pertanto considerarsi un prodotto editoriale ai sensi della Legge n. 62 del 07/03/2001.&lt;/p&gt;

&lt;p&gt;Facile.it S.p.A. non ha e non si assume alcuna responsabilità per l&amp;rsquo;attualità, la correttezza, la completezza o la qualità delle informazioni messe a disposizione, ivi compresi i contenuti dei siti collegati e/o citati.&lt;/p&gt;

&lt;p&gt;Facile.it, inoltre, si riserva il diritto e la facoltà di rimuovere le informazioni proprie e/o fornite da terzi senza alcun preavviso.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Event-driven serverless applications</title>
      <link>http://engineering.facile.it/blog/eng/event-driven-serverless-applications/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/eng/event-driven-serverless-applications/</guid>
      <description>

&lt;p&gt;If we think about computing in the Cloud Era, our mind is immediately drawn towards virtual machines and containers. Therefore, for example, when building a production environment with both approaches we think about the need of patching the operating system and/or upgrading the container. At the end of 2014 &lt;strong&gt;Amazon Web Services&lt;/strong&gt; (AWS) announced a new service called &amp;ldquo;&lt;strong&gt;&lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;Lambda&lt;/a&gt;&lt;/strong&gt;&amp;rdquo;, that allows us to focus on business logic and not on infrastructure.&lt;/p&gt;

&lt;h1 id=&#34;what-is-lambda&#34;&gt;What is Lambda?&lt;/h1&gt;

&lt;p&gt;As reported on their website: « &lt;em&gt;AWS Lambda is a serverless compute service that runs your code highly-available in the cloud in response to events and it automatically performs all the administration of the compute resources for you&lt;/em&gt; ». In the previous sentence is condensed all the power of Lambda, that we can summarize with the following key concepts: &lt;strong&gt;&lt;a href=&#34;#serverless-architecture&#34;&gt;serverless architecture&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&#34;#high-availability&#34;&gt;high-availability&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&#34;#event-driven&#34;&gt;event-driven&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;#zero-administration&#34;&gt;zero administration&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://engineering.facile.it/images/event-driven-serverless-applications/aws-lambda-key-concepts.png&#34; alt=&#34;AWS Lambda key concepts&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;serverless-architecture&#34;&gt;Serverless architecture&lt;/h2&gt;

&lt;p&gt;Lambda is completely &amp;ldquo;serverless&amp;rdquo;, a term that can be considered misleading: obviously Lambda uses physical servers to run your code, but we, as the service&amp;rsquo;s users, don’t take care of everything required to do it. We just need to upload our code on AWS console and it handles capacity, scaling, monitoring, logging and security without any server to manage.
Strictly speaking, functions are executed in containers, and kernel-based virtualization is very useful in this context, because it allows to build multiple isolated environments in short time.
A more detailed explanation of serverless architectures can be found &lt;a href=&#34;http://www.martinfowler.com/articles/serverless.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;high-availability&#34;&gt;High-availability&lt;/h2&gt;

&lt;p&gt;AWS Lambda maintains compute capacity across multiple availability zones in each region - at the moment there are 8 regions distributed among Americas, EMEA and Asia Pacific - in this way Lambda is able to protect your code against data center failures.&lt;/p&gt;

&lt;h2 id=&#34;event-driven&#34;&gt;Event-driven&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;Event-driven&amp;rdquo; means that a Lambda function is triggered when an event occurs, so the flow of the application is mainly driven by events. In this kind of architecture all Lambda functions are event consumers, because they are invoked by an event and they have the responsibility to process it.
An event comes to life, for example, whenever:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a new item is created on an Amazon DynamoDB table;&lt;/li&gt;
&lt;li&gt;a file is deleted on an Amazon S3 bucket;&lt;/li&gt;
&lt;li&gt;an Amazon API Gateway is called;&lt;/li&gt;
&lt;li&gt;et cetera&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but we can also use AWS SDK to invoke a function directly on a mobile or web app back-end.
This is a good way to write application logic without designing and maintaining a centralized workflow.
More about event-driven programming &lt;a href=&#34;https://en.wikipedia.org/wiki/Event-driven_programming&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;zero-administration&#34;&gt;Zero administration&lt;/h2&gt;

&lt;p&gt;All the work you usually need to do in order to assure that your application works in a scalable, reliable and durable way is taken care by the service itself.  Behind the scenes the system performs all the needed administration for the compute resources, including server and operating system maintenance, code and security patch deployment, code monitoring and logging, and automatically matches the incoming rate of functions invocation for us, to assure capacity provisioning and automatic scaling.&lt;/p&gt;

&lt;h1 id=&#34;lambda-functions&#34;&gt;Lambda functions&lt;/h1&gt;

&lt;p&gt;The code we run on AWS Lambda is called a &amp;ldquo;&lt;strong&gt;lambda function&lt;/strong&gt;&amp;rdquo;. The name &amp;ldquo;lambda&amp;rdquo; derives from the 11th letter of the Greek alphabet. In general a &lt;em&gt;lambda&lt;/em&gt;, also called &lt;em&gt;anonymous function&lt;/em&gt;, is a function that&amp;rsquo;s defined inline (sometimes called &lt;em&gt;closure&lt;/em&gt;) and passed to some other function, method or procedure, to be stored or executed: the &lt;em&gt;anonymity&lt;/em&gt; is given by the fact that we don&amp;rsquo;t give a name to the function, but we just define it at the moment of need.&lt;/p&gt;

&lt;h2 id=&#34;supported-languages&#34;&gt;Supported languages&lt;/h2&gt;

&lt;p&gt;Right now Lambda functions natively support code written in &lt;strong&gt;Java&lt;/strong&gt;, &lt;strong&gt;Node.js&lt;/strong&gt; and &lt;strong&gt;Python&lt;/strong&gt;, but we can run C, Go and PHP using a Node.js wrapper. Hopefully Amazon will add official support for other languages such as PHP, Go, C, Swift and many more. We can also include libraries, even native ones.&lt;/p&gt;

&lt;h2 id=&#34;stateless-code&#34;&gt;Stateless code&lt;/h2&gt;

&lt;p&gt;When we write a function our code must be &lt;strong&gt;stateless&lt;/strong&gt;, thus everything begins and ends in the same request, and any persistent state is stored in a storage service (not necessarily within Amazon world). Keeping functions stateless is the keystone to enable the system to instantly launch new instances when needed, to serve the incoming events.&lt;/p&gt;

&lt;p&gt;In addition to the code, each Lambda function has many configuration informations, such as name, description, runtime, handler, memory, max execution time and execution role. A detailed explanation is available &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction-function.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;invocation-types&#34;&gt;Invocation types&lt;/h2&gt;

&lt;p&gt;We can invoke a Lambda function directly, for example using the Invoke API, or indirectly, for example using the Amazon API Gateway. A function invocation needs to specify the &lt;code&gt;InvocationType&lt;/code&gt;. There are three invocation types allowed: &lt;code&gt;RequestResponse&lt;/code&gt;, &lt;code&gt;Event&lt;/code&gt; and &lt;code&gt;DryRun&lt;/code&gt;. Each one of them has different purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RequestResponse&lt;/code&gt;: in this case we expect a &lt;strong&gt;synchronous&lt;/strong&gt; behavior. The function receives input parameters as an event, and returns a result;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Event&lt;/code&gt;: in this case we expect an &lt;strong&gt;asynchronous&lt;/strong&gt; behavior. The function receives input parameters as an event, returns immediately no value, but continues its execution asynchronously;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DryRun&lt;/code&gt;: it&amp;rsquo;s used to verify the access to a function without running it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://engineering.facile.it/images/event-driven-serverless-applications/synchronous-vs-asynchronous-behaviour.png&#34; alt=&#34;Synchronous vs asynchronous behaviour&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;lambda-alternatives&#34;&gt;Lambda alternatives&lt;/h1&gt;

&lt;p&gt;Serverless is a new cloud computing trend, and accordingly many cloud providers – in addition to Amazon - started offering their own &lt;em&gt;Function as a Service&lt;/em&gt; (FaaS), for example &lt;strong&gt;Google&lt;/strong&gt; with its &lt;a href=&#34;https://cloud.google.com/functions/&#34;&gt;Cloud Functions&lt;/a&gt;, &lt;strong&gt;IBM&lt;/strong&gt; with its &lt;a href=&#34;https://developer.ibm.com/openwhisk/&#34;&gt;OpenWhisk&lt;/a&gt;, &lt;strong&gt;Auth0&lt;/strong&gt; with its &lt;a href=&#34;https://webtask.io/&#34;&gt;WebTasks&lt;/a&gt; and &lt;strong&gt;Microsoft&lt;/strong&gt; with its &lt;a href=&#34;https://functions.azure.com/&#34;&gt;Azure Functions&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;Functions are very useful when we want to build lightweight applications based on &lt;em&gt;microservices&lt;/em&gt; with no server. Their approach could be considered a way to achieve fine-grained microservices, in which there is a relation one-to-one between functions and endpoints instead of one service per one resource: for this reason they are often referred to as &lt;em&gt;nanoservices&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;They could help developers in focusing on the code, while only charging for code really running in an infrastructure that&amp;rsquo;s able to autonomously grow upon demand, without lots of efforts in managing it. With functions, we can see our code as a series of small and independent building blocks, that can be easily replaced or connected with other blocks using events. Also, Lamba could help small team in reusing existing skills while adopting different languages, in order to develop software that better matches business&amp;rsquo; requirements.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How PHP 7 &amp; TDD helped me sleep better</title>
      <link>http://engineering.facile.it/blog/eng/how-php-7-tdd-helped-me-sleep-better/</link>
      <pubDate>Tue, 07 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/eng/how-php-7-tdd-helped-me-sleep-better/</guid>
      <description>

&lt;h1 id=&#34;the-enemies-of-programming&#34;&gt;The enemies of programming&lt;/h1&gt;

&lt;p&gt;As many of you will agree with me, &lt;strong&gt;sleep deprivation&lt;/strong&gt; is the enemy of programming.&lt;br /&gt;
Maybe we fear only one thing more than that: &lt;strong&gt;being interrupted&lt;/strong&gt;.
&lt;p style=&#34;text-align: center;&#34;&gt;
    &lt;a href=&#34;http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/&#34;&gt;&lt;img src=&#34;http://engineering.facile.it/images/how-php-7-tdd-helped-me-sleep-better/interruption.png&#34; alt=&#34;Why you shouldn&#39;t interrupt a programmer (by Jason Heeris)&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;While writing code we have to think really hard, we use complex abstractions, we go through long business workflows and so on&amp;hellip; fatigue and interruptions are the main enemies of those in this line of work.&lt;/p&gt;

&lt;h1 id=&#34;my-experience&#34;&gt;My experience&lt;/h1&gt;

&lt;p&gt;On my day job, I do all this mental juggling on a pretty big project, which is based on PHP 5.5, Symfony 2.8, Doctrine etc.; luckily, in this project we use a good deal of &lt;strong&gt;good practices&lt;/strong&gt;, and &lt;strong&gt;automated software testing&lt;/strong&gt; is one of those. I actually switched to this job to learn about doing automatic testing, continuous integration and other best practices.&lt;/p&gt;

&lt;p&gt;Almost half a year ago &lt;strong&gt;I became a dad&lt;/strong&gt;. It has been great, and you also get some unexpected perks! For example, my colleagues got me this gift for my son:
&lt;p style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;http://engineering.facile.it/images/how-php-7-tdd-helped-me-sleep-better/blue-elephpant.jpg&#34; alt=&#34;A blue elePHPant!&#34; /&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;So, we can say that his future is pretty clear&amp;hellip; But don&amp;rsquo;t say this to my wife!&lt;/p&gt;

&lt;p&gt;During the pregnancy, many of my friends and fellow parents warned me half jokingly about one thing: &lt;em&gt;&amp;ldquo;sleep now, you&amp;rsquo;ll be deadly tired after!&amp;rdquo;&lt;/em&gt;. Now I can say that they were a bit exaggerating, but I can&amp;rsquo;t deny that, having a child takes a toll on your sleep schedule&amp;hellip; Even if, as in my case having a 9 to 6 office job, my wonderful wife does all the parenting heavy lifting (and I consider myself pretty lucky for having her!).&lt;/p&gt;

&lt;p&gt;A few months after my son was born I also had the opportunity to start &lt;strong&gt;a new, fresh project&lt;/strong&gt;. To be completely honest, it was not actually fresh: it was a &lt;strong&gt;complete rewrite&lt;/strong&gt; of an internal service that&amp;rsquo;s used to manage the invoices for multiple business units inside our company. I knew pretty well that the old system had to be replaced, so I was put in charge of redoing it from scratch.&lt;/p&gt;

&lt;p&gt;One of the issue with the old system (and the main reason behind the rewrite) was &lt;strong&gt;maintainability&lt;/strong&gt;: we had no tests, we had no proper development environment, and its design wasn&amp;rsquo;t that great; also, bureaucracy and invoicing are the core domain of the system, so it was inherently complex. It was the perfect environment to witness the &lt;a href=&#34;https://en.wikipedia.org/wiki/Broken_windows_theory&#34;&gt;broken windows theory&lt;/a&gt; in action: the code base got worse over time, one patch, copy paste or quick fix at a time.&lt;/p&gt;

&lt;p&gt;Obviously, as anyone that&amp;rsquo;s passionate in technology would do, I took the opportunity to use a lot of new shiny tools: I picked &lt;strong&gt;PHP 7&lt;/strong&gt;, which had just been released, and started the project with something familiar to me but still pretty new and cool, &lt;strong&gt;Symfony 3.0&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;what-i-found-to-be-useful&#34;&gt;What I found to be useful&lt;/h1&gt;

&lt;p&gt;I rambled and thought about this project a lot in the past months with my colleagues, because the old system was costing us a lot of overhead in usage and maintenance, and we had a pretty clear idea of what its problems were, so I didn&amp;rsquo;t need to study a lot before starting to write the first classes.&lt;/p&gt;

&lt;p&gt;Thus, I had to spend &lt;em&gt;some&lt;/em&gt; time thinking about an object oriented design for my project, but I was rapidly able to start writing code with confidence. In the end, most of this confidence came from a few choices that I pursued during the development of this project.&lt;/p&gt;

&lt;h2 id=&#34;tdd-and-high-coverage&#34;&gt;TDD and high coverage&lt;/h2&gt;

&lt;p&gt;The first choice that I am pretty satisfied about is &lt;strong&gt;automatic testing&lt;/strong&gt;: I already knew the advantages of doing tests and Test Driven Development, but in the previous project that practice was not introduced from the start, so not all the codebase was covered, and we couldn&amp;rsquo;t (or wouldn&amp;rsquo;t?) do TDD 100% of the time.&lt;/p&gt;

&lt;p&gt;In this case instead &lt;strong&gt;I wanted to write nearly everything with TDD&lt;/strong&gt;, and keep a &lt;strong&gt;very high threshold for the minimum coverage&lt;/strong&gt; achieved through automatic testing. Right now I&amp;rsquo;m sitting on a ~92% test coverage, and I feel proud about it. This wasn&amp;rsquo;t a mere &amp;ldquo;let&amp;rsquo;s hit 100%!&amp;rdquo; mindless goal (&lt;a href=&#34;http://engineering.facile.it/blog/ita/software-testing-coverage-vs-efficacia/&#34;&gt;since it&amp;rsquo;s pointless&lt;/a&gt;), but it fueled &lt;strong&gt;a positive feedback cycle&lt;/strong&gt; instead: the more I used TDD in writing new classes, the more the coverage rose and stayed high; at the same time, I found myself inspecting the coverage reports to find missing spots, and that allowed me to discover many edge-cases that I didn&amp;rsquo;t test and should have been.&lt;/p&gt;

&lt;p&gt;Of course, I still left some parts without coverage or specific tests, since it was pointless to test them (e.g. Doctrine entities), while I covered some parts multiple times, since they were &lt;strong&gt;critical paths&lt;/strong&gt; inside my application.&lt;/p&gt;

&lt;h2 id=&#34;unit-tests-to-the-rescue&#34;&gt;Unit tests to the rescue!&lt;/h2&gt;

&lt;p&gt;Last but not least, the main critical advantage that TDD gave me was &lt;strong&gt;focus even on strained days&lt;/strong&gt;: I wrote the classes starting from unit tests, giving all my effort to one piece of code at a time, without having to keep in mind the entire project with its complexities.&lt;/p&gt;

&lt;p&gt;I then wrote some functional tests to assure that the &lt;strong&gt;collaboration between my unit-tested objects&lt;/strong&gt; was fine, and this later step was also useful in delaying the definition of the classes as services inside the Symfony DI container. I was also &lt;strong&gt;able to change my mind&lt;/strong&gt; a few times on some details of the design without having to suffer mental confusion or rewrite too much code.&lt;/p&gt;

&lt;h2 id=&#34;php-7-scalar-and-return-types-declarations&#34;&gt;PHP 7: scalar and return types declarations&lt;/h2&gt;

&lt;p&gt;The second good choice was &lt;strong&gt;PHP 7&lt;/strong&gt;: among the reasons behind it as the language version of choice for this project were the &lt;a href=&#34;http://php.net/manual/en/migration70.new-features.php&#34;&gt;two main new features&lt;/a&gt; introduced: &lt;strong&gt;scalar types&lt;/strong&gt; and &lt;strong&gt;return type declarations&lt;/strong&gt;.
&lt;p style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;http://engineering.facile.it/images/how-php-7-tdd-helped-me-sleep-better/return-types-everywhere-meme.jpg&#34; alt=&#34;Return types, return types everywhere!&#34; /&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Before Facile.it, I worked as C++ developer, and oh boy! did I miss scalars and return types!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;I came onboard of the PHP community right on time&amp;rdquo;&lt;/em&gt;, I thought&amp;hellip; So I took advantage of the situation to start using all these new features. I enjoyed having again the possibility to typehint strings and integers; I discovered how return types declaration enforces the cohesion of your objects really well, making it &lt;strong&gt;rightly painful to return different things&lt;/strong&gt;: it became impossible to return &lt;em&gt;something&lt;/em&gt; OR &lt;em&gt;null&lt;/em&gt;, for example.&lt;/p&gt;

&lt;p&gt;Interestingly, in my tests I found myself writing a lot of this kind of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$result = $testClass-&amp;gt;method();
$this-&amp;gt;assertInstanceOf(SomeClass::class, $result);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did this more than once, just to realize that I was wasting my time! This was normally the first TDD step on PHP 5.x code, but now this kinds of assertion were futile, because the return type was already checked at a language level! Great!&lt;/p&gt;

&lt;p&gt;Return types also proved themselves to be a &lt;strong&gt;double-edged sword&lt;/strong&gt; in some cases, especially on Doctrine entities: they are really useful to enforce consistency in your values, since they trigger a &lt;code&gt;\TypeError&lt;/code&gt; each time you call a getter method on a erroneously empty property, but &lt;strong&gt;you can&amp;rsquo;t use them on nullable fields&lt;/strong&gt;, since it will break your application at any time during execution.&lt;/p&gt;

&lt;p&gt;On the other hand, having return types declared on your business-logic classes it&amp;rsquo;s pretty useful, even more when used in conjunction with TDD: every time you define a mock you are forced to declare expectations and predictions with the right types, so it &lt;strong&gt;indirectly helps maintaining the collaboration contract between objects&lt;/strong&gt;, without too much hassle. If I changed a method&amp;rsquo;s signature that was mocked somewhere, the mock would break the test, &lt;strong&gt;highlighting the issue and making the tests&lt;/strong&gt; (and an high coverage) &lt;strong&gt;even more valuable&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;At the end of the day, these and other &lt;strong&gt;good practices are helpful&lt;/strong&gt; for both your job and your personal life: you can go a long way in being fit and in the best shape while working, but stressful and (good) distracting events are unavoidable: you&amp;rsquo;ll often have to fight stress, fatigue or distractions, and there will be days where you can&amp;rsquo;t be at the top of your game, for any number of reasons.&lt;/p&gt;

&lt;p&gt;Since programming is a mental job, I think that having instruments and good practices in your toolset is invaluable, being them the &lt;strong&gt;essential tools of our craft&lt;/strong&gt;. Thus, I hope that those little life/programming lessons I learned in these months will be useful to other people like me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facile.it devs @ PhpDay 2016</title>
      <link>http://engineering.facile.it/blog/eng/php-day-2016/</link>
      <pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/eng/php-day-2016/</guid>
      <description>

&lt;p&gt;Almost like a nice tradition, we went to the &lt;strong&gt;&lt;a href=&#34;http://2016.phpday.it/&#34;&gt;PHP Day conference&lt;/a&gt;&lt;/strong&gt; this year as well; this time too it was held in Verona, on &lt;strong&gt;May 13th and 14th&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We participated and attended numerous talks and, &lt;a href=&#34;http://engineering.facile.it/blog/ita/php-day-2015/&#34;&gt;as last year&lt;/a&gt;, we wanted to write a light summary; this won&amp;rsquo;t be a full &amp;ldquo;review&amp;rdquo;, but our intent instead is to highlight what captured our interest most, or what we found more valuable for our everyday work.&lt;/p&gt;

&lt;p&gt;In this way, we hope to give a brief glimpse of what we experienced to fellow developers that hadn&amp;rsquo;t the opportunity to attend, and to tempt some of you to join conferences like this one or those in the PHP community at large, for your personal and professional growth.&lt;/p&gt;

&lt;p&gt;The talks are in chronological order, and we linked the slides when available. Enjoy your reading!&lt;/p&gt;

&lt;h1 id=&#34;technical-talks&#34;&gt;Technical Talks&lt;/h1&gt;

&lt;h2 id=&#34;your-api-is-a-ui&#34;&gt;Your API is a UI&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Christopher Hoult (&lt;a href=&#34;http://twitter.com/choult&#34;&gt;@choult&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 11:00 – 12:00 - track 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was an interesting and very smooth talk. It stayed pretty general with nice advices about &lt;strong&gt;API development&lt;/strong&gt;, but showed some reasoning about a pyramidal &amp;ldquo;scheme of priorities&amp;rdquo; that we should follow, deriving from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs&#34;&gt;Maslow&amp;rsquo;s hierarchy of needs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;dip-your-toes-in-the-sea-of-security&#34;&gt;Dip Your Toes in the Sea of Security&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;James Titcumb (&lt;a href=&#34;http://twitter.com/asgrim&#34;&gt;@asgrim&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 14:30 – 15:30 - track 1 (&lt;a href=&#34;http://www.slideshare.net/asgrim1/dip-your-toes-in-the-sea-of-security-phpday-2016&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this talk we saw an interesting overview of &lt;strong&gt;security issues&lt;/strong&gt; that a web application can encounter. It ranged from basic SQL injection, to timing attacks (that were explained pretty well!), to CSRF protection.&lt;/p&gt;

&lt;h2 id=&#34;how-i-learned-to-stop-worrying-and-love-regular-expressions&#34;&gt;How I learned to stop worrying and love Regular Expressions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Jordi Boggiano (&lt;a href=&#34;http://twitter.com/seldaek&#34;&gt;@seldaek&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 15:30 – 16:30 - track 1 (&lt;a href=&#34;http://slides.seld.be/?file=2016-05-13+How+I+learned+to+stop+worrying+and+love+Regular+Expressions.html&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this talk we went from basic &lt;strong&gt;regular expressions&lt;/strong&gt;, to basic pattern recognition, to advanced usage; the speaker took also the time to explain to us how the regex engine works, through thorough examples of pattern matching advancement and backtracking. Also, bonus points for the slides! They were pretty neat, and everything was themed to the &lt;em&gt;Dr. Strangelove&lt;/em&gt; movie, from images to phrases used in the examples.&lt;/p&gt;

&lt;h2 id=&#34;dockerizing-your-php-ci-pipelines&#34;&gt;Dockerizing your PHP CI Pipelines&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Paul Dragoonis (&lt;a href=&#34;http://twitter.com/dr4goonis&#34;&gt;@dr4goonis&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 17:00 – 17:30 - track 2 (&lt;a href=&#34;http://dragoonis.com/talks/phpday-may-2016/#/&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This talk was about &lt;strong&gt;using Jenkins with Docker&lt;/strong&gt; and having optimized pipelines for fast builds and short commit-to-deploy times. It should have been a 1-hour-long talk, so the speaker had to cut short on a lot of things, but I took a lot of useful advice from it nonetheless. Fortunately, he was kind enough to give the extra bits of his talk in the unconference track the day after.&lt;/p&gt;

&lt;h2 id=&#34;drinking-beer-with-a-raspberry-pi-and-php&#34;&gt;Drinking Beer with a Raspberry Pi and PHP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Andrew Carter (&lt;a href=&#34;http://twitter.com/AndrewCarterUK&#34;&gt;@AndrewCarterUK&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 15:30 – 16:30 - track 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This talk was uncommon but really funny. The speaker explained that programming the Raspberry Pi is possible even with PHP! He showed us a working example of an AaaS (Alcohol as a Service) machine. It was a simple tool with a liquid pump and a flow detector that is used to fill up glasses with any kind of drink. It can be activated via API as any regular service. The speaker also explained how it is possible to communicate with external devices via the powerful IO pins using Unix device files.&lt;/p&gt;

&lt;h2 id=&#34;evolution-of-web-application-architecture&#34;&gt;Evolution of Web Application Architecture&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Kore Nordmann (&lt;a href=&#34;http://twitter.com/koredn&#34;&gt;@koredn&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 15:30 – 16:30 - track 2 (&lt;a href=&#34;https://qafoo.com/resources/presentations/phpday_2016_2016/evolution_of_web_application_architecture.html&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The talk covered the &lt;strong&gt;evolution of the technological stack&lt;/strong&gt; behind a normal web application, from single-server to multi-server architecture. Each addition to the stack was discussed and weighted, without taking for granted any single step: from adding a master-slave database configuration, to caching session and\or query results. This gave us a pretty clear idea of &lt;strong&gt;when and why&lt;/strong&gt; such steps should be taken while adding new functionalities to a project, or overcoming technical challenges.&lt;/p&gt;

&lt;h2 id=&#34;being-functional-in-php&#34;&gt;Being functional in PHP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;David de Boer (&lt;a href=&#34;http://twitter.com/ddeboer_nl&#34;&gt;@ddeboer_nl&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 2 - 16:30 – 17:00 - track 1 (&lt;a href=&#34;http://www.slideshare.net/boerdedavid/being-functional-in-php-php-day-italy-2016&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This talk was an &lt;strong&gt;introduction to functional programming&lt;/strong&gt;. The speaker compared highly declarative languages such as Erlang with PHP. He demonstrated the options we have to adopt functional programming in PHP. Basic concepts were covered in a clear and simple way: mapping, reduction, function composition and higher-order functions. Particular focus was given to the use of pure functions and their main advantage: the absence of side effects. Finally, the speaker went through an interesting comparison between OOP and functional programming, showing their strengths and weaknesses.&lt;/p&gt;

&lt;h1 id=&#34;keynotes&#34;&gt;Keynotes&lt;/h1&gt;

&lt;h2 id=&#34;deploying-php-7&#34;&gt;Deploying PHP 7&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rasmus Lerdorf (&lt;a href=&#34;http://twitter.com/rasmus&#34;&gt;@rasmus&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Day 1 - 09:45 – 10:45 (&lt;a href=&#34;http://talks.php.net/phpday16#/&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rasmus is a veteran at PHPDay, and he gives opening keynotes here almost every two years. This year&amp;rsquo;s was obviously about PHP 7, and it was more a technical talk than else. It went from &lt;strong&gt;benchmark data&lt;/strong&gt; to technical tips on how to smooth the transition to this new major version of PHP.&lt;/p&gt;

&lt;h2 id=&#34;how-badoo-saved-1m-switching-to-php7&#34;&gt;How Badoo Saved $1M Switching to PHP7&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Nikolay Krapivnyy&lt;/li&gt;
&lt;li&gt;Day 2 - 09:45 – 10:45 (&lt;a href=&#34;https://dl.dropboxusercontent.com/u/216377/verona_php_2.pdf&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&#34;https://techblog.badoo.com/blog/2016/03/14/how-badoo-saved-one-million-dollars-switching-to-php7/&#34;&gt;blog post&lt;/a&gt; about this technological switch made the rounds on a lot on PHP-related websites some months ago; this talk was very technical too, and it showed us how big is Badoo&amp;rsquo;s technological stack, with 3000 servers, 1000 of which running PHP. It gave us a nice overview of the &lt;strong&gt;technical challenges&lt;/strong&gt; that their tech team endured to do this upgrade, and how it gave them the possibility to save more than a half of their hardware resources; also&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;it&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Badoo put PHP 7 in production on Friday&amp;hellip; &lt;br&gt;/cc &lt;a href=&#34;https://twitter.com/agilegigi&#34;&gt;@agilegigi&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/poiluned%C3%ACcepensiamo?src=hash&#34;&gt;#poilunedìcepensiamo&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/phpday?src=hash&#34;&gt;#phpday&lt;/a&gt; &lt;a href=&#34;https://t.co/OEj3Emxxee&#34;&gt;pic.twitter.com/OEj3Emxxee&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alessandro Lai (@AlessandroLai) &lt;a href=&#34;https://twitter.com/AlessandroLai/status/731403882321063936&#34;&gt;14 maggio 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Faster Web with HTTP/2</title>
      <link>http://engineering.facile.it/blog/eng/faster-web-with-http-2/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/eng/faster-web-with-http-2/</guid>
      <description>

&lt;p&gt;HTTP is the protocol that powers the Web. It was originally designed in 1996 for transferring and manipulating simple text-based documents (mainly hypertext resources).
Nowadays it&amp;rsquo;s been adopted for many different purposes. It&amp;rsquo;s used for: multimedia content transfer, rich real-time session-based web applications, API messages dispatch, Internet of Things and much more.
For this reason, the HTTP specifications are continuously updated, by adding new features and improving performance.&lt;/p&gt;

&lt;p&gt;In May 2015, the latest version 2.0 was standardized with &lt;em&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7540&#34;&gt;RFC 7540&lt;/a&gt;&lt;/em&gt;.
This introduced major differences on how the low-level protocol works.
From the application perspective, very little has changed: requests, responses, resources, headers and HTTP methods are still there.
New features have been added such as the possibility to &lt;strong&gt;push resources to the client&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The main reason that led to HTTP/2 is &lt;strong&gt;improving performance&lt;/strong&gt;.
Previous versions of HTTP had critical problems that were not addressable without changing the low-level communication mechanisms.&lt;/p&gt;

&lt;h2 id=&#34;http-1-1-issues&#34;&gt;HTTP/1.1 issues&lt;/h2&gt;

&lt;p&gt;HTTP/2 deals with many of the performance issues of HTTP/1.1:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP/1.1 doesn&amp;rsquo;t support headers compression even though it would be particularly effective against text-based data;&lt;/li&gt;
&lt;li&gt;HTTP/1.1 &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_pipelining&#34;&gt;request pipelining&lt;/a&gt; is not so efficient due to &lt;a href=&#34;https://en.wikipedia.org/wiki/Head-of-line_blocking&#34;&gt;head-of-line blocking&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Modern web applications have complex resources that are linked to each other. HTTP/1.1 servers have no way to send all the related resources at once in order to avoid additional round-trips;&lt;/li&gt;
&lt;li&gt;HTTP/1.1 connections are designed to have short lifespans. Unfortunately, web resources change over time and additional connections are required to fetch the updated data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;People have adopted several tricks to mitigate these problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Session data is usually persisted on the server to minimize the amount of headers sent at every request;&lt;/li&gt;
&lt;li&gt;To reduce latency and to achieve request multiplexing, browsers open several TCP connections during page load. This is not recommended: it consumes many more resources (both client-side and server-side) and &lt;a href=&#34;https://en.wikipedia.org/wiki/TCP_congestion_control&#34;&gt;TCP congestion avoidance&lt;/a&gt; techniques are no longer effective;&lt;/li&gt;
&lt;li&gt;Recent web applications prefer leaving connections open to reduce connection setup latency for subsequent requests;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-s-changed&#34;&gt;What&amp;rsquo;s changed&lt;/h2&gt;

&lt;p&gt;HTTP/2 is &lt;strong&gt;no longer text-based&lt;/strong&gt;; this means debugging could be somewhat difficult without using special tools.&lt;/p&gt;

&lt;p&gt;Server and client communicate by sending small binary messages named &lt;strong&gt;Frames&lt;/strong&gt;.
There are different types of frames. The most important ones are &lt;code&gt;DATA&lt;/code&gt;, &lt;code&gt;HEADERS&lt;/code&gt;, &lt;code&gt;SETTINGS&lt;/code&gt; and &lt;code&gt;PUSH_PROMISE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;HTTP/2 uses the concept of &lt;strong&gt;streams&lt;/strong&gt;. Each stream is identified by an ID and it&amp;rsquo;s allocated for every request/response lifecycle.
Several streams can be active at the same time on the same connection: this provides &lt;strong&gt;real request pipelining and multiplexing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each frame contains the ID of the stream they refer to. Thus, frames of different streams can be interleaved without interfering.&lt;/p&gt;

&lt;p&gt;Servers, by sending the &lt;code&gt;PUSH_PROMISE&lt;/code&gt; frame, can allocate new streams without waiting for an explicit request from the client. By the virtue of this, &lt;strong&gt;the server can push resources to the client&lt;/strong&gt; and reduce the number of round-trip messages needed.&lt;/p&gt;

&lt;p&gt;Http headers (both requests&amp;rsquo; and responses&amp;rsquo; ones) are always compressed and they are sent using one or more &lt;code&gt;HEADERS&lt;/code&gt; frames.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1&#34;&gt;Response Status-Line&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&#34;https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1&#34;&gt;request Request-Line&lt;/a&gt;&lt;/em&gt; have been moved. They are now stored in the header section via special headers (pseudo-headers): &lt;code&gt;:method&lt;/code&gt;, &lt;code&gt;:path&lt;/code&gt;, &lt;code&gt;:status&lt;/code&gt;, etc..&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Response Status-Line Reason-Phrase&lt;/em&gt; has been completely removed: there is no equivalent in HTTP/2.&lt;/p&gt;

&lt;p&gt;Servers and clients may use &lt;code&gt;PING&lt;/code&gt; frames to check the underlying connection&amp;rsquo;s state and to keep the connection alive even for a long period of time.&lt;/p&gt;

&lt;h2 id=&#34;support-by-servers-and-user-agents&#34;&gt;Support by servers and user agents&lt;/h2&gt;

&lt;p&gt;HTTP/2 is actually a fork of &lt;a href=&#34;http://dev.chromium.org/spdy/spdy-whitepaper&#34;&gt;SPDY&lt;/a&gt;, a protocol developed by Google.
A lot of different servers and clients already supported the SPDY protocol, so the transition from SPDY to HTTP/2 was pretty straightforward.&lt;/p&gt;

&lt;p&gt;HTTP/2 was officially released in May 2015; since then &lt;strong&gt;all major web servers have added support for HTTP/2&lt;/strong&gt; such as Apache HTTP, Apache Tomcat, Nginx, IIS and Jetty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All major browsers now support HTTP/2&lt;/strong&gt;, e.g. Firefox, Chrome, IE and Edge.&lt;/p&gt;

&lt;p&gt;A the moment, they only allow HTTP/2 over TLS via &lt;a href=&#34;https://tools.ietf.org/html/rfc7301&#34;&gt;ALPN&lt;/a&gt; or &lt;a href=&#34;https://tools.ietf.org/html/draft-agl-tls-nextprotoneg-04&#34;&gt;NPN&lt;/a&gt; as Protocol Negotiation mechanisms.
RFC 7540 considers the case of HTTP/2 being used on cleartext connections as well, but actually this is not extensively used.&lt;/p&gt;

&lt;h2 id=&#34;additional-resources&#34;&gt;Additional resources&lt;/h2&gt;

&lt;p&gt;The website &lt;a href=&#34;http://www.http2demo.io/&#34;&gt;Http2demo.io&lt;/a&gt; compares performance metrics between HTTP/1.1 and HTTP/2.&lt;/p&gt;

&lt;p&gt;If you want to learn more about HTTP/2, you can read the official specifications (&lt;strong&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7540&#34;&gt;RFC 7540&lt;/a&gt;&lt;/strong&gt;) or download the book &lt;strong&gt;&lt;a href=&#34;https://daniel.haxx.se/http2/&#34;&gt;Http2 explained&lt;/a&gt;&lt;/strong&gt; which also examines the reasons behind HTTP/2.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blog restyling: switching to Hugo and GitHub Pages</title>
      <link>http://engineering.facile.it/blog/eng/switching-to-hugo-and-github-pages/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/eng/switching-to-hugo-and-github-pages/</guid>
      <description>

&lt;p&gt;As you may have noticed, we went through a bit of a restyling in the last few days, and our blog changed a lot in terms of appearance and structure.
We are very happy with those changes, but the reason behind this transition is not just a simple template change.&lt;/p&gt;

&lt;h2 id=&#34;what-we-were-searching-for&#34;&gt;What we were searching for&lt;/h2&gt;

&lt;p&gt;Before, we were using an hosted CMS to run the blog, &lt;a href=&#34;https://ghost.org/&#34;&gt;Ghost&lt;/a&gt;. We were happy with the results, it wasn&amp;rsquo;t our concern to administrate the server or bother about other hosting stuff.&lt;/p&gt;

&lt;p&gt;But, as many other developers, we were &lt;strong&gt;hitching for something&lt;/strong&gt; more aligned with our inclinations: we wanted a tool that was closer to our daily jobs and our skills. We were also having &lt;strong&gt;problems during the revision phase&lt;/strong&gt; of the articles, since multiple persons couldn&amp;rsquo;t review and edit an article at the same time, fearing the risk of overwriting each other&amp;rsquo;s work.&lt;/p&gt;

&lt;p&gt;We then came down with a list of requirements for our blog; we wanted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;easy review of articles&lt;/strong&gt;: parallels reviews are a must&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;an easy workflow&lt;/strong&gt;: no major overhead, since the blog contributions are voluntary amongs us; we want to dedicate all the time to writing the articles, not wrestling with technical difficulties&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;no security flaws&lt;/strong&gt;: this point disqualified Wordpress and other famous CMS solutions; we wouldn&amp;rsquo;t like to spend time staying ahead of possible security risks, or have to worry over the hosting and installation problems that a widespread used CMS has&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;easy image hosting&lt;/strong&gt; and embedding&lt;/li&gt;
&lt;li&gt;easy management and modifications of the &lt;strong&gt;template&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;easy integrations of previously used &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus comments&lt;/a&gt; and Google Analytics&lt;/li&gt;
&lt;li&gt;preferably &lt;strong&gt;markdown content format&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;multilanguage articles&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-and-the-github-pages&#34;&gt;Git and the GitHub pages&lt;/h2&gt;

&lt;p&gt;The first solution that came to us was obviously &lt;strong&gt;Git&lt;/strong&gt;, the everyday tool for a team of developers working on the same piece of code (or text, in this case). We obviously then thought of the &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub pages&lt;/a&gt; as an hosting solution: that is ideal, since we already have a &lt;a href=&#34;https://github.com/facile-it&#34;&gt;Github organization&lt;/a&gt; in place, so an organization homepage/site would perfectly fit the bill for our blog.&lt;/p&gt;

&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;Once we set our eyes to that hosting solution, we started to search for a solution for building our blog. The proposed solution was &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;: it&amp;rsquo;s a static site generator, developed in Go, which fitted almost all of our requisites; also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it generates the static HMTL site live, with a &lt;strong&gt;&lt;a href=&#34;https://gohugo.io/extras/livereload/&#34;&gt;live reload&lt;/a&gt; functionality&lt;/strong&gt;: while you edit your markdown article, the site refresh itself on each save of the file(s), so you can see a live preview of what you&amp;rsquo;re writing&lt;/li&gt;
&lt;li&gt;there are many templates ready to be used, and we &lt;a href=&#34;http://themes.gohugo.io/future-imperfect/&#34;&gt;chose one&lt;/a&gt; to be modified to our needs&lt;/li&gt;
&lt;li&gt;the templates are built with the Go Templating engine, and with some easy manual edits we obtained all the requested features: multi-author support, link between translated articles, recent articles and top categories in the sidebar&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;deploying&#34;&gt;Deploying&lt;/h2&gt;

&lt;p&gt;The last step needed to smooth out our workflow was to find a &lt;strong&gt;deploy strategy&lt;/strong&gt;. Github pages need to have the site content published onto the master branch, and we obviously wanted to separate the source code of the site from that.&lt;/p&gt;

&lt;p&gt;We needed an easy way to reproduce this steps, ideally with a script commited to the repo, ready for everyone to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;generate&lt;/strong&gt; the static site with Hugo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;avoid mixing (and committing)&lt;/strong&gt; the static copy with the source files&lt;/li&gt;
&lt;li&gt;commit the files to the master branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugo normally generates the static copy in the &lt;code&gt;./public&lt;/code&gt; directory; to achieve this we used &lt;a href=&#34;https://github.com/X1011/git-directory-deploy&#34;&gt;a script that I found on GitHub itself&lt;/a&gt; that solved this exact problem. We started an empty &lt;code&gt;source&lt;/code&gt; branch, &lt;strong&gt;detached&lt;/strong&gt; from master:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b source --orphan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We started our Hugo site inside it, and we put the &lt;code&gt;./public&lt;/code&gt; in the &lt;code&gt;.gitIgnore&lt;/code&gt;, so each static generation would not be committed. We then prepared the deploy script that, after generating the static site, uses a Git subtree approach to commit its content to the master branch, with a commit message of &lt;code&gt;publish: &amp;lt;last commit message from source&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;et-voilà-here-we-are&#34;&gt;Et voilà, here we are!&lt;/h2&gt;

&lt;p&gt;So, we hope that you will enjoy our new blog at least as much as we enjoyed building it ! Happy reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Droidcon It 2016</title>
      <link>http://engineering.facile.it/blog/eng/droidcon-it-2016/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/eng/droidcon-it-2016/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://engineering.facile.it/images/droidconit-recap/logo_droidcon_it.png&#34; alt=&#34;Droidcon It&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The third edition of &lt;a href=&#34;http://it.droidcon.com/2016/&#34;&gt;Droidcon IT&lt;/a&gt; was, as expected, a great conference, full of interesting talks and people coming from all over the world. We saw a lot of GDEs (&lt;a href=&#34;https://developers.google.com/experts/all/technology/android&#34;&gt;Google Developer Expert&lt;/a&gt;) and also some Developer Advocates from Google, although it was not organized directly by the company. Back in March the Android team surprisingly released the brand new &lt;strong&gt;N Developer Preview&lt;/strong&gt; earlier than expected, so this year we were already able to talk about the new features in Android N and analyze them. Furthermore, there was talk of &lt;strong&gt;Kotlin&lt;/strong&gt;, &lt;strong&gt;RxJava&lt;/strong&gt; and a lot of other useful and interesting topics.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;m going to recap the event and make some considerations about the most interesting (and funny) talks.&lt;/p&gt;

&lt;h1 id=&#34;day-1&#34;&gt;Day 1&lt;/h1&gt;

&lt;h2 id=&#34;keynote-wojtek-kalicinski-https-twitter-com-wkalic&#34;&gt;Keynote - &lt;em&gt;&lt;a href=&#34;https://twitter.com/wkalic&#34;&gt;Wojtek Kalicinski&lt;/a&gt;&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;The day 1 keynote was all about the N Developer Preview and was given by Wojtek Kalicinski, a developer advocate directly from Google.
Wojtek went through all the new improvements of the platform, both from user&amp;rsquo;s and developer&amp;rsquo;s point of view. Here’s a short summary of the most relevant ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multi-window support&lt;/strong&gt;: probably the most requested user feature. I’ve always thought that its implementation would have been relatively straightforward, given the already responsive UI of Android, and in fact the code changes that are needed to support this feature are minimal. Just make sure you don’t lock screen orientation using &lt;code&gt;android:screenOrientation&lt;/code&gt; in your manifest.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Better notifications&lt;/strong&gt;: in addition to a visual change of the notification panel, apps will now be able to let the user interact with bundled notifications individually or to reply from the notification itself directly. Moreover, if the app already supports Android Wear notifications, most of this will come for free, since the APIs are the same.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doze improvements&lt;/strong&gt;: the battery saving mode called Doze, now works — in a less aggressive mode — when the phone is in the user pocket or hands, and not only when the phone is stationary. Wojtek said that most of the apps should continue to work without any change — or eventually &lt;a href=&#34;http://developer.android.com/intl/ko/training/monitoring-device-state/doze-standby.html#assessing_your_app&#34;&gt;minimal&lt;/a&gt; —, but he strongly encouraged to test apps against this new feature.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JAVA 8 features!&lt;/strong&gt;: finally Google will allow developers to use a limited set of features from the latest version of the language (already two years old) including &lt;em&gt;lambdas&lt;/em&gt; (🎉) and &lt;em&gt;default and static interface methods&lt;/em&gt; (TODO: add DP2 apis). All of this is possibile thanks to the Jack&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; toolchain which is able to compile Java 8 syntax to Java 6 compatible bytecode: in this way, old phones’ support is guaranteed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other changes include improvements to &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html#background_optimizations&#34;&gt;Project Svelte&lt;/a&gt;, a new &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html#data_saver&#34;&gt;Data Saver&lt;/a&gt; feature, the addition of the &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html#tile_api&#34;&gt;Quick Settings Tile API&lt;/a&gt; and &lt;a href=&#34;http://developer.android.com/intl/ko/preview/api-overview.html&#34;&gt;many more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most interesting and encouraging aspect coming out from the keynote and the N Preview release itself, is the fact that Google is, finally, trying to fix the Android updates issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://engineering.facile.it/images/droidconit-recap/n-preview-updates.png&#34; alt=&#34;N Preview Updates&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Not only the release of the new OS preview six months before its public release — instead of three — is really useful for third party developers to update apps to support new APIs, but hopefully it will also help phone manufactures to keep their custom Android implementations more aligned with the stock version release cycle. This will result in a better user experience and, more importantly to us, a better developer experience, making it closer to the iOS world where developers are not required to support five years old OS versions.&lt;/p&gt;

&lt;h2 id=&#34;perfmatters-for-android-hasan-hosgel-https-twitter-com-alosdev&#34;&gt;#PERFMATTERS for Android - &lt;em&gt;&lt;a href=&#34;https://twitter.com/alosdev&#34;&gt;Hasan Hosgel&lt;/a&gt;&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/alosdev/perfmatters-for-android-droidcon-turin-2016&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The talk was all about performance in Android. The speaker analyzed why #&lt;strong&gt;PERFMATTERS&lt;/strong&gt; on Android: the typical mobile user is generally &lt;em&gt;impatient&lt;/em&gt; and &lt;em&gt;intolerant&lt;/em&gt; and even just a couple of extra seconds during the start-up could make the difference in the user&amp;rsquo;s choice to use or not your app. Hasan went through a lot of interesting tips and tricks to improve performance, such as avoiding multi-pass nested layout — a topic discussed in more detail by Huyen Tue Dao during her &lt;a href=&#34;#lean-layouts&#34;&gt;talk&lt;/a&gt; —, avoiding memory leaks or having a cache on disk for data.&lt;/p&gt;

&lt;p&gt;Performance is crucial to &lt;strong&gt;engage the user&lt;/strong&gt; and I think the speaker did a great job in summarizing useful tips to improve it. Moreover most of them doesn’t alter the readability or the maintainability of the code, as is often the case for performance driven code changes.&lt;/p&gt;

&lt;h2 id=&#34;let-it-flow-unidirectional-data-flow-architecture-in-android-benjamin-augustin-https-twitter-com-dorvaryn&#34;&gt;Let it flow! Unidirectional data flow architecture in Android - &lt;a href=&#34;https://twitter.com/dorvaryn&#34;&gt;&lt;em&gt;Benjamin Augustin&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/dorvaryn/let-it-flow&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The use of patterns to structure the presentation layer (UI) in Android is still infrequent. During the last couple of years we have seen a lot of discussions about &lt;strong&gt;MVC&lt;/strong&gt;/&lt;strong&gt;MVP&lt;/strong&gt;/&lt;strong&gt;MVVM&lt;/strong&gt; patterns within the Android developers community, and some implementations of them.
During the talk the speaker presented a new approach that takes some concepts from the web development world like &lt;a href=&#34;https://facebook.github.io/flux/&#34;&gt;&lt;em&gt;Flux&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;http://redux.js.org&#34;&gt;&lt;em&gt;Redux&lt;/em&gt;&lt;/a&gt;. The concept in a nutshell is that the UI, in addition to being as dumb as possible, should also be &lt;strong&gt;stateless&lt;/strong&gt;. In other words, the UI listens to state changes pushed by the business logic and updates itself accordingly.
Benjamin chose to focus more on the practical aspects and so he made the concept clear by directly building an &lt;a href=&#34;https://github.com/Dorvaryn/unidirectionalDataFlow&#34;&gt;app&lt;/a&gt; using Kotlin and RxJava.&lt;/p&gt;

&lt;p&gt;I personally likey approach that Benjamin showed us, since it has a lot of advantages. It makes the UI state completely &lt;strong&gt;predictable&lt;/strong&gt; and &lt;strong&gt;reproducible&lt;/strong&gt;: it allows us to represent an app state without the need to go through all the steps needed to reach it, thus it can be very useful in reproducing a bug or testing a particular situation. The problem is that, as you can see from the demo app, it adds a lot of boilerplate code and it&amp;rsquo;s also much more verbose and difficult to implement without tools like RxJava or Kotlin, that might be problematic to some.&lt;/p&gt;

&lt;h2 id=&#34;play-everywhere-providing-a-consistent-experience-across-very-different-devices-alessandro-bizzarri-http-it-droidcon-com-2016-speakers-alessandro-bizzarri-dima-kunin-http-it-droidcon-com-2016-speakers-dima-kunin&#34;&gt;Play everywhere: providing a consistent experience across very different devices - &lt;a href=&#34;http://it.droidcon.com/2016/speakers/alessandro-bizzarri/&#34;&gt;&lt;em&gt;Alessandro Bizzarri&lt;/em&gt;&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://it.droidcon.com/2016/speakers/dima-kunin/&#34;&gt;&lt;em&gt;Dima Kunin&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The two speakers showed a high-level tour of how at &lt;strong&gt;Spotify&lt;/strong&gt; they  are able to provide a consistent experience across different devices — defined as the combination of its physical form and its OS.
They created their own &lt;strong&gt;design language&lt;/strong&gt; to support the majority of platforms used to define almost everything, from color palette and buttons style to animations and sounds.
They explained also how they use a &lt;strong&gt;C++ library&lt;/strong&gt; common to all platforms to reuse code; in particular on Android they use it through the NDK, a toolset to include C or C++ code in your app and call it from Java code.&lt;/p&gt;

&lt;p&gt;It was a light talk but still it was interesting to see how a big company like Spotify finds solutions to scale and maintain a &lt;strong&gt;consistent and engaging UX&lt;/strong&gt; across all of its user-base.&lt;/p&gt;

&lt;h2 id=&#34;loving-lean-layouts-huyen-tue-dao-https-twitter-com-queencodemonkey-a-name-lean-layouts-a&#34;&gt;Loving lean layouts - &lt;a href=&#34;https://twitter.com/queencodemonkey&#34;&gt;&lt;em&gt;Huyen Tue Dao&lt;/em&gt;&lt;/a&gt; &lt;a name=&#34;lean-layouts&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/queencodemonkey/droidcon-italy-2016-loving-lean-layouts&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The speaker gave a really great talk about one of the best ways to keep an app smooth and responsive: &lt;strong&gt;optimize layouts&lt;/strong&gt; to be as flat as possible. The Android UI layer will call &lt;code&gt;measure()&lt;/code&gt; and    &lt;code&gt;layout()&lt;/code&gt; methods — two times in the case of &lt;code&gt;RelativeLayout&lt;/code&gt; — through all the hierarchy of views to be able to draw the layout; so, for example, having a useless root level  or useless views will result in more measure/layout passes, thus poor performance. Huyen explained how sometimes the solution to this problem may be to choose the right view or layout, but it could be useful to know that there is always the possibility to implement a custom &lt;code&gt;ViewGroup&lt;/code&gt; to mitigate the number of measure/layout passes or even a totally custom &lt;code&gt;View&lt;/code&gt; that overrides &lt;code&gt;onDraw()&lt;/code&gt; to draw everything by hand.&lt;/p&gt;

&lt;p&gt;The talk was very easy to follow and really useful: most of the advices covered are often ignored because singularly they have less impact, but, if taken all together and especially as good habits, they could really make the difference in maintain the &lt;strong&gt;UI smooth and lag-free&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;day-2&#34;&gt;Day 2&lt;/h1&gt;

&lt;h2 id=&#34;android-reactive-programming-with-rxjava-ivan-morgillo-https-twitter-com-hamen&#34;&gt;Android reactive programming with RxJava - &lt;a href=&#34;https://twitter.com/hamen&#34;&gt;&lt;em&gt;Ivan Morgillo&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;During last couple of years RxJava has been echoing all over the Android developers community and given its huge popularity I was surprised to see that Droidcon IT offered only one talk about it.&lt;/p&gt;

&lt;p&gt;Fortunately Ivan Morgillo is a topic expert — he also wrote a &lt;a href=&#34;https://www.packtpub.com/application-development/rxjava-essentials&#34;&gt;book&lt;/a&gt; about RxJava and Android — and during the talk he went through some of the &lt;strong&gt;basics of reactive programming&lt;/strong&gt; (&lt;code&gt;Observables&lt;/code&gt;, &lt;code&gt;Observer&lt;/code&gt;, &lt;code&gt;Subscription&lt;/code&gt;…) and a lot of useful &lt;strong&gt;operators&lt;/strong&gt;, which are one of the strengths of RxJava and Reactive extensions (Rx*) in general.&lt;/p&gt;

&lt;p&gt;To be honest I was hoping for a more theoretical talk with an analysis of the advantages and disadvantages of embracing the reactive pattern in our Android projects. It was instead a lot practical and it covered a great number of common use cases where reactive programming could really help to make code mode readable and maintainable.&lt;/p&gt;

&lt;h2 id=&#34;you-can-do-better-with-kotlin-svetlana-isakova-https-github-com-svtk&#34;&gt;You can do better with Kotlin - &lt;a href=&#34;https://github.com/svtk&#34;&gt;&lt;em&gt;Svetlana Isakova&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/svtk/you-can-do-better-with-kotlin&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kotlin has recently reached &lt;a href=&#34;https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/&#34;&gt;&lt;strong&gt;1.0 version&lt;/strong&gt;&lt;/a&gt; and it is gaining a lot of attention within the Java community and especially the Android one. A lot of developers — me included — are in fact hoping that Google will make it the default programming language for its mobile OS.&lt;/p&gt;

&lt;p&gt;Kotlin is a &lt;strong&gt;modern&lt;/strong&gt;, &lt;strong&gt;pragmatic&lt;/strong&gt; and &lt;strong&gt;Android-friendly&lt;/strong&gt; programming language, with robust supporting tools since it is developed from the people behind IntelliJ (thus, Android Studio). It could be mixed with Java code — thus making the switch painless — since there is no Kotlin SDK but just JDK plus extensions, and it includes a lot of modern concept such as &lt;em&gt;data classes&lt;/em&gt;, &lt;em&gt;null-safety&lt;/em&gt;, &lt;em&gt;extension functions&lt;/em&gt; and &lt;em&gt;lambdas&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The speaker showed also ANKO, a DSL written in Kotlin, that uses &lt;em&gt;lambdas with receivers&lt;/em&gt;, to create layouts and views and allows to write code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;verticalLayout {
    val name = editText()
    button(&amp;quot;Say Hello&amp;quot;) {
        onClick { toast(&amp;quot;Hello, ${name.text}!&amp;quot;) }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This talk was one of the most interesting to me, as it persuaded me to try and deepen my knowledge of Kotlin. Svetlana was very good at showing the main features of the JetBrains language and at explaining how they convert in Java code, an aspect that I found very useful to mutate my mindset with new concepts and  syntaxes.&lt;/p&gt;

&lt;h2 id=&#34;fun-things-you-cando-in-kotlin-maciej-górski-https-github-com-mg6maciej&#34;&gt;fun things (you: CanDo &lt;in Kotlin&gt; ) = … - &lt;a href=&#34;https://github.com/mg6maciej&#34;&gt;&lt;em&gt;Maciej Górski&lt;/em&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mg6maciej/fun-things-you-CanDo-in-Kotlin&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second Droidcon talk about Kotlin was a very fun one, with the speaker acting a funny scene where a nephew tries to explain to his granpa why he should use &lt;strong&gt;Kotlin instead of Java&lt;/strong&gt; with a live coding session.&lt;/p&gt;

&lt;p&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&#39;embed-container&#39;&gt;&lt;iframe src=&#39;https://www.youtube.com/embed/RVu_0TIiH8Q&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The second part of the talk was still in live programming (without slides) and showed some Kotlin feature in practice. It covered some advanced topics such as functional programming, operator overloading, infix functions, laziness and more.&lt;/p&gt;

&lt;p&gt;It was funny and informative to watch a &lt;strong&gt;live coding talk&lt;/strong&gt; and for sure it made me more curious and confident about Kotlin.&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;The Droidcon IT is already, after three editions, the &lt;strong&gt;point of reference&lt;/strong&gt; for the Android community in Italy and this year too it lived up to the expectations. We saw a lot of well-known speakers and developers such as the Googlers Nick Butcher and  Wojtek Kaliciński. It was a conference rich of interesting talks in addition to those summarized in this post, ranging between al lot of various topics such as TDD, UX, tools and many more. The only thing that surprised me was the lack of talks about Android Wear: perhaps Google is slowing down to push this platform among developers?&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://source.android.com/source/jack.html&#34;&gt;Jack&lt;/a&gt; is the new Google compiler which has the goal to speed up the compilation process, compiling Java .class files directly to .dex files (Android bytecode)
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Json Web Token</title>
      <link>http://engineering.facile.it/blog/eng/json-web-tokens/</link>
      <pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/eng/json-web-tokens/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://engineering.facile.it/images/json-web-tokens/logo.svg&#34; alt=&#34;JWT&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I started my study about JWT, I was searching for a smart method to authenticate a request, without querying the database each time to check the applicant reliability.
I needed a token or something similar with the ability to validate itself and flexible enough to customize the validation strategy.
Imagine for example a web application where a user can login and obtain a &amp;ldquo;pass&amp;rdquo; with his name and an expiration time, and this pass will let him ask for resources until the pass expires, and only if the issuer is trusted.
Thanks to JWT&amp;rsquo;s self verification capabilities, I could discard every request where the token is invalid (a fake token not signed by my application) or expired.
Beyond this specific use case, JWT can be also useful to securely transmit data to other applications.&lt;/p&gt;

&lt;p&gt;Now let me introduce the standard: JSON Web Token (JWT) is an open standard &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;RFC 7519&lt;/a&gt; that defines a compact, self-contained and secure way for transmitting information between two parties.&lt;/p&gt;

&lt;p&gt;Using javascript object notation to represent the data means two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;saving lots of bytes when the token goes over the network, &lt;strong&gt;because of it&amp;rsquo;s size&lt;/strong&gt; it can be sent over an URL or inside an HTTP Header&lt;/li&gt;
&lt;li&gt;it can be &lt;strong&gt;easily parsed by a browser&lt;/strong&gt; and consumed by a client application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is more clear when comparing JSON to other standards like &lt;a href=&#34;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&#34;&gt;SAML&lt;/a&gt; that uses a very verbose XML structure.&lt;/p&gt;

&lt;p&gt;A JWT token can be trusted because it is digitally signed using a secret (usually with &lt;a href=&#34;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&#34;&gt;HMAC&lt;/a&gt; algorithm) or a keypair with &lt;a href=&#34;https://en.wikipedia.org/wiki/RSA&#34;&gt;RSA&lt;/a&gt;.
Its payload contains all the required data to verify itself and, for example, transport the user data to avoid querying the database more than once.&lt;/p&gt;

&lt;h2 id=&#34;how-the-token-presents-itself&#34;&gt;How the token presents itself&lt;/h2&gt;

&lt;p&gt;A token is represented as three base64 encoded strings joined by two points:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;headers&#34;&gt;Headers&lt;/h3&gt;

&lt;p&gt;The first part of the string contains the headers, &lt;code&gt;&amp;quot;alg&amp;quot;&lt;/code&gt; is the algorithm used to secure the token and &lt;code&gt;&amp;quot;typ&amp;quot;&lt;/code&gt; is the type; in this case as we can see that I used an HMAC SHA256 to sign the JWT token:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;alg&amp;quot;: &amp;quot;HS256&amp;quot;,
  &amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;payload&#34;&gt;Payload&lt;/h3&gt;

&lt;p&gt;The second part is the payload: it&amp;rsquo;s the data sent with the token. It contains metadata and information like expiration, audience or subject, and whatever you need.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;sub&amp;quot;: &amp;quot;1234567890&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;John Doe&amp;quot;,
  &amp;quot;admin&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All data is organized in &lt;strong&gt;claims&lt;/strong&gt;, statements about an entity (typically, the user). There are three types of claims: reserved, public, and private claims.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reserved claims&lt;/strong&gt;: a set of predefined claims, conceived to provide a set of useful information. Some of them are: &lt;code&gt;iss&lt;/code&gt; (issuer), &lt;code&gt;exp&lt;/code&gt; (expiration time), &lt;code&gt;sub&lt;/code&gt; (subject), &lt;code&gt;aud&lt;/code&gt; (audience), among others.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Public claims&lt;/strong&gt;: defined at will but, in order to avoid collisions, they should be defined in the &lt;a href=&#34;http://www.iana.org/assignments/jwt/jwt.xhtml&#34;&gt;IANA JSON Web Token Registry&lt;/a&gt; or be described as a URI that contains a collision resistant namespace.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Private claims&lt;/strong&gt;: custom claims created to share information between parties that agree with using them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sign&#34;&gt;Sign&lt;/h3&gt;

&lt;p&gt;The third part of the string is the sign, obtained from hashing headers and payload with a secret using the algorithm described in headers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;HMACSHA256(
  base64UrlEncode(header) + &amp;quot;.&amp;quot; +
  base64UrlEncode(payload),
  secret
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As said before the more interesting feature of JWT is in it&amp;rsquo;s flexibility. It can be created with the claims you need, carry your data and validated on other claims (standard or not).
As an example, if on authentication I want to be sure that the token is issued by my application and that it is not older than 1 hour I can generate a token with a payload like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;iss&amp;quot;: &amp;quot;1234567890&amp;quot;, // my application code
  &amp;quot;exp&amp;quot;: &amp;quot;1459868400&amp;quot;, // 2016-04-04 15:00:00 Expiration time
  &amp;quot;uid&amp;quot;: 159, // the user id
  &amp;quot;name&amp;quot;: &amp;quot;Alessandro Galli&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once my application receives a request with this token, an authenticator component will check the two claims (&lt;code&gt;iss&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;) to be sure of the assertions made before, and then validate the sign. Furthermore, with the additional claims it can login the user without querying the database and complete the request.&lt;/p&gt;

&lt;p&gt;This approach results in a stateless authentication removing all problems related to session storage, CORS+cookies requests and CSRF protection, among others.&lt;/p&gt;

&lt;p&gt;As a solid standard, JWT has been adopted by a large number of users and it has libraries for almost every programming language: PHP, Java, Go, Python, Javascript, Ruby, Elixir, Scala, .NET. You can find a full list of available and trusted libraries on &lt;a href=&#34;https://jwt.io/#libraries-io&#34;&gt;JWT.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next weeks, I will write a post and release my personal authentication example, using PHP with the Symfony framework.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Careers</title>
      <link>http://engineering.facile.it/ita/careers/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/ita/careers/</guid>
      <description>

&lt;h3 id=&#34;web-developer&#34;&gt;Web Developer&lt;/h3&gt;

&lt;p&gt;Facile.it è in costante crescita e siamo sempre alla ricerca di programmatori da aggiungere al nostro team. Questa proposta è rivolta a sviluppatori PHP di grande esperienza, che credono nell’innovazione e sono sempre attenti alle nuove tecnologie e non vedono l’ora di metterle in pratica. Siamo un gruppo di lavoro dinamico, giovane e divertente. Siamo in totale 20 programmatori e gestiamo diversi progetti con vari stack tecnologici: Symfony2, Zend 2 e anche qualcosa fatto in casa.&lt;/p&gt;

&lt;p&gt;Tutte le nostre applicazioni si basano sulla piattaforma LAMP. Per entrare nel nostro team devi quindi conoscere bene strumenti quali Linux, Apache, MySQL e PHP, oltre a rispondere “sì” a queste domande:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ti appassiona la programmazione a oggetti ed usi i principali Design Pattern?&lt;/li&gt;
&lt;li&gt;Scrivi codice pulito (Coding Standards) e sai gestire correttamente le dipendenze (Composer)?&lt;/li&gt;
&lt;li&gt;Sei capace di gestire cospicui flussi di dati da webservice?&lt;/li&gt;
&lt;li&gt;Se parliamo di HTTP e REST sai a cosa alludiamo?&lt;/li&gt;
&lt;li&gt;Ti senti a tuo agio nel progettare database MySQL che dovranno trattare milioni di record?&lt;/li&gt;
&lt;li&gt;Hai dimestichezza con almeno uno tra Backbone.js, Ember.js o AngularJs? (jQuery è d’obbligo!)&lt;/li&gt;
&lt;li&gt;Sei in grado di raccogliere specifiche, analizzarle e proporre soluzioni concrete?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Son da considerarsi titoli preferenziali:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conoscenza Framework PHP (Symfony2 o Zend Framework 2)&lt;/li&gt;
&lt;li&gt;Esperienza con test automatici (meglio ancora TDD)&lt;/li&gt;
&lt;li&gt;Conoscenza delle espressioni regolari&lt;/li&gt;
&lt;li&gt;Doti sistemistiche ambiente Linux&lt;/li&gt;
&lt;li&gt;Abitudine all&amp;rsquo;utilizzo di sistemi di versionamento del codice (noi usiamo GIT!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://jobs.facile.it/chi-cerchiamo/candidati.html&#34; target=&#34;\_blank&#34;&gt;Candidati »&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;android-developer&#34;&gt;Android Developer&lt;/h3&gt;

&lt;p&gt;Facile.it è una web company con applicazioni sviluppate per Android e iOS usando tecnologie native.&lt;/p&gt;

&lt;p&gt;Cerchiamo un nuovo sviluppatore Android da inserire nel team di sviluppo mobile: la figura sarà coinvolta nell’analisi dei requisiti, nelle scelte tecnologiche e nella definizione delle strategie di sviluppo.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Il candidato ideale risponde sì alle seguenti domande:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sei appassionato di programmazione e ti piace migliorare e imparare sempre cose nuove?&lt;/li&gt;
&lt;li&gt;Hai un’ottima conoscenza del SDK, almeno dalla versione 5 di Android, con esperienza nella risoluzione di problemi di retrocompatibilità fino ad Android 4.1 (API level 16)?&lt;/li&gt;
&lt;li&gt;Hai familiarità con i principali pattern di programmazione a oggetti e i principi del SOLID?&lt;/li&gt;
&lt;li&gt;Sai realizzare applicazioni client comunicanti con server tramite web service REST, con dati in formato JSON?&lt;/li&gt;
&lt;li&gt;Hai familitarità con RxJava e hai sentito parlare di Kotlin?&lt;/li&gt;
&lt;li&gt;Hai familiarità con Git?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;È un valore aggiunto se:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ti piace scrivere codice pulito, testabile e facile da mantenere.&lt;/li&gt;
&lt;li&gt;Possiedi capacità di refactoring e sviluppo di test unitari.&lt;/li&gt;
&lt;li&gt;Hai esperienza nel processo di pubblicazione su Google Play Store.&lt;/li&gt;
&lt;li&gt;Segui con interesse le novità nel mondo dello sviluppo per Android&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://jobs.facile.it/chi-cerchiamo/candidati.html&#34; target=&#34;\_blank&#34;&gt;Candidati »&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cosa-offriamo-in-facile-it&#34;&gt;Cosa offriamo in Facile.it:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Assunzione a tempo indeterminato con RAL in base alla tua esperienza + fondo salute integrativo&lt;/li&gt;
&lt;li&gt;Possibilità di crescita economica in base alle nuove competenze acquisite&lt;/li&gt;
&lt;li&gt;1 venerdì al mese fuori ufficio dedicato alla condivisione ed allo studio col team&lt;/li&gt;
&lt;li&gt;Biblioteca di libri di tecnologia con più di 100 titoli&lt;/li&gt;
&lt;li&gt;Budget annuale di 1.500€ per l’hardware e software di cui hai bisogno&lt;/li&gt;
&lt;li&gt;Partecipazione ad eventi di tecnologia a nostro carico (Pragma Conference, Droidcon, Codemotion, etc)&lt;/li&gt;
&lt;li&gt;Sala relax con sofà, ping-pong e calcetto&lt;/li&gt;
&lt;li&gt;Convenzioni (bar, ristoranti, palestre and more!), Ticket Restaurant, caffè, acqua e frutta fresca ogni giorno&lt;/li&gt;
&lt;li&gt;Fare il lavoro che ami in una realtà italiana di successo con un top team al tuo fianco&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Chi siamo</title>
      <link>http://engineering.facile.it/ita/chi-siamo/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/ita/chi-siamo/</guid>
      <description>&lt;p&gt;This page is also available in &lt;a href=&#34;http://engineering.facile.it/eng/who-we-are&#34;&gt;english&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Facile.it ha un nutrito e appassionato gruppo di sviluppatori. I progetti del gruppo Facile.it si basano su PHP fin dal 2008, più il tempo passa più nuove tecnologie entrano a far parte del Know How aziendale.
Questo Blog permette ai nostri sviluppatori di condividere consigli ed esperienze dirette con le tecnologie che usano quotidianamente.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.facile.it/&#34; target=&#34;_blank&#34;&gt;Facile.it&lt;/a&gt; è il sito leader nella comparazione online, il gruppo comprende anche i domini &lt;a href=&#34;http://www.assicurazione.it/&#34; target=&#34;_blank&#34;&gt;Assicurazione.it&lt;/a&gt;, &lt;a href=&#34;http://www.prestiti.it/&#34; target=&#34;_blank&#34;&gt;Prestiti.it&lt;/a&gt; e &lt;a href=&#34;http://www.mutui.it/&#34; target=&#34;_blank&#34;&gt;Mutui.it&lt;/a&gt;. Ogni mese aiuta oltre 1,5 milioni di italiani a tagliare le spese ricorrenti, grazie al rapido confronto delle &lt;a href=&#34;http://www.facile.it/adsl/risultati.html&#34; target=&#34;_blank&#34;&gt;offerte ADSL&lt;/a&gt; o alla possibilità di risparmiare confrontando le offerte delle compagnie partner per le &lt;a href=&#34;http://www.facile.it/assicurazioni-auto.html&#34; target=&#34;_blank&#34;&gt;assicurazioni auto&lt;/a&gt; e per la stipula di un’&lt;a href=&#34;http://www.facile.it/assicurazioni-moto.html&#34; target=&#34;_blank&#34;&gt;assicurazione moto&lt;/a&gt;.
Il comparatore ha conquistato la fiducia dei suoi utenti e ha potuto così aumentare costantemente le categorie di prodotti e servizi rendendo disponibile il &lt;a href=&#34;https://www.facile.it/mutui/risultati-acquisto.html&#34; target=&#34;_blank&#34;&gt;calcolo rata mutuo&lt;/a&gt; e il confronto di &lt;a href=&#34;http://www.facile.it/prestiti-personali.html&#34; target=&#34;_blank&#34;&gt;prestiti personali&lt;/a&gt; oltre a quello delle offerte delle banche per &lt;a href=&#34;http://www.facile.it/prestiti.html&#34; target=&#34;_blank&#34;&gt;prestiti online&lt;/a&gt;.
Facile.it consente di trovare online le migliori offerte per privati, aziende e liberi professionisti con partiva iva rendendo facile risparmiare sul costo di &lt;a href=&#34;http://www.facile.it/energia-luce-gas.html&#34; target=&#34;_blank&#34;&gt;luce e gas&lt;/a&gt; e sulla bolletta telefonica grazie alle &lt;a href=&#34;http://www.facile.it/adsl-internet-casa.html&#34; target=&#34;_blank&#34;&gt;offerte internet casa&lt;/a&gt;. Oltre a tutti i servizi precedentemente elencati gli utenti di Facile.it hanno la possibilità di aprire &lt;a href=&#34;http://www.facile.it/conti-correnti.html&#34; target=&#34;_blank&#34;&gt;conti correnti&lt;/a&gt;, ottenere &lt;a href=&#34;http://www.facile.it/carta-di-credito.html&#34; target=&#34;_blank&#34;&gt;carte di credito&lt;/a&gt;, reperire sconti e buoni sconto e confrontare le offerte per le gomme auto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who we are</title>
      <link>http://engineering.facile.it/eng/who-we-are/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/eng/who-we-are/</guid>
      <description>&lt;p&gt;Questa pagina è disponibile anche in &lt;a href=&#34;http://engineering.facile.it/ita/chi-siamo&#34;&gt;italiano&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Facile.it rely on a big and keen crew of developers. Since 2008, the group’s projects are based on PHP, and as time goes by new technologies become part of corporate know how.
This blog allows our developers to share tips and direct experiences with new technologies.&lt;/p&gt;

&lt;p&gt;Facile.it is the leading price comparison website in Italy; also Assicurazione.it, Prestiti.it and Mutui.it are part of the Group. Every month we help more than 1.5 million Italians to cut their expenses, thanks to our broadband offers comparaison service. People can also save money by confronting the deals of our providers for car insurances or motorbike insurances.
Thanks to the rising trust that users put in us, we grew as a business and we can steadily provide people even better and easier ways to save money. E.g., users can simply calculate the mortgage payment or the amount of a personal loan.
Facile.it allows private consumers, companies and freelancers to find the best online deals, so it gets easier to cut the cost of gas and electricity or to save money off the phone bills thanks to home internet offers. Users can also switch their current account to a new bank, find a credit card, discount codes or vouchers, and compare car tires deals.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Decoupling view controllers with Signals</title>
      <link>http://engineering.facile.it/blog/eng/decoupling-view-controllers-with.signals/</link>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/eng/decoupling-view-controllers-with.signals/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://engineering.facile.it/code-reuse-a-primer/&#34;&gt;Last time&lt;/a&gt; we looked at the &lt;strong&gt;Signal&lt;/strong&gt; class, that is, a simple, reusable way of encapsulating the &lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;observer pattern&lt;/a&gt;. There are many use cases for a signal, and I&amp;rsquo;m going to show one possible application, spawned from a real-world problem. View controllers&amp;rsquo; composition and decoupling is &lt;strong&gt;hard&lt;/strong&gt;: we often need an input from a view controller, that has to send its input back to its creator, while handling the back navigation somehow. We often find ourselves in a situation in which several different responsibilities are all expressed in a single view controller, with the effect of creating a gigantic class, full of entangled imperative statements, hard-to-understand sequencing and general complexity. We&amp;rsquo;ll use the &lt;code&gt;Signal&lt;/code&gt; class to assign the various responsibilities to different classes, and write cleaner, more declarative code. The core of this architectural pattern lies in inverting the way in which objects communicate, view controller or other: instead of asking objects to do things, we&amp;rsquo;re going to &lt;strong&gt;observe&lt;/strong&gt; what objects are doing, and &lt;strong&gt;react&lt;/strong&gt; accordingly. &lt;em&gt;Observe&lt;/em&gt; and &lt;em&gt;React&lt;/em&gt; are the cornerstones of the programming paradigm known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming&#34;&gt;functional reactive programming(FRP)&lt;/a&gt;; the present article is not going to talk about FRP as a whole, nor to present shared FRP techniques; the point is to discuss an architectural pattern for decoupling view controllers from responsibilities not strictly related to user interaction, by leveraging some basic FRP tools.&lt;/p&gt;

&lt;p&gt;The example project for this article is available in &lt;a href=&#34;https://github.com/broomburgo/SignalViewControllers/&#34;&gt;GitHub&lt;/a&gt;: I&amp;rsquo;m going to paste some code examples, but it&amp;rsquo;s recommended to check and test the entire project while reading the article. What follows is the full implementation of &lt;code&gt;Signal&lt;/code&gt;, and its public interface for sending new values, called &lt;code&gt;Emitter&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;import Foundation

public enum Persistence {
  case Stop
  case Continue
}

public final class Signal&amp;lt;Subtype&amp;gt; {
  typealias Observation = Subtype -&amp;gt; Persistence

  private var observations: [Observation] = []

  public init() {}

  public func onReception (observeFunction: Subtype -&amp;gt; Persistence) -&amp;gt; Signal {
    observations.append(observeFunction)
    return self
  }

  public func map&amp;lt;OtherSubtype&amp;gt;(transform: Subtype -&amp;gt; OtherSubtype) -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt; {
    let mappedSignal = Signal&amp;lt;OtherSubtype&amp;gt;()
    onReception {
      mappedSignal.send(transform($0))
      return .Continue
    }
    return mappedSignal
  }

  public func flatMap&amp;lt;OtherSubtype&amp;gt;(transform: Subtype -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt;) -&amp;gt; Signal&amp;lt;OtherSubtype&amp;gt; {
    let mappedSignal = Signal&amp;lt;OtherSubtype&amp;gt;()
    onReception {
      transform($0).onReception {
        mappedSignal.send($0)
        return .Continue
      }
      return .Continue
    }
    return mappedSignal
  }

  public func filter(predicate: Subtype -&amp;gt; Bool) -&amp;gt; Signal {
    let filteredSignal = Signal&amp;lt;Subtype&amp;gt;()
    onReception {
      if predicate($0) {
        filteredSignal.send($0)
      }
      return .Continue
    }
    return filteredSignal
  }

  public func unionWith (otherSignal: Signal&amp;lt;Subtype&amp;gt;) -&amp;gt; Signal {
    let unifiedSignal = Signal&amp;lt;Subtype&amp;gt;()
    let observeFunction = { (value: Subtype) -&amp;gt; Persistence in
      unifiedSignal.send(value)
      return .Continue
    }
    onReception(observeFunction)
    otherSignal.onReception(observeFunction)
    return unifiedSignal
  }
}

public func + &amp;lt;Subtype&amp;gt; (left: Signal&amp;lt;Subtype&amp;gt;, right: Signal&amp;lt;Subtype&amp;gt;) -&amp;gt; Signal&amp;lt;Subtype&amp;gt; {
  return left.unionWith(right)
}

extension Signal {
  private func send (value: Subtype) {
    var newObservations: [Observation] = []
    while observations.count &amp;gt; 0 {
      let observe = observations.removeFirst()
      let persistence = observe(value)
      switch persistence {
      case .Continue:
        newObservations.append(observe)
      case .Stop: break
      }
    }
    observations = newObservations
  }
}

public final class Emitter&amp;lt;Subtype&amp;gt; {
  public let signal = Signal&amp;lt;Subtype&amp;gt;()

  public func emit(value: Subtype) {
    signal.send(value)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-megacontroller&#34;&gt;The megacontroller&lt;/h2&gt;

&lt;p&gt;Suppose we need to create a simple app to leave a feedback for a movie we just watched; the feedback will be divided in two categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;average&lt;/em&gt;: the movie was &lt;em&gt;good&lt;/em&gt;, &lt;em&gt;bad&lt;/em&gt; or &lt;em&gt;so and so&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;polarized&lt;/em&gt;: the movie was &lt;em&gt;very bad&lt;/em&gt; or &lt;em&gt;really good&lt;/em&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The app is going to present a page in which the user can select an &lt;em&gt;average&lt;/em&gt; or a &lt;em&gt;polarized&lt;/em&gt; feedback, and can tap a button that will present the user the available choices, i.e., respectively &lt;em&gt;good&lt;/em&gt;, &lt;em&gt;son and so&lt;/em&gt;, &lt;em&gt;bad&lt;/em&gt;, or &lt;em&gt;really&lt;/em&gt; and &lt;em&gt;very bad&lt;/em&gt;. The app is also going to thank the user if they&amp;rsquo;ve just left a positive feedback, but only if the previously left feedback was of lower value. The example is a little contrived but instructive, as we&amp;rsquo;re going to see. An &lt;strong&gt;easy, familiar approach&lt;/strong&gt; to the problem would be to start with the design of the two view controllers involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;MainPage&lt;/code&gt; will let the user select if the feedback is average or polarized, and will present a button to show the page where the actual feedback value will be selected; the &lt;code&gt;MainPage&lt;/code&gt; will also show the currently selected feedback (or none) in a label;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;SelectionPage&lt;/code&gt; is going to present several buttons with the various feedback values (different based on the feedback category), and at the tap of a button the page should actually pop from the navigation stack, going back to the now-updated &lt;code&gt;MainPage&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Armed with our &lt;strong&gt;imperative mind&lt;/strong&gt; we would probably start by adding a sequence of instructions to the &lt;code&gt;MainPage&lt;/code&gt;, that we&amp;rsquo;ll probably perceive as the &amp;ldquo;main&amp;rdquo; controller of our app. But soon, we would probably notice that a lot of &lt;strong&gt;clearly separated&lt;/strong&gt; responsibilities are being collected in the &lt;code&gt;MainPage&lt;/code&gt; class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;SelectionPage&lt;/code&gt; has to be constructed and initialized, and by doing this in &lt;code&gt;MainPage&lt;/code&gt; we are imposing a strict &lt;strong&gt;dependency&lt;/strong&gt; between the two classes;&lt;/li&gt;
&lt;li&gt;after its initialization, the &lt;code&gt;SelectionPage&lt;/code&gt; must be presented to the user: we would probably embed &lt;code&gt;MainPage&lt;/code&gt; in a &lt;code&gt;UINavigationController&lt;/code&gt;, then push the &lt;code&gt;SelectionPage&lt;/code&gt; from the &lt;code&gt;MainPage&lt;/code&gt;, resulting in a strict coupling of the two classes with a particular navigation and presentation strategy (i.e., using a &lt;code&gt;UINavigationController&lt;/code&gt;) that is going to cause headaches if the use cases change (for example, in developing the &lt;strong&gt;iPad version&lt;/strong&gt; of the app);&lt;/li&gt;
&lt;li&gt;there&amp;rsquo;s a feedback value &lt;strong&gt;stored somewhere&lt;/strong&gt;, because we need to know if the user selected &lt;code&gt;average&lt;/code&gt; or &lt;code&gt;polarized&lt;/code&gt;, and actually which was the selected feedback, because its value will be shown on the main page; the simplest solution seems to be just storing the selected feedback value in the &lt;code&gt;MainPage&lt;/code&gt; class;&lt;/li&gt;
&lt;li&gt;the act of &amp;ldquo;collecting the feedback&amp;rdquo; is a responsibility in itself, because the collected value is probably going to be used somewhere (for example, posting it to a web service);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We basically identified 4 different responsibilities, each of which is probably going to need its own class, but instead of thinking about the methods that need to be called on each one of them, we&amp;rsquo;re going to try and think with signals.&lt;/p&gt;

&lt;h2 id=&#34;the-model&#34;&gt;The model&lt;/h2&gt;

&lt;p&gt;For example, if the model changes we need to update the text shown on the &lt;code&gt;MainPage&lt;/code&gt;: a possible way to manage this could be to create a &lt;code&gt;ModelController&lt;/code&gt; class, which holds the model, and &lt;em&gt;emits a signal&lt;/em&gt; each time the model changes. Then, the &lt;code&gt;MainPage&lt;/code&gt; could &lt;em&gt;react&lt;/em&gt; to this signal, and change the UI accordingly. A nice to way to do this is injecting the &lt;code&gt;ModelController&lt;/code&gt; in the &lt;code&gt;MainPage&lt;/code&gt; constructor, so that &lt;code&gt;MainPage&lt;/code&gt; can establish the appropriate bindings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;/// MainPage initializer
init(feedbackModelController: ModelController&amp;lt;FeedbackModel&amp;gt;) {
  super.init(nibName: nil, bundle: nil)
  feedbackModelController.updateSignal.onReception § eachTime § updateViewsWithFeedbackModel
  viewReadyEmitter.signal.onReception § eachTime § feedbackModelController.notify
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;§&lt;/code&gt; operator and the &lt;code&gt;eachTime&lt;/code&gt; function are just helpers to make the &lt;strong&gt;functional composition&lt;/strong&gt; easier: as it often happens with functional programming, or declarative programming in general, we can infer the meaning of an expression just by reading it; in fact, &lt;code&gt;onReception § eachTime § updateViewsWithFeedbackModel&lt;/code&gt; means that when the signal is received, the &lt;code&gt;MainPage&lt;/code&gt; will update the view every time according to the new &lt;code&gt;FeedbackModel&lt;/code&gt;: &lt;code&gt;eachTime&lt;/code&gt; means that every time the signal triggers, so will the update; this is in contrast with the &lt;code&gt;once&lt;/code&gt; function, that makes the object listen only to the first signal trigger. This is  related to the &lt;code&gt;Persistence&lt;/code&gt; of a &lt;code&gt;Signal&lt;/code&gt; observation, that is, if the object should continue listen to a signal or not: &lt;code&gt;Persistence&lt;/code&gt; is a single &lt;code&gt;enum&lt;/code&gt; with two values, &lt;code&gt;Continue&lt;/code&gt; and &lt;code&gt;Stop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An important characteristic of the view controllers is the fact that the views are not yet initialized in the constructor, so we often need to memorize some data and use it in the &lt;code&gt;viewDidLoad&lt;/code&gt; method, that is called by the framework when all the views are loaded, and can consequently be manipulated; but we used a signal to express the update logic directly in the constructor, where the &lt;code&gt;ModelController&lt;/code&gt; is available: the line &lt;code&gt;viewReadyEmitter.signal.onReception § eachTime § feedbackModelController.notify&lt;/code&gt; means that when the &lt;code&gt;viewReadyEmitter&lt;/code&gt;, i.e., the emitter that will send a signal when the view is ready, is triggering, the model controller has to &lt;em&gt;notify&lt;/em&gt; its current value to all the observers; this way we don&amp;rsquo;t need to manually update the views in the &lt;code&gt;viewDidLoad&lt;/code&gt; method: everything is connected, and the signals will &lt;strong&gt;propagate&lt;/strong&gt; according to the declarative bindings.&lt;/p&gt;

&lt;h2 id=&#34;handling-page-creation-and-presentation&#34;&gt;Handling page creation and presentation&lt;/h2&gt;

&lt;p&gt;Transitioning between pages is one the key points in iOS programming: page presentation has to be &lt;strong&gt;predictable and smooth&lt;/strong&gt;, to avoid a confusing user experience. One of the main premises of the &lt;code&gt;UIViewController&lt;/code&gt; class was and still is the creation of a modular hierarchy of views, that&amp;rsquo;s independent from the way it&amp;rsquo;s presented to the user: that way we can easily reuse &lt;strong&gt;the same&lt;/strong&gt; view controller, for example, in full screen on the iPhone, or as a child view controller on a more complex hierarchy on iPad. The problem is that, if we write down the navigation and presentation logic &lt;em&gt;inside&lt;/em&gt; the view controller class, we are going to establish tight dependencies between the view controller and its presentation, thus going against the premise.&lt;/p&gt;

&lt;p&gt;A possible solution would be to use a &lt;code&gt;NavigationHandler&lt;/code&gt;, that will handle the transition between pages, along with the initial presentation during the application startup. The strategy here is to use a class that knows &lt;strong&gt;when and how&lt;/strong&gt; to present pages, oblivious of what pages actually do. For example, on receiving the appropriate signal from &lt;code&gt;MainPage&lt;/code&gt;, the &lt;code&gt;NavigationHandler&lt;/code&gt; will present the &lt;code&gt;SelectionPage&lt;/code&gt;. Where the &lt;code&gt;SelectionPage&lt;/code&gt; comes from? We should certainly avoid to burden the &lt;code&gt;NavigationHandler&lt;/code&gt; with pages&amp;rsquo; initialization responsibilities,  in fact we identified the class creation as a responsibility in itself. A frequent pattern used to handle the initialization of objects is the &lt;a href=&#34;http://www.oodesign.com/factory-pattern.html&#34;&gt;Factory Pattern&lt;/a&gt;: a &lt;code&gt;PageFactory&lt;/code&gt; will construct our pages with the options passed to the factory constructor. Thus, &lt;code&gt;NavigationHandler&lt;/code&gt; will ask the &lt;code&gt;PageFactory&lt;/code&gt; for pages, through the methods &lt;code&gt;makeMainPage&lt;/code&gt; and &lt;code&gt;makeSelectionPage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But we incur in a problem: &lt;code&gt;makeSelectionPage&lt;/code&gt; will just return a &lt;code&gt;SelectionPage&lt;/code&gt; object, but we don&amp;rsquo;t know if it&amp;rsquo;s &lt;em&gt;always&lt;/em&gt; the same instance, or a new instance each time. In fact, &lt;code&gt;PageFactory&lt;/code&gt; doesn&amp;rsquo;t &lt;em&gt;promise&lt;/em&gt; always the same page. This is important because the &lt;code&gt;NavigationHandler&lt;/code&gt; will only take care of page presentation, but the very same page instance has to be considered, for example, for collecting the feedback. A possible strategy would be to &lt;em&gt;cache&lt;/em&gt; the &lt;code&gt;SelectionPage&lt;/code&gt;, but one of the main points of functional programming is &lt;strong&gt;avoiding state&lt;/strong&gt;: we don&amp;rsquo;t want to burden ourselves with the responsibility of managing mutable state, which is one of the &lt;a href=&#34;http://shaffner.us/cs/papers/tarpit.pdf&#34;&gt;main causes of complexity&lt;/a&gt; in software development. Instead, we will once again leverage signals to handle the situation. &lt;code&gt;PageFactory&lt;/code&gt; exposes two signals that are triggered at page creation; &lt;code&gt;NavigationHandler&lt;/code&gt;  uses those signal to bind its actions to the initialized pages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;pageFactory.signalMakeMainPage
  .flatMap { $0.signalLeaveFeedback }
  .onReception § eachTime § inAnyCase § presentSelectionPage
  
pageFactory.signalMakeSelectionPage
  .flatMap { $0.signalSelection }
  .onReception § eachTime § inAnyCase § popTopPage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code just shown, the signals that are triggered when the pages are initialized are &lt;em&gt;flatMapped&lt;/em&gt; to the respective interaction signals, that is, the observed signal is a signal that will trigger when the second signal is triggered, but the &lt;em&gt;second&lt;/em&gt; signal will be available only when the &lt;em&gt;first&lt;/em&gt; signal is triggered: the &lt;code&gt;flatMap&lt;/code&gt; method will let us reference a signal that is not yet available. The &lt;code&gt;inAnyCase&lt;/code&gt; function is used because &lt;code&gt;NavigationHandler&lt;/code&gt; is not interested in the &lt;em&gt;content&lt;/em&gt; of the signals, but just the fact that they are triggered; the content is going to be handled by another class: &lt;code&gt;FeedbackCollector&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;composing-signals&#34;&gt;Composing signals&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FeedbackCollector&lt;/code&gt; has the responsibility of &lt;em&gt;collecting the whole feedback&lt;/em&gt;: this seems tricky, because the creation of a new feedback is not a synchronous procedure, and it&amp;rsquo;s the result of &lt;strong&gt;many different interactions&lt;/strong&gt; from the user in different contexts. As we saw, a signal is an abstraction over asynchronous programming: we declare the signal bindings for actions that will trigger at a certain point in time. Thanks to signals we can express the logic for collecting feedback in a single function call, executed during the app startup phase, even if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;at the app startup the pages are not yet initialized;&lt;/li&gt;
&lt;li&gt;to actually collect the feedback various interactions in multiple pages will be needed;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually these consideration would lead to &lt;strong&gt;stateful&lt;/strong&gt; computations, where state would be expressed in various points, and mutated. But the class &lt;code&gt;FeedbackCollector&lt;/code&gt; can generate a signal triggered each time a new feedback is collected with a single expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func collectFeedbackModelChange() -&amp;gt; Signal&amp;lt;FeedbackModelChange&amp;gt; {
  return pageFactory.signalMakeMainPage
    .flatMap { $0.signalPolarizedChanged }
    .map(FeedbackModel.transformWithPolarized)
    + pageFactory.signalMakeSelectionPage
      .flatMap { $0.signalSelection }
      .map(FeedbackModel.transformWithFeedback)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator will literally &lt;em&gt;add&lt;/em&gt; 2 signals together, producing a signal that is triggered each time either of the signals is triggered. The app uses the &lt;code&gt;Signal&amp;lt;FeedbackModelChange&amp;gt;&lt;/code&gt; produced by the &lt;code&gt;collectFeedbackModelChange()&lt;/code&gt; to update the model in the &lt;code&gt;ModelController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another example of asynchronous reaction to signals is shown in the &lt;code&gt;AppDelegate&lt;/code&gt;&amp;rsquo;s method &lt;code&gt;handleGoodFeedbacksWithAlert()&lt;/code&gt;; here&amp;rsquo;s the logic: if the user leaves a positive feedback, that is better than the previously left feedback, the app will show an alert, thanking the user. The entire logic for this is handled in the following expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;feedbackModelController.deltaSignal
  .filter { $0.feedback.rawValue &amp;lt; $1.feedback.rawValue}
  .filter { $1.feedback == .Good || $1.feedback == .ReallyGood }
  .onReception § eachTime § inAnyCase § showThankYouAlert
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ModelController&lt;/code&gt;&amp;rsquo;s &lt;code&gt;deltaSignal&lt;/code&gt; is triggered each time the model changes, and contains both the old and the new value: in the shown expression a signal is created by &lt;em&gt;filtering&lt;/em&gt; the &lt;code&gt;deltaSignal&lt;/code&gt;, because we need a signal that is triggered only when the new feedback is different from the previous and positive.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;A clean and decoupled architecture is hard to get right, and can be obtained in different ways. Using signals will help us achieve the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can work on &lt;strong&gt;a single piece at a time&lt;/strong&gt;, thinking about what &lt;em&gt;values&lt;/em&gt; are exchanged between classes, instead of interfaces and abstractions;&lt;/li&gt;
&lt;li&gt;we&amp;rsquo;ll be able to focus on what a view controller, or any class, really has to &lt;em&gt;produce&lt;/em&gt;, that is, what value is going to yield in the economy of the app;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Signals are not application-wide events: we don&amp;rsquo;t need a router or a dispatcher (like   &lt;code&gt;NSNotificationCenter&lt;/code&gt;) to properly handle them, because each object will declare its observation of specific signals. Also, because signals are easily transformed and composed, we can declaratively express our bindings without worrying about &lt;em&gt;when&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; things are going to happen, but just &lt;em&gt;what&lt;/em&gt; we need. Of course our architecture has to take into account the fact that getting a &lt;em&gt;precise sequence of events&lt;/em&gt; is basically impossible when working with signals: actually, &lt;em&gt;sequencing&lt;/em&gt; is not even considered in declarative programming, because, along with &lt;em&gt;state&lt;/em&gt;, is a great cause of complexity. In the end, a declarative architecture, like everything, has its tradeoffs, but I still think it&amp;rsquo;s worth trying.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GraphQL: an introduction</title>
      <link>http://engineering.facile.it/blog/eng/graphql-an-introduction/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://engineering.facile.it/blog/eng/graphql-an-introduction/</guid>
      <description>

&lt;h2 id=&#34;the-lesson-we-learned-with-rest&#34;&gt;The lesson we learned with REST&lt;/h2&gt;

&lt;p&gt;For many developers, nowadays, building an &lt;strong&gt;API&lt;/strong&gt; for their applications essentially means mapping the &lt;em&gt;resources&lt;/em&gt; of the domain to &lt;em&gt;URIs&lt;/em&gt;, with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34;&gt;REST&lt;/a&gt; principles in mind.
Usually creating a &lt;strong&gt;&lt;em&gt;RESTful&lt;/em&gt;&lt;/strong&gt; system is not difficult, and the simplicity of the idea makes the task easier.
Let&amp;rsquo;s see some of the consequences and benefits of choosing REST:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every HTTP verb has its own meaning, allowing the developer to understand immediately what kind of operation (typically among the CRUD ones) is going to be performed on the resource identified by the URI.&lt;/li&gt;
&lt;li&gt;Often the same URI can be used with multiple verbs to accomplish different tasks (e.g. &amp;ldquo;example.com/tag/123&amp;rdquo; refers to a particular tag that you can retrieve, update or delete).&lt;/li&gt;
&lt;li&gt;Controllers in many server-side frameworks can be created with a RESTful approach, each one of them representing one or more resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, unfortunately, it&amp;rsquo;s often easy to come across some problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complex URIs can be difficult to write or understand and sometimes they are subject to arbitrary interpretations.&lt;/li&gt;
&lt;li&gt;In order to filter collections you may need to use one or more ids embedded in the URL, but also &lt;em&gt;query parameters&lt;/em&gt;, e.g. when you want to sort the results of a GET by one particular field or retrieve resources by some field other than the id.&lt;/li&gt;
&lt;li&gt;There is no standard or easy way for the client to specify the list of fields that it needs, and the server will usually return all the data related to the requested resource.&lt;/li&gt;
&lt;li&gt;More importantly, there is no standard way for the client to decide which resources related to the one requested should be returned, resulting in a lot of noise in the response content (unless the server application offers multiple endpoints to access the same resource but with different subsets of data&amp;hellip; but this could lead to API design problems).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can&amp;rsquo;t really blame REST for these and other cons. Its power comes from simplicity and developers are thankful for this breath of fresh air. You have just one transport layer, i.e. HTTP, with its features and rules.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s see how we can take a step forward and add some salt to our APIs, to make them even more powerful and expressive.&lt;/p&gt;

&lt;h2 id=&#34;a-new-way-to-design-api-graphql&#34;&gt;A new way to design API: GraphQL&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt; maintains all the advantages of REST (relies on HTTP, very small overhead on requests, stateless and cacheable) and adds some very useful enhancements.
One of the main reasons why &lt;strong&gt;Facebook&lt;/strong&gt; created it back in 2012 was the need to find a way to access data on their server that allowed any type of client and device (especially mobile site and app) to decide exactly what fields they need, reducing the payload and then minimizing the traffic.&lt;/p&gt;

&lt;p&gt;Instead of explaining all the features, which can be read in the &lt;a href=&#34;http://graphql.org/docs/getting-started/&#34;&gt;official guide&lt;/a&gt;, in this post we&amp;rsquo;ll focus on what makes GraphQL interesting.
In the next section we&amp;rsquo;ll use types and queries presented in our example project, that you can clone from &lt;a href=&#34;https://github.com/poetcyborg/graphql-node-starter-kit&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;types-and-fields-driven-queries&#34;&gt;Types and fields driven queries&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Example #1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games {
        id
	    title
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previous snippet describes a query issued by the client when it just needs to retrieve &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;title&lt;/em&gt; of a &lt;strong&gt;&lt;em&gt;game&lt;/em&gt;&lt;/strong&gt;.
Since no argument has been passed to filter the data of the specified type (&lt;em&gt;game&lt;/em&gt;), all the games will be retrieved.
The output for this query is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;games&amp;quot;: [{
        &amp;quot;id&amp;quot;: 1,
        &amp;quot;title&amp;quot;: &amp;quot;Frogger&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 2,
        &amp;quot;title&amp;quot;: &amp;quot;Galaxian&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 3,
        &amp;quot;title&amp;quot;: &amp;quot;Tiger Road&amp;quot;
      }, {
        &amp;quot;id&amp;quot;: 4,
        &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With REST, the same task could be accomplished with the following url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game?fields=id,title
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unless the server applications is taking care of field filtering based on query params, all the information about every game will be returned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games(id:2) {
        id
        title
        year
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example #3&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
	games(title:&amp;quot;Frogger&amp;quot;) {
		id
        title
        year
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples #2 and #3 show a way to filter games by their &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;title&lt;/em&gt; respectively.
As you can see, the id has no semantic meaning like in REST, so you can describe the filter criterion in the same manner (&lt;em&gt;fieldname: &amp;ldquo;value&amp;rdquo;&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The REST equivalent (selected fields are omitted) for Example #2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game/2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and #3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /game?title=Frogger
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;relations-between-entities-graph-representation&#34;&gt;Relations between entities: graph representation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Example #4&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    games(id:2) {
        title
        developer {
            name
            nation
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;types&lt;/strong&gt; called &lt;em&gt;Game&lt;/em&gt; and &lt;em&gt;Company&lt;/em&gt; are related to each other; in our example, for the sake of simplicity, a game can only have one company as developer and one as publisher, while any company can have multiple developed or published games.
In Example #4, you can notice the complex field &lt;em&gt;developer&lt;/em&gt;; we want to know the name and the nation of the company that developed the game with id = 2.&lt;/p&gt;

&lt;p&gt;The same two types can be reused to express the opposite of the relation described in the previous example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #5:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    companies(name:&amp;quot;Game Freak&amp;quot;) {
        name
        gamesAsDeveloper {
            title
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see briefly how you can describe these relations in the &lt;strong&gt;Javascript&lt;/strong&gt; implementation.&lt;/p&gt;

&lt;p&gt;In the &amp;lsquo;&lt;em&gt;Game&lt;/em&gt;&amp;rsquo; type definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;developer: {
	type: Company,
    description: &#39;The developer of the game&#39;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in the &amp;lsquo;&lt;em&gt;Company&lt;/em&gt;&amp;rsquo; type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gamesAsDeveloper: {
    type: new GraphQLList(Game),
    description: &#39;The games created as a developer&#39;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The field &lt;em&gt;developer&lt;/em&gt; is defined as type &lt;em&gt;Company&lt;/em&gt;, while the field &lt;em&gt;gamesAsDeveloper&lt;/em&gt; is a list of &lt;em&gt;Game&lt;/em&gt;.
Please refer to the &lt;a href=&#34;https://github.com/poetcyborg/graphql-node-starter-kit&#34;&gt;demo project&lt;/a&gt; for the full implementation of this example.&lt;/p&gt;

&lt;h3 id=&#34;minimizing-the-number-of-requests-to-the-server&#34;&gt;Minimizing the number of requests to the server&lt;/h3&gt;

&lt;p&gt;This time we need the list of the &lt;em&gt;Japanese companies&lt;/em&gt; and some information about the games they worked on, but only for the &lt;em&gt;NES&lt;/em&gt; (Nintendo Entertainment System) platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #6:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    companies(nation:&amp;quot;Japan&amp;quot;) {
	    name
        gamesAsDeveloper(platform:&amp;quot;NES&amp;quot;) {
		    title
	        year
        }
        gamesAsPublisher(platform:&amp;quot;NES&amp;quot;) {
            title
            year
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This query&amp;rsquo;s output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;companies&amp;quot;: [{
        &amp;quot;name&amp;quot;: &amp;quot;Konami&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Namco&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [],
        &amp;quot;gamesAsPublisher&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1989&amp;quot;
          }]
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Game Freak&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Mendel Palace&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1989&amp;quot;
          }],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }, {
        &amp;quot;name&amp;quot;: &amp;quot;Capcom&amp;quot;,
        &amp;quot;gamesAsDeveloper&amp;quot;: [{
            &amp;quot;title&amp;quot;: &amp;quot;Tiger Road&amp;quot;,
            &amp;quot;year&amp;quot;: &amp;quot;1987&amp;quot;
          }],
        &amp;quot;gamesAsPublisher&amp;quot;: []
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the REST world, the same response could be obtained in several ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by sending a request to an endpoint that was built exactly for the purpose of filtering companies and games by some fields, e.g.:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;GET /companyWithGames?companyNation=Japan&amp;amp;gamePlatform=NES&amp;amp;fields=...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;by sending several requests to more generic endpoints, e.g.:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;GET /company?nation=Japan&amp;amp;fields=...
GET /game?developerName=[developer 1 name]&amp;amp;gamePlatform=NES&amp;amp;fields=...
GET /game?developerName=[developer 2 name]&amp;amp;gamePlatform=NES&amp;amp;fields=...
GET ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a couple of notable things here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the expressivity of the query language becomes more evident when things start becoming more interesting; filtering subsets of data feels natural and easy as you can just specify the criteria for the filters directly on the subtree root (companies -&amp;gt; nation, gamesAsDeveloper -&amp;gt; platform, gamesAsPublisher -&amp;gt; platform);&lt;/li&gt;
&lt;li&gt;on server side, the developer can write the code to retrieve the data for every subset of data independently, considering that, when a request is sent, every subtree receives the data returned by the upper levels (in this case, filtering &lt;em&gt;games&lt;/em&gt; with the given &lt;em&gt;platform&lt;/em&gt; is performed only on companies with the selected &lt;em&gt;nation&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;api-documentation&#34;&gt;API Documentation&lt;/h3&gt;

&lt;p&gt;When you design a REST WebService, for every endpoint you&amp;rsquo;re mostly going to take care of its URI and the structure of the request and the response body.
Unfortunately, there is no standard way to document this information and make it available to the client developers.&lt;/p&gt;

&lt;p&gt;With GraphQL, using &lt;strong&gt;&lt;em&gt;introspection&lt;/em&gt;&lt;/strong&gt; you can ask the server information about the available types and their fields.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #7&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    __schema {
        types {
            kind
            name
            description
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A query with the query root &lt;strong&gt;&lt;em&gt;__schema&lt;/em&gt;&lt;/strong&gt; returns the list of types with their descriptions and fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;__schema&amp;quot;: {
      &amp;quot;types&amp;quot;: [
		...
        {
          &amp;quot;kind&amp;quot;: &amp;quot;OBJECT&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;Company&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;A company object&amp;quot;,
          &amp;quot;fields&amp;quot;: [...]
        }, {
          &amp;quot;kind&amp;quot;: &amp;quot;OBJECT&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;Game&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;A game object&amp;quot;
          &amp;quot;fields&amp;quot;: [...]
        },
        ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to get the information about the types is using the query root &lt;strong&gt;&lt;em&gt;__type&lt;/em&gt;&lt;/strong&gt;, passing a specific type name:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #8&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
    __type(name:&amp;quot;Game&amp;quot;) {
        fields {
            name
            description
            type {
                name
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;data&amp;quot;: {
        &amp;quot;__type&amp;quot;: {
            &amp;quot;fields&amp;quot;: [{
                &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;The id of a game&amp;quot;,
                &amp;quot;type&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;Int&amp;quot;
                }
            }, {
	            &amp;quot;name&amp;quot;: &amp;quot;title&amp;quot;,
                &amp;quot;description&amp;quot;: &amp;quot;The title of a game&amp;quot;,
                &amp;quot;type&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;String&amp;quot;
                }
            },
            ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mutations&#34;&gt;Mutations&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve already talked about queries, but a few words need to be spent about the other important operation that you can perform on a GraphQL server: &lt;strong&gt;mutations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example #9&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mutation {
	updateGameRating(id:2, rating:7) {
		id
		title
		rating
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax is no different from the previous ones, except for the &lt;strong&gt;&lt;em&gt;mutation&lt;/em&gt;&lt;/strong&gt; root.
It is the equivalent of a POST or a PATCH in REST, and lets us change the value of some fields in a resource.
In this example we are assigning a value (7) to the &lt;em&gt;rating&lt;/em&gt; field of the &lt;em&gt;Game&lt;/em&gt; types; this mutation could be defined in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	name: &#39;UpdateGameRating&#39;,
	type: Game,
	args: {
	    rating: { type: new GraphQLNonNull(GraphQLInt) },
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the specified type for the mutation is &lt;em&gt;Game&lt;/em&gt;; this means not only that the update should be performed on games, but also that the &lt;em&gt;Game&lt;/em&gt; field included in the request (id, title and rating) should be returned, just like a normal query.&lt;/p&gt;

&lt;h2 id=&#34;implementations&#34;&gt;Implementations&lt;/h2&gt;

&lt;p&gt;In the present article we sometimes referred to the official &lt;strong&gt;Javascript&lt;/strong&gt; library for GraphQL, but as you can see in &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql&#34;&gt;this project&lt;/a&gt; there are many different implementations for the most popular languages.&lt;/p&gt;

&lt;h2 id=&#34;the-future-of-graphql&#34;&gt;The future of GraphQL&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s difficult to say what will become of GraphQL in the next year.
Sure there&amp;rsquo;s a lot of hype around it, and for some very solid reasons.
It&amp;rsquo;s not going to replace REST in developers&amp;rsquo; hearts anytime soon, but if they&amp;rsquo;re brave enough, they can add a &lt;strong&gt;GraphQL layer&lt;/strong&gt; over an existing REST API in their application.
In fact, in my opinion, another good point of interest regarding GraphQL is the ability to aggregate multiple endpoints that reference various resources. Its nature is very domain-centric and it&amp;rsquo;s more  focused on &lt;strong&gt;&lt;em&gt;what&lt;/em&gt;&lt;/strong&gt; data needs to be precisely retrieved, rather than on &lt;strong&gt;&lt;em&gt;how to&lt;/em&gt;&lt;/strong&gt; get it.&lt;/p&gt;

&lt;p&gt;Some questions arise when you think about GraphQL in a more vast spectrum:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to &lt;strong&gt;cache&lt;/strong&gt; resources on server-side, even if they were originally fetched using different queries? (Facebook is trying to give some answers with &lt;a href=&#34;https://facebook.github.io/relay/docs/thinking-in-relay.html&#34;&gt;Relay&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;how to &lt;strong&gt;limit the access&lt;/strong&gt; to the resources (or the introspection on them) only to some users? GraphQL is authorization-agnostic, but as you can read in &lt;a href=&#34;https://github.com/graphql/graphql-js/issues/113&#34;&gt;this Github issue&lt;/a&gt; its a common problem that needs to be at least faced.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The entire Facebook ecosystem of open source projects is worth of attention (don&amp;rsquo;t forget about React, Flux and the other Flux-like architectures) and, even if it&amp;rsquo;s very young, it has become very popular and used by many little and big companies around the world.&lt;/p&gt;

&lt;p&gt;My personal hope is that every lesson that can be learned while working with these projects, especially GraphQL, might lead to a better World Wide Web and a better developing experience, maybe with more standard and free implementations than the Facebook (or Google, or Microsoft, or Apple) ones.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>